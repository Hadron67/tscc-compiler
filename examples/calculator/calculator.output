state 0(start)
    [\x9,\xa],\xd,' ' -> state 1
    '(' -> state 2
    ')' -> state 3
    '*' -> state 4
    '+' -> state 5
    '-' -> state 6
    '.' -> state 7
    '/' -> state 8
    ['0','9'] -> state 9
    's' -> state 10

state 1(end 0)
    [\x9,\xa],\xd,' ' -> state 1

state 2(end 6)

state 3(end 7)

state 4(end 4)

state 5(end 2)

state 6(end 3)

state 7
    ['0','9'] -> state 11

state 8(end 5)

state 9(end 1)
    '.' -> state 12
    ['0','9'] -> state 9
    'E','e' -> state 13

state 10
    'i' -> state 14

state 11(end 1)
    ['0','9'] -> state 11
    'E','e' -> state 13

state 12(end 1)
    ['0','9'] -> state 15
    'E','e' -> state 13

state 13
    ['0','9'] -> state 16

state 14
    'n' -> state 17

state 15(end 1)
    ['0','9'] -> state 15
    'E','e' -> state 13

state 16(end 1)
    ['0','9'] -> state 16

state 17(end 8)



state 0
    [ 0: (accept) => . start <EOF> ]*
    [ 1: start => . expr ]
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    start : go to state 1
    expr : go to state 2
    funcs : go to state 4


state 1
    [ 0: (accept) => start . <EOF> ]*
    no default action
    <EOF> : shift, and go to state 6


state 2
    [ 1: start => expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 1
    "+" : shift, and go to state 11
    "-" : shift, and go to state 12
    "*" : shift, and go to state 13
    "/" : shift, and go to state 14


state 3
    [ 9: expr => <NUM> . ]*
    default action: reduce with rule 9


state 4
    [ 10: expr => funcs . ]*
    default action: reduce with rule 10


state 5
    [ 11: funcs => "sin" . "(" expr ")" ]*
    no default action
    "(" : shift, and go to state 10


state 6
    [ 0: (accept) => start <EOF> . ]*
    default action: reduce with rule 0


state 7
    [ 6: expr => "+" . expr ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 15
    funcs : go to state 4


state 8
    [ 7: expr => "-" . expr ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 16
    funcs : go to state 4


state 9
    [ 8: expr => "(" . expr ")" ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 17
    funcs : go to state 4


state 10
    [ 11: funcs => "sin" "(" . expr ")" ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 18
    funcs : go to state 4


state 11
    [ 2: expr => expr "+" . expr ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 19
    funcs : go to state 4


state 12
    [ 3: expr => expr "-" . expr ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 20
    funcs : go to state 4


state 13
    [ 4: expr => expr "*" . expr ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 21
    funcs : go to state 4


state 14
    [ 5: expr => expr "/" . expr ]*
    [ 2: expr => . expr "+" expr ]
    [ 3: expr => . expr "-" expr ]
    [ 4: expr => . expr "*" expr ]
    [ 5: expr => . expr "/" expr ]
    [ 6: expr => . "+" expr ]
    [ 7: expr => . "-" expr ]
    [ 8: expr => . "(" expr ")" ]
    [ 9: expr => . <NUM> ]
    [ 10: expr => . funcs ]
    [ 11: funcs => . "sin" "(" expr ")" ]
    no default action
    <NUM> : shift, and go to state 3
    "+" : shift, and go to state 7
    "-" : shift, and go to state 8
    "(" : shift, and go to state 9
    "sin" : shift, and go to state 5
    expr : go to state 22
    funcs : go to state 4


state 15
    [ 6: expr => "+" expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 6


state 16
    [ 7: expr => "-" expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 7


state 17
    [ 8: expr => "(" expr . ")" ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    no default action
    "+" : shift, and go to state 11
    "-" : shift, and go to state 12
    "*" : shift, and go to state 13
    "/" : shift, and go to state 14
    ")" : shift, and go to state 23


state 18
    [ 11: funcs => "sin" "(" expr . ")" ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    no default action
    "+" : shift, and go to state 11
    "-" : shift, and go to state 12
    "*" : shift, and go to state 13
    "/" : shift, and go to state 14
    ")" : shift, and go to state 24


state 19
    [ 2: expr => expr "+" expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 2


state 20
    [ 3: expr => expr "-" expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 3


state 21
    [ 4: expr => expr "*" expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 4


state 22
    [ 5: expr => expr "/" expr . ]*
    [ 2: expr => expr . "+" expr ]*
    [ 3: expr => expr . "-" expr ]*
    [ 4: expr => expr . "*" expr ]*
    [ 5: expr => expr . "/" expr ]*
    default action: reduce with rule 5


state 23
    [ 8: expr => "(" expr ")" . ]*
    default action: reduce with rule 8


state 24
    [ 11: funcs => "sin" "(" expr ")" . ]*
    default action: reduce with rule 11


