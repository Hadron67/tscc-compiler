/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

// universal module defination
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.zend = {})));
}(this, (function (exports) { 'use strict';
var toString = {}.toString;
function isArray(a){
    return toString.call(a) === '[object Array]';
}
function ZNode(type, child, val, pos){
    this.parent = null;
    this.type = type;
    this.val = val || null;
    this.child = isArray(child) ? child : child === null || typeof child === 'undefined' ? [] : [child];
    this.pos = pos || null;
    for(var i = 0, _a = this.child; i < _a.length; i++){
        _a[i] !== ZNode.NONE && (_a[i].parent = this);
    }
}
ZNode.NONE = new ZNode(AST_NONE);
ZNode.prototype.add = function(c){
    this.child.push(c);
    c.parent = this;
}
ZNode.prototype.toString = function(){

}
ZNode.prototype.getPos = function(){
    var start = this;
    var end = this;
    while(start.child.length > 0){
        start = start.child[0];
    }
    while(end.child.length > 0){
        end = end.child[end.child.length - 1];
    }
    return {
        startLine: start.pos.startLine,
        startColumn: start.pos.startColumn,
        endLine: end.pos.endLine,
        endColumn: end.pos.endColumn
    };
}

function nodeFromToken(t){
    return new ZNode(AST_NONE, null, t.val, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeFromTrivalToken(t){
    return new ZNode(AST_NONE, null, null, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeBetween(from, to, val){
    return new ZNode(AST_NONE, null, val, {
        startLine: from.pos.startLine,
        startColumn: from.pos.startColumn,
        endLine: to.pos.endLine,
        endColumn: to.pos.endColumn
    });
}
var escapes = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'",
    '`': '`'
};
function unescape(s){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}
function extractHeredocStart(s){
    s = s.substr(3, s.length - 4).trim();
    if(s.charAt(0) === '"' || s.charAt(0) === "'"){
        s = s.substr(1, s.length - 2);
    }
    return s;
}


var cc = 0;
function defineOpcode(name, handler){
    return {
        code: cc++,
        name: name,
        handler: handler || null
    };
}
var OP_NOP = defineOpcode('nop');
var OP_PUSH = defineOpcode('push');
var OP_POP = defineOpcode('pop');
var OP_DUP = defineOpcode('dup');
var OP_GETVAR = defineOpcode('getVar');
var OP_SETVAR = defineOpcode('setVar');
var OP_SETPROP = defineOpcode('setProp');
var OP_GETPROP = defineOpcode('getProp');
var OP_GETOFFSET = defineOpcode('getOffset');
var OP_SETOFFSET = defineOpcode('setOffset');
var OP_GETMAXOFFSET = defineOpcode('getMaxOffset');
var OP_SETMAXOFFSET = defineOpcode('setMaxOffset');
var OP_GETCONST = defineOpcode('getConst');
var OP_DEFCONST = defineOpcode('defConst');
var OP_SETLOCAL = defineOpcode('setLocal');
var OP_GETLOCAL = defineOpcode('getLocal');

var OP_PLUS = defineOpcode('plus');
var OP_MINUS = defineOpcode('minus');
var OP_TIMES = defineOpcode('times');
var OP_DIVIDE = defineOpcode('divide');
var OP_POW = defineOpcode('pow');
var OP_CONCAT = defineOpcode('concat');
var OP_MOD = defineOpcode('mod');
var OP_BITAND = defineOpcode('bitAnd');
var OP_BITOR = defineOpcode('bitOr');
var OP_BITXOR = defineOpcode('bitXor');
var OP_BITNOT = defineOpcode('bitNot');
var OP_AND = defineOpcode('and');
var OP_OR = defineOpcode('or');
var OP_NOT = defineOpcode('not');
var OP_XOR = defineOpcode('xor');
var OP_LEFTSHIFT = defineOpcode('leftShift');
var OP_RIGHTSHIFT = defineOpcode('rightShift');
var OP_POSITIVE = defineOpcode('positive');
var OP_NEGATIVE = defineOpcode('negative');
var OP_INC = defineOpcode('inc');
var OP_DEC = defineOpcode('dec');
var OP_GREATERTHAN = defineOpcode('greaterThan');
var OP_LESSTHAN = defineOpcode('lessThan');
var OP_EQUAL = defineOpcode('equal');
var OP_IDENTICAL = defineOpcode('identical');
var OP_GREATERTHANOREQUAL = defineOpcode('greaterThanOrEqual');
var OP_LESSTHANOREQUAL = defineOpcode('lessThanOrEqual');
var OP_NOTEQUAL = defineOpcode('notEqual');
var OP_NOTIDENTICAL = defineOpcode('notIdentical');
var OP_ECHO = defineOpcode('echo');
var OP_PRINT = defineOpcode('print');

var OP_ARRAY = defineOpcode('array');
var OP_ADDARRAYITEM = defineOpcode('addArrayItem');
var OP_ADDARRAYPAIR = defineOpcode('addArrayPair');

var OP_BOOLCAST = defineOpcode('boolCast');

var OP_INVOKE = defineOpcode('invoke');
var OP_INVOKENAME = defineOpcode('invokeName');
var OP_INVOKEMETHOD = defineOpcode('invokeMethod');
var OP_INVOKEMETHODNAME = defineOpcode('invokeMethodName');
var OP_NEW = defineOpcode('new');
var OP_CREATEFUNCTION = defineOpcode('createFunction');

var OP_CREATEITERATOR = defineOpcode('createIterator');
var OP_ITERATORISEND = defineOpcode('iteratorIsEnd');
var OP_ITERATORNEXT = defineOpcode('iteratorNext');
var OP_GETITERATORKEY = defineOpcode('getIteratorKey');
var OP_GETITERATORVALUE = defineOpcode('getIteratorValue');

var OP_JMP = defineOpcode('jmp');
var OP_JZ = defineOpcode('jz');
var OP_JNZ = defineOpcode('jnz');
var OP_RETURN = defineOpcode('return');
var OP_RETURNNULL = defineOpcode('returnNull');

cc = 0;
var AST_NONE = cc++;
var AST_TOPLIST = cc++;
var AST_STATEMENTLIST = cc++;
var AST_CONST_LIST = cc++;
var AST_ECHO = cc++;
var AST_ECHO_EXPR = cc++;
var AST_PRINT = cc++;
var AST_IF = cc++;
var AST_WHILE = cc++;
var AST_DO_WHILE = cc++;
var AST_FOR = cc++;
var AST_EXPR_LIST = cc++;
var AST_CONDITIONALEXPR = cc++;
var AST_ARGLIST = cc++;
var AST_PARAMLIST = cc++;
var AST_LEXICALVARLIST = cc++;
var AST_FUNCTIONCALL = cc++;
var AST_METHODCALL = cc++;
var AST_FUNCTION = cc++;
var AST_ANONYFUNCTION = cc++;
var AST_BREAK = cc++;
var AST_CONTINUE = cc++;
var AST_RETURN = cc++;
var AST_FOREACH = cc++;
var AST_DOUBLE_ARROW = cc++;

var AST_VARIABLE = cc++;
var AST_PROPERTY = cc++;
var AST_OFFSET = cc++;
var AST_ASSIGN = cc++;
var AST_BINARYOP = cc++;
var AST_UNARYOP = cc++;
var AST_LOGICALOR = cc++;
var AST_LOGICALAND = cc++;
var AST_POSTINC = cc++;
var AST_SUFFIXINC = cc++;
var AST_POSTDEC = cc++;
var AST_SUFFIXDEC = cc++;

var AST_CONST = cc++;
var AST_INTEGER = cc++;
var AST_FLOAT = cc++;
var AST_STRING = cc++;
var AST_STRING_LIST = cc++;
var AST_NONE_END_LABEL = cc++;
var AST_ARRAY = cc++;
var AST_ARRAYPAIR = cc++;
var AST_LOCAL = cc++;


/*
    constants
*/
var jjlf = '\n'.charCodeAt(0);
var jjcr = '\r'.charCodeAt(0);
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     1,     1,     1,     2,     1,     1,     1,     1,     3,
         9,    10,    11,    -1,     3,     3,     3,     3,     3,     3,
         3,     3,    -1,     3,     3,     3,     8,     3,     3,     3,
         3,    -1,     3,     3,     7,     3,     3,     3,     3,     3,
        -1,     5,     3,     3,     6,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     3,     3,     3,     3,    -1,     3,
         4,     3,     3,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexdisnext0 = [ 
         0,    63,    54,    45,    36,    -9,    27,    18,     9,    -9,
        -9,    -9,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
         8,     8,     8,    -1,     8,     8,     8,     8,     7,     7,
         7,     7,    -1,     7,     7,     7,     7,     6,     6,     6,
         6,    -1,     6,     6,     6,     6,     4,     4,     4,     4,
        -1,     4,     4,     4,     4,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     2,     2,     2,     2,    -1,     2,
         2,     2,     2,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexclassTable0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         4,     5,     0,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
         0,     0,     8,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable0 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd0 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,1,0,1,1,1,0,0,0,
]; 
var jjlextable0 = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1 = [ 
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        59,    58,    58,    58,    58,    58,    58,    58,    58,   153,
        58,    58,    58,    58,    58,    58,   153,   153,   153,   153,
        58,    58,    58,    58,    58,    58,    60,    58,    58,    58,
        58,   153,   153,   153,   153,   153,   153,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   110,
       109,   109,   109,   109,   111,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   110,   109,   109,   109,   109,
       111,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   110,   109,   109,   109,   109,   135,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    59,    58,    58,    58,    58,    58,
        58,    58,    58,   153,    58,    58,    58,    58,    58,    58,
       153,   153,   153,   153,    58,    58,    58,    58,    58,    58,
        60,    58,    58,    58,    58,   153,   153,   153,   153,   153,
       153,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   137,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   110,
       109,   109,   109,   109,   135,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    59,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    60,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   110,   109,   109,   109,   109,   111,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    59,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        60,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        59,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    60,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    53,    53,   191,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,   181,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
       139,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,     1,     2,     3,     4,     5,     6,
         7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
        17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
        27,    27,    27,    27,    27,    28,    27,    29,    30,   114,
        31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
        27,    41,    27,    42,    27,    27,    27,    43,    44,    27,
        27,    45,    46,    27,    27,    47,    48,    49,    50,   169,
       170,   113,   114,   113,   138,    72,   114,    19,   112,   112,
        69,    68,     1,     2,     3,    70,   171,    73,    73,    73,
        71,    73,    61,   171,   171,   171,   171,   171,   171,   171,
       171,   171,    62,    73,    73,    73,   171,    73,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   169,
       170,    65,     1,    51,     3,     1,     2,     3,    66,    67,
         1,     2,     3,   186,   187,   118,   171,   169,   170,   115,
       116,   102,   117,   171,   171,   171,   171,   171,   171,   171,
       171,   171,    78,    79,    76,    77,   171,   108,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   139,
        63,   103,    56,   154,    74,    75,   104,    85,   155,    64,
        80,    68,    55,    52,    -1,    -1,    57,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,   156,   156,   156,   156,   156,   156,
       156,   156,   156,    -1,    -1,    -1,    -1,   156,    -1,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,
        -1,    -1,    -1,    -1,    -1,    -1,   180,   180,   180,   180,
       180,   180,   180,   180,   180,    -1,    -1,    -1,    -1,   180,
        -1,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   180,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,
        -1,    -1,    -1,   178,   178,   178,   178,   178,   178,   178,
       178,   178,    -1,    -1,    -1,    -1,   178,    -1,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,   178,   179,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,
        -1,    -1,    -1,    -1,    -1,   180,   180,   180,   180,   180,
       180,   180,   180,   180,    -1,    -1,    -1,    -1,   180,    -1,
       180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,
        -1,    -1,   178,   178,   178,   178,   178,   178,   178,   178,
       178,    -1,    -1,    -1,    -1,   178,    -1,   178,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,   198,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
       197,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,   196,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,   195,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,   194,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,   193,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,   192,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,   190,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
       189,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,   188,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,   185,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,   184,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,   183,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,   182,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,   176,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,   175,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,   174,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,   173,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
       172,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,   166,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,   165,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,   164,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,   163,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,   162,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,   161,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
       160,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,   159,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
       158,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,   157,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,   152,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,   151,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,   150,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,   149,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,   148,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,   147,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,   146,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,   145,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,   143,   144,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,   142,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,   141,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,   140,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,   105,
        -1,    -1,    -1,    -1,    -1,    -1,   105,   105,   105,   105,
       105,   105,   105,   105,   105,    -1,    -1,    -1,    -1,   105,
        -1,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,    81,    81,
        81,   133,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,   132,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,   131,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
       130,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,   129,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,   128,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,   127,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,   126,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,   125,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,   124,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,   123,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
       122,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,   121,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,   120,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,   119,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,   105,    -1,    -1,    -1,    -1,    -1,    -1,   105,
       105,   105,   105,   105,   105,   105,   105,   105,    -1,    -1,
        -1,    -1,   105,    -1,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,    81,    81,   101,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,   100,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    81,    -1,    81,    81,    81,    81,    99,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        98,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,    81,    97,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    96,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    94,    81,    81,
        81,    81,    95,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,
        92,    81,    81,    81,    81,    81,    81,    93,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    91,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    81,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    90,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        -1,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    89,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    87,    88,    81,    81,    81,    81,
        81,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    86,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,
        -1,    81,    81,    81,    81,    81,    81,    84,    81,    81,
        -1,    -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    83,    81,    -1,    -1,    -1,    -1,    81,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,
        81,    -1,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    82,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,   168,   168,   168,   168,
       168,   168,   168,   168,   168,    -1,    -1,    -1,    -1,   168,
        -1,   168,   168,   168,   168,   168,   168,   168,   168,   168,
       168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
       168,   168,   167,   167,   167,   167,   167,   167,   167,   167,
       167,    -1,    -1,    -1,    -1,   167,    -1,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    -1,    -1,    -1,
        -1,    54,    -1,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,   134,   106,    -1,    -1,    -1,    -1,
       106,   134,   134,   134,   134,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   134,   134,   134,   134,
       134,   134,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,
        -1,    -1,   106,    -1,    -1,    -1,   106,    -1,    -1,    -1,
        -1,    -1,   106,    -1,    -1,   106,    -1,   106,   107,    -1,
       107,
]; 
var jjlexdisnext1 = [ 
       923,  1059,  1054,  1051,  1100,   -66,   858,  5562,  1099,  1103,
       660,   -66,   -66,   999,  1096,   -66,  1035,  1102,   987,   978,
       -66,   -66,  1092,  1061,  1059,  1096,  5454,  5411,  5368,  5325,
       -66,   -66,  1094,  5282,   -66,  5239,  5196,  5153,  5110,  5067,
      5024,  4981,  4938,  4895,  4852,  4809,  4766,   -66,  1048,   -66,
       -66,  1001,  1093,   792,  4723,   -66,   -66,   -66,   594,   -66,
      5620,  1064,   -66,   -66,   -66,   -66,   -66,   -66,   982,   528,
       726,   -66,   980,   977,  1047,   -66,  1049,   -66,   -66,  1042,
       -66,  4680,  4637,  4594,  4551,   -66,  4508,  4465,  4422,  4379,
      4336,  4293,  4250,  4207,  4164,  4121,  4078,  4035,  3992,  3949,
      3906,  3863,   -66,   -66,   -66,  3820,   462,  5605,   -66,   396,
       330,   976,   979,   973,   940,   859,   -66,   -66,   -66,  3777,
      3734,  3691,  3648,  3605,  3562,  3519,  3476,  3433,  3390,  3347,
      3304,  3261,  3218,  3175,   264,   198,   132,   -66,    66,  1108,
      3132,  3089,  3046,  3003,  2960,  2917,  2874,  2831,  2788,  2745,
      2702,  2659,  2616,     0,  5526,  5490,  1047,  2573,  2530,  2487,
      2444,  2401,  2358,  2315,  2272,  2229,  2186,  1326,  1269,   -66,
       792,   987,  2143,  2100,  2057,  2014,  1971,  1065,  1217,  1061,
      1160,   -66,  1928,  1885,  1842,  1799,   -66,   726,  1756,  1713,
      1670,   -66,  1627,  1584,  1541,  1498,  1455,  1412,  1369,
]; 
var jjlexchecknext1 = [ 
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    70,    70,   187,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    53,    53,   170,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,     6,     6,
       115,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   171,
       171,    73,   113,    73,   111,    19,    73,    19,   112,    72,
        18,    68,    51,    51,    51,    18,   171,    19,   112,    72,
        18,    68,    13,   171,   171,   171,   171,   171,   171,   171,
       171,   171,    13,    19,   112,    72,   171,    68,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   156,
       156,    16,     3,     3,     3,     2,     2,     2,    16,    16,
         1,     1,     1,   179,   179,    79,   156,   177,   177,    74,
        74,    48,    76,   156,   156,   156,   156,   156,   156,   156,
       156,   156,    24,    24,    23,    23,   156,    61,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   139,
        14,    48,     9,   139,    22,    22,    52,    32,   139,    14,
        25,    17,     8,     4,    -1,    -1,     9,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,   139,   139,   139,   139,   139,   139,
       139,   139,   139,    -1,    -1,    -1,    -1,   139,    -1,   139,
       139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
       139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
       180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,
        -1,    -1,    -1,    -1,    -1,    -1,   180,   180,   180,   180,
       180,   180,   180,   180,   180,    -1,    -1,    -1,    -1,   180,
        -1,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   180,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,
        -1,    -1,    -1,   178,   178,   178,   178,   178,   178,   178,
       178,   178,    -1,    -1,    -1,    -1,   178,    -1,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,   178,   168,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,
        -1,    -1,    -1,    -1,    -1,   168,   168,   168,   168,   168,
       168,   168,   168,   168,    -1,    -1,    -1,    -1,   168,    -1,
       168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
       168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
       168,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
        -1,    -1,   167,   167,   167,   167,   167,   167,   167,   167,
       167,    -1,    -1,    -1,    -1,   167,    -1,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   198,    -1,
        -1,    -1,    -1,    -1,    -1,   198,   198,   198,   198,   198,
       198,   198,   198,   198,    -1,    -1,    -1,    -1,   198,    -1,
       198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
       198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
       198,   197,    -1,    -1,    -1,    -1,    -1,    -1,   197,   197,
       197,   197,   197,   197,   197,   197,   197,    -1,    -1,    -1,
        -1,   197,    -1,   197,   197,   197,   197,   197,   197,   197,
       197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
       197,   197,   197,   197,   196,    -1,    -1,    -1,    -1,    -1,
        -1,   196,   196,   196,   196,   196,   196,   196,   196,   196,
        -1,    -1,    -1,    -1,   196,    -1,   196,   196,   196,   196,
       196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
       196,   196,   196,   196,   196,   196,   196,   195,    -1,    -1,
        -1,    -1,    -1,    -1,   195,   195,   195,   195,   195,   195,
       195,   195,   195,    -1,    -1,    -1,    -1,   195,    -1,   195,
       195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
       195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
       194,    -1,    -1,    -1,    -1,    -1,    -1,   194,   194,   194,
       194,   194,   194,   194,   194,   194,    -1,    -1,    -1,    -1,
       194,    -1,   194,   194,   194,   194,   194,   194,   194,   194,
       194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
       194,   194,   194,   193,    -1,    -1,    -1,    -1,    -1,    -1,
       193,   193,   193,   193,   193,   193,   193,   193,   193,    -1,
        -1,    -1,    -1,   193,    -1,   193,   193,   193,   193,   193,
       193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
       193,   193,   193,   193,   193,   193,   192,    -1,    -1,    -1,
        -1,    -1,    -1,   192,   192,   192,   192,   192,   192,   192,
       192,   192,    -1,    -1,    -1,    -1,   192,    -1,   192,   192,
       192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
       192,   192,   192,   192,   192,   192,   192,   192,   192,   190,
        -1,    -1,    -1,    -1,    -1,    -1,   190,   190,   190,   190,
       190,   190,   190,   190,   190,    -1,    -1,    -1,    -1,   190,
        -1,   190,   190,   190,   190,   190,   190,   190,   190,   190,
       190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
       190,   190,   189,    -1,    -1,    -1,    -1,    -1,    -1,   189,
       189,   189,   189,   189,   189,   189,   189,   189,    -1,    -1,
        -1,    -1,   189,    -1,   189,   189,   189,   189,   189,   189,
       189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
       189,   189,   189,   189,   189,   188,    -1,    -1,    -1,    -1,
        -1,    -1,   188,   188,   188,   188,   188,   188,   188,   188,
       188,    -1,    -1,    -1,    -1,   188,    -1,   188,   188,   188,
       188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
       188,   188,   188,   188,   188,   188,   188,   188,   185,    -1,
        -1,    -1,    -1,    -1,    -1,   185,   185,   185,   185,   185,
       185,   185,   185,   185,    -1,    -1,    -1,    -1,   185,    -1,
       185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
       185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
       185,   184,    -1,    -1,    -1,    -1,    -1,    -1,   184,   184,
       184,   184,   184,   184,   184,   184,   184,    -1,    -1,    -1,
        -1,   184,    -1,   184,   184,   184,   184,   184,   184,   184,
       184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
       184,   184,   184,   184,   183,    -1,    -1,    -1,    -1,    -1,
        -1,   183,   183,   183,   183,   183,   183,   183,   183,   183,
        -1,    -1,    -1,    -1,   183,    -1,   183,   183,   183,   183,
       183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
       183,   183,   183,   183,   183,   183,   183,   182,    -1,    -1,
        -1,    -1,    -1,    -1,   182,   182,   182,   182,   182,   182,
       182,   182,   182,    -1,    -1,    -1,    -1,   182,    -1,   182,
       182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
       182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
       176,    -1,    -1,    -1,    -1,    -1,    -1,   176,   176,   176,
       176,   176,   176,   176,   176,   176,    -1,    -1,    -1,    -1,
       176,    -1,   176,   176,   176,   176,   176,   176,   176,   176,
       176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
       176,   176,   176,   175,    -1,    -1,    -1,    -1,    -1,    -1,
       175,   175,   175,   175,   175,   175,   175,   175,   175,    -1,
        -1,    -1,    -1,   175,    -1,   175,   175,   175,   175,   175,
       175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
       175,   175,   175,   175,   175,   175,   174,    -1,    -1,    -1,
        -1,    -1,    -1,   174,   174,   174,   174,   174,   174,   174,
       174,   174,    -1,    -1,    -1,    -1,   174,    -1,   174,   174,
       174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
       174,   174,   174,   174,   174,   174,   174,   174,   174,   173,
        -1,    -1,    -1,    -1,    -1,    -1,   173,   173,   173,   173,
       173,   173,   173,   173,   173,    -1,    -1,    -1,    -1,   173,
        -1,   173,   173,   173,   173,   173,   173,   173,   173,   173,
       173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
       173,   173,   172,    -1,    -1,    -1,    -1,    -1,    -1,   172,
       172,   172,   172,   172,   172,   172,   172,   172,    -1,    -1,
        -1,    -1,   172,    -1,   172,   172,   172,   172,   172,   172,
       172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
       172,   172,   172,   172,   172,   166,    -1,    -1,    -1,    -1,
        -1,    -1,   166,   166,   166,   166,   166,   166,   166,   166,
       166,    -1,    -1,    -1,    -1,   166,    -1,   166,   166,   166,
       166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
       166,   166,   166,   166,   166,   166,   166,   166,   165,    -1,
        -1,    -1,    -1,    -1,    -1,   165,   165,   165,   165,   165,
       165,   165,   165,   165,    -1,    -1,    -1,    -1,   165,    -1,
       165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
       165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
       165,   164,    -1,    -1,    -1,    -1,    -1,    -1,   164,   164,
       164,   164,   164,   164,   164,   164,   164,    -1,    -1,    -1,
        -1,   164,    -1,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   164,   163,    -1,    -1,    -1,    -1,    -1,
        -1,   163,   163,   163,   163,   163,   163,   163,   163,   163,
        -1,    -1,    -1,    -1,   163,    -1,   163,   163,   163,   163,
       163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
       163,   163,   163,   163,   163,   163,   163,   162,    -1,    -1,
        -1,    -1,    -1,    -1,   162,   162,   162,   162,   162,   162,
       162,   162,   162,    -1,    -1,    -1,    -1,   162,    -1,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
       161,    -1,    -1,    -1,    -1,    -1,    -1,   161,   161,   161,
       161,   161,   161,   161,   161,   161,    -1,    -1,    -1,    -1,
       161,    -1,   161,   161,   161,   161,   161,   161,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
       161,   161,   161,   160,    -1,    -1,    -1,    -1,    -1,    -1,
       160,   160,   160,   160,   160,   160,   160,   160,   160,    -1,
        -1,    -1,    -1,   160,    -1,   160,   160,   160,   160,   160,
       160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
       160,   160,   160,   160,   160,   160,   159,    -1,    -1,    -1,
        -1,    -1,    -1,   159,   159,   159,   159,   159,   159,   159,
       159,   159,    -1,    -1,    -1,    -1,   159,    -1,   159,   159,
       159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
       159,   159,   159,   159,   159,   159,   159,   159,   159,   158,
        -1,    -1,    -1,    -1,    -1,    -1,   158,   158,   158,   158,
       158,   158,   158,   158,   158,    -1,    -1,    -1,    -1,   158,
        -1,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       158,   158,   157,    -1,    -1,    -1,    -1,    -1,    -1,   157,
       157,   157,   157,   157,   157,   157,   157,   157,    -1,    -1,
        -1,    -1,   157,    -1,   157,   157,   157,   157,   157,   157,
       157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
       157,   157,   157,   157,   157,   152,    -1,    -1,    -1,    -1,
        -1,    -1,   152,   152,   152,   152,   152,   152,   152,   152,
       152,    -1,    -1,    -1,    -1,   152,    -1,   152,   152,   152,
       152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   152,   152,   152,   152,   152,   151,    -1,
        -1,    -1,    -1,    -1,    -1,   151,   151,   151,   151,   151,
       151,   151,   151,   151,    -1,    -1,    -1,    -1,   151,    -1,
       151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
       151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
       151,   150,    -1,    -1,    -1,    -1,    -1,    -1,   150,   150,
       150,   150,   150,   150,   150,   150,   150,    -1,    -1,    -1,
        -1,   150,    -1,   150,   150,   150,   150,   150,   150,   150,
       150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
       150,   150,   150,   150,   149,    -1,    -1,    -1,    -1,    -1,
        -1,   149,   149,   149,   149,   149,   149,   149,   149,   149,
        -1,    -1,    -1,    -1,   149,    -1,   149,   149,   149,   149,
       149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
       149,   149,   149,   149,   149,   149,   149,   148,    -1,    -1,
        -1,    -1,    -1,    -1,   148,   148,   148,   148,   148,   148,
       148,   148,   148,    -1,    -1,    -1,    -1,   148,    -1,   148,
       148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
       148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
       147,    -1,    -1,    -1,    -1,    -1,    -1,   147,   147,   147,
       147,   147,   147,   147,   147,   147,    -1,    -1,    -1,    -1,
       147,    -1,   147,   147,   147,   147,   147,   147,   147,   147,
       147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
       147,   147,   147,   146,    -1,    -1,    -1,    -1,    -1,    -1,
       146,   146,   146,   146,   146,   146,   146,   146,   146,    -1,
        -1,    -1,    -1,   146,    -1,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   145,    -1,    -1,    -1,
        -1,    -1,    -1,   145,   145,   145,   145,   145,   145,   145,
       145,   145,    -1,    -1,    -1,    -1,   145,    -1,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   145,   145,   144,
        -1,    -1,    -1,    -1,    -1,    -1,   144,   144,   144,   144,
       144,   144,   144,   144,   144,    -1,    -1,    -1,    -1,   144,
        -1,   144,   144,   144,   144,   144,   144,   144,   144,   144,
       144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
       144,   144,   143,    -1,    -1,    -1,    -1,    -1,    -1,   143,
       143,   143,   143,   143,   143,   143,   143,   143,    -1,    -1,
        -1,    -1,   143,    -1,   143,   143,   143,   143,   143,   143,
       143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
       143,   143,   143,   143,   143,   142,    -1,    -1,    -1,    -1,
        -1,    -1,   142,   142,   142,   142,   142,   142,   142,   142,
       142,    -1,    -1,    -1,    -1,   142,    -1,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   141,    -1,
        -1,    -1,    -1,    -1,    -1,   141,   141,   141,   141,   141,
       141,   141,   141,   141,    -1,    -1,    -1,    -1,   141,    -1,
       141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
       141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
       141,   140,    -1,    -1,    -1,    -1,    -1,    -1,   140,   140,
       140,   140,   140,   140,   140,   140,   140,    -1,    -1,    -1,
        -1,   140,    -1,   140,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   140,   133,    -1,    -1,    -1,    -1,    -1,
        -1,   133,   133,   133,   133,   133,   133,   133,   133,   133,
        -1,    -1,    -1,    -1,   133,    -1,   133,   133,   133,   133,
       133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
       133,   133,   133,   133,   133,   133,   133,   132,    -1,    -1,
        -1,    -1,    -1,    -1,   132,   132,   132,   132,   132,   132,
       132,   132,   132,    -1,    -1,    -1,    -1,   132,    -1,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       131,    -1,    -1,    -1,    -1,    -1,    -1,   131,   131,   131,
       131,   131,   131,   131,   131,   131,    -1,    -1,    -1,    -1,
       131,    -1,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   130,    -1,    -1,    -1,    -1,    -1,    -1,
       130,   130,   130,   130,   130,   130,   130,   130,   130,    -1,
        -1,    -1,    -1,   130,    -1,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   129,    -1,    -1,    -1,
        -1,    -1,    -1,   129,   129,   129,   129,   129,   129,   129,
       129,   129,    -1,    -1,    -1,    -1,   129,    -1,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   128,
        -1,    -1,    -1,    -1,    -1,    -1,   128,   128,   128,   128,
       128,   128,   128,   128,   128,    -1,    -1,    -1,    -1,   128,
        -1,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   127,    -1,    -1,    -1,    -1,    -1,    -1,   127,
       127,   127,   127,   127,   127,   127,   127,   127,    -1,    -1,
        -1,    -1,   127,    -1,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   126,    -1,    -1,    -1,    -1,
        -1,    -1,   126,   126,   126,   126,   126,   126,   126,   126,
       126,    -1,    -1,    -1,    -1,   126,    -1,   126,   126,   126,
       126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
       126,   126,   126,   126,   126,   126,   126,   126,   125,    -1,
        -1,    -1,    -1,    -1,    -1,   125,   125,   125,   125,   125,
       125,   125,   125,   125,    -1,    -1,    -1,    -1,   125,    -1,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       125,   124,    -1,    -1,    -1,    -1,    -1,    -1,   124,   124,
       124,   124,   124,   124,   124,   124,   124,    -1,    -1,    -1,
        -1,   124,    -1,   124,   124,   124,   124,   124,   124,   124,
       124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
       124,   124,   124,   124,   123,    -1,    -1,    -1,    -1,    -1,
        -1,   123,   123,   123,   123,   123,   123,   123,   123,   123,
        -1,    -1,    -1,    -1,   123,    -1,   123,   123,   123,   123,
       123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   123,   123,   123,   123,   123,   123,   122,    -1,    -1,
        -1,    -1,    -1,    -1,   122,   122,   122,   122,   122,   122,
       122,   122,   122,    -1,    -1,    -1,    -1,   122,    -1,   122,
       122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
       122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
       121,    -1,    -1,    -1,    -1,    -1,    -1,   121,   121,   121,
       121,   121,   121,   121,   121,   121,    -1,    -1,    -1,    -1,
       121,    -1,   121,   121,   121,   121,   121,   121,   121,   121,
       121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
       121,   121,   121,   120,    -1,    -1,    -1,    -1,    -1,    -1,
       120,   120,   120,   120,   120,   120,   120,   120,   120,    -1,
        -1,    -1,    -1,   120,    -1,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   119,    -1,    -1,    -1,
        -1,    -1,    -1,   119,   119,   119,   119,   119,   119,   119,
       119,   119,    -1,    -1,    -1,    -1,   119,    -1,   119,   119,
       119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
       119,   119,   119,   119,   119,   119,   119,   119,   119,   105,
        -1,    -1,    -1,    -1,    -1,    -1,   105,   105,   105,   105,
       105,   105,   105,   105,   105,    -1,    -1,    -1,    -1,   105,
        -1,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   101,    -1,    -1,    -1,    -1,    -1,    -1,   101,
       101,   101,   101,   101,   101,   101,   101,   101,    -1,    -1,
        -1,    -1,   101,    -1,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   100,    -1,    -1,    -1,    -1,
        -1,    -1,   100,   100,   100,   100,   100,   100,   100,   100,
       100,    -1,    -1,    -1,    -1,   100,    -1,   100,   100,   100,
       100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
       100,   100,   100,   100,   100,   100,   100,   100,    99,    -1,
        -1,    -1,    -1,    -1,    -1,    99,    99,    99,    99,    99,
        99,    99,    99,    99,    -1,    -1,    -1,    -1,    99,    -1,
        99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
        99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
        99,    98,    -1,    -1,    -1,    -1,    -1,    -1,    98,    98,
        98,    98,    98,    98,    98,    98,    98,    -1,    -1,    -1,
        -1,    98,    -1,    98,    98,    98,    98,    98,    98,    98,
        98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
        98,    98,    98,    98,    97,    -1,    -1,    -1,    -1,    -1,
        -1,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        -1,    -1,    -1,    -1,    97,    -1,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    96,    -1,    -1,
        -1,    -1,    -1,    -1,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    -1,    -1,    -1,    -1,    96,    -1,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        95,    -1,    -1,    -1,    -1,    -1,    -1,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    -1,    -1,    -1,    -1,
        95,    -1,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    94,    -1,    -1,    -1,    -1,    -1,    -1,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    -1,
        -1,    -1,    -1,    94,    -1,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    93,    -1,    -1,    -1,
        -1,    -1,    -1,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    -1,    -1,    -1,    -1,    93,    -1,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    92,
        -1,    -1,    -1,    -1,    -1,    -1,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    -1,    -1,    -1,    -1,    92,
        -1,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    91,    -1,    -1,    -1,    -1,    -1,    -1,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    -1,    -1,
        -1,    -1,    91,    -1,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    90,    -1,    -1,    -1,    -1,
        -1,    -1,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    -1,    -1,    -1,    -1,    90,    -1,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    89,    -1,
        -1,    -1,    -1,    -1,    -1,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    -1,    -1,    -1,    -1,    89,    -1,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    88,    -1,    -1,    -1,    -1,    -1,    -1,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    -1,    -1,    -1,
        -1,    88,    -1,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    87,    -1,    -1,    -1,    -1,    -1,
        -1,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        -1,    -1,    -1,    -1,    87,    -1,    87,    87,    87,    87,
        87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    87,    87,    87,    87,    87,    87,    86,    -1,    -1,
        -1,    -1,    -1,    -1,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    -1,    -1,    -1,    -1,    86,    -1,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
        84,    -1,    -1,    -1,    -1,    -1,    -1,    84,    84,    84,
        84,    84,    84,    84,    84,    84,    -1,    -1,    -1,    -1,
        84,    -1,    84,    84,    84,    84,    84,    84,    84,    84,
        84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
        84,    84,    84,    83,    -1,    -1,    -1,    -1,    -1,    -1,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    -1,
        -1,    -1,    -1,    83,    -1,    83,    83,    83,    83,    83,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
        83,    83,    83,    83,    83,    83,    82,    -1,    -1,    -1,
        -1,    -1,    -1,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    -1,    -1,    -1,    -1,    82,    -1,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    82,    81,
        -1,    -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    -1,    -1,    -1,    -1,    81,
        -1,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    54,    -1,    -1,    -1,    -1,    -1,    -1,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    -1,    -1,
        -1,    -1,    54,    -1,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    46,    -1,    -1,    -1,    -1,
        -1,    -1,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    -1,    -1,    -1,    -1,    46,    -1,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    45,    -1,
        -1,    -1,    -1,    -1,    -1,    45,    45,    45,    45,    45,
        45,    45,    45,    45,    -1,    -1,    -1,    -1,    45,    -1,
        45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
        45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
        45,    44,    -1,    -1,    -1,    -1,    -1,    -1,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    -1,    -1,    -1,
        -1,    44,    -1,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    43,    -1,    -1,    -1,    -1,    -1,
        -1,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        -1,    -1,    -1,    -1,    43,    -1,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    43,    43,    42,    -1,    -1,
        -1,    -1,    -1,    -1,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    -1,    -1,    -1,    -1,    42,    -1,    42,
        42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
        41,    -1,    -1,    -1,    -1,    -1,    -1,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    -1,    -1,    -1,    -1,
        41,    -1,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    40,    -1,    -1,    -1,    -1,    -1,    -1,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    -1,
        -1,    -1,    -1,    40,    -1,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    39,    -1,    -1,    -1,
        -1,    -1,    -1,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    -1,    -1,    -1,    -1,    39,    -1,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    38,
        -1,    -1,    -1,    -1,    -1,    -1,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    -1,    -1,    -1,    -1,    38,
        -1,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    37,    -1,    -1,    -1,    -1,    -1,    -1,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    -1,    -1,
        -1,    -1,    37,    -1,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    36,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    -1,    -1,    -1,    -1,    36,    -1,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    -1,    -1,    -1,    -1,    35,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    33,    -1,    -1,    -1,    -1,    -1,    -1,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    -1,    -1,    -1,
        -1,    33,    -1,    33,    33,    33,    33,    33,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
        33,    33,    33,    33,    29,    -1,    -1,    -1,    -1,    -1,
        -1,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        -1,    -1,    -1,    -1,    29,    -1,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    28,    -1,    -1,
        -1,    -1,    -1,    -1,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    -1,    -1,    -1,    -1,    28,    -1,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        27,    -1,    -1,    -1,    -1,    -1,    -1,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    -1,    -1,    -1,    -1,
        27,    -1,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    26,    -1,    -1,    -1,    -1,    -1,    -1,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    -1,
        -1,    -1,    -1,    26,    -1,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,   155,   155,   155,   155,
       155,   155,   155,   155,   155,    -1,    -1,    -1,    -1,   155,
        -1,   155,   155,   155,   155,   155,   155,   155,   155,   155,
       155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
       155,   155,   154,   154,   154,   154,   154,   154,   154,   154,
       154,    -1,    -1,    -1,    -1,   154,    -1,   154,   154,   154,
       154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
       154,   154,   154,   154,   154,   154,   154,   154,     7,     7,
         7,     7,     7,     7,     7,     7,     7,    -1,    -1,    -1,
        -1,     7,    -1,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,   107,    60,    -1,    -1,    -1,    -1,
        60,   107,   107,   107,   107,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   107,   107,   107,   107,
       107,   107,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
        -1,    -1,    60,    -1,    -1,    -1,    60,    -1,    -1,    -1,
        -1,    -1,    60,    -1,    -1,    60,    -1,    60,    60,    -1,
        60,
]; 
var jjlexclassTable1 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     4,     5,     6,     7,     8,     9,    10,
        11,    12,    13,    14,    15,    16,    17,    18,    19,    19,
        19,    19,    19,    19,    19,    19,    19,    19,    20,    21,
        22,    23,    24,    25,     0,    26,    27,    27,    28,    29,
        27,    30,    30,    30,    30,    30,    30,    30,    31,    32,
        30,    30,    33,    30,    30,    30,    30,    30,    34,    30,
        30,    35,    36,    37,    38,    39,    40,    41,    42,    43,
        44,    45,    46,    30,    47,    48,    30,    49,    50,    51,
        52,    53,    54,    30,    55,    56,    57,    58,    30,    59,
        60,    61,    30,    62,    63,    64,    65,     0,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,
]; 
var jjlexunicodeClassTable1 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1 = [ 
    0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
    0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,0,0,1,0,0,0,1,0,1,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
    0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,
    1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
    1,1,0,0,1,1,0,1,1,1,1,1,0,0,0,
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,
]; 
var jjlexhasArc1 = [ 
    1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,
    0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,
    0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,
    1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,
    0,1,0,0,1,0,1,1,1,1,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
    1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,
    1,1,1,1,
]; 
var jjlextable1 = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2 = [ 
         1,     2,     3,     4,     8,     5,     6,     1,     2,     3,
         1,     7,     3,     1,     2,     3,     1,     2,     3,    10,
        10,     9,     9,    10,    10,     9,     9,
]; 
var jjlexdisnext2 = [ 
         0,    16,    13,    10,    -1,    21,    -7,     7,    19,    17,
        15,
]; 
var jjlexchecknext2 = [ 
         0,     0,     0,     0,     4,     0,     0,     7,     7,     7,
         3,     3,     3,     2,     2,     2,     1,     1,     1,    10,
        10,     9,     9,     8,     8,     5,     5,
]; 
var jjlexclassTable2 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,    -1,    -1,    -1,     3,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,    -1,    -1,    -1,    -1,     5,    -1,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     6,    -1,    -1,    -1,    -1,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,
]; 
var jjlexunicodeClassTable2 = [ 
    
]; 
var jjlexisEnd2 = [ 
    0,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc2 = [ 
    1,1,1,1,1,1,0,1,1,1,1,
]; 
var jjlextable2 = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
var jjlexpnext3 = [ 
         1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
         4,     1,     1,     1,     1,     1,     1,    15,    -1,     1,
         1,     1,     1,     1,     1,     1,    -1,     1,     1,     1,
         1,     1,    10,    11,    -1,    11,    11,    12,    -1,    11,
        11,    11,    10,    11,    -1,    11,    11,    12,    -1,    11,
        11,    11,    16,    -1,    16,    16,    -1,    -1,    16,    16,
        16,    16,    17,    16,    16,    -1,    -1,    16,    16,    16,
        -1,    17,     7,     8,     7,    -1,    -1,    -1,    -1,    -1,
        -1,     7,     7,     7,     9,    19,    -1,    19,    19,    -1,
        -1,    19,    19,    19,    19,    -1,    19,    19,    -1,    -1,
        19,    19,    19,     5,     5,    -1,    -1,     5,     5,     5,
         6,    18,    18,    -1,    -1,    18,    18,    18,    13,    13,
        -1,    -1,    13,    13,    13,    14,    14,    14,    14,    -1,
        -1,    14,    14,
]; 
var jjlexdisnext3 = [ 
         0,    16,   -16,    96,    71,    38,   111,   -16,   -16,   121,
        11,    28,   -16,    56,   120,   104,    47,   -16,    89,    80,
    
]; 
var jjlexchecknext3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,    10,    -1,     1,
         1,     1,     1,     1,     1,     1,    -1,     1,     1,     1,
         1,     1,    11,    11,    -1,    11,    11,    11,    -1,    11,
        11,    11,     5,     5,    -1,     5,     5,     5,    -1,     5,
         5,     5,    16,    -1,    16,    16,    -1,    -1,    16,    16,
        16,    13,    16,    13,    13,    -1,    -1,    13,    13,    13,
        -1,    13,     4,     4,     4,    -1,    -1,    -1,    -1,    -1,
        -1,     4,     4,     4,     4,    19,    -1,    19,    19,    -1,
        -1,    19,    19,    19,    18,    -1,    18,    18,    -1,    -1,
        18,    18,    18,     3,     3,    -1,    -1,     3,     3,     3,
         3,    15,    15,    -1,    -1,    15,    15,    15,     6,     6,
        -1,    -1,     6,     6,     6,    14,     9,    14,     9,    -1,
        -1,    14,     9,
]; 
var jjlexclassTable3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     3,
         0,     0,     0,     0,     0,     4,     0,     0,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     0,     0,
         0,     0,     6,     0,     0,     7,     7,     7,     7,     7,
         7,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     9,    10,     0,     0,     8,     0,     7,    11,     7,
         7,     7,    11,     8,     8,     8,     8,     8,     8,     8,
        12,     8,     8,     8,    12,     8,    12,    13,     8,     8,
        13,     8,     8,    14,     0,    15,     0,     0,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,
]; 
var jjlexunicodeClassTable3 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd3 = [ 
    0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,
    0,0,1,1,1,
]; 
var jjlexhasArc3 = [ 
    1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,
    1,1,0,1,1,
]; 
var jjlextable3 = {
    pnext: jjlexpnext3,
    disnext: jjlexdisnext3,
    checknext: jjlexchecknext3,
    maxAsicii: 255,
    classTable: jjlexclassTable3,
    unicodeClassTable: jjlexunicodeClassTable3,
    isEnd: jjlexisEnd3,
    hasArc: jjlexhasArc3
};
var jjlexpnext4 = [ 
         1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
         4,     1,     1,     1,     1,     1,     1,     1,    15,     1,
         1,     1,     1,     1,     1,    -1,    -1,     1,     1,     1,
         1,     1,    10,    11,    -1,    11,    11,    12,    -1,    -1,
        11,    11,    11,    10,    11,    -1,    11,    11,    12,    -1,
        -1,    11,    11,    11,    16,    -1,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    16,    17,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    19,    17,    19,    19,    14,    -1,
        14,    19,    19,    19,    19,    14,    19,    19,     7,     8,
        -1,    19,    19,    19,    -1,    -1,     7,    -1,     7,     7,
         9,     5,     5,    -1,    -1,    -1,     5,     5,     5,     6,
        18,    18,    -1,    13,    13,    18,    18,    18,    13,    13,
        13,    14,    -1,    14,    -1,    -1,    -1,    -1,    14,
]; 
var jjlexdisnext4 = [ 
         0,    16,    95,    87,   -16,    40,   107,   -16,   -16,   117,
        13,    29,   -16,    60,    74,   104,    50,   -16,    80,    70,
    
]; 
var jjlexchecknext4 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,     1,    10,     1,
         1,     1,     1,     1,     1,    -1,    -1,     1,     1,     1,
         1,     1,    11,    11,    -1,    11,    11,    11,    -1,    -1,
        11,    11,    11,     5,     5,    -1,     5,     5,     5,    -1,
        -1,     5,     5,     5,    16,    -1,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    13,    16,    13,    13,    -1,    -1,
        -1,    13,    13,    13,    19,    13,    19,    19,    14,    -1,
        14,    19,    19,    19,    18,    14,    18,    18,     3,     3,
        -1,    18,    18,    18,    -1,    -1,     3,    -1,     3,     3,
         3,     2,     2,    -1,    -1,    -1,     2,     2,     2,     2,
        15,    15,    -1,     6,     6,    15,    15,    15,     6,     6,
         6,     9,    -1,     9,    -1,    -1,    -1,    -1,     9,
]; 
var jjlexclassTable4 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     1,
         0,     0,     0,     0,     0,     3,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     0,     0,
         0,     0,     5,     0,     0,     6,     6,     6,     6,     6,
         6,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     8,     9,     0,     0,     7,    10,     6,    11,     6,
         6,     6,    11,     7,     7,     7,     7,     7,     7,     7,
        12,     7,     7,     7,    12,     7,    12,    13,     7,     7,
        13,     7,     7,    14,     0,    15,     0,     0,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,
]; 
var jjlexunicodeClassTable4 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd4 = [ 
    0,1,0,0,1,1,1,1,1,0,0,1,1,0,1,
    0,0,1,1,1,
]; 
var jjlexhasArc4 = [ 
    1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,
    1,1,0,1,1,
]; 
var jjlextable4 = {
    pnext: jjlexpnext4,
    disnext: jjlexdisnext4,
    checknext: jjlexchecknext4,
    maxAsicii: 255,
    classTable: jjlexclassTable4,
    unicodeClassTable: jjlexunicodeClassTable4,
    isEnd: jjlexisEnd4,
    hasArc: jjlexhasArc4
};
var jjlexpnext5 = [ 
         1,     2,     3,     1,     4,     1,     1,     1,     1,     1,
         1,     5,     1,     1,     1,     1,     1,     1,    19,    -1,
         1,    -1,     1,     1,     1,     1,     1,     1,    -1,     1,
         1,     1,     1,     1,    14,    15,    -1,    15,    15,    16,
        -1,    15,    15,    15,    14,    15,    -1,    15,    15,    16,
        -1,    15,    15,    15,    20,    -1,    20,    20,    -1,    -1,
        20,    20,    20,    20,    21,    20,    20,    -1,    -1,    20,
        20,    20,    23,    21,    23,    23,    -1,    -1,    23,    23,
        23,    23,    -1,    23,    23,    -1,    -1,    23,    23,    23,
        13,    -1,    13,    13,    -1,    -1,    13,    13,    13,    13,
        -1,    13,    13,    10,    11,    13,    13,    13,    -1,    -1,
        -1,    10,    10,    10,    12,     8,     8,     7,    -1,     8,
         8,     8,     9,    -1,     6,     6,    -1,    -1,     6,     6,
         6,    22,    22,    -1,    -1,    22,    22,    22,    17,    17,
        -1,    -1,    17,    17,    17,     6,     6,    -1,    -1,     6,
         6,     6,     6,     6,    -1,    -1,     6,     6,     6,    18,
        18,    18,    18,    -1,    -1,    18,    18,
]; 
var jjlexdisnext5 = [ 
         0,    17,   144,   116,   107,   100,    93,   137,    39,   130,
       -17,   -17,   154,    84,    11,    29,   -17,    57,   153,   123,
        48,   -17,    75,    66,
]; 
var jjlexchecknext5 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     1,    14,    -1,
         1,    -1,     1,     1,     1,     1,     1,     1,    -1,     1,
         1,     1,     1,     1,    15,    15,    -1,    15,    15,    15,
        -1,    15,    15,    15,     8,     8,    -1,     8,     8,     8,
        -1,     8,     8,     8,    20,    -1,    20,    20,    -1,    -1,
        20,    20,    20,    17,    20,    17,    17,    -1,    -1,    17,
        17,    17,    23,    17,    23,    23,    -1,    -1,    23,    23,
        23,    22,    -1,    22,    22,    -1,    -1,    22,    22,    22,
        13,    -1,    13,    13,    -1,    -1,    13,    13,    13,     6,
        -1,     6,     6,     5,     5,     6,     6,     6,    -1,    -1,
        -1,     5,     5,     5,     5,     4,     4,     3,    -1,     4,
         4,     4,     4,    -1,     3,     3,    -1,    -1,     3,     3,
         3,    19,    19,    -1,    -1,    19,    19,    19,     9,     9,
        -1,    -1,     9,     9,     9,     7,     7,    -1,    -1,     7,
         7,     7,     2,     2,    -1,    -1,     2,     2,     2,    18,
        12,    18,    12,    -1,    -1,    18,    12,
]; 
var jjlexclassTable5 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         1,     0,     0,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     3,     0,     4,     0,     0,     3,
         0,     0,     0,     0,     0,     5,     0,     0,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     0,     0,
         0,     0,     7,     0,     0,     8,     8,     8,     8,     8,
         8,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,    10,    11,     0,     0,     9,     0,     8,    12,     8,
         8,     8,    12,     9,     9,     9,     9,     9,     9,     9,
        13,     9,     9,     9,    13,     9,    13,    14,     9,     9,
        14,     9,     9,    15,     0,    16,     0,     0,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,
]; 
var jjlexunicodeClassTable5 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd5 = [ 
    0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,
    1,1,0,1,0,0,1,1,1,
]; 
var jjlexhasArc5 = [ 
    1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,
    1,0,1,1,1,1,0,1,1,
]; 
var jjlextable5 = {
    pnext: jjlexpnext5,
    disnext: jjlexdisnext5,
    checknext: jjlexchecknext5,
    maxAsicii: 255,
    classTable: jjlexclassTable5,
    unicodeClassTable: jjlexunicodeClassTable5,
    isEnd: jjlexisEnd5,
    hasArc: jjlexhasArc5
};
var jjlexpnext6 = [ 
         1,     2,     3,     1,     1,     1,     6,     6,     1,     1,
         6,     6,     5,     4,     4,     4,
]; 
var jjlexdisnext6 = [ 
         0,     5,    10,    11,     7,     9,     3,
]; 
var jjlexchecknext6 = [ 
         0,     0,     0,     0,     0,     1,     6,     6,     1,     1,
         4,     4,     3,     5,     2,     3,
]; 
var jjlexclassTable6 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         1,     0,     0,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     0,     0,
         0,     0,     0,     0,     0,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     0,    -1,     0,     0,     4,     0,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     0,     0,     0,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexunicodeClassTable6 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd6 = [ 
    0,1,1,1,1,1,1,
]; 
var jjlexhasArc6 = [ 
    1,1,1,1,1,1,1,
]; 
var jjlextable6 = {
    pnext: jjlexpnext6,
    disnext: jjlexdisnext6,
    checknext: jjlexchecknext6,
    maxAsicii: 255,
    classTable: jjlexclassTable6,
    unicodeClassTable: jjlexunicodeClassTable6,
    isEnd: jjlexisEnd6,
    hasArc: jjlexhasArc6
};
/*
    dfa tables
*/
var jjdfaTables = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
    jjlextable3,
    jjlextable4,
    jjlextable5,
    jjlextable6,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc, c){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,     2,     2,     2,     2,     3,     2,     2,     2,    -1,
        -1,    -1,
]; 
var jjlexTokens1 = [ 
        -1,    -1,    -1,    -1,    66,     8,    -1,    10,    20,    41,
        -1,    53,    54,    15,    13,    57,    14,    84,    16,     6,
        19,    60,    22,    29,    21,    18,     4,     4,     4,     4,
        55,    56,    43,     4,     9,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,    58,    42,    59,
        44,    -1,    27,    -1,    11,    40,    61,    35,    -1,     7,
        -1,    17,    32,    45,    30,    46,    31,    52,     5,    -1,
        -1,    34,     5,    -1,    47,    24,    25,    51,    23,    48,
        -1,     4,     4,    63,     4,    37,     4,     4,    76,     4,
         4,    73,     4,     4,     4,     4,    68,     4,     4,     4,
         4,     4,    36,    62,    28,    11,    -1,    -1,    33,    -1,
        -1,    -1,     5,    -1,     5,    -1,    39,    26,    38,    64,
        65,     4,     4,     4,     4,     4,     4,    74,     4,     4,
         4,     4,    80,     4,    -1,    -1,    -1,    -1,    -1,    -1,
         4,     4,     4,     4,     4,    70,    69,     4,     4,    78,
         4,     4,     4,    -1,    -1,    -1,    -1,     4,    79,    81,
        67,     4,     4,     4,    71,     4,    72,    -1,    -1,    49,
        49,    -1,     4,     4,     4,     4,    83,    -1,    -1,    -1,
        -1,    49,     4,     4,    75,     4,    50,    50,     4,    82,
        77,    50,     4,     4,     4,     4,     4,     4,    12,
]; 
var jjlexTokens2 = [ 
        -1,    -1,    -1,    -1,    10,     4,    58,    -1,    11,     4,
        11,
]; 
var jjlexTokens3 = [ 
        -1,    85,     8,    -1,    -1,    87,    90,    85,    85,    -1,
        -1,    87,    89,    -1,    85,    -1,    -1,    87,    88,    88,
    
]; 
var jjlexTokens4 = [ 
        -1,    85,    -1,    -1,     9,    87,    90,    85,    85,    -1,
        -1,    87,    89,    -1,    85,    -1,    -1,    87,    88,    88,
    
]; 
var jjlexTokens5 = [ 
        -1,    85,    85,    85,    -1,    -1,    86,    85,    87,    90,
        85,    85,    -1,    86,    -1,    87,    89,    -1,    85,    -1,
        -1,    87,    88,    88,
]; 
var jjlexTokens6 = [ 
        -1,    85,    85,    85,    86,    85,    86,
]; 

var jjstateCount = 343;
var jjtokenCount = 92;
var jjactERR = 344;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
       206,   196,    44,    43,    42,    52,    45,    37,    50,    49,
         9,    30,    31,   212,   210,   213,   214,   215,   216,   277,
       115,   116,   118,   342,   338,   117,   113,   114,   115,   116,
       118,   337,   336,   117,    95,    96,    97,    98,    99,   100,
       101,   102,    33,    35,    36,   335,   325,    46,    47,   -50,
       -48,    72,   -50,    71,   105,   316,   192,   315,   193,   312,
       107,   106,   313,   253,    32,     8,   207,   310,   197,    34,
       199,   200,   201,   202,    17,    10,    70,    51,   309,   204,
       205,   203,   206,   196,    44,    43,    42,    52,    45,    37,
        50,    49,   308,    30,    31,    50,    49,   119,   212,   210,
       213,   214,   215,   216,   276,   237,   269,   113,   114,   115,
       116,   118,    50,    49,   117,    95,    96,    97,    98,    99,
       100,   101,   102,   120,    33,    35,    36,   304,   -52,    46,
        47,   -52,   301,    72,    53,    71,   297,   290,   192,   333,
       193,   107,   106,    90,   -49,   296,    32,   -49,   207,   295,
       197,    34,   199,   200,   201,   202,   292,    54,    70,    51,
       270,   204,   205,   203,   206,   196,    44,    43,    42,    52,
        45,    37,    50,    49,   -49,    30,    31,   -49,   119,   287,
       -49,   190,   212,   -49,   213,   214,   215,   216,   282,   113,
       114,   115,   116,   118,   273,   272,   117,    95,    96,    97,
        98,    99,   100,   101,   102,   267,    33,    35,    36,   263,
       145,    46,    47,   144,    16,    72,   -51,    71,    16,   -51,
       192,   311,   193,   107,   106,   259,    26,   258,    32,    25,
       207,   256,   197,    34,   199,   200,   201,   202,   253,    54,
        70,    51,   250,   204,   205,   203,   206,   196,    44,    43,
        42,    52,    45,    37,    50,    49,   249,    30,    31,   248,
       119,   129,   130,   131,   133,   132,   134,   135,   136,   137,
       138,   139,   140,   118,   118,   118,   118,   141,   142,   113,
       114,   115,   116,   118,   -49,   244,   117,   -49,    33,    35,
        36,   243,   242,    46,    47,   240,   236,    72,   233,    71,
       229,    58,   192,   288,   193,   189,   115,   116,   118,    58,
        32,   117,   207,   146,   197,    34,   199,   200,   201,   202,
       -47,    54,    70,    51,   128,   204,   205,   203,   206,   196,
        44,    43,    42,    52,    45,    37,    50,    49,   126,    30,
        31,   115,   116,   118,   122,    58,   117,   235,   120,    92,
       119,    89,    85,   113,   114,   115,   116,   118,    75,    13,
       117,   113,   114,   115,   116,   118,    60,    55,   117,    28,
        33,    35,    36,    27,    14,    46,    47,    13,     4,    72,
         0,    71,     0,     0,   192,     0,   193,   107,   106,     0,
         0,     0,    32,     0,   207,     0,   197,    34,   199,   200,
       201,   202,     0,    54,    70,    51,     0,   204,   205,   203,
       206,   196,    44,    43,    42,    52,    45,    37,    50,    49,
         0,    30,    31,   212,   119,   213,   214,   215,   216,     0,
         0,     0,   119,     0,     0,   113,   114,   115,   116,   118,
         0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    33,    35,    36,     0,     0,    46,    47,     0,
         0,    72,     0,    71,     0,     0,   192,     0,   193,   107,
       106,     0,     0,     0,    32,     0,   207,     0,   197,    34,
       199,   200,   201,   202,     0,    54,    70,    51,     0,   204,
       205,   203,   206,   196,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,   119,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
       116,   118,     0,     0,   117,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,     0,    72,     0,    71,     0,     0,   192,     0,
       193,   107,   106,     0,     0,     0,    32,     0,   207,     0,
       197,    34,   199,   200,   201,   202,     0,    54,    70,    51,
         0,   204,   205,   203,   206,   196,    44,    43,    42,    52,
        45,    37,    50,    49,     0,    30,    31,     0,   119,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
       114,   115,   116,   118,     0,     0,   117,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    33,    35,    36,     0,
         0,    46,    47,     0,     0,    72,     0,    71,     0,     0,
       192,     0,   193,   107,   106,     0,     0,     0,    32,     0,
       207,     0,   197,    34,   199,   200,   201,   202,     0,    54,
        70,    51,     0,   204,   205,   203,   206,   196,    44,    43,
        42,    52,    45,    37,    50,    49,     0,    30,    31,     0,
       119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   113,   114,   115,   116,   118,     0,     0,   117,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    33,    35,
        36,     0,     0,    46,    47,     0,     0,    72,     0,    71,
         0,     0,   192,     0,   193,   107,   106,     0,     0,     0,
        32,     0,   207,     0,   197,    34,   199,   200,   201,   202,
         0,    54,    70,    51,     0,   204,   205,   203,   206,   196,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,   119,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   113,   114,   115,   116,   118,
         0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,   192,     0,   193,     0,     0,   107,
       106,     0,    32,     0,   207,     0,   197,    34,   199,   200,
       201,   202,     0,    54,    70,    51,     0,   204,   205,   203,
       113,   114,   115,   116,   118,    94,     0,   117,    95,    96,
        97,    98,    99,   100,   101,   102,   119,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   105,   104,
       103,     0,     0,     0,   107,   106,     0,     0,     0,     0,
         0,   334,     0,     0,     0,     0,     0,     0,   108,   109,
       110,   112,   111,   113,   114,   115,   116,   118,    94,     0,
       117,    95,    96,    97,    98,    99,   100,   101,   102,     0,
         0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   105,   104,   103,     0,     0,     0,   107,   106,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
         0,   108,   109,   110,   112,   111,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,   119,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   320,     0,   108,   109,   110,   112,   111,   113,
       114,   115,   116,   118,    94,     0,   117,    95,    96,    97,
        98,    99,   100,   101,   102,     0,     0,   119,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   105,   104,   103,
         0,     0,     0,   107,   106,     0,     0,     0,     0,     0,
         0,     0,   319,     0,     0,     0,     0,   108,   109,   110,
       112,   111,   113,   114,   115,   116,   118,    94,     0,   117,
        95,    96,    97,    98,    99,   100,   101,   102,     0,     0,
       119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       105,   104,   103,     0,     0,     0,   107,   106,     0,     0,
         0,     0,     0,   318,     0,    52,     0,     0,    50,    49,
       108,   109,   110,   112,   111,   113,   114,   115,   116,   118,
        94,     0,   117,    95,    96,    97,    98,    99,   100,   101,
       102,     0,     0,   119,   113,   114,   115,   116,   118,     0,
         0,   117,     0,   105,   104,   103,     0,     0,     0,   107,
       106,    22,    52,   160,     0,    50,    49,     0,     0,     0,
         0,     0,     0,   108,   109,   110,   112,   111,   107,   106,
         0,     0,     0,     0,     0,     0,   159,    51,   317,     0,
       113,   114,   115,   116,   118,    94,   119,   117,    95,    96,
        97,    98,    99,   100,   101,   102,     0,     0,    22,     0,
       160,     0,     0,     0,     0,   119,     0,     0,   105,   104,
       103,     0,     0,     0,   107,   106,     0,     0,     0,     0,
         0,   314,   206,   159,    51,     0,     0,     0,   108,   109,
       110,   112,   111,   113,   114,   115,   116,   118,    94,     0,
       117,    95,    96,    97,    98,    99,   100,   101,   102,     0,
         0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   105,   104,   103,     0,     0,     0,   107,   106,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   108,   109,   110,   112,   111,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,   119,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   252,   108,   109,   110,   112,   111,   113,
       114,   115,   116,   118,    94,   246,   117,    95,    96,    97,
        98,    99,   100,   101,   102,     0,     0,   119,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   105,   104,   103,
         0,     0,     0,   107,   106,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
       112,   111,   113,   114,   115,   116,   118,    94,     0,   117,
        95,    96,    97,    98,    99,   100,   101,   102,     0,     0,
       119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       105,   104,   103,     0,     0,     0,   107,   106,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       108,   109,   110,   112,   111,   113,   114,   115,   116,   118,
        94,     0,   117,    95,    96,    97,    98,    99,   100,   101,
       102,     0,     0,   119,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   105,   104,   103,     0,     0,     0,   107,
       106,     0,     0,     0,     0,     0,   234,     0,     0,     0,
         0,     0,     0,   108,   109,   110,   112,   111,   113,   114,
       115,   116,   118,    94,     0,   117,    95,    96,    97,    98,
        99,   100,   101,   102,     0,     0,   119,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   105,   104,   103,     0,
         0,     0,   107,   106,     0,     0,     0,     0,     0,   125,
         0,     0,     0,     0,     0,     0,   108,   109,   110,   112,
       111,   113,   114,   115,   116,   118,    94,     0,   117,    95,
        96,    97,    98,    99,   100,   101,   102,     0,     0,   119,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
       104,   103,     0,     0,     0,   107,   106,     0,     0,    61,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
       109,   110,   112,   111,   113,   114,   115,   116,   118,    94,
         0,   117,    95,    96,    97,    98,    99,   100,   101,   102,
         0,     0,   119,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   105,   104,   103,     0,     0,     0,   107,   106,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   108,   109,   110,   112,   111,   113,   114,   115,
       116,   118,    94,     0,   117,    95,    96,    97,    98,    99,
       100,   101,   102,     0,     0,   119,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   104,   103,     0,     0,
         0,   107,   106,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   108,   109,   110,   112,   111,
       113,   114,   115,   116,   118,    94,     0,   117,    95,    96,
        97,    98,    99,   100,   101,   102,     0,     0,   119,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   105,   104,
       103,     0,     0,     0,   107,   106,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
       110,   112,   111,   113,   114,   115,   116,   118,    94,     0,
       117,    95,    96,    97,    98,    99,   100,   101,   102,     0,
         0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   105,   104,   103,     0,     0,     0,   107,   106,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   108,   109,   110,   112,   111,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,   119,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   110,   112,   111,   113,
       114,   115,   116,   118,    94,     0,   117,    95,    96,    97,
        98,    99,   100,   101,   102,     0,     0,   119,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   105,   104,   103,
         0,     0,     0,   107,   106,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   108,   109,   110,
       112,   111,   113,   114,   115,   116,   118,    94,     0,   117,
        95,    96,    97,    98,    99,   100,   101,   102,     0,     0,
       119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       105,   104,   103,     0,     0,     0,   107,   106,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       108,   109,   110,   112,   111,   113,   114,   115,   116,   118,
        94,     0,   117,    95,    96,    97,    98,    99,   100,   101,
       102,     0,     0,   119,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   105,   104,   103,     0,     0,     0,   107,
       106,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   108,   109,   110,   112,   111,   113,   114,
       115,   116,   118,    94,     0,   117,    95,    96,    97,    98,
        99,   100,   101,   102,     0,     0,   119,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   105,   104,   103,     0,
         0,     0,   107,   106,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   108,   109,   110,   112,
       111,   113,   114,   115,   116,   118,    94,     0,   117,    95,
        96,    97,    98,    99,   100,   101,   102,     0,     0,   119,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
       104,   103,     0,     0,     0,   107,   106,     0,     0,     0,
         0,   113,   114,   115,   116,   118,     0,     0,   117,   108,
       109,     0,   112,   111,   113,   114,   115,   116,   118,    94,
         0,   117,    95,    96,    97,    98,    99,   100,   101,   102,
         0,     0,   119,     0,     0,   107,   106,     0,     0,     0,
         0,     0,   105,   104,   103,     0,     0,     0,   107,   106,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   108,   109,     0,   112,   113,   114,   115,   116,
       118,    94,   119,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,   119,    52,     0,     0,    50,
        49,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,    22,     0,    24,     0,    52,   119,     0,    50,
        49,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,    51,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,    22,     0,    24,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,    51,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   109,   113,   114,   115,   116,
       118,    94,     0,   117,    95,    96,    97,    98,    99,   100,
       101,   102,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   105,   104,   103,     0,     0,     0,
       107,   106,    44,    43,    42,    52,    45,    37,    50,    49,
         0,    30,    31,     0,   108,   109,     0,   162,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,    33,    35,    36,     0,     0,    46,    47,     0,
         0,    72,     0,    71,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    32,     0,     0,     0,     0,    34,
         0,     0,     0,     0,     0,    54,    70,    51,   113,   114,
       115,   116,   118,    94,     0,   117,    95,    96,    97,    98,
        99,   100,   101,   102,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,   105,   104,   103,     0,
         0,     0,   107,   106,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   108,   109,     0,     0,
         0,     0,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,     0,    72,     0,    71,     0,     0,     0,   119,
         0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
       113,   114,   115,   116,   118,     0,     0,   117,    95,    96,
        97,    98,    99,   100,   101,   102,    44,    43,    42,    52,
        45,    37,    50,    49,     0,    30,    31,     0,   105,   104,
       103,     0,     0,     0,   107,   106,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
         0,     0,     0,     0,     0,     0,    33,    35,    36,     0,
         0,    46,    47,     0,     0,    72,     0,    71,     0,     0,
         0,   119,     0,     0,     0,     0,     0,     0,    32,     0,
         0,     0,     0,    34,     0,     0,     0,     0,     0,    54,
        70,    51,    44,    43,    42,    52,    45,    37,    50,    49,
         0,    30,    31,     0,     0,     0,    44,    43,    42,    52,
        45,    37,    50,    49,     0,    30,    31,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    33,    35,    36,     0,     0,    46,    47,     0,
         0,    72,     0,    71,     0,     0,    33,    35,    36,     0,
         0,    46,    47,     0,    32,    72,     0,    71,     0,    34,
         0,     0,     0,     0,     0,    54,    70,    51,    32,     0,
         0,     0,     0,    34,     0,     0,     0,     0,     0,    54,
        70,    51,    44,    43,    42,    52,    45,    37,    50,    49,
         0,    30,    31,     0,     0,     0,    44,    43,    42,    52,
        45,    37,    50,    49,     0,    30,    31,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    33,    35,    36,     0,     0,    46,    47,     0,
         0,    72,     0,    71,     0,     0,    33,    35,    36,     0,
         0,    46,    47,     0,    32,    72,     0,    71,     0,    34,
         0,     0,     0,     0,     0,    54,    70,    51,    32,     0,
         0,     0,     0,    34,     0,     0,     0,     0,     0,    54,
        70,    51,    44,    43,    42,    52,    45,    37,    50,    49,
         0,    30,    31,     0,     0,     0,    44,    43,    42,    52,
        45,    37,    50,    49,     0,    30,    31,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    33,    35,    36,     0,     0,    46,    47,     0,
         0,    72,     0,    71,     0,     0,    33,    35,    36,     0,
         0,    46,    47,     0,    32,    72,     0,    71,     0,    34,
         0,     0,     0,     0,     0,    54,    70,    51,    32,     0,
         0,     0,     0,    34,     0,     0,     0,     0,     0,    54,
        70,    51,    44,    43,    42,    52,    45,    37,    50,    49,
         0,    30,    31,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    33,    35,    36,     0,     0,    46,    47,     0,
         0,    72,     0,    71,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    32,     0,     0,     0,     0,    34,
         0,     0,     0,     0,     0,    54,    70,    51,   113,   114,
       115,   116,   118,     0,     0,   117,    95,    96,    97,    98,
        99,   100,   101,   102,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,   105,   104,   103,     0,
         0,     0,   107,   106,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   108,   109,     0,     0,
         0,     0,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,     0,    72,     0,    71,     0,     0,     0,   119,
         0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
        44,    43,    42,    52,    45,    37,    50,    49,     0,    30,
        31,     0,     0,     0,    44,    43,    42,    52,    45,    37,
        50,    49,     0,    30,    31,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    35,    36,     0,     0,    46,    47,     0,     0,    72,
         0,    71,     0,     0,    33,    35,    36,     0,     0,    46,
        47,     0,    32,    72,     0,    71,     0,    34,     0,     0,
         0,     0,     0,    54,    70,    51,    32,     0,     0,     0,
         0,    34,     0,     0,     0,     0,     0,    54,    70,    51,
       113,   114,   115,   116,   118,     0,     0,   117,    95,    96,
        97,    98,    99,   100,   101,   102,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   105,   104,
       103,     0,     0,     0,   107,   106,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   108,   113,
       114,   115,   116,   118,     0,     0,   117,    95,    96,    97,
        98,    99,   100,   101,   102,     0,     0,     0,     0,     0,
         0,   119,     0,     0,     0,     0,     0,   105,   104,   103,
         0,     0,     0,   107,   106,     0,     0,   113,   114,   115,
       116,   118,     0,     0,   117,    95,    96,    97,    98,    99,
       100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   104,   103,     0,     0,
       119,   107,   106,     0,     0,   113,   114,   115,   116,   118,
         0,     0,   117,    95,    96,    97,    98,    99,   100,   101,
       102,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   105,     0,   103,     0,     0,   119,   107,
       106,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   119,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -92,   378,    -2,   -92,   -92,   -92,   -92,   373,   321,    70,
       169,   -92,   344,   315,  1985,   -92,   314,   309,   -92,   -92,
      1508,  6570,   -92,  6556,   -92,   355,  6480,   298,   -92,  6466,
      6390,  6376,  6300,  6286,  2219,  2169,   -92,   -92,   -92,   -92,
       164,   -92,   -92,   299,   -92,   -92,   -92,   298,   -92,    85,
       296,   -92,  6210,   295,   334,   287,   -92,   -92,  1932,  6196,
      6120,  1455,   282,   267,  1879,   232,   -92,   267,   158,   260,
      6106,  6030,   -92,  1826,   -92,   -92,   -92,  6724,   176,  2955,
       128,   -92,   122,   -92,  6016,   -92,   -92,   -92,  5940,  5926,
       -92,  5850,  1773,  2888,  5836,  5760,  5746,  5670,  5656,  5580,
      5566,  5490,  5476,  5400,  5386,  5310,  5296,  5220,  5206,  5130,
      5116,  5040,  5026,  4950,  4936,  4860,  4846,  4770,  4756,   298,
       251,   290,   -92,  1720,   -92,   -92,   -92,  4680,  4666,  4590,
      4576,  4500,  4486,  4410,  4396,  4320,  4306,  4230,  4216,  4140,
       -92,   -92,   247,  4126,   -92,  4050,   242,  1402,   338,   242,
        97,   -92,   -92,   241,  1349,   238,   240,    92,   232,  4036,
      1296,  3960,  2078,  1091,   752,   668,   586,   504,   422,   340,
        13,  6762,    94,   348,   266,  6686,  6637,  2038,  2091,  2843,
       326,   291,   259,   258,   257,   256,     5,   205,   198,   189,
       -92,   -92,   -92,  1243,   236,  3946,  3870,   -92,   178,   736,
       174,   172,  3856,   212,   208,   -92,   156,  1667,   -92,   -92,
       -92,   -92,   -92,   -92,   -92,   -92,  2793,  2743,  2693,  2643,
      2593,  2543,  2493,  2443,  2393,  2343,  2293,  2243,  3780,   149,
       102,   141,   165,    -3,   -92,   -92,   -92,    13,   -72,   -92,
       -92,   -92,  1115,  3766,   132,  3690,  3665,   101,   -92,   168,
       244,   -92,   -92,  1190,    77,  3598,    84,  3522,  3508,    89,
        85,    76,  3432,  3418,  3342,    78,   -92,   -92,   -92,  3328,
       -92,    98,  3252,   -92,   -92,   -92,   -92,    35,  1614,   -92,
        24,    76,  3227,     9,   162,     5,   -92,   -92,    61,   -92,
      1137,     4,    -5,  1072,   -92,   -92,   -92,  1019,   966,   913,
       -92,   -92,   860,  3160,  2193,   -92,   -92,  3146,   -92,   -92,
       -92,   -92,    35,   654,  3070,  3056,  1068,   572,   -92,   -92,
       -92,  2143,  1561,    80,   -92,   -92,   807,   -15,   -22,   -38,
       -92,   -92,   -92,   -36,  2980,   490,   408,   -92,   -31,   -92,
       -92,   326,   -92,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,   238,   238,   238,   238,   238,   238,   238,
       186,   186,   186,   338,   333,   186,   170,   170,   170,   170,
       170,   329,   328,   170,   170,   170,   170,   170,   170,   170,
       170,   170,     2,     2,     2,   327,   312,     2,     2,   233,
       233,     2,   233,     2,   170,   292,     2,   291,     2,   285,
       170,   170,   285,   288,     2,     2,     2,   283,     2,     2,
         2,     2,     2,     2,     9,     2,     2,     2,   280,     2,
         2,     2,   323,   323,   323,   323,   323,   323,   323,   323,
       323,   323,   277,   323,   323,    49,    49,   170,   237,   237,
       237,   237,   237,   237,   237,   150,   230,   172,   172,   172,
       172,   172,   230,   230,   172,   172,   172,   172,   172,   172,
       172,   172,   172,     9,   323,   323,   323,   271,   281,   323,
       323,   281,   265,   323,   254,   323,   261,   254,   323,   323,
       323,   172,   172,    49,   157,   260,   323,   157,   323,   259,
       323,   323,   323,   323,   323,   323,   256,   323,   323,   323,
       230,   323,   323,   323,   284,   284,   284,   284,   284,   284,
       284,   284,   284,   284,    82,   284,   284,    82,   172,   249,
        80,   247,   150,    80,   150,   150,   150,   150,   244,    78,
        78,    78,    78,    78,   232,   231,    78,    78,    78,    78,
        78,    78,    78,    78,    78,   229,   284,   284,   284,   206,
        68,   284,   284,    68,   204,   284,    40,   284,   203,    40,
       284,   284,   284,    78,    78,   201,    10,   200,   284,    10,
       284,   198,   284,   284,   284,   284,   284,   284,   194,   284,
       284,   284,   189,   284,   284,   284,   250,   250,   250,   250,
       250,   250,   250,   250,   250,   250,   188,   250,   250,   187,
        78,    65,    65,    65,    65,    65,    65,    65,    65,    65,
        65,    65,    65,   185,   184,   183,   182,    65,    65,   174,
       174,   174,   174,   174,    65,   158,   174,    65,   250,   250,
       250,   156,   155,   250,   250,   153,   149,   250,   146,   250,
       142,   121,   250,   250,   250,   120,   181,   181,   181,   119,
       250,   181,   250,    69,   250,   250,   250,   250,   250,   250,
        67,   250,   250,   250,    63,   250,   250,   250,   341,   341,
       341,   341,   341,   341,   341,   341,   341,   341,    62,   341,
       341,   180,   180,   180,    55,    54,   180,   148,    53,    50,
       174,    47,    43,   169,   169,   169,   169,   169,    27,    25,
       169,   173,   173,   173,   173,   173,    17,    16,   173,    13,
       341,   341,   341,    12,     8,   341,   341,     7,     1,   341,
         0,   341,     0,     0,   341,     0,   341,   169,   169,     0,
         0,     0,   341,     0,   341,     0,   341,   341,   341,   341,
       341,   341,     0,   341,   341,   341,     0,   341,   341,   341,
       336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
         0,   336,   336,   148,   169,   148,   148,   148,   148,     0,
         0,     0,   173,     0,     0,   168,   168,   168,   168,   168,
         0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   336,   336,   336,     0,     0,   336,   336,     0,
         0,   336,     0,   336,     0,     0,   336,     0,   336,   168,
       168,     0,     0,     0,   336,     0,   336,     0,   336,   336,
       336,   336,   336,   336,     0,   336,   336,   336,     0,   336,
       336,   336,   335,   335,   335,   335,   335,   335,   335,   335,
       335,   335,     0,   335,   335,     0,   168,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   167,   167,   167,
       167,   167,     0,     0,   167,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   335,   335,   335,     0,     0,   335,
       335,     0,     0,   335,     0,   335,     0,     0,   335,     0,
       335,   167,   167,     0,     0,     0,   335,     0,   335,     0,
       335,   335,   335,   335,   335,   335,     0,   335,   335,   335,
         0,   335,   335,   335,   317,   317,   317,   317,   317,   317,
       317,   317,   317,   317,     0,   317,   317,     0,   167,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
       166,   166,   166,   166,     0,     0,   166,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   317,   317,   317,     0,
         0,   317,   317,     0,     0,   317,     0,   317,     0,     0,
       317,     0,   317,   166,   166,     0,     0,     0,   317,     0,
       317,     0,   317,   317,   317,   317,   317,   317,     0,   317,
       317,   317,     0,   317,   317,   317,   313,   313,   313,   313,
       313,   313,   313,   313,   313,   313,     0,   313,   313,     0,
       166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   165,   165,   165,   165,   165,     0,     0,   165,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   313,   313,
       313,     0,     0,   313,   313,     0,     0,   313,     0,   313,
         0,     0,   313,     0,   313,   165,   165,     0,     0,     0,
       313,     0,   313,     0,   313,   313,   313,   313,   313,   313,
         0,   313,   313,   313,     0,   313,   313,   313,   199,   199,
       199,   199,   199,   199,   199,   199,   199,   199,     0,   199,
       199,     0,   165,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   164,   164,   164,   164,   164,
         0,     0,   164,     0,     0,     0,     0,     0,     0,     0,
       199,   199,   199,     0,     0,   199,   199,     0,     0,   199,
         0,   199,     0,     0,   199,     0,   199,     0,     0,   164,
       164,     0,   199,     0,   199,     0,   199,   199,   199,   199,
       199,   199,     0,   199,   199,   199,     0,   199,   199,   199,
       326,   326,   326,   326,   326,   326,     0,   326,   326,   326,
       326,   326,   326,   326,   326,   326,   164,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   326,   326,
       326,     0,     0,     0,   326,   326,     0,     0,     0,     0,
         0,   326,     0,     0,     0,     0,     0,     0,   326,   326,
       326,   326,   326,   302,   302,   302,   302,   302,   302,     0,
       302,   302,   302,   302,   302,   302,   302,   302,   302,     0,
         0,   326,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   302,   302,   302,     0,     0,     0,   302,   302,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   302,
         0,   302,   302,   302,   302,   302,   299,   299,   299,   299,
       299,   299,     0,   299,   299,   299,   299,   299,   299,   299,
       299,   299,     0,     0,   302,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   299,   299,   299,     0,     0,     0,
       299,   299,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   299,     0,   299,   299,   299,   299,   299,   298,
       298,   298,   298,   298,   298,     0,   298,   298,   298,   298,
       298,   298,   298,   298,   298,     0,     0,   299,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   298,   298,   298,
         0,     0,     0,   298,   298,     0,     0,     0,     0,     0,
         0,     0,   298,     0,     0,     0,     0,   298,   298,   298,
       298,   298,   297,   297,   297,   297,   297,   297,     0,   297,
       297,   297,   297,   297,   297,   297,   297,   297,     0,     0,
       298,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       297,   297,   297,     0,     0,     0,   297,   297,     0,     0,
         0,     0,     0,   297,     0,   316,     0,     0,   316,   316,
       297,   297,   297,   297,   297,   293,   293,   293,   293,   293,
       293,     0,   293,   293,   293,   293,   293,   293,   293,   293,
       293,     0,     0,   297,   163,   163,   163,   163,   163,     0,
         0,   163,     0,   293,   293,   293,     0,     0,     0,   293,
       293,   316,   242,   316,     0,   242,   242,     0,     0,     0,
         0,     0,     0,   293,   293,   293,   293,   293,   163,   163,
         0,     0,     0,     0,     0,     0,   316,   316,   293,     0,
       290,   290,   290,   290,   290,   290,   293,   290,   290,   290,
       290,   290,   290,   290,   290,   290,     0,     0,   242,     0,
       242,     0,     0,     0,     0,   163,     0,     0,   290,   290,
       290,     0,     0,     0,   290,   290,     0,     0,     0,     0,
         0,   290,   253,   242,   242,     0,     0,     0,   290,   290,
       290,   290,   290,   253,   253,   253,   253,   253,   253,     0,
       253,   253,   253,   253,   253,   253,   253,   253,   253,     0,
         0,   290,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   253,   253,   253,     0,     0,     0,   253,   253,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   253,   253,   253,   253,   253,   193,   193,   193,   193,
       193,   193,     0,   193,   193,   193,   193,   193,   193,   193,
       193,   193,     0,     0,   253,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   193,   193,   193,     0,     0,     0,
       193,   193,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   193,   193,   193,   193,   193,   193,   160,
       160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
       160,   160,   160,   160,   160,     0,     0,   193,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   160,   160,   160,
         0,     0,     0,   160,   160,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   160,   160,   160,
       160,   160,   154,   154,   154,   154,   154,   154,     0,   154,
       154,   154,   154,   154,   154,   154,   154,   154,     0,     0,
       160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       154,   154,   154,     0,     0,     0,   154,   154,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   154,     0,
       154,   154,   154,   154,   154,   147,   147,   147,   147,   147,
       147,     0,   147,   147,   147,   147,   147,   147,   147,   147,
       147,     0,     0,   154,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   147,   147,   147,     0,     0,     0,   147,
       147,     0,     0,     0,     0,     0,   147,     0,     0,     0,
         0,     0,     0,   147,   147,   147,   147,   147,    61,    61,
        61,    61,    61,    61,     0,    61,    61,    61,    61,    61,
        61,    61,    61,    61,     0,     0,   147,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    61,    61,    61,     0,
         0,     0,    61,    61,     0,     0,     0,     0,     0,    61,
         0,     0,     0,     0,     0,     0,    61,    61,    61,    61,
        61,    20,    20,    20,    20,    20,    20,     0,    20,    20,
        20,    20,    20,    20,    20,    20,    20,     0,     0,    61,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
        20,    20,     0,     0,     0,    20,    20,     0,     0,    20,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
        20,    20,    20,    20,   322,   322,   322,   322,   322,   322,
         0,   322,   322,   322,   322,   322,   322,   322,   322,   322,
         0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   322,   322,   322,     0,     0,     0,   322,   322,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   322,   322,   322,   322,   322,   278,   278,   278,
       278,   278,   278,     0,   278,   278,   278,   278,   278,   278,
       278,   278,   278,     0,     0,   322,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   278,   278,   278,     0,     0,
         0,   278,   278,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   278,   278,   278,   278,   278,
       207,   207,   207,   207,   207,   207,     0,   207,   207,   207,
       207,   207,   207,   207,   207,   207,     0,     0,   278,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   207,   207,
       207,     0,     0,     0,   207,   207,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   207,   207,
       207,   207,   207,   123,   123,   123,   123,   123,   123,     0,
       123,   123,   123,   123,   123,   123,   123,   123,   123,     0,
         0,   207,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   123,   123,   123,     0,     0,     0,   123,   123,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   123,   123,   123,   123,   123,    92,    92,    92,    92,
        92,    92,     0,    92,    92,    92,    92,    92,    92,    92,
        92,    92,     0,     0,   123,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    92,    92,    92,     0,     0,     0,
        92,    92,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    92,    92,    92,    92,    92,    73,
        73,    73,    73,    73,    73,     0,    73,    73,    73,    73,
        73,    73,    73,    73,    73,     0,     0,    92,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    73,    73,    73,
         0,     0,     0,    73,    73,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    73,    73,    73,
        73,    73,    64,    64,    64,    64,    64,    64,     0,    64,
        64,    64,    64,    64,    64,    64,    64,    64,     0,     0,
        73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        64,    64,    64,     0,     0,     0,    64,    64,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        64,    64,    64,    64,    64,    58,    58,    58,    58,    58,
        58,     0,    58,    58,    58,    58,    58,    58,    58,    58,
        58,     0,     0,    64,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    58,    58,    58,     0,     0,     0,    58,
        58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    58,    58,    58,    58,    58,    14,    14,
        14,    14,    14,    14,     0,    14,    14,    14,    14,    14,
        14,    14,    14,    14,     0,     0,    58,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    14,    14,    14,     0,
         0,     0,    14,    14,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    14,    14,    14,    14,
        14,   177,   177,   177,   177,   177,   177,     0,   177,   177,
       177,   177,   177,   177,   177,   177,   177,     0,     0,    14,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   177,
       177,   177,     0,     0,     0,   177,   177,     0,     0,     0,
         0,   162,   162,   162,   162,   162,     0,     0,   162,   177,
       177,     0,   177,   177,   178,   178,   178,   178,   178,   178,
         0,   178,   178,   178,   178,   178,   178,   178,   178,   178,
         0,     0,   177,     0,     0,   162,   162,     0,     0,     0,
         0,     0,   178,   178,   178,     0,     0,     0,   178,   178,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   178,   178,     0,   178,   321,   321,   321,   321,
       321,   321,   162,   321,   321,   321,   321,   321,   321,   321,
       321,   321,     0,     0,     0,   178,    35,     0,     0,    35,
        35,     0,     0,     0,   321,   321,   321,     0,     0,     0,
       321,   321,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   321,   321,   304,   304,   304,   304,
       304,   304,     0,   304,   304,   304,   304,   304,   304,   304,
       304,   304,    35,     0,    35,     0,    34,   321,     0,    34,
        34,     0,     0,     0,   304,   304,   304,     0,     0,     0,
       304,   304,     0,     0,     0,     0,     0,     0,    35,     0,
         0,     0,     0,     0,   304,   304,   227,   227,   227,   227,
       227,   227,     0,   227,   227,   227,   227,   227,   227,   227,
       227,   227,    34,     0,    34,     0,     0,   304,     0,     0,
         0,     0,     0,     0,   227,   227,   227,     0,     0,     0,
       227,   227,     0,     0,     0,     0,     0,     0,    34,     0,
         0,     0,     0,     0,   227,   227,   226,   226,   226,   226,
       226,   226,     0,   226,   226,   226,   226,   226,   226,   226,
       226,   226,     0,     0,     0,     0,     0,   227,     0,     0,
         0,     0,     0,     0,   226,   226,   226,     0,     0,     0,
       226,   226,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   226,   226,   225,   225,   225,   225,
       225,   225,     0,   225,   225,   225,   225,   225,   225,   225,
       225,   225,     0,     0,     0,     0,     0,   226,     0,     0,
         0,     0,     0,     0,   225,   225,   225,     0,     0,     0,
       225,   225,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   225,   225,   224,   224,   224,   224,
       224,   224,     0,   224,   224,   224,   224,   224,   224,   224,
       224,   224,     0,     0,     0,     0,     0,   225,     0,     0,
         0,     0,     0,     0,   224,   224,   224,     0,     0,     0,
       224,   224,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   224,   224,   223,   223,   223,   223,
       223,   223,     0,   223,   223,   223,   223,   223,   223,   223,
       223,   223,     0,     0,     0,     0,     0,   224,     0,     0,
         0,     0,     0,     0,   223,   223,   223,     0,     0,     0,
       223,   223,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   223,   223,   222,   222,   222,   222,
       222,   222,     0,   222,   222,   222,   222,   222,   222,   222,
       222,   222,     0,     0,     0,     0,     0,   223,     0,     0,
         0,     0,     0,     0,   222,   222,   222,     0,     0,     0,
       222,   222,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   222,   222,   221,   221,   221,   221,
       221,   221,     0,   221,   221,   221,   221,   221,   221,   221,
       221,   221,     0,     0,     0,     0,     0,   222,     0,     0,
         0,     0,     0,     0,   221,   221,   221,     0,     0,     0,
       221,   221,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   221,   221,   220,   220,   220,   220,
       220,   220,     0,   220,   220,   220,   220,   220,   220,   220,
       220,   220,     0,     0,     0,     0,     0,   221,     0,     0,
         0,     0,     0,     0,   220,   220,   220,     0,     0,     0,
       220,   220,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   220,   220,   219,   219,   219,   219,
       219,   219,     0,   219,   219,   219,   219,   219,   219,   219,
       219,   219,     0,     0,     0,     0,     0,   220,     0,     0,
         0,     0,     0,     0,   219,   219,   219,     0,     0,     0,
       219,   219,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   219,   219,   218,   218,   218,   218,
       218,   218,     0,   218,   218,   218,   218,   218,   218,   218,
       218,   218,     0,     0,     0,     0,     0,   219,     0,     0,
         0,     0,     0,     0,   218,   218,   218,     0,     0,     0,
       218,   218,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   218,   218,   217,   217,   217,   217,
       217,   217,     0,   217,   217,   217,   217,   217,   217,   217,
       217,   217,     0,     0,     0,     0,     0,   218,     0,     0,
         0,     0,     0,     0,   217,   217,   217,     0,     0,     0,
       217,   217,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   217,   217,   216,   216,   216,   216,
       216,   216,     0,   216,   216,   216,   216,   216,   216,   216,
       216,   216,     0,     0,     0,     0,     0,   217,     0,     0,
         0,     0,     0,     0,   216,   216,   216,     0,     0,     0,
       216,   216,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   216,   216,   179,   179,   179,   179,
       179,   179,     0,   179,   179,   179,   179,   179,   179,   179,
       179,   179,     0,     0,     0,     0,     0,   216,     0,     0,
         0,     0,     0,     0,   179,   179,   179,     0,     0,     0,
       179,   179,    93,    93,    93,    93,    93,    93,    93,    93,
         0,    93,    93,     0,   179,   179,     0,    93,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   179,     0,     0,
         0,     0,    93,    93,    93,     0,     0,    93,    93,     0,
         0,    93,     0,    93,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    93,     0,     0,     0,     0,    93,
         0,     0,     0,     0,     0,    93,    93,    93,    79,    79,
        79,    79,    79,    79,     0,    79,    79,    79,    79,    79,
        79,    79,    79,    79,   334,   334,   334,   334,   334,   334,
       334,   334,     0,   334,   334,     0,    79,    79,    79,     0,
         0,     0,    79,    79,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    79,    79,     0,     0,
         0,     0,     0,     0,   334,   334,   334,     0,     0,   334,
       334,     0,     0,   334,     0,   334,     0,     0,     0,    79,
         0,     0,     0,     0,     0,     0,   334,     0,     0,     0,
         0,   334,     0,     0,     0,     0,     0,   334,   334,   334,
       315,   315,   315,   315,   315,   315,   315,   315,     0,   315,
       315,     0,     0,     0,   314,   314,   314,   314,   314,   314,
       314,   314,     0,   314,   314,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       315,   315,   315,     0,     0,   315,   315,     0,     0,   315,
         0,   315,     0,     0,   314,   314,   314,     0,     0,   314,
       314,     0,   315,   314,     0,   314,     0,   315,     0,     0,
         0,     0,     0,   315,   315,   315,   314,     0,     0,     0,
         0,   314,     0,     0,     0,     0,     0,   314,   314,   314,
       307,   307,   307,   307,   307,   307,   307,   307,     0,   307,
       307,     0,     0,     0,   303,   303,   303,   303,   303,   303,
       303,   303,     0,   303,   303,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       307,   307,   307,     0,     0,   307,   307,     0,     0,   307,
         0,   307,     0,     0,   303,   303,   303,     0,     0,   303,
       303,     0,   307,   303,     0,   303,     0,   307,     0,     0,
         0,     0,     0,   307,   307,   307,   303,     0,     0,     0,
         0,   303,     0,     0,     0,     0,     0,   303,   303,   303,
       282,   282,   282,   282,   282,     0,     0,   282,   282,   282,
       282,   282,   282,   282,   282,   282,   272,   272,   272,   272,
       272,   272,   272,   272,     0,   272,   272,     0,   282,   282,
       282,     0,     0,     0,   282,   282,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   282,   282,
         0,     0,     0,     0,     0,     0,   272,   272,   272,     0,
         0,   272,   272,     0,     0,   272,     0,   272,     0,     0,
         0,   282,     0,     0,     0,     0,     0,     0,   272,     0,
         0,     0,     0,   272,     0,     0,     0,     0,     0,   272,
       272,   272,   269,   269,   269,   269,   269,   269,   269,   269,
         0,   269,   269,     0,     0,     0,   264,   264,   264,   264,
       264,   264,   264,   264,     0,   264,   264,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   269,   269,   269,     0,     0,   269,   269,     0,
         0,   269,     0,   269,     0,     0,   264,   264,   264,     0,
         0,   264,   264,     0,   269,   264,     0,   264,     0,   269,
         0,     0,     0,     0,     0,   269,   269,   269,   264,     0,
         0,     0,     0,   264,     0,     0,     0,     0,     0,   264,
       264,   264,   263,   263,   263,   263,   263,   263,   263,   263,
         0,   263,   263,     0,     0,     0,   262,   262,   262,   262,
       262,   262,   262,   262,     0,   262,   262,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   263,   263,   263,     0,     0,   263,   263,     0,
         0,   263,     0,   263,     0,     0,   262,   262,   262,     0,
         0,   262,   262,     0,   263,   262,     0,   262,     0,   263,
         0,     0,     0,     0,     0,   263,   263,   263,   262,     0,
         0,     0,     0,   262,     0,     0,     0,     0,     0,   262,
       262,   262,   258,   258,   258,   258,   258,   258,   258,   258,
         0,   258,   258,     0,     0,     0,   257,   257,   257,   257,
       257,   257,   257,   257,     0,   257,   257,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   258,   258,   258,     0,     0,   258,   258,     0,
         0,   258,     0,   258,     0,     0,   257,   257,   257,     0,
         0,   257,   257,     0,   258,   257,     0,   257,     0,   258,
         0,     0,     0,     0,     0,   258,   258,   258,   257,     0,
         0,     0,     0,   257,     0,     0,     0,     0,     0,   257,
       257,   257,   255,   255,   255,   255,   255,   255,   255,   255,
         0,   255,   255,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   255,   255,   255,     0,     0,   255,   255,     0,
         0,   255,     0,   255,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   255,     0,     0,     0,     0,   255,
         0,     0,     0,     0,     0,   255,   255,   255,   246,   246,
       246,   246,   246,     0,     0,   246,   246,   246,   246,   246,
       246,   246,   246,   246,   245,   245,   245,   245,   245,   245,
       245,   245,     0,   245,   245,     0,   246,   246,   246,     0,
         0,     0,   246,   246,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   246,   246,     0,     0,
         0,     0,     0,     0,   245,   245,   245,     0,     0,   245,
       245,     0,     0,   245,     0,   245,     0,     0,     0,   246,
         0,     0,     0,     0,     0,     0,   245,     0,     0,     0,
         0,   245,     0,     0,     0,     0,     0,   245,   245,   245,
       243,   243,   243,   243,   243,   243,   243,   243,     0,   243,
       243,     0,     0,     0,   228,   228,   228,   228,   228,   228,
       228,   228,     0,   228,   228,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       243,   243,   243,     0,     0,   243,   243,     0,     0,   243,
         0,   243,     0,     0,   228,   228,   228,     0,     0,   228,
       228,     0,   243,   228,     0,   228,     0,   243,     0,     0,
         0,     0,     0,   243,   243,   243,   228,     0,     0,     0,
         0,   228,     0,     0,     0,     0,     0,   228,   228,   228,
       202,   202,   202,   202,   202,   202,   202,   202,     0,   202,
       202,     0,     0,     0,   196,   196,   196,   196,   196,   196,
       196,   196,     0,   196,   196,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       202,   202,   202,     0,     0,   202,   202,     0,     0,   202,
         0,   202,     0,     0,   196,   196,   196,     0,     0,   196,
       196,     0,   202,   196,     0,   196,     0,   202,     0,     0,
         0,     0,     0,   202,   202,   202,   196,     0,     0,     0,
         0,   196,     0,     0,     0,     0,     0,   196,   196,   196,
       195,   195,   195,   195,   195,   195,   195,   195,     0,   195,
       195,     0,     0,     0,   161,   161,   161,   161,   161,   161,
       161,   161,     0,   161,   161,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       195,   195,   195,     0,     0,   195,   195,     0,     0,   195,
         0,   195,     0,     0,   161,   161,   161,     0,     0,   161,
       161,     0,   195,   161,     0,   161,     0,   195,     0,     0,
         0,     0,     0,   195,   195,   195,   161,     0,     0,     0,
         0,   161,     0,     0,     0,     0,     0,   161,   161,   161,
       159,   159,   159,   159,   159,   159,   159,   159,     0,   159,
       159,     0,     0,     0,   145,   145,   145,   145,   145,   145,
       145,   145,     0,   145,   145,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       159,   159,   159,     0,     0,   159,   159,     0,     0,   159,
         0,   159,     0,     0,   145,   145,   145,     0,     0,   145,
       145,     0,   159,   145,     0,   145,     0,   159,     0,     0,
         0,     0,     0,   159,   159,   159,   145,     0,     0,     0,
         0,   145,     0,     0,     0,     0,     0,   145,   145,   145,
       143,   143,   143,   143,   143,   143,   143,   143,     0,   143,
       143,     0,     0,     0,   139,   139,   139,   139,   139,   139,
       139,   139,     0,   139,   139,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       143,   143,   143,     0,     0,   143,   143,     0,     0,   143,
         0,   143,     0,     0,   139,   139,   139,     0,     0,   139,
       139,     0,   143,   139,     0,   139,     0,   143,     0,     0,
         0,     0,     0,   143,   143,   143,   139,     0,     0,     0,
         0,   139,     0,     0,     0,     0,     0,   139,   139,   139,
       138,   138,   138,   138,   138,   138,   138,   138,     0,   138,
       138,     0,     0,     0,   137,   137,   137,   137,   137,   137,
       137,   137,     0,   137,   137,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       138,   138,   138,     0,     0,   138,   138,     0,     0,   138,
         0,   138,     0,     0,   137,   137,   137,     0,     0,   137,
       137,     0,   138,   137,     0,   137,     0,   138,     0,     0,
         0,     0,     0,   138,   138,   138,   137,     0,     0,     0,
         0,   137,     0,     0,     0,     0,     0,   137,   137,   137,
       136,   136,   136,   136,   136,   136,   136,   136,     0,   136,
       136,     0,     0,     0,   135,   135,   135,   135,   135,   135,
       135,   135,     0,   135,   135,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       136,   136,   136,     0,     0,   136,   136,     0,     0,   136,
         0,   136,     0,     0,   135,   135,   135,     0,     0,   135,
       135,     0,   136,   135,     0,   135,     0,   136,     0,     0,
         0,     0,     0,   136,   136,   136,   135,     0,     0,     0,
         0,   135,     0,     0,     0,     0,     0,   135,   135,   135,
       134,   134,   134,   134,   134,   134,   134,   134,     0,   134,
       134,     0,     0,     0,   133,   133,   133,   133,   133,   133,
       133,   133,     0,   133,   133,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       134,   134,   134,     0,     0,   134,   134,     0,     0,   134,
         0,   134,     0,     0,   133,   133,   133,     0,     0,   133,
       133,     0,   134,   133,     0,   133,     0,   134,     0,     0,
         0,     0,     0,   134,   134,   134,   133,     0,     0,     0,
         0,   133,     0,     0,     0,     0,     0,   133,   133,   133,
       132,   132,   132,   132,   132,   132,   132,   132,     0,   132,
       132,     0,     0,     0,   131,   131,   131,   131,   131,   131,
       131,   131,     0,   131,   131,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       132,   132,   132,     0,     0,   132,   132,     0,     0,   132,
         0,   132,     0,     0,   131,   131,   131,     0,     0,   131,
       131,     0,   132,   131,     0,   131,     0,   132,     0,     0,
         0,     0,     0,   132,   132,   132,   131,     0,     0,     0,
         0,   131,     0,     0,     0,     0,     0,   131,   131,   131,
       130,   130,   130,   130,   130,   130,   130,   130,     0,   130,
       130,     0,     0,     0,   129,   129,   129,   129,   129,   129,
       129,   129,     0,   129,   129,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       130,   130,   130,     0,     0,   130,   130,     0,     0,   130,
         0,   130,     0,     0,   129,   129,   129,     0,     0,   129,
       129,     0,   130,   129,     0,   129,     0,   130,     0,     0,
         0,     0,     0,   130,   130,   130,   129,     0,     0,     0,
         0,   129,     0,     0,     0,     0,     0,   129,   129,   129,
       128,   128,   128,   128,   128,   128,   128,   128,     0,   128,
       128,     0,     0,     0,   127,   127,   127,   127,   127,   127,
       127,   127,     0,   127,   127,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       128,   128,   128,     0,     0,   128,   128,     0,     0,   128,
         0,   128,     0,     0,   127,   127,   127,     0,     0,   127,
       127,     0,   128,   127,     0,   127,     0,   128,     0,     0,
         0,     0,     0,   128,   128,   128,   127,     0,     0,     0,
         0,   127,     0,     0,     0,     0,     0,   127,   127,   127,
       118,   118,   118,   118,   118,   118,   118,   118,     0,   118,
       118,     0,     0,     0,   117,   117,   117,   117,   117,   117,
       117,   117,     0,   117,   117,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       118,   118,   118,     0,     0,   118,   118,     0,     0,   118,
         0,   118,     0,     0,   117,   117,   117,     0,     0,   117,
       117,     0,   118,   117,     0,   117,     0,   118,     0,     0,
         0,     0,     0,   118,   118,   118,   117,     0,     0,     0,
         0,   117,     0,     0,     0,     0,     0,   117,   117,   117,
       116,   116,   116,   116,   116,   116,   116,   116,     0,   116,
       116,     0,     0,     0,   115,   115,   115,   115,   115,   115,
       115,   115,     0,   115,   115,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       116,   116,   116,     0,     0,   116,   116,     0,     0,   116,
         0,   116,     0,     0,   115,   115,   115,     0,     0,   115,
       115,     0,   116,   115,     0,   115,     0,   116,     0,     0,
         0,     0,     0,   116,   116,   116,   115,     0,     0,     0,
         0,   115,     0,     0,     0,     0,     0,   115,   115,   115,
       114,   114,   114,   114,   114,   114,   114,   114,     0,   114,
       114,     0,     0,     0,   113,   113,   113,   113,   113,   113,
       113,   113,     0,   113,   113,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       114,   114,   114,     0,     0,   114,   114,     0,     0,   114,
         0,   114,     0,     0,   113,   113,   113,     0,     0,   113,
       113,     0,   114,   113,     0,   113,     0,   114,     0,     0,
         0,     0,     0,   114,   114,   114,   113,     0,     0,     0,
         0,   113,     0,     0,     0,     0,     0,   113,   113,   113,
       112,   112,   112,   112,   112,   112,   112,   112,     0,   112,
       112,     0,     0,     0,   111,   111,   111,   111,   111,   111,
       111,   111,     0,   111,   111,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       112,   112,   112,     0,     0,   112,   112,     0,     0,   112,
         0,   112,     0,     0,   111,   111,   111,     0,     0,   111,
       111,     0,   112,   111,     0,   111,     0,   112,     0,     0,
         0,     0,     0,   112,   112,   112,   111,     0,     0,     0,
         0,   111,     0,     0,     0,     0,     0,   111,   111,   111,
       110,   110,   110,   110,   110,   110,   110,   110,     0,   110,
       110,     0,     0,     0,   109,   109,   109,   109,   109,   109,
       109,   109,     0,   109,   109,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       110,   110,   110,     0,     0,   110,   110,     0,     0,   110,
         0,   110,     0,     0,   109,   109,   109,     0,     0,   109,
       109,     0,   110,   109,     0,   109,     0,   110,     0,     0,
         0,     0,     0,   110,   110,   110,   109,     0,     0,     0,
         0,   109,     0,     0,     0,     0,     0,   109,   109,   109,
       108,   108,   108,   108,   108,   108,   108,   108,     0,   108,
       108,     0,     0,     0,   107,   107,   107,   107,   107,   107,
       107,   107,     0,   107,   107,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       108,   108,   108,     0,     0,   108,   108,     0,     0,   108,
         0,   108,     0,     0,   107,   107,   107,     0,     0,   107,
       107,     0,   108,   107,     0,   107,     0,   108,     0,     0,
         0,     0,     0,   108,   108,   108,   107,     0,     0,     0,
         0,   107,     0,     0,     0,     0,     0,   107,   107,   107,
       106,   106,   106,   106,   106,   106,   106,   106,     0,   106,
       106,     0,     0,     0,   105,   105,   105,   105,   105,   105,
       105,   105,     0,   105,   105,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       106,   106,   106,     0,     0,   106,   106,     0,     0,   106,
         0,   106,     0,     0,   105,   105,   105,     0,     0,   105,
       105,     0,   106,   105,     0,   105,     0,   106,     0,     0,
         0,     0,     0,   106,   106,   106,   105,     0,     0,     0,
         0,   105,     0,     0,     0,     0,     0,   105,   105,   105,
       104,   104,   104,   104,   104,   104,   104,   104,     0,   104,
       104,     0,     0,     0,   103,   103,   103,   103,   103,   103,
       103,   103,     0,   103,   103,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       104,   104,   104,     0,     0,   104,   104,     0,     0,   104,
         0,   104,     0,     0,   103,   103,   103,     0,     0,   103,
       103,     0,   104,   103,     0,   103,     0,   104,     0,     0,
         0,     0,     0,   104,   104,   104,   103,     0,     0,     0,
         0,   103,     0,     0,     0,     0,     0,   103,   103,   103,
       102,   102,   102,   102,   102,   102,   102,   102,     0,   102,
       102,     0,     0,     0,   101,   101,   101,   101,   101,   101,
       101,   101,     0,   101,   101,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       102,   102,   102,     0,     0,   102,   102,     0,     0,   102,
         0,   102,     0,     0,   101,   101,   101,     0,     0,   101,
       101,     0,   102,   101,     0,   101,     0,   102,     0,     0,
         0,     0,     0,   102,   102,   102,   101,     0,     0,     0,
         0,   101,     0,     0,     0,     0,     0,   101,   101,   101,
       100,   100,   100,   100,   100,   100,   100,   100,     0,   100,
       100,     0,     0,     0,    99,    99,    99,    99,    99,    99,
        99,    99,     0,    99,    99,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       100,   100,   100,     0,     0,   100,   100,     0,     0,   100,
         0,   100,     0,     0,    99,    99,    99,     0,     0,    99,
        99,     0,   100,    99,     0,    99,     0,   100,     0,     0,
         0,     0,     0,   100,   100,   100,    99,     0,     0,     0,
         0,    99,     0,     0,     0,     0,     0,    99,    99,    99,
        98,    98,    98,    98,    98,    98,    98,    98,     0,    98,
        98,     0,     0,     0,    97,    97,    97,    97,    97,    97,
        97,    97,     0,    97,    97,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        98,    98,    98,     0,     0,    98,    98,     0,     0,    98,
         0,    98,     0,     0,    97,    97,    97,     0,     0,    97,
        97,     0,    98,    97,     0,    97,     0,    98,     0,     0,
         0,     0,     0,    98,    98,    98,    97,     0,     0,     0,
         0,    97,     0,     0,     0,     0,     0,    97,    97,    97,
        96,    96,    96,    96,    96,    96,    96,    96,     0,    96,
        96,     0,     0,     0,    95,    95,    95,    95,    95,    95,
        95,    95,     0,    95,    95,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        96,    96,    96,     0,     0,    96,    96,     0,     0,    96,
         0,    96,     0,     0,    95,    95,    95,     0,     0,    95,
        95,     0,    96,    95,     0,    95,     0,    96,     0,     0,
         0,     0,     0,    96,    96,    96,    95,     0,     0,     0,
         0,    95,     0,     0,     0,     0,     0,    95,    95,    95,
        94,    94,    94,    94,    94,    94,    94,    94,     0,    94,
        94,     0,     0,     0,    91,    91,    91,    91,    91,    91,
        91,    91,     0,    91,    91,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        94,    94,    94,     0,     0,    94,    94,     0,     0,    94,
         0,    94,     0,     0,    91,    91,    91,     0,     0,    91,
        91,     0,    94,    91,     0,    91,     0,    94,     0,     0,
         0,     0,     0,    94,    94,    94,    91,     0,     0,     0,
         0,    91,     0,     0,     0,     0,     0,    91,    91,    91,
        89,    89,    89,    89,    89,    89,    89,    89,     0,    89,
        89,     0,     0,     0,    88,    88,    88,    88,    88,    88,
        88,    88,     0,    88,    88,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        89,    89,    89,     0,     0,    89,    89,     0,     0,    89,
         0,    89,     0,     0,    88,    88,    88,     0,     0,    88,
        88,     0,    89,    88,     0,    88,     0,    89,     0,     0,
         0,     0,     0,    89,    89,    89,    88,     0,     0,     0,
         0,    88,     0,     0,     0,     0,     0,    88,    88,    88,
        84,    84,    84,    84,    84,    84,    84,    84,     0,    84,
        84,     0,     0,     0,    71,    71,    71,    71,    71,    71,
        71,    71,     0,    71,    71,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        84,    84,    84,     0,     0,    84,    84,     0,     0,    84,
         0,    84,     0,     0,    71,    71,    71,     0,     0,    71,
        71,     0,    84,    71,     0,    71,     0,    84,     0,     0,
         0,     0,     0,    84,    84,    84,    71,     0,     0,     0,
         0,    71,     0,     0,     0,     0,     0,    71,    71,    71,
        70,    70,    70,    70,    70,    70,    70,    70,     0,    70,
        70,     0,     0,     0,    60,    60,    60,    60,    60,    60,
        60,    60,     0,    60,    60,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        70,    70,    70,     0,     0,    70,    70,     0,     0,    70,
         0,    70,     0,     0,    60,    60,    60,     0,     0,    60,
        60,     0,    70,    60,     0,    60,     0,    70,     0,     0,
         0,     0,     0,    70,    70,    70,    60,     0,     0,     0,
         0,    60,     0,     0,     0,     0,     0,    60,    60,    60,
        59,    59,    59,    59,    59,    59,    59,    59,     0,    59,
        59,     0,     0,     0,    52,    52,    52,    52,    52,    52,
        52,    52,     0,    52,    52,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        59,    59,    59,     0,     0,    59,    59,     0,     0,    59,
         0,    59,     0,     0,    52,    52,    52,     0,     0,    52,
        52,     0,    59,    52,     0,    52,     0,    59,     0,     0,
         0,     0,     0,    59,    59,    59,    52,     0,     0,     0,
         0,    52,     0,     0,     0,     0,     0,    52,    52,    52,
        33,    33,    33,    33,    33,    33,    33,    33,     0,    33,
        33,     0,     0,     0,    32,    32,    32,    32,    32,    32,
        32,    32,     0,    32,    32,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        33,    33,    33,     0,     0,    33,    33,     0,     0,    33,
         0,    33,     0,     0,    32,    32,    32,     0,     0,    32,
        32,     0,    33,    32,     0,    32,     0,    33,     0,     0,
         0,     0,     0,    33,    33,    33,    32,     0,     0,     0,
         0,    32,     0,     0,     0,     0,     0,    32,    32,    32,
        31,    31,    31,    31,    31,    31,    31,    31,     0,    31,
        31,     0,     0,     0,    30,    30,    30,    30,    30,    30,
        30,    30,     0,    30,    30,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        31,    31,    31,     0,     0,    31,    31,     0,     0,    31,
         0,    31,     0,     0,    30,    30,    30,     0,     0,    30,
        30,     0,    31,    30,     0,    30,     0,    31,     0,     0,
         0,     0,     0,    31,    31,    31,    30,     0,     0,     0,
         0,    30,     0,     0,     0,     0,     0,    30,    30,    30,
        29,    29,    29,    29,    29,    29,    29,    29,     0,    29,
        29,     0,     0,     0,    26,    26,    26,    26,    26,    26,
        26,    26,     0,    26,    26,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        29,    29,    29,     0,     0,    29,    29,     0,     0,    29,
         0,    29,     0,     0,    26,    26,    26,     0,     0,    26,
        26,     0,    29,    26,     0,    26,     0,    29,     0,     0,
         0,     0,     0,    29,    29,    29,    26,     0,     0,     0,
         0,    26,     0,     0,     0,     0,     0,    26,    26,    26,
        23,    23,    23,    23,    23,    23,    23,    23,     0,    23,
        23,     0,     0,     0,    21,    21,    21,    21,    21,    21,
        21,    21,     0,    21,    21,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        23,    23,    23,     0,     0,    23,    23,     0,     0,    23,
         0,    23,     0,     0,    21,    21,    21,     0,     0,    21,
        21,     0,    23,    21,     0,    21,     0,    23,     0,     0,
         0,     0,     0,    23,    23,    23,    21,     0,     0,     0,
         0,    21,     0,     0,     0,     0,     0,    21,    21,    21,
       176,   176,   176,   176,   176,     0,     0,   176,   176,   176,
       176,   176,   176,   176,   176,   176,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   176,   176,
       176,     0,     0,     0,   176,   176,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   176,   175,
       175,   175,   175,   175,     0,     0,   175,   175,   175,   175,
       175,   175,   175,   175,   175,     0,     0,     0,     0,     0,
         0,   176,     0,     0,     0,     0,     0,   175,   175,   175,
         0,     0,     0,   175,   175,     0,     0,    77,    77,    77,
        77,    77,     0,     0,    77,    77,    77,    77,    77,    77,
        77,    77,    77,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    77,    77,    77,     0,     0,
       175,    77,    77,     0,     0,   171,   171,   171,   171,   171,
         0,     0,   171,   171,   171,   171,   171,   171,   171,   171,
       171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   171,     0,   171,     0,     0,    77,   171,
       171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   171,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         3,    -1,     1,     0,     2,     4,     5,    -1,    -1,    -1,
        -1,     9,    -1,    -1,    35,    36,    -1,   173,   176,   177,
       179,    -1,    50,   178,     6,    -1,    -1,    -1,    11,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   127,   130,   132,    56,
       157,   143,   144,   145,   146,   149,   153,    -1,    59,    -1,
        -1,    53,    -1,    -1,   134,   135,   137,   138,    69,   175,
        -1,    -1,    -1,    73,    75,    44,    45,    54,    -1,    -1,
       178,    -1,     8,    10,     7,   118,   119,   120,   121,   122,
       123,    54,   124,   163,    72,   163,   150,   154,    72,    -1,
        61,   178,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
        -1,    -1,   174,   180,    49,    51,   162,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       125,   126,    55,    68,    62,   178,    -1,    -1,    -1,    -1,
        -1,   159,   159,    -1,    -1,    -1,    27,    29,    -1,   178,
        -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
       100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
       110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
       136,    12,    14,    -1,    16,    -1,    -1,    19,    -1,    -1,
        -1,    -1,    68,    37,    37,    33,    -1,    74,   158,   160,
       161,   164,   165,   166,   167,   170,    78,    79,    80,    81,
        82,    83,    84,    85,    86,    87,    88,    89,    72,    -1,
        -1,    -1,    51,   117,   128,    70,   147,    -1,    -1,    71,
        60,    52,    -1,   178,    -1,    -1,    91,   139,    12,    -1,
        -1,    15,    32,    -1,    -1,    -1,    -1,    40,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    57,    63,    65,    -1,
        67,    -1,    -1,   129,   148,   151,   155,    41,    43,    28,
        -1,    31,    90,    -1,    -1,    -1,   142,    13,    17,    18,
        -1,    -1,    -1,    -1,    24,    25,    26,    -1,    -1,    -1,
        58,    64,    -1,    -1,    77,   152,   156,    -1,    30,    12,
       133,   140,    -1,    -1,    -1,    40,    -1,    -1,   168,   171,
        66,    76,    42,    -1,   141,    20,    -1,    -1,    -1,    38,
       169,   172,   131,    -1,    40,    -1,    -1,    21,    -1,    23,
        39,    -1,    22,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
        28,   288,    90,   194,   270,   142,   197,   285,   267,   193,
        47,    68,    40,    65,    67,    39,    28,   261,   260,   194,
       126,    38,   197,   126,    66,   193,    47,    68,    40,    65,
        67,    39,    28,    37,   190,   194,    72,    38,   197,   331,
        66,   193,    47,    68,    40,    65,    67,    39,   330,    37,
       187,    55,    56,    38,     4,   323,    66,   306,     5,    10,
        11,   194,   305,   301,   197,    37,   284,   193,    47,    68,
        40,    65,    67,    39,    68,    22,    82,    81,    39,    38,
       283,   274,    66,   342,   273,     6,   194,   264,   208,   197,
       210,    37,   193,    47,    68,    40,    65,    67,    39,   340,
       263,   208,   194,   210,    38,   197,   250,    66,   193,    47,
        68,    40,    65,    67,    39,   339,    37,   238,   194,   237,
        38,   197,   230,    66,   193,    47,    68,    40,    65,    67,
        39,   329,    37,   152,   194,   151,    38,   197,   150,    66,
       193,    47,    68,    40,    65,    67,    39,   325,    37,   148,
       194,    87,    38,   197,    86,    66,   193,    47,    68,    40,
        65,    67,    39,   256,    37,    85,   194,    83,    38,   197,
        -1,    66,   193,    47,    68,    40,    65,    67,    39,    -1,
        37,   120,    55,    56,    38,     1,     2,    66,   160,    47,
        68,    40,    65,    67,    39,    -1,    37,   328,   156,    -1,
        38,    -1,    -1,    66,    -1,    -1,    -1,    68,    22,   157,
        81,    39,    37,   338,   277,   278,    47,    68,    40,    65,
        67,    39,   279,    -1,    -1,    -1,    -1,    38,    -1,    -1,
        66,    68,    22,   157,    81,    39,    -1,    -1,    -1,    37,
       327,   277,   278,    47,    68,    40,    65,    67,    39,    68,
        22,    80,    81,    39,    38,    -1,    -1,    66,   326,    47,
        68,    40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,
        38,    -1,    -1,    66,   322,    47,    68,    40,    65,    67,
        39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,
       321,    47,    68,    40,    65,    67,    39,    -1,    37,    -1,
        -1,    -1,    38,    -1,    -1,    66,   304,    47,    68,    40,
        65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,
        -1,    66,   302,    47,    68,    40,    65,    67,    39,    -1,
        37,    -1,    -1,    -1,    38,    -1,    -1,    66,   299,    47,
        68,    40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,
        38,    -1,    -1,    66,   298,    47,    68,    40,    65,    67,
        39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,
       297,    47,    68,    40,    65,    67,    39,    -1,    37,    -1,
        -1,    -1,    38,    -1,    -1,    66,   293,    47,    68,    40,
        65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,
        -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        37,   292,   277,   278,    47,    68,    40,    65,    67,    39,
        -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    66,   290,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   282,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,    20,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,    64,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
       265,    63,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    37,   280,    17,    18,    19,    58,    47,    68,    40,
        65,    67,    39,    -1,    -1,    -1,    -1,   259,    38,    -1,
        -1,    66,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
        37,    14,    47,    68,    40,    65,    67,    39,    -1,    -1,
        -1,    -1,    -1,    38,    -1,    -1,    66,   253,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   246,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,    20,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,    20,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
       244,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,    58,
        47,    68,    40,    65,    67,    39,   231,    17,    18,    19,
       229,    38,    -1,    -1,    66,   227,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   226,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   225,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   224,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   223,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   222,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   221,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   220,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   219,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   218,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   217,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   216,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   207,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   186,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   185,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   184,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   183,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   182,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   181,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   180,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   179,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   178,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   177,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   176,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   175,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   174,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   173,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   172,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   171,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   170,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   169,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   168,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   167,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,   166,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   165,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,   164,    47,    68,    40,    65,
        67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,
        66,   163,    47,    68,    40,    65,    67,    39,    -1,    37,
        -1,    -1,    -1,    38,    -1,    -1,    66,   162,    47,    68,
        40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,
        -1,    -1,    66,    20,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,   154,
        47,    68,    40,    65,    67,    39,    -1,    37,    -1,    -1,
        -1,    38,    -1,    -1,    66,    -1,    64,    47,    68,    40,
        65,    67,    39,    37,   155,    17,    18,    19,    38,   153,
        63,    66,    64,    47,    68,    40,    65,    67,    39,    -1,
        37,    -1,    -1,    -1,    38,   149,    63,    66,   147,    47,
        68,    40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,
        38,    -1,    -1,    66,    20,    47,    68,    40,    65,    67,
        39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,
       123,    47,    68,    40,    65,    67,    39,    -1,    37,    -1,
        -1,    -1,    38,    -1,    -1,    66,    -1,    20,    47,    68,
        40,    65,    67,    39,    37,   146,    17,    18,    19,    38,
        -1,    -1,    66,    92,    47,    68,    40,    65,    67,    39,
        -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,    -1,
        79,    47,    68,    40,    65,    67,    39,    37,    -1,    -1,
        -1,   122,    38,    -1,    -1,    66,    78,    47,    68,    40,
        65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,
        -1,    66,    77,    47,    68,    40,    65,    67,    39,    -1,
        37,    -1,    -1,    -1,    38,    -1,    -1,    66,    76,    47,
        68,    40,    65,    67,    39,    -1,    37,    -1,    -1,    -1,
        38,    -1,    -1,    66,    75,    47,    68,    40,    65,    67,
        39,    -1,    37,    -1,    -1,    -1,    38,    -1,    -1,    66,
        73,    47,    68,    40,    65,    67,    39,    -1,    37,    -1,
        -1,    -1,    38,    -1,    -1,    66,    20,    47,    68,    40,
        65,    67,    39,    -1,    37,    -1,    -1,    -1,    38,    -1,
        -1,    66,    61,    47,    68,    40,    65,    67,    39,    -1,
        37,    -1,    -1,    -1,    38,    -1,    -1,    66,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    37,    62,    17,    18,
        19,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
       184,   -61,    51,   -61,   -61,   -61,   -61,    55,   -61,   -61,
       -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,  1496,   -61,  1480,   -61,    31,  1464,   -61,   -61,  1448,
      1432,  1416,  1400,  1384,   231,    56,   135,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,   124,   111,   105,   -61,   -61,   -20,
       -61,   -61,  1367,   -61,   146,   -61,   -61,   -61,   -61,  1351,
      1334,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -18,   -61,
      1318,  1302,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,    98,  1286,    87,    91,    86,  1270,  1253,
       -61,  1237,   -61,   172,  1221,  1205,  1189,  1173,  1157,  1141,
      1125,  1109,  1093,  1077,  1061,  1045,  1029,  1013,   997,   981,
       965,   949,   933,   917,   901,   885,   869,   853,   837,    15,
       -61,    -3,   -61,   -61,   -61,   -61,   -61,   821,   805,   789,
       773,   757,   741,   725,   709,   693,   677,   661,   645,   629,
       -61,   -61,   -61,   613,    98,   579,   -61,   -61,   -29,   -61,
       -32,    70,    68,   -61,   -61,   -61,   -61,   -61,   -61,   563,
       -61,   547,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,   100,   -61,   -61,   -61,   531,   515,   -61,   -61,   156,
       -61,   -61,   490,     6,     5,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,    47,    32,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   461,   -61,
       -18,   -61,   -61,   -61,    51,   -61,    39,    51,    38,   -61,
       -61,   -61,   213,   445,   -61,   429,   -61,    42,    60,   -32,
        25,   -61,   -61,    -9,   -61,   413,   -61,   397,   370,   -61,
       -61,   -61,   354,   338,   322,   -61,   -61,    38,   -61,   306,
       -61,   -61,   290,   -61,   -61,    17,     9,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,     9,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   274,   -61,   -61,   -61,   258,   -61,    49,
       -61,   -61,   -61,   140,   242,   226,   189,   124,    -6,   -17,
       -61,   -61,   -61,    -7,   -61,   -61,   -61,   -61,   -61,   -61,
       -61,   -61,   -61,   -61,   199,   108,    92,   -61,   -61,   -61,
       -61,    76,   -61,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     1,     2,     0,     1,     1,     3,     4,     3,     1,
         3,     2,     0,     3,     1,     2,     1,     3,     3,     1,
         5,     7,     9,     7,     3,     3,     3,     1,     3,     1,
         4,     3,     2,     1,     3,     1,     1,     0,     5,     7,
         0,     1,     3,     1,     1,     1,     1,     3,     1,     3,
         1,     3,     4,     1,     1,     2,     1,     4,     5,     1,
         4,     2,     0,     0,     4,     1,     3,     1,     0,     1,
         4,     4,     0,     1,     3,     1,     6,     5,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         5,     4,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     0,     0,     5,
         1,     8,     1,     8,     0,     1,     3,     1,     1,     0,
         4,     3,     1,     1,     1,     1,     0,     0,     5,     0,
         0,     0,     6,     0,     0,     0,     6,     1,     2,     0,
         1,     1,     2,     0,     1,     1,     1,     0,     0,     5,
         0,     0,     5,     1,     3,     2,     1,     1,     0,     1,
         3,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     3,     4,     4,
         5,     6,     6,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     8,     8,     9,
         9,     9,    10,    10,    11,    11,    12,    12,    13,    13,
        14,    14,    15,    15,    16,    16,    17,    17,    18,    18,
        18,    19,    19,    19,    20,    20,    21,    21,    21,    22,
        22,    22,    24,    25,    23,    26,    26,    26,    27,    27,
        28,    28,    29,    29,    30,    30,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    32,    33,    31,
        31,    31,    31,    34,    35,    35,    36,    36,    37,    38,
        38,    39,    39,    40,    40,    40,    41,    42,    40,    43,
        44,    45,    40,    46,    47,    48,    40,    40,    49,    49,
        50,    50,    51,    51,    52,    52,    52,    53,    54,    52,
        55,    56,    52,    57,    58,    58,    58,    59,    59,    60,
        60,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",             "ERROR",       "INLINE_HTML",
              "ECHO_TAG",              "NAME",           "DECIMAL",
                   "INT",            "STRING",      "DOUBLE_QUOTE",
            "BACK_QUOTE",            "DOLLAR",          "VARIABLE",
         "HALT_COMPILER",              "PLUS",             "MINUS",
                 "TIMES",            "DIVIDE",               "POW",
              "QUESTION",             "COLON",           "PERCENT",
                    "GT",                "LT",              "GTOE",
                  "LTOE",               "EQU",         "IDENTICAL",
                   "NEQ",        "NIDENTICAL",            "ASSIGN",
           "PLUS_ASSIGN",      "MINUS_ASSIGN",      "TIMES_ASSIGN",
            "POW_ASSIGN",     "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",
         "BIT_OR_ASSIGN",    "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN",
     "LEFT_SHIFT_ASSIGN",        "MOD_ASSIGN",           "BIT_AND",
                "BIT_OR",           "BIT_XOR",           "BIT_NOT",
                   "INC",               "DEC",        "LEFT_SHIFT",
           "RIGHT_SHIFT",    "HEREDOC_HEADER",     "NOWDOC_HEADER",
                 "ARROW",    "PROPERTY_ARROW",               "BRA",
                   "KET",              "CBRA",              "CKET",
                 "COMMA",              "BBRA",              "BKET",
                   "EOL",               "AND",                "OR",
            "LOGICAL_OR",       "LOGICAL_AND",       "LOGICAL_XOR",
                   "NOT",             "CONST",                "IF",
                  "ELSE",              "ECHO",             "PRINT",
                 "WHILE",                "DO",               "FOR",
               "FOREACH",                "AS",          "FUNCTION",
                  "LIST",             "ARRAY",               "USE",
                 "BREAK",          "CONTINUE",            "RETURN",
                   "DOT",       "ANY_CONTENT", "HEREDOC_END_LABEL",
    "VARIABLE_IN_STRING","PROPERTY_IN_STRING",  "OFFSET_IN_STRING",
      "OPEN_CURLY_BRACE",    "END_OF_HEREDOC",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,                null,
                   "<?=",                null,                null,
                    null,                null,                "\"",
                     "`",                 "$",                null,
       "__halt_compiler",                 "+",                 "-",
                     "*",                 "/",                "**",
                     "?",                 ":",                 "%",
                     ">",                 "<",                ">=",
                    "<=",                "==",               "===",
                    "!=",               "!==",                 "=",
                    "+=",                "-=",                "*=",
                   "**=",                "/=",                "&=",
                    "|=",                "^=",               ">>=",
                   "<<=",                "%=",                 "&",
                     "|",                 "^",                 "~",
                    "++",                "--",                "<<",
                    ">>",                null,                null,
                    "=>",                "->",                 "(",
                     ")",                 "[",                 "]",
                     ",",                 "{",                 "}",
                     ";",                "&&",                "||",
                    "OR",               "AND",               "XOR",
                     "!",             "const",                "if",
                  "else",              "echo",             "print",
                 "while",                "do",               "for",
               "foreach",                "as",          "function",
                  "list",             "array",               "use",
                 "break",          "continue",            "return",
                     ".",                null,                null,
                    null,                null,                null,
                    "${",                null,
]; 


function tokenToString(tk){
    return jjtokenAlias[tk] === null ? "<" + jjtokenNames[tk] + ">" : '"' + jjtokenAlias[tk] + '"';
}
// Token kinds
var TokenKind = {
    EOF : 0,
    ERROR : 1,
    INLINE_HTML : 2,
    ECHO_TAG : 3,
    NAME : 4,
    DECIMAL : 5,
    INT : 6,
    STRING : 7,
    DOUBLE_QUOTE : 8,
    BACK_QUOTE : 9,
    DOLLAR : 10,
    VARIABLE : 11,
    HALT_COMPILER : 12,
    PLUS : 13,
    MINUS : 14,
    TIMES : 15,
    DIVIDE : 16,
    POW : 17,
    QUESTION : 18,
    COLON : 19,
    PERCENT : 20,
    GT : 21,
    LT : 22,
    GTOE : 23,
    LTOE : 24,
    EQU : 25,
    IDENTICAL : 26,
    NEQ : 27,
    NIDENTICAL : 28,
    ASSIGN : 29,
    PLUS_ASSIGN : 30,
    MINUS_ASSIGN : 31,
    TIMES_ASSIGN : 32,
    POW_ASSIGN : 33,
    DIVIDE_ASSIGN : 34,
    BIT_AND_ASSIGN : 35,
    BIT_OR_ASSIGN : 36,
    BIT_XOR_ASSIGN : 37,
    RIGHT_SHIFT_ASSIGN : 38,
    LEFT_SHIFT_ASSIGN : 39,
    MOD_ASSIGN : 40,
    BIT_AND : 41,
    BIT_OR : 42,
    BIT_XOR : 43,
    BIT_NOT : 44,
    INC : 45,
    DEC : 46,
    LEFT_SHIFT : 47,
    RIGHT_SHIFT : 48,
    HEREDOC_HEADER : 49,
    NOWDOC_HEADER : 50,
    ARROW : 51,
    PROPERTY_ARROW : 52,
    BRA : 53,
    KET : 54,
    CBRA : 55,
    CKET : 56,
    COMMA : 57,
    BBRA : 58,
    BKET : 59,
    EOL : 60,
    AND : 61,
    OR : 62,
    LOGICAL_OR : 63,
    LOGICAL_AND : 64,
    LOGICAL_XOR : 65,
    NOT : 66,
    CONST : 67,
    IF : 68,
    ELSE : 69,
    ECHO : 70,
    PRINT : 71,
    WHILE : 72,
    DO : 73,
    FOR : 74,
    FOREACH : 75,
    AS : 76,
    FUNCTION : 77,
    LIST : 78,
    ARRAY : 79,
    USE : 80,
    BREAK : 81,
    CONTINUE : 82,
    RETURN : 83,
    DOT : 84,
    ANY_CONTENT : 85,
    HEREDOC_END_LABEL : 86,
    VARIABLE_IN_STRING : 87,
    PROPERTY_IN_STRING : 88,
    OFFSET_IN_STRING : 89,
    OPEN_CURLY_BRACE : 90,
    END_OF_HEREDOC : 91,

};
function Token(id, val, startLine, startColumn, endLine, endColumn){
    this.id = id;
    this.val = val;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
}
Token.prototype.clone = function(){
    return new Token(
        this.id,
        this.val,
        this.startLine,
        this.startColumn,
        this.endLine,
        this.endColumn
    );
}
Token.prototype.toString = function(){
    return (jjtokenAlias[this.id] === null ? 
        '<' + jjtokenNames[this.id] + '>' :
        '"' + jjtokenAlias[this.id] + '"') + "(" + this.val + ")";
}
var LineTerm = {
    NONE: 1,
    AUTO: 2,
    CR: 3,
    LF: 4,
    CRLF: 5
};

function createParser() {
    //#region parser state variables
    var jjlexState;
    var jjstate;
    var jjlastCR;
    var jjmatched;
    var jjmarker = { state: -1, line: 0, column: 0 };
    var jjbackupCount;
    var jjline;
    var jjcolumn;
    var jjtline;
    var jjtcolumn;

    var jjlrState;
    var jjsematicS;
    //#endregion

    var jjinput;
    var jjsematicVal;
    var jjtokenQueue;
    var jjtoken;
    var jjstop;
    var jjtokenEmitted;
    var jjenableBlock = true;
    var jjlineTerm;

    var jjhandlers = {};

    // extra members, defined by %extra_arg
    
    var outputs;
    var heredocStart;
    var propertyName;


    return {
        init: init,
        on: on,
        setLineTerminator: setLineTerminator,
        getLineTerminator: function() { return jjlineTerm; },
        accept: accept,
        end: end,
        load: load,
        nextToken: nextToken,
        halt: halt,
        enableBlocks: enableBlocks,
        disableBlocks: disableBlocks,
        loadParserState: loadParserState,
        getParserState: getParserState
    };
    function init(outputs1){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjtokenQueue = [];

        jjlineTerm = LineTerm.AUTO;
        jjlastCR = false;

        
    outputs = outputs1;
    heredocStart = [];


        jjtryReduce();
    }
    function load(input){
        if(typeof input === 'string'){
            var i = 0;
            jjinput = {
                current: function(){ return i < input.length ? input.charCodeAt(i) : null; },
                next: function(){ return i++; },
                isEof: function(){ return i >= input.length; },
                backup: function(t){ return i -= input.length; }
            }
        }
        else {
            jjinput = input;
        }
    }
    function nextToken(){
        jjtokenEmitted = false;
        while(!jjstop && !jjtokenEmitted){
            var c = jjinput.current();
            if(c !== null){
                jjacceptChar(c);
            }
            // null means end of file or no input available at present
            else if(jjinput.isEof()){
                if(jjacceptEOF()){
                    break;
                }
            }
            else {
                return null;
            }
        }
        return jjtoken;
    }
    function setLineTerminator(lt){
        jjlineTerm = lt;
    }
    function enableBlocks(){
        jjenableBlock = true;
    }
    function disableBlocks(){
        jjenableBlock = false;
    }
    /**
     *  input a string
     *  @api public
     *  @deprecated
     */
    function accept(s){
        var i = 0;
        load({
            current: function(){ return i < s.length ? s.charCodeAt(i) : null; },
            next: function(){ return i++; },
            isEof: function(){ return i >= s.length; },
            backup: function(t){ return i -= t.length; }
        });
        while(!jjstop && nextToken().id !== 0);
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        
    }
    function halt(){
        jjstop = true;
    }
    function loadParserState(state){
        jjlexState = state.lexState;
        jjlrState = state.lrState;
        jjsematicS = state.sematicS;
    }
    function getParserState() {
        return {
            lexState: jjlexState,
            lrState: jjlrState,
            sematicS: jjsematicS
        };
    }
    /**
     *  set 
     */
    function jjsetImg(s){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjtokenQueue.push(jjtoken);

        jjtokenEmitted = true;
        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjemit(name, a1, a2, a3){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name, cb){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                jjlexState.push(1); jjsetImg(""); 
                break;
            case 6:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 9:
                jjlexState.push(1); jjsetImg(""); 
                break;
            case 10:
                jjlexState.push(1); jjsetImg(""); 
                break;
            case 11:
                jjlexState.push(1); jjsetImg(""); 
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten){
        var jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 6:
                jjsetImg(""); 
                break;
            case 15:
                if(jjenableBlock){ jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 19:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 26:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 27:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 28:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 29:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 33:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 35:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 36:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 37:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 38:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 39:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 40:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 41:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 42:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 43:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 44:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 45:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 46:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 51:
                jjsetImg(""); 
                break;
            case 53:
                jjsetImg(""); 
                break;
            case 54:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 59:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 68:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 70:
                jjsetImg(""); 
                break;
            case 72:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 80:
                jjsetImg(""); jjlexState.pop(); 
                break;
            case 81:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 82:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 84:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 86:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 87:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 89:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 90:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 92:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 93:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 94:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 95:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 97:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 98:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 99:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 100:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 101:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 105:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 112:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 114:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 121:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 122:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 123:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 124:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 125:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 126:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 128:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 129:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 130:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 131:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 133:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 137:
                jjsetImg(""); 
                break;
            case 140:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 141:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 142:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 143:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 144:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 147:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 148:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 150:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 151:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 152:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 157:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 159:
                if(jjenableBlock){ jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 161:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 162:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 163:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 165:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 169:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 170:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 172:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 173:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 174:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 175:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 181:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 182:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 183:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 185:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 186:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 187:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 188:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 189:
                if(jjenableBlock){ jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 190:
                if(jjenableBlock){ jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 191:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 192:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 193:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 194:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 195:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 196:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 197:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten){
        var jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 5:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                jjsetImg(""); 
                break;
            case 8:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 9:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 10:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            default:;
        }
    }
    function jjdoLexAction3(jjstaten){
        var jjtk = jjlexTokens3[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                if(jjenableBlock){ jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 7:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 8:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 11:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 12:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 14:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 17:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 18:
                if(jjenableBlock){
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 19:
                if(jjenableBlock){
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction4(jjstaten){
        var jjtk = jjlexTokens4[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                if(jjenableBlock){ jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 7:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 8:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 11:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 12:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 14:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 17:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 18:
                if(jjenableBlock){
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 19:
                if(jjenableBlock){
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction5(jjstaten){
        var jjtk = jjlexTokens5[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 6:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 10:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 11:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 13:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 15:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 16:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 18:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 21:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 22:
                if(jjenableBlock){
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 23:
                if(jjenableBlock){
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction6(jjstaten){
        var jjtk = jjlexTokens6[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 6:
                if(jjenableBlock){ jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate, state){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            case 3:
                jjdoLexAction3(state);
                break;
            case 4:
                jjdoLexAction4(state);
                break;
            case 5:
                jjdoLexAction5(state);
                break;
            case 6:
                jjdoLexAction6(state);
                break;
            default:;
        }
        jjtokenQueue.length > 0 && jjacceptToken(null);
    }
    function jjrollback(){
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjinput.backup(ret);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c){
        // c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        switch(jjlineTerm){
            case LineTerm.NONE:
                jjcolumn += c > 0xff ? 2 : 1;
                break;
            case LineTerm.CR:
                c === jjcr ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
                break;
            case LineTerm.LF:
                c === jjlf ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
                break;
            case LineTerm.CRLF:
                if(jjlastCR){
                    if(c === jjlf){
                        jjline++, jjcolumn = 0;
                        jjlastCR = false;
                    }
                    else {
                        jjcolumn += c > 0xff ? 2 : 1;
                        jjlastCR = c === jjcr;
                    }
                }
                else {
                    jjcolumn += c > 0xff ? 2 : 1;
                    jjlastCR = c === jjcr;
                }
                break;
            case LineTerm.AUTO:
                if(jjlastCR){
                    if(c === jjlf){
                        jjline++, jjcolumn = 0;
                        jjlastCR = false;
                        jjlineTerm = LineTerm.CRLF;
                    }
                    else {
                        jjline++, jjcolumn = 0;
                        jjlineTerm = LineTerm.CR;
                        c === jjcr ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
                    }
                }
                else if(c === jjlf){
                    jjline++, jjcolumn = 0;
                    jjlineTerm = LineTerm.LF;
                }
                else {
                    jjcolumn += c > 0xff ? 2 : 1;
                    jjlastCR = c === jjcr;
                }
                break;
        }
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        jjinput.next();
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    // accept(s);
                    // character not consumed
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    jjconsume(ccode);
                    // emit an error token
                    jjprepareToken(1);
                    jjtokenQueue.length > 0 && jjacceptToken(null);
                    jjstate = 0;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjacceptToken(null);
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                jjprepareToken(1);
                jjtokenQueue.length > 0 && jjacceptToken(null);
                jjstate = 0;
                return true;
            }
        }
    }
    function jjdoReduction(jjrulenum){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: start => top_statement_list */
                var l = jjsematicS[jjsp - 1];
                if(jjenableBlock){ outputs.astRoot = l; } 
                break;
            case 2:
                /* 2: top_statement_list => top_statement_list top_statement */
                var st = jjsematicS[jjsp - 1];
                if(jjenableBlock){ st !== null && jjtop.add(st); } 
                break;
            case 3:
                /* 3: top_statement_list => */
                if(jjenableBlock){ jjtop = new ZNode(AST_TOPLIST); } 
                break;
            case 7:
                /* 7: top_statement => "__halt_compiler" "(" ")" ";" */
                if(jjenableBlock){ halt(); } 
                break;
            case 8:
                /* 8: const_list => const_list "," const_decl */
                var c = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(c); } 
                break;
            case 9:
                /* 9: const_list => const_decl */
                var c = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_CONST, c); } 
                break;
            case 10:
                /* 10: const_decl => <NAME> "=" expr */
                var cn = jjsematicS[jjsp - 3];
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [cn, e]); } 
                break;
            case 11:
                /* 11: statement_list => statement_list statement */
                var st = jjsematicS[jjsp - 1];
                if(jjenableBlock){ st !== null && jjtop.add(st); } 
                break;
            case 12:
                /* 12: statement_list => */
                if(jjenableBlock){ jjtop = new ZNode(AST_STATEMENTLIST); } 
                break;
            case 13:
                /* 13: statement => "{" statement_list "}" */
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 14:
                /* 14: statement => ";" */
                if(jjenableBlock){ jjtop = null; } 
                break;
            case 15:
                /* 15: statement => expr ";" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 16:
                /* 16: statement => inline_html_list */
                var l = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ECHO, l); } 
                break;
            case 17:
                /* 17: statement => "<?=" expr inline_html_list */
                var e = jjsematicS[jjsp - 2];
                var l = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ECHO_EXPR, [e, l]); } 
                break;
            case 18:
                /* 18: statement => "echo" echo_expr_list ";" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = e; } 
                break;
            case 20:
                /* 20: statement => "while" "(" expr ")" statement */
                var cond = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_WHILE, [cond, s]); } 
                break;
            case 21:
                /* 21: statement => "do" statement "while" "(" expr ")" ";" */
                var s = jjsematicS[jjsp - 6];
                var cond = jjsematicS[jjsp - 3];
                if(jjenableBlock){ jjtop = new ZNode(AST_DO_WHILE, [cond, s]); } 
                break;
            case 22:
                /* 22: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement */
                var e1 = jjsematicS[jjsp - 7];
                var e2 = jjsematicS[jjsp - 5];
                var e3 = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_FOR, [e1, e2, e3, s]); } 
                break;
            case 23:
                /* 23: statement => "foreach" "(" expr "as" foreach_as ")" statement */
                var e = jjsematicS[jjsp - 5];
                var a = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_FOREACH, [e, a, s]); } 
                break;
            case 24:
                /* 24: statement => "return" optional_expr ";" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_RETURN, e); } 
                break;
            case 25:
                /* 25: statement => "break" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop.type = AST_BREAK; jjtop.add(n); } 
                break;
            case 26:
                /* 26: statement => "continue" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop.type = AST_CONTINUE; jjtop.add(n); } 
                break;
            case 28:
                /* 28: foreach_as => foreach_variable "=>" foreach_variable */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_DOUBLE_ARROW, [a, b]); } 
                break;
            case 30:
                /* 30: foreach_variable => "list" "(" array_pair_list ")" */
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 31:
                /* 31: foreach_variable => "[" array_pair_list "]" */
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 32:
                /* 32: inline_html_list => inline_html_list <INLINE_HTML> */
                var h = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = nodeBetween(jjtop, h, jjtop.val + h.val); jjtop.type = AST_STRING; } 
                break;
            case 33:
                /* 33: inline_html_list => <INLINE_HTML> */
                if(jjenableBlock){ jjtop.type = AST_STRING; } 
                break;
            case 34:
                /* 34: echo_expr_list => echo_expr_list "," expr */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(e); } 
                break;
            case 35:
                /* 35: echo_expr_list => expr */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 37:
                /* 37: optional_num => */
                if(jjenableBlock){ jjtop = ZNode.NONE; } 
                break;
            case 38:
                /* 38: if_statement => "if" "(" expr ")" statement */
                var c = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_IF, [c, s, ZNode.NONE]); } 
                break;
            case 39:
                /* 39: if_statement => "if" "(" expr ")" statement "else" statement */
                var c = jjsematicS[jjsp - 5];
                var s = jjsematicS[jjsp - 3];
                var el = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_IF, [c, s, el]); } 
                break;
            case 40:
                /* 40: for_exprs => */
                if(jjenableBlock){ jjtop = new ZNode(AST_EXPR_LIST); } 
                break;
            case 42:
                /* 42: non_empty_for_exprs => non_empty_for_exprs "," expr */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(e); } 
                break;
            case 43:
                /* 43: non_empty_for_exprs => expr */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 47:
                /* 47: callable_expr => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = e; } 
                break;
            case 49:
                /* 49: dereferencable => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = e; } 
                break;
            case 51:
                /* 51: dereferencable_primitive => "[" array_pair_list "]" */
                var a = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = a; } 
                break;
            case 52:
                /* 52: dereferencable_primitive => "array" "(" array_pair_list ")" */
                var a = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = a; } 
                break;
            case 53:
                /* 53: dereferencable_primitive => <STRING> */
                if(jjenableBlock){ jjtop.type = AST_STRING; } 
                break;
            case 55:
                /* 55: var => dereferencable arrow_and_property */
                var v = jjsematicS[jjsp - 2];
                var pn = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_PROPERTY, [v, pn]); } 
                break;
            case 57:
                /* 57: callable_variable => dereferencable "[" optional_expr "]" */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_OFFSET, [v, e]); } 
                break;
            case 58:
                /* 58: callable_variable => dereferencable arrow_and_property "(" argument_list ")" */
                var v = jjsematicS[jjsp - 5];
                var pn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_METHODCALL, [v, pn, l]); } 
                break;
            case 59:
                /* 59: simple_var => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                if(jjenableBlock){ v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 60:
                /* 60: simple_var => "$" "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_VARIABLE, e); } 
                break;
            case 61:
                /* 61: simple_var => "$" simple_var */
                var v = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 62:
                /* 62: @0 => */
                jjlexState.push(2); 
                break;
            case 63:
                /* 63: @1 => */
                var pn = jjsematicS[jjsp - 1];
                jjlexState.pop(); 
                break;
            case 64:
                /* 64: arrow_and_property => "->" @0 property_name @1 */
                var pn = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = pn; } 
                break;
            case 65:
                /* 65: property_name => <NAME> */
                var n = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.type = AST_STRING; } 
                break;
            case 66:
                /* 66: property_name => "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = e; } 
                break;
            case 68:
                /* 68: optional_expr => */
                if(jjenableBlock){ jjtop = ZNode.NONE; } 
                break;
            case 70:
                /* 70: function_call => <NAME> "(" argument_list ")" */
                var fn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ fn.type = AST_STRING; jjtop = new ZNode(AST_FUNCTIONCALL, [fn, l]); } 
                break;
            case 71:
                /* 71: function_call => callable_expr "(" argument_list ")" */
                var f = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_FUNCTIONCALL, [f, l]); } 
                break;
            case 72:
                /* 72: argument_list => */
                if(jjenableBlock){ jjtop = new ZNode(AST_ARGLIST); } 
                break;
            case 74:
                /* 74: non_empty_argument_list => non_empty_argument_list "," expr */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(e); } 
                break;
            case 75:
                /* 75: non_empty_argument_list => expr */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ARGLIST, e); } 
                break;
            case 76:
                /* 76: expr_without_var => "list" "(" array_pair_list ")" "=" expr */
                var l = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [l, e]); } 
                break;
            case 77:
                /* 77: expr_without_var => "[" array_pair_list "]" "=" expr */
                var l = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [l, e]); } 
                break;
            case 78:
                /* 78: expr_without_var => var "=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b]); } 
                break;
            case 79:
                /* 79: expr_without_var => var "+=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_PLUS); } 
                break;
            case 80:
                /* 80: expr_without_var => var "-=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MINUS); } 
                break;
            case 81:
                /* 81: expr_without_var => var "**=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_POW); } 
                break;
            case 82:
                /* 82: expr_without_var => var "*=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_TIMES); } 
                break;
            case 83:
                /* 83: expr_without_var => var "/=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_DIVIDE); } 
                break;
            case 84:
                /* 84: expr_without_var => var "&=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITAND); } 
                break;
            case 85:
                /* 85: expr_without_var => var "|=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITOR); } 
                break;
            case 86:
                /* 86: expr_without_var => var "^=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITXOR); } 
                break;
            case 87:
                /* 87: expr_without_var => var ">>=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 88:
                /* 88: expr_without_var => var "<<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_LEFTSHIFT); } 
                break;
            case 89:
                /* 89: expr_without_var => var "%=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MOD); } 
                break;
            case 90:
                /* 90: expr_without_var => expr "?" expr ":" expr */
                var a = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 3];
                var c = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_CONDITIONALEXPR, [a, b, c]); } 
                break;
            case 91:
                /* 91: expr_without_var => expr "?" ":" expr */
                var a = jjsematicS[jjsp - 4];
                var c = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_CONDITIONALEXPR, [a, ZNode.NONE, c]); } 
                break;
            case 92:
                /* 92: expr_without_var => expr ">" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHAN);        } 
                break;
            case 93:
                /* 93: expr_without_var => expr "<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHAN);           } 
                break;
            case 94:
                /* 94: expr_without_var => expr ">=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHANOREQUAL); } 
                break;
            case 95:
                /* 95: expr_without_var => expr "<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHANOREQUAL);    } 
                break;
            case 96:
                /* 96: expr_without_var => expr "==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_EQUAL);              } 
                break;
            case 97:
                /* 97: expr_without_var => expr "===" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_IDENTICAL);          } 
                break;
            case 98:
                /* 98: expr_without_var => expr "!=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTEQUAL);           } 
                break;
            case 99:
                /* 99: expr_without_var => expr "!==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTIDENTICAL);       } 
                break;
            case 100:
                /* 100: expr_without_var => expr "^" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITXOR);      } 
                break;
            case 101:
                /* 101: expr_without_var => expr "|" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITOR);       } 
                break;
            case 102:
                /* 102: expr_without_var => expr "&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITAND);      } 
                break;
            case 103:
                /* 103: expr_without_var => expr ">>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 104:
                /* 104: expr_without_var => expr "<<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LEFTSHIFT);  } 
                break;
            case 105:
                /* 105: expr_without_var => expr "&&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_AND); } 
                break;
            case 106:
                /* 106: expr_without_var => expr "||" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_OR);  } 
                break;
            case 107:
                /* 107: expr_without_var => expr "OR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_LOGICALOR, [a, b]);         } 
                break;
            case 108:
                /* 108: expr_without_var => expr "XOR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_XOR); } 
                break;
            case 109:
                /* 109: expr_without_var => expr "AND" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_LOGICALAND, [a, b]);       } 
                break;
            case 110:
                /* 110: expr_without_var => expr "+" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_PLUS);   } 
                break;
            case 111:
                /* 111: expr_without_var => expr "-" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MINUS);  } 
                break;
            case 112:
                /* 112: expr_without_var => expr "*" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_TIMES);  } 
                break;
            case 113:
                /* 113: expr_without_var => expr "/" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_DIVIDE); } 
                break;
            case 114:
                /* 114: expr_without_var => expr "%" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MOD);    } 
                break;
            case 115:
                /* 115: expr_without_var => expr "**" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_POW);   } 
                break;
            case 116:
                /* 116: expr_without_var => expr "." expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_BINARYOP, [a, b], OP_CONCAT); } 
                break;
            case 117:
                /* 117: expr_without_var => "(" expr ")" */
                var a = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = a; } 
                break;
            case 118:
                /* 118: expr_without_var => "+" expr */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_UNARYOP, a, OP_POSITIVE); } 
                break;
            case 119:
                /* 119: expr_without_var => "-" expr */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_UNARYOP, a, OP_NEGATIVE); } 
                break;
            case 120:
                /* 120: expr_without_var => "!" expr */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_UNARYOP, a, OP_NOT);    } 
                break;
            case 121:
                /* 121: expr_without_var => "~" expr */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_UNARYOP, a, OP_BITNOT); } 
                break;
            case 122:
                /* 122: expr_without_var => "print" expr */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_PRINT, a); } 
                break;
            case 123:
                /* 123: expr_without_var => "++" var */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_POSTINC, a);   } 
                break;
            case 124:
                /* 124: expr_without_var => "--" var */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_POSTDEC, a);  } 
                break;
            case 125:
                /* 125: expr_without_var => var "++" */
                var a = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_SUFFIXINC, a); } 
                break;
            case 126:
                /* 126: expr_without_var => var "--" */
                var a = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_SUFFIXDEC, a); } 
                break;
            case 127:
                /* 127: @2 => */
                jjlexState.push(4); 
                break;
            case 128:
                /* 128: @3 => */
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 129:
                /* 129: expr_without_var => "`" @2 quote_list "`" @3 */
                var l = jjsematicS[jjsp - 3];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 131:
                /* 131: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" */
                var l = jjsematicS[jjsp - 6];
                var ll = jjsematicS[jjsp - 4];
                var b = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = new ZNode(AST_ANONYFUNCTION, [l, ll, b]); } 
                break;
            case 133:
                /* 133: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" */
                var n = jjsematicS[jjsp - 7];
                var l = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 2];
                if(jjenableBlock){ n.type = AST_STRING; jjtop = new ZNode(AST_FUNCTION, [n, l, b]); } 
                break;
            case 134:
                /* 134: parameter_list => */
                if(jjenableBlock){ jjtop = new ZNode(AST_PARAMLIST); } 
                break;
            case 136:
                /* 136: non_empty_parameter_list => non_empty_parameter_list "," parameter */
                var p = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(p); } 
                break;
            case 137:
                /* 137: non_empty_parameter_list => parameter */
                var p = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_PARAMLIST, p); } 
                break;
            case 138:
                /* 138: parameter => <VARIABLE> */
                if(jjenableBlock){ jjtop.type = AST_STRING; } 
                break;
            case 139:
                /* 139: lexical_vars => */
                if(jjenableBlock){ jjtop = new ZNode(AST_LEXICALVARLIST); } 
                break;
            case 140:
                /* 140: lexical_vars => "use" "(" lexical_var_list ")" */
                var l = jjsematicS[jjsp - 2];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 141:
                /* 141: lexical_var_list => lexical_var_list "," <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                if(jjenableBlock){ v.type = AST_STRING; jjtop.add(v); } 
                break;
            case 142:
                /* 142: lexical_var_list => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                if(jjenableBlock){ v.type = AST_STRING; jjtop = new ZNode(AST_LEXICALVARLIST, v); } 
                break;
            case 143:
                /* 143: primitive => <INT> */
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ s.type = AST_INTEGER; jjtop = s; } 
                break;
            case 144:
                /* 144: primitive => <DECIMAL> */
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ s.type = AST_FLOAT; jjtop = s; } 
                break;
            case 145:
                /* 145: primitive => <NAME> */
                var s = jjsematicS[jjsp - 1];
                if(jjenableBlock){ s.type = AST_CONST; jjtop = s; } 
                break;
            case 146:
                /* 146: @4 => */
                jjlexState.push(3); 
                break;
            case 147:
                /* 147: @5 => */
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 148:
                /* 148: primitive => """ @4 quote_list """ @5 */
                var l = jjsematicS[jjsp - 3];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 149:
                /* 149: @6 => */
                var h = jjsematicS[jjsp - 1];
                jjlexState.push(5); 
                break;
            case 150:
                /* 150: @7 => */
                var h = jjsematicS[jjsp - 2];
                if(jjenableBlock){ heredocStart.push(h.val); } 
                break;
            case 151:
                /* 151: @8 => */
                var h = jjsematicS[jjsp - 5];
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 152:
                /* 152: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 */
                var h = jjsematicS[jjsp - 6];
                var l = jjsematicS[jjsp - 3];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 153:
                /* 153: @9 => */
                var h = jjsematicS[jjsp - 1];
                jjlexState.push(6); 
                break;
            case 154:
                /* 154: @10 => */
                var h = jjsematicS[jjsp - 2];
                if(jjenableBlock){ heredocStart.push(h.val); } 
                break;
            case 155:
                /* 155: @11 => */
                var h = jjsematicS[jjsp - 5];
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 156:
                /* 156: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 */
                var h = jjsematicS[jjsp - 6];
                var l = jjsematicS[jjsp - 3];
                if(jjenableBlock){ jjtop = l; } 
                break;
            case 158:
                /* 158: heredoc_list => heredoc_list heredoc_item */
                var i = jjsematicS[jjsp - 1];
                if(jjenableBlock){ i !== null && jjtop.add(i); } 
                break;
            case 159:
                /* 159: heredoc_list => */
                if(jjenableBlock){ jjtop = new ZNode(AST_STRING_LIST); } 
                break;
            case 160:
                /* 160: heredoc_item => <HEREDOC_END_LABEL> */
                var n = jjsematicS[jjsp - 1];
                if(jjenableBlock){ 
        if(n.val.trim() === heredocStart[heredocStart.length - 1]){ 
            jjtokenQueue.push(new Token(91, null, -1, 0, 0, 0)); 
            heredocStart.pop(); 
            jjtop = null; 
        }
        else {
            jjtop.type = AST_STRING;
        }
    } 
                break;
            case 162:
                /* 162: quote_list => quote_list encaps */
                var e = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(e); } 
                break;
            case 163:
                /* 163: quote_list => */
                if(jjenableBlock){ jjtop = new ZNode(AST_STRING_LIST); } 
                break;
            case 164:
                /* 164: encaps => <ANY_CONTENT> */
                if(jjenableBlock){ jjtop.type = AST_STRING; } 
                break;
            case 165:
                /* 165: encaps => <VARIABLE_IN_STRING> */
                var v = jjsematicS[jjsp - 1];
                if(jjenableBlock){ v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 166:
                /* 166: encaps => <PROPERTY_IN_STRING> */
                var pn = jjsematicS[jjsp - 1];
                if(jjenableBlock){ 
        pn.type = AST_STRING; 
        jjtop = new ZNode(AST_PROPERTY, [new ZNode(AST_VARIABLE, pn), new ZNode(AST_STRING, null, propertyName, pn)]); 
    } 
                break;
            case 167:
                /* 167: @12 => */
                var v = jjsematicS[jjsp - 1];
                jjlexState.push(1); 
                break;
            case 168:
                /* 168: @13 => */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 169:
                /* 169: encaps => <OFFSET_IN_STRING> @12 expr "]" @13 */
                var v = jjsematicS[jjsp - 5];
                var e = jjsematicS[jjsp - 3];
                if(jjenableBlock){
        v.type = AST_STRING;
        jjtop = new ZNode(AST_OFFSET, [new ZNode(AST_VARIABLE, v), e]); 
    } 
                break;
            case 170:
                /* 170: @14 => */
                jjlexState.push(1); 
                break;
            case 171:
                /* 171: @15 => */
                var e = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 172:
                /* 172: encaps => "${" @14 expr "}" @15 */
                var e = jjsematicS[jjsp - 3];
                if(jjenableBlock){ jjtop = e; } 
                break;
            case 174:
                /* 174: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop.add(a); } 
                break;
            case 175:
                /* 175: non_empty_array_pair_list => non_empty_array_pair_list "," */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ a.type = AST_NONE; jjtop.add(a); } 
                break;
            case 176:
                /* 176: non_empty_array_pair_list => possible_array_pair */
                var a = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ARRAY, a); } 
                break;
            case 178:
                /* 178: possible_array_pair => */
                if(jjenableBlock){ jjtop = ZNode.NONE; } 
                break;
            case 180:
                /* 180: array_pair => expr "=>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                if(jjenableBlock){ jjtop = new ZNode(AST_ARRAYPAIR, [a, b]); } 
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjacceptToken(tk){
        // look up action table
        var shifted = false;
        tk !== null && jjtokenQueue.push(tk);
        while(!jjstop && jjtokenQueue.length > 0){
            var t = jjtokenQueue[0];
            var cstate = jjlrState[jjlrState.length - 1];
            var ind = jjdisact[cstate] + t.id;
            var act = 0;
            if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
                act = -jjdefred[cstate] - 1;
            }
            else {
                act = jjpact[ind];
            }
            if(act === jjactERR){
                // explicit error
                jjsyntaxError(t);
                jjtokenQueue.shift();
            }
            else if(act > 0){
                // shift
                if(t.id === 0){
                    // end of file
                    jjstop = true;
                    jjemit('accept');
                    jjtokenQueue.shift();
                }
                else {
                    jjlrState.push(act - 1);
                    jjsematicS.push(jjsematicVal);
                    jjsematicVal = null;
                    jjtryReduce();
                    // token consumed
                    jjtokenQueue.shift();
                }
            }
            else if(act < 0){
                jjdoReduction(-act - 1);
                jjtryReduce();
            }
            else {
                // error
                jjsyntaxError(t);
                // force consume
                jjtokenQueue.shift();
            }
        }
    }
    function jjtryReduce(){
        var cstate = jjlrState[jjlrState.length - 1];
        var act;
        while(jjdisact[cstate] === -jjtokenCount && (act = jjdefred[cstate]) !== -1){
            jjdoReduction(act);
            cstate = jjlrState[jjlrState.length - 1];
        }
    }
    function jjsyntaxError(t){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}


function OpArray(){
    this.opcode = [];
    this.opCount = 0;
    this.functions = [];
}
OpArray.prototype.dump = function(){
    function rightAlign(s, al){
        function repeat(s, t){
            let ret = '';
            while(t --> 0) ret += s;
            return ret;
        }
        return s + (s.length < al ? repeat(' ', al - s.length) : '');
    }
    function emitLabel(label, loc){
        var l = labels[loc] = label;
        l.length > labelMaxLen && (labelMaxLen = l.length);
    }
    var ret = [];
    var labels = [];
    var labelMaxLen = 0;
    var labelCount = 0;
    var postTasks = [];
    var codebase = this.functions.length;
    for(var i = 0, _a = this.functions; i < _a.length; i++){
        var func = _a[i];
        var loc = ret.length;
        var label = 'func' + i;
        emitLabel(label, codebase + func.entry);
        ret.push('define function #' + i + ' ' + func.name + '(' + func.paramList.join(', ') + ')' + 
            ' use(' + func.useList.join(', ') + ')' + ' entry = ' + label
        );
    }
    for(var i = 0, _a = this.opcode; i < this.opCount; i++){
        var op = _a[2 * i];
        var line = op.name;
        var arg = _a[2 * i + 1];
        if(op === OP_JMP || op === OP_JZ || op === OP_JNZ){
            var label = labels[codebase + arg];
            if(!label){
                label = 'label' + labelCount++;
                emitLabel(label, codebase + arg);
            }
            ret.push(op.name + ' ' + label);
        }
        else {
            if(arg !== null){
                if(isArray(arg)){
                    for(var j = 0; j < arg.length; j++){
                        line += ' ' + arg[j];
                    }
                }
                else {
                    if(typeof arg === 'string'){
                        arg = '"' + arg.replace(/\n/g, '\\n') + '"';
                    }
                    line += ' ' + String(arg);
                }
            }
            ret.push(line);
        }
    }
    for(var i = 0, _a = postTasks; i < _a.length; i++){
        _a[i]();
    }
    for(var i = 0; i < ret.length; i++){
        var l = labels[i];
        if(l !== undefined){
            ret[i] = rightAlign(l + ':', labelMaxLen + 2) + ret[i];
        }
        else {
            ret[i] = rightAlign('', labelMaxLen + 2) + ret[i];
        }
    }
    return ret;
}

function createCompiler(fname){
    var opa = new OpArray();
    var registers = [];
    var scope = [];
    var onErr = [];
    var funcQueue = [];
    var tasks = [];

    var localNode = new ZNode(AST_LOCAL);
    
    function LoopInfo(allowBreak, allowContinue){
        this.allowBreak = allowBreak;
        this.allowContinue = allowContinue;
        this.breaks = [];
        this.continues = [];
    }
    LoopInfo.prototype.done = function(bl, cl){
        for(var i = 0, _a = this.breaks; i < _a.length; i++){
            setArg(_a[i], bl);
        }
        for(var i = 0, _a = this.continues; i < _a.length; i++){
            setArg(_a[i], cl);
        }
    }

    return {
        compile: compile,
        addErrHandler: addErrHandler
    };

    function addErrHandler(cb){
        onErr.push(cb);
    }
    function err(msg){
        for(var i = 0; i < onErr.length; i++){
            onErr[i](msg);
        }
    }
    function singlePosErr(msg, pos){
        var p = pos.getPos();
        err(msg + ' (at line ' + (p.startLine + 1) + ')');
    }
    function allocateRegister(){
        var i = 0;
        while(registers[i] !== undefined){ i++; };
        registers[i] = true;
        return i;
    }
    function releaseRegister(i){
        if(i === registers.length - 1){
            registers.pop();
        }
        else {
            registers[i] = undefined;
        }
    }
    function pushScope(){
        scope.push(registers);
        registers = [];
    }
    function popScope(){
        registers = scope.pop();
    }
    function emit(s, args){
        opa.opcode.push(s);
        opa.opcode.push(typeof args !== 'undefined' ? args : null);
        return opa.opCount++;
    }
    function setArg(op, arg){
        opa.opcode[op * 2 + 1] = arg;
    }
    function breakTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowBreak){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }
    function continueTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowContinue){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }

    function compile(astRoot){
        tasks.push(function(){
            compileBlock(astRoot);
        });
        while(tasks.length > 0){
            tasks.shift()();
        }
        return opa;
    }
    function compileBlock(ast){
        for(var i = 0, _a = ast.child; i < _a.length; i++){
            compileStatement(_a[i]);
        }
        emit(OP_RETURNNULL);
    }
    function compileFunction(func){
        if(func.type === AST_ANONYFUNCTION){
            var arglist = func.child[0];
            var lexicalVars = func.child[1];
            var body = func.child[2];

            var plist = [];
            var uselist = [];
            for(var i = 0, _a = arglist.child; i < _a.length; i++){
                plist.push(_a[i].val);
            }
            for(var i = 0, _a = lexicalVars.child; i < _a.length; i++){
                uselist.push(_a[i].val);
                emit(OP_PUSH, _a[i].val);
                emit(OP_GETVAR);
            }
            var n = opa.functions.length;
            opa.functions.push({
                name: '',
                paramList: plist,
                useList: uselist,
                entry: 0
            });
            emit(OP_CREATEFUNCTION, [n, lexicalVars.child.length]);
            tasks.push(function(){
                opa.functions[n].entry = opa.opCount;
                compileBlock(body);
            });
        }
        else {
            var fname = func.child[0];
            var arglist = func.child[1];
            var body = func.child[2];
            var plist = [];
            for(var i = 0, _a = arglist.child; i < _a.length; i++){
                plist.push(_a[i].val);
            }
            var n = opa.functions.length;
            opa.functions.push({
                name: fname.val,
                paramList: plist,
                useList: [],
                entry: 0
            });
            tasks.push(function(){
                opa.functions[n].entry = opa.opCount;
                compileBlock(body);
            });
        }
    }
    function compileStatement(ast){
        switch(ast.type){
            case AST_NONE: break;
            case AST_FUNCTION:
                compileFunction(ast);
                break;
            case AST_CONST_LIST:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileExpression(_a[i].child[1]);
                    emit(OP_DEFCONST, _a[i].child[0]);
                }
                break;
            case AST_STATEMENTLIST:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileStatement(_a[i]);
                }
                break;
            case AST_ECHO:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    emit(OP_ECHO);
                }
                break;
            case AST_ECHO_EXPR:
                compileExpression(ast.child[0]);
                emit(OP_ECHO);
                emit(OP_PUSH, ast.child[1].val);
                emit(OP_ECHO);
                break;
            case AST_EXPR_LIST:
                compileExpression(ast.child[0]);
                emit(OP_POP);
                break;
            case AST_BREAK:
                var leveln = ast.child[0];
                var target = breakTarget(ast, leveln.type === AST_NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid break statement', ast.pos);
                }
                else {
                    target.val.breaks.push(emit(OP_JMP));
                }
                break;
            case AST_CONTINUE:
                var leveln = ast.child[0];
                var target = continueTarget(ast, leveln.type === AST_NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid continue statement', ast.pos);
                }
                else {
                    target.val.continues.push(emit(OP_JMP));
                }
                break;
            case AST_RETURN:
                if(ast.child[0].type === AST_NONE){
                    emit(OP_RETURNNULL);
                }
                else {
                    compileExpression(ast.child[0]);
                    emit(OP_RETURN);
                }
                break;
            case AST_IF:
                compileExpression(ast.child[0]);
                var line1 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                var line2 = emit(OP_JMP);
                setArg(line1, opa.opCount);
                ast.child[2].type !== AST_NONE && compileStatement(ast.child[2]);
                setArg(line2, opa.opCount);
                break;
            case AST_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileExpression(ast.child[0]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line1);
                break;
            case AST_DO_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileStatement(ast.child[1]);
                var line2 = opa.opCount;
                compileExpression(ast.child[0]);
                emit(OP_JNZ, line1);
                ast.val.done(opa.opCount, line2);
                break;
            case AST_FOR:
                ast.val = new LoopInfo(true, true);
                compileExpression(ast.child[0]);
                var line1 = opa.opCount;
                compileExpression(ast.child[1]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[3]);
                var line3 = opa.opCount;
                compileExpression(ast.child[2]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line3);
                break;
            case AST_FOREACH:
                ast.val = new LoopInfo(true, true);
                compileExpression(ast.child[0]);
                emit(OP_CREATEITERATOR);
                var itReg = allocateRegister();
                emit(OP_SETLOCAL, itReg);
                emit(OP_POP);

                var line1 = emit(OP_GETLOCAL, itReg);
                emit(OP_ITERATORISEND);
                var line2 = emit(OP_JNZ);
                var asVar = ast.child[1];
                if(asVar.type === AST_DOUBLE_ARROW){
                    emit(OP_GETLOCAL, itReg);
                    emit(OP_GETITERATORKEY);
                    compileAssignTop(asVar.child[0]);
                    emit(OP_POP);
                    emit(OP_GETLOCAL, itReg);
                    emit(OP_GETITERATORVALUE);
                    compileAssignTop(asVar.child[1]);
                    emit(OP_POP);
                }
                else {
                    emit(OP_GETLOCAL, itReg);
                    emit(OP_GETITERATORVALUE);
                    compileAssignTop(asVar);
                    emit(OP_POP);
                }
                compileStatement(ast.child[2]);
                var line3 = emit(OP_GETLOCAL, itReg);
                emit(OP_ITERATORNEXT);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);

                ast.val.done(opa.opCount, line3);
                releaseRegister(itReg);
                break;
        }
    }
    function compileExpression(root){
        switch(root.type){
            case AST_NONE: break;
            case AST_EXPR_LIST:
                for(var i = 0, _a = root.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    i < _a.length - 1 && emit(OP_POP);
                }
                break;
            case AST_BINARYOP:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(root.val);
                break;
            case AST_UNARYOP:
                compileExpression(root.child[0]);
                emit(root.val);
                break;
            case AST_PRINT:
                compileExpression(root.child[0]);
                emit(OP_PRINT);
                break;
            case AST_POSTINC:
                compileExpression(root.child[0]);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                break;
            case AST_POSTDEC:
                compileExpression(root.child[0]);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                break;
            case AST_SUFFIXINC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_SUFFIXDEC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_CONDITIONALEXPR:
                compileExpression(root.child[0]);
                var line1 = emit(OP_JZ);
                root.child[1].type === AST_NONE ? emit(OP_PUSH, true) : compileExpression(root.child[1]);
                var line2 = emit(OP_JMP);
                setArg(line1, opa.opCount);
                compileExpression(root.child[2]);
                setArg(line2, opa.opCount);
                break;
            case AST_LOGICALOR:
                compileExpression(root.child[0]);
                emit(OP_BOOLCAST);
                var line1 = emit(OP_JNZ);
                compileExpression(root.child[1]);
                emit(OP_BOOLCAST);
                setArg(line1, opa.opCount);
                break;
            case AST_LOGICALAND:
                compileExpression(root.child[0]);
                emit(OP_BOOLCAST);
                var line1 = emit(OP_JZ);
                compileExpression(root.child[1]);
                emit(OP_BOOLCAST);
                setArg(line1, opa.opCount);
                break;
            case AST_ASSIGN:
                if(root.val === null){
                    compileAssign(root.child[0], root.child[1]);
                }
                else {
                    compileExpression(root.child[0]);
                    compileExpression(root.child[1]);
                    emit(root.val);
                    compileAssignTop(root.child[0]);
                }
                break;
            case AST_VARIABLE:
                compileExpression(root.child[0]);
                emit(OP_GETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(OP_GETPROP);
                break;
            case AST_OFFSET:
                compileExpression(root.child[0]);
                if(root.child[1].type === AST_NONE){
                    emit(OP_GETMAXOFFSET);
                }
                else {
                    compileExpression(root.child[1]);
                    emit(OP_GETOFFSET);
                }
                break;
            case AST_FUNCTIONCALL:
                if(root.child[0].type === AST_STRING){
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKENAME, [root.child[0].val, root.child[1].child.length]);
                }
                else {
                    compileExpression(root.child[0]);
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKE, root.child[1].child.length);
                }
                break;
            case AST_METHODCALL:
                compileExpression(root.child[0]);
                if(root.child[1].type === AST_STRING){
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHODNAME, [root.child[1].val, root.child[2].child.length]);
                }
                else {
                    compileExpression(root.child[1]);
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHOD, root.child[2].child.length);
                }
                break;
            case AST_LOCAL:
                emit(OP_GETLOCAL, root.val);
                break;
            case AST_ARRAY:
                emit(OP_ARRAY);
                for(var i = 0, _a = root.child; i < _a.length; i++){
                    var item = _a[i];
                    if(item.type === AST_NONE){
                        emit(OP_PUSH, 0);
                        emit(OP_ADDARRAYITEM);
                    }
                    else if(item.type === AST_ARRAYPAIR){
                        compileExpression(item.child[0]);
                        compileExpression(item.child[1]);
                        emit(OP_ADDARRAYPAIR);
                    }
                    else {
                        compileExpression(item);
                        emit(OP_ADDARRAYITEM);
                    }
                }
                break;
            case AST_INTEGER:
            case AST_FLOAT:
            case AST_STRING:
                emit(OP_PUSH, root.val);
                break;
            case AST_STRING_LIST:
                compileStringList(root);
                break;
            case AST_CONST:
                emit(OP_GETCONST, root.val);
                break;
            case AST_ANONYFUNCTION:
                compileFunction(root);
                break;
        }
    }
    function compileStringList(list){
        var sc = 0;
        for(var i = 0, _a = list.child; i < _a.length;){
            if(_a[i].type === AST_STRING){
                var s = '';
                while(i < _a.length && _a[i].type === AST_STRING){
                    s += _a[i].val;
                    i++;
                }
                emit(OP_PUSH, s);
                sc++;
            }
            else {
                compileExpression(_a[i]);
                sc++;
                i++;
            }
        }
        emit(OP_CONCAT, sc);
    }
    function compileAssign(dest, src){
        switch(dest.type){
            case AST_LOCAL:
                compileExpression(src);
                emit(OP_SETLOCAL, dest.val);
                break;
            case AST_VARIABLE:
                compileExpression(dest.child[0]);
                compileExpression(src);
                emit(OP_SETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(dest.child[0]);
                compileExpression(dest.child[1]);
                compileExpression(src);
                emit(OP_SETPROP);
                break;
            case AST_OFFSET:
                compileExpression(dest.child[0]);
                if(dest.child[1].type === AST_NONE){
                    compileExpression(src);
                    emit(OP_SETMAXOFFSET);
                }
                else {
                    compileExpression(dest.child[1]);
                    compileExpression(src);
                    emit(OP_SETOFFSET);
                }
                break;
            case AST_ARRAY:
                compileListAssign(dest, src);
                break;
            default:
                singlePosErr('invalid left hand side value in assignment', dest);
        }
    }
    function compileAssignTop(dest){
        localNode.val = allocateRegister();
        emit(OP_SETLOCAL, localNode.val);
        emit(OP_POP);
        compileAssign(dest, localNode);
        releaseRegister(localNode.val);
    }
    function compileListAssign(list, src){
        if(list.child.length === 0){
            singlePosErr('cannot use empty arrays in assignment', list);
            return;
        }
        compileExpression(src);
        var reg = allocateRegister();
        emit(OP_SETLOCAL, reg);
        emit(OP_POP);
        var keyed = list.child[0].type === AST_ARRAYPAIR;
        for(var i = 0, _a = list.child; i < _a.length; i++){
            var n = _a[i];
            if(n.type === AST_NONE && keyed){
                singlePosErr("cannot use empty array entries in key'd array assignment", n);
                continue;
            }
            if(keyed && n.type !== AST_ARRAYPAIR || !keyed && n.type === AST_ARRAYPAIR){
                singlePosErr("cannot mix key'd and unkey'd elements in array assigment", n);
                continue;
            }
            if(keyed){
                var key = n.child[0];
                var val = n.child[1];
                emit(OP_GETLOCAL, reg);
                compileExpression(key);
                emit(OP_GETOFFSET);
                compileAssignTop(val);
                emit(OP_POP);
            }
            else if(n.type !== AST_NONE){
                emit(OP_GETLOCAL, reg);
                emit(OP_PUSH, i);
                emit(OP_GETOFFSET);
                compileAssignTop(n);
                emit(OP_POP);
            }
        }
        emit(OP_GETLOCAL, reg);
        releaseRegister(reg);
    }
}

function createVM(){
    var ar = [];

    var functions = {};
    var constants = {};

    var pc = 0;
    var opArray;
    var funcTable = [];
    var vars = {};
    var locals = [];
    var stack = [];
    var returnCb = null;

    var run = false;

    var scope = [];
    
    var opHandlers = [];

    var onErr = [];
    var out = null;
    var stdout = null;

    function ZendIterator(a){
        this.a = a;
        this.keys = Object.keys(a);
        this.ptr = 0;
    }
    ZendIterator.prototype.next = function(){ this.ptr++; }
    ZendIterator.prototype.isEnd = function(){ return this.ptr >= this.keys.length; }
    ZendIterator.prototype.getKey = function(){ return this.keys[this.ptr]; }
    ZendIterator.prototype.getVal = function(){ return this.a[this.keys[this.ptr]]; }

    function createFunctionFromOpArray(opa){
        for(var i = 0, _a = opa.functions; i < _a.length; i++){
            var func = _a[i];
            if(func.name.length > 0){
                functions[func.name] = createFunction(opa, func);
            }
        }
        return function(acc){
            returnCb = acc;
            opArray = opa;
            run = true;
            exec();
        }
    }
    function createFunction(opa, func){
        return function(args, acc){
            pushScope();
            opArray = opa;
            pc = func.entry;
            returnCb = acc;
            for(var j = 0, _b = func.paramList; j < _b.length; j++){
                vars[_b[j]] = args[j];
            }
        }
    }
    function createClosure(opa, index, lexicalVars){
        var func = opa.functions[index];
        return function(args, acc){
            pushScope();
            opArray = opa;
            pc = func.entry;
            returnCb = acc;
            for(var j = 0, _b = func.paramList; j < _b.length; j++){
                vars[_b[j]] = args[j];
            }
            for(var i = 0, _a = func.useList; i < _a.length; i++){
                vars[_a[i]] = lexicalVars[i];
            }
        }
    }
    function createIterator(v){
        return new ZendIterator(v);
    }
    function err(msg){
        stdout && stdout('error: ' + msg);
    }
    function notice(msg){
        stdout && stdout('notice: ' + msg);
    }
    function echo(s){
        out && out(s);
    }
    function defineInterface(it){
        it.out && (out = it.out);
        it.stdout && (stdout = it.stdout);
    }
    function defineHandler(op, handler){
        opHandlers[op.code] = handler;
    }
    function defineFunction(fname, f){
        functions[fname] = function(args, acc){ acc(f(args)); };
    }
    function pushScope(){
        scope.push({
            pc: pc,
            opArray: opArray,
            vars: vars,
            locals: locals,
            stack: stack,
            returnCb: returnCb
        });
        pc = 0;
        opArray = null;
        vars = {};
        locals = [];
        stack = [];
        returnCb = null;
    }
    function popScope(){
        var s = scope.pop();
        pc = s.pc;
        opArray = s.opArray;
        vars = s.vars;
        locals = s.locals;
        stack = s.stack;
        returnCb = s.returnCb;
    }
    function exec(){
        while(run){
            var op = opArray.opcode[2 * pc];
            var arg = opArray.opcode[2 * pc + 1];
            pc++;
            opHandlers[op.code](arg);
        }
    }
    var NULL = null;
    function toNumber(v){
        if(v === NULL){
            return 0;
        }
        var ret = Number(v);
        return ret === NaN ? 0 : ret;
    }
    function toBool(s){
        if(s === NULL){
            return false;
        }
        switch(typeof s){
            case 'boolean': return s;
            case 'number': return s !== 0;
            case 'string': return s === 'true' ? true : s === 'false' ? false : true;
            default: return true;
        }
    }
    function toString(v){
        return v === NULL ? '' : v.toString();
    }
    defineHandler(OP_NOP, function(arg){});
    defineHandler(OP_PUSH, function(arg){ stack.push(arg); });
    defineHandler(OP_POP, function(arg){ stack.pop(); });
    defineHandler(OP_DUP, function(arg){ stack.push(stack[stack.length - 1]); });
    defineHandler(OP_GETVAR, function(arg){ 
        var vname = toString(stack.pop());
        var v = vars[vname];
        if(v === undefined){
            err('use of undefined variable ' + vname);
            stack.push(NULL);
        }
        else {
            stack.push(v);
        }
    });
    defineHandler(OP_SETVAR, function(arg){
        var v = stack.pop();
        var vname = toString(stack.pop());
        vars[vname] = v;
        stack.push(v);
    });
    defineHandler(OP_SETPROP, function(){
        var val = stack.pop();
        var propname = toString(stack.pop());
        var v = stack.pop();
        if(v.__zendProps === undefined){
            err('variable is not an object');
            stack.push(NULL);
        }
        else {
            if(v.__zendProps[propname] === undefined){
                err('variable does not have property ' + propname);
                stack.push(NULL);
            }
            else {
                v.__zendProps[propname] = val;
                stack.push(val);
            }
        }
    });
    defineHandler(OP_GETPROP, function(){
        var propname = toString(stack.pop());
        var v = stack.pop();
        if(v.__zendProps === undefined){
            err('variable is not an object');
            stack.push(NULL);
        }
        else {
            if(v.__zendProps[propname] === undefined){
                err('variable does not have property ' + propname);
                stack.push(NULL);
            }
            else {
                stack.push(v.__zendProps[propname]);
            }
        }
    });
    defineHandler(OP_GETOFFSET, function(){
        var offset = stack.pop();
        if(typeof offset !== 'number'){
            offset = toString(offset);
        }
        var v = stack.pop();
        if(isArray(v)){
            var r = v[offset];
            if(r === undefined){
                notice('undefined array index ' + offset);
                stack.push(NULL);
            }
            else {
                stack.push(r);
            }
        }
        else if(typeof v === 'string'){
            if(typeof offset !== 'number'){
                offset = toNumber(offset);
            }
            stack.push(v.charAt(offset));
        }
        else {
            notice('cannot get index of a non-array ');
            stack.push(NULL);
        }
    });
    defineHandler(OP_SETOFFSET, function(){
        var val = stack.pop();
        var offset = stack.pop();
        if(typeof offset !== 'number'){
            offset = toString(offset);
        }
        var v = stack.pop();
        if(isArray(v)){
            var r = v[offset];
            if(r === undefined){
                notice('undefined array index ' + offset);
                stack.push(NULL);
            }
            else {
                v[offset] = val;
                stack.push(val);
            }
        }
        else {
            notice('cannot set index of a non-array ');
            stack.push(NULL);
        }
    });
    defineHandler(OP_GETMAXOFFSET, function(){
        var v = stack.pop();
        if(isArray(v)){
            stack.push(v[v.length - 1]);
        }
        else {
            notice('cannot get index of a non-array ');
            stack.push(NULL);
        }
    });
    defineHandler(OP_SETMAXOFFSET, function(){
        var val = stack.pop();
        var v = stack.pop();
        if(isArray(v)){
            v[v.length - 1] = val;
            stack.push(val);
        }
        else {
            notice('cannot set index of a non-array ');
            stack.push(NULL);
        }
    });
    defineHandler(OP_DEFCONST, function(cn){
        var v = stack.pop();
        if(constants[cn]){
            notice('redefine constant ' + cn);
        }
        else {
            constants[cn] = v;
        }
    });
    defineHandler(OP_GETCONST, function(arg){
        var c = constants[arg];
        if(c === undefined){
            notice('use of undefined constant ' + arg);
            stack.push(NULL);
        }
        else {
            stack.push(c);
        }
    });
    defineHandler(OP_SETLOCAL, function(arg){
        locals[arg] = stack[stack.length - 1];
    });
    defineHandler(OP_GETLOCAL, function(arg){
        stack.push(locals[arg]);
    });

    defineHandler(OP_PLUS, function(arg){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a + b);
    });
    defineHandler(OP_MINUS, function(arg){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a - b);
    });
    defineHandler(OP_TIMES, function(arg){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a * b);
    });
    defineHandler(OP_DIVIDE, function(arg){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a / b);
    });
    defineHandler(OP_POW, function(arg){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(Math.pow(a, b));
    });
    defineHandler(OP_CONCAT, function(arg){
        if(arg === null){
            var b = toString(stack.pop());
            var a = toString(stack.pop());
            stack.push(a + b);
        }
        else {
            var s = '';
            while(arg --> 0){
                s = toString(stack.pop()) + s;
            }
            stack.push(s);
        }
    });
    defineHandler(OP_MOD, function(arg){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a % b);
    });
    defineHandler(OP_BITAND, function(arg){
        var b = toNumber(stack.pop()) | 0;
        var a = toNumber(stack.pop()) | 0;
        stack.push(a & b);
    });
    defineHandler(OP_BITOR, function(arg){
        var b = toNumber(stack.pop()) | 0;
        var a = toNumber(stack.pop()) | 0;
        stack.push(a | b);
    });
    defineHandler(OP_BITXOR, function(arg){
        var b = toNumber(stack.pop()) | 0;
        var a = toNumber(stack.pop()) | 0;
        stack.push(a ^ b);
    });
    defineHandler(OP_BITNOT, function(arg){
        var a = toNumber(stack.pop()) | 0;
        stack.push(~a);
    });
    defineHandler(OP_AND, function(arg){
        var b = toBool(stack.pop());
        var a = toBool(stack.pop());
        stack.push(a && b);
    });
    defineHandler(OP_OR, function(arg){
        var b = toBool(stack.pop());
        var a = toBool(stack.pop());
        stack.push(a || b);
    });
    defineHandler(OP_XOR, function(arg){
        var b = toBool(stack.pop());
        var a = toBool(stack.pop());
        stack.push(!a && b || a && !b);
    });
    defineHandler(OP_NOT, function(arg){
        var a = toBool(stack.pop());
        stack.push(!a);
    });
    defineHandler(OP_LEFTSHIFT, function(arg){
        var b = toNumber(stack.pop()) | 0;
        var a = toNumber(stack.pop()) | 0;
        stack.push(a << b);
    });
    defineHandler(OP_RIGHTSHIFT, function(arg){
        var b = toNumber(stack.pop()) | 0;
        var a = toNumber(stack.pop()) | 0;
        stack.push(a >> b);
    });
    defineHandler(OP_POSITIVE, function(arg){
        var a = toNumber(stack.pop());
        stack.push(a);
    });
    defineHandler(OP_NEGATIVE, function(arg){
        var a = toNumber(stack.pop());
        stack.push(-a);
    });
    defineHandler(OP_INC, function(arg){
        var a = toNumber(stack.pop());
        stack.push(a + 1);
    });
    defineHandler(OP_DEC, function(arg){
        var a = toNumber(stack.pop());
        stack.push(a - 1);
    });
    defineHandler(OP_GREATERTHAN, function(){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a > b);
    });
    defineHandler(OP_GREATERTHANOREQUAL, function(){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a >= b);
    });
    defineHandler(OP_LESSTHAN, function(){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a < b);
    });
    defineHandler(OP_LESSTHANOREQUAL, function(){
        var b = toNumber(stack.pop());
        var a = toNumber(stack.pop());
        stack.push(a <= b);
    });
    defineHandler(OP_EQUAL, function(){
        var b = stack.pop();
        var a = stack.pop();
        stack.push(a == b);
    });
    defineHandler(OP_NOTEQUAL, function(){
        var b = stack.pop();
        var a = stack.pop();
        stack.push(a != b);
    });
    defineHandler(OP_IDENTICAL, function(){
        var b = stack.pop();
        var a = stack.pop();
        stack.push(a === b);
    });
    defineHandler(OP_NOTIDENTICAL, function(){
        var b = stack.pop();
        var a = stack.pop();
        stack.push(a !== b);
    });
    defineHandler(OP_ECHO, function(){
        echo(toString(stack.pop()));
    });
    defineHandler(OP_PRINT, function(){
        echo(toString(stack.pop()));
        stack.push(1);
    });

    defineHandler(OP_ARRAY, function(){ stack.push([]); });
    defineHandler(OP_ADDARRAYITEM, function(){
        var v = stack.pop();
        var a = stack.pop();
        a.push(v);
        stack.push(a);
    });
    defineHandler(OP_ADDARRAYPAIR, function(){
        var val = stack.pop();
        var key = toString(stack.pop());
        var a = stack.pop();
        a[key] = val;
        stack.push(a);
    });

    defineHandler(OP_BOOLCAST, function(){ stack.push(toBool(stack.pop())); });

    defineHandler(OP_INVOKE, function(argc){
        var args = [];
        for(var i = argc - 1; i >= 0; i--){
            args[i] = stack.pop();
        }
        var func = stack.pop();
        if(typeof func === 'function'){
            func(args, function(ret){
                stack.push(ret);
            });
        }
        else {
            notice('cannot invoke a non-function object');
            stack.push(NULL);
        }
    });
    defineHandler(OP_INVOKENAME, function(arg){
        var argc = arg[1];
        var fname = arg[0];
        var args = [];
        for(var i = argc - 1; i >= 0; i--){
            args[i] = stack.pop();
        }
        var func = functions[fname];
        if(func !== undefined){
            func(args, function(ret){
                stack.push(ret);
            });
        }
        else {
            notice('use of undefined function ' + fname);
            stack.push(NULL);
        }
    });
    defineHandler(OP_INVOKEMETHOD, function(argc){
        var args = [];
        for(var i = argc - 1; i >= 0; i--){
            args[i] = stack.pop();
        }
        var methodName = toString(stack.pop());
        var cela = stack.pop();
        if(cela.__zendProto !== undefined){
            var method = cela.__zendProto[methodName];
            if(method !== undefined){
                method.call(cela, args, function(ret){
                    stack.push(ret);
                });
            }
            else {
                notice('object has no method ' + methodName);
                stack.push(NULL);
            }
        }
        else {
            notice('cannot invoke method of a non-object');
            stack.push(NULL);
        }
    });
    defineHandler(OP_INVOKEMETHODNAME, function(arg){
        var argc = arg[1];
        var methodName = arg[0];
        var args = [];
        for(var i = argc - 1; i >= 0; i--){
            args[i] = stack.pop();
        }
        var cela = stack.pop();
        if(cela.__zendProto !== undefined){
            var method = cela.__zendProto[methodName];
            if(method !== undefined){
                method.call(cela, args, function(ret){
                    stack.push(ret);
                });
            }
            else {
                notice('object has no method ' + methodName);
                stack.push(NULL);
            }
        }
        else {
            notice('cannot invoke method of a non-object');
            stack.push(NULL);
        }
    });
    defineHandler(OP_NEW, function(){
        // TODO
        stack.push(NULL);
    });
    defineHandler(OP_CREATEFUNCTION, function(arg){
        var index = arg[0];
        var useCount = arg[1];
        var args = [];
        for(var i = useCount - 1; i >= 0; i--){
            args[i] = stack.pop();
        }
        stack.push(createClosure(opArray, index, args));
    });
    defineHandler(OP_CREATEITERATOR, function(){
        var v = stack.pop();
        if(isArray(v)){
            stack.push(createIterator(v));
        }
        else {
            notice('cannot iterate a non-array');
            stack.push(createIterator([]));
        }
    });
    defineHandler(OP_ITERATORISEND, function(){
        stack.push(stack.pop().isEnd());
    });
    defineHandler(OP_ITERATORNEXT, function(){
        stack.pop().next();
    });
    defineHandler(OP_GETITERATORKEY, function(){
        stack.push(stack.pop().getKey());
    });
    defineHandler(OP_GETITERATORVALUE, function(){
        stack.push(stack.pop().getVal());
    });

    defineHandler(OP_JMP, function(arg){ pc = arg; });
    defineHandler(OP_JZ, function(arg){ !toBool(stack.pop()) && (pc = arg); });
    defineHandler(OP_JNZ, function(arg){ toBool(stack.pop()) && (pc = arg); });
    defineHandler(OP_RETURN, function(){
        var r = stack.pop();
        var cb = returnCb;
        scope.length > 0 ? popScope() : (run = false);
        cb(r);
    });
    defineHandler(OP_RETURNNULL, function(){
        var cb = returnCb;
        scope.length > 0 ? popScope() : (run = false);
        cb(NULL);
    });

    return {
        createFunctionFromOpArray: createFunctionFromOpArray,
        defineFunction: defineFunction,
        defineInterface: defineInterface,
    };
}

exports.createVM = createVM;

exports.compile = function compile(fname, source, errs){
    var parser = createParser();
    var outputs = { astRoot: null };
    var err = false;
    parser.init(outputs);
    parser.on('lexicalerror', function(c, line, column){
        line++;
        column++;
        errs.push('lexical error: (line ' + line + ', column ' + column + '): unexpected character "' + c + '"');
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', function(msg, token){
        errs.push('syntax error: (line ' + token.startLine + ', column ' + token.startColumn + '):' + msg);
        parser.halt();
        err = true;
    });
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        var cp = createCompiler(fname);
        cp.addErrHandler(function(msg){
            errs.push(msg);
        });
        return cp.compile(outputs.astRoot);
    }
}

})));