/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

// universal module defination
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.zend = {})));
}(this, (function (exports) { 'use strict';
var toString = {}.toString;
function isArray(a){
    return toString.call(a) === '[object Array]';
}
function ZNode(type, child, val, pos){
    this.parent = null;
    this.type = type;
    this.val = val || null;
    this.child = isArray(child) ? child : child === null || typeof child === 'undefined' ? [] : [child];
    this.pos = pos || null;
    for(var i = 0, _a = this.child; i < _a.length; i++){
        _a[i] !== ZNode.NONE && (_a[i].parent = this);
    }
}
ZNode.NONE = new ZNode(AST_NONE);
ZNode.prototype.add = function(c){
    this.child.push(c);
    c.parent = this;
}
ZNode.prototype.toString = function(){

}

function nodeFromToken(t){
    return new ZNode(AST_NONE, null, t.val, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeFromTrivalToken(t){
    return new ZNode(AST_NONE, null, null, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeBetween(from, to, val){
    return new ZNode(AST_NONE, null, val, {
        startLine: from.startLine,
        startColumn: from.startColumn,
        endLine: to.endLine,
        endColumn: to.endColumn
    });
}
var escapes = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'"
};
function unescape(s){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}
var cc = 0;
function defineOpcode(name, handler){
    return {
        code: cc++,
        name: name,
        handler: handler || null
    };
}
var OP_NOP = defineOpcode('nop');
var OP_PUSH = defineOpcode('push');
var OP_POP = defineOpcode('pop');
var OP_DUP = defineOpcode('dup');
var OP_GETVAR = defineOpcode('getVar');
var OP_SETVAR = defineOpcode('setVar');
var OP_SETPROP = defineOpcode('setProp');
var OP_GETPROP = defineOpcode('getProp');
var OP_GETOFFSET = defineOpcode('getOffset');
var OP_SETOFFSET = defineOpcode('setOffset');
var OP_GETMAXOFFSET = defineOpcode('getMaxOffset');
var OP_SETMAXOFFSET = defineOpcode('setMaxOffset');
var OP_GETCONST = defineOpcode('getConst');
var OP_SETLOCAL = defineOpcode('setLocal');
var OP_GETLOCAL = defineOpcode('getLocal');

var OP_PLUS = defineOpcode('plus');
var OP_MINUS = defineOpcode('minus');
var OP_TIMES = defineOpcode('times');
var OP_DIVIDE = defineOpcode('divide');
var OP_POW = defineOpcode('pow');
var OP_CONCAT = defineOpcode('concat');
var OP_MOD = defineOpcode('mod');
var OP_BITAND = defineOpcode('bitAnd');
var OP_BITOR = defineOpcode('bitOr');
var OP_BITXOR = defineOpcode('bitXor');
var OP_BITNOT = defineOpcode('bitNot');
var OP_AND = defineOpcode('and');
var OP_OR = defineOpcode('or');
var OP_NOT = defineOpcode('not');
var OP_XOR = defineOpcode('xor');
var OP_LEFTSHIFT = defineOpcode('leftShift');
var OP_RIGHTSHIFT = defineOpcode('rightShift');
var OP_POSITIVE = defineOpcode('positive');
var OP_NEGATIVE = defineOpcode('negative');
var OP_INC = defineOpcode('inc');
var OP_DEC = defineOpcode('dec');
var OP_GREATERTHAN = defineOpcode('greaterThan');
var OP_LESSTHAN = defineOpcode('lessThan');
var OP_EQUAL = defineOpcode('equal');
var OP_IDENTICAL = defineOpcode('identical');
var OP_GREATERTHANOREQUAL = defineOpcode('greaterThanOrEqual');
var OP_LESSTHANOREQUAL = defineOpcode('lessThanOrEqual');
var OP_NOTEQUAL = defineOpcode('notEqual');
var OP_NOTIDENTICAL = defineOpcode('notIdentical');
var OP_ECHO = defineOpcode('echo');

var OP_INVOKE = defineOpcode('invoke');
var OP_INVOKENAME = defineOpcode('invokeName');
var OP_INVOKEMETHOD = defineOpcode('invokeMethod');
var OP_INVOKEMETHODNAME = defineOpcode('invokeMethodName');
var OP_NEW = defineOpcode('new');
var OP_DEFINEFUNCTION = defineOpcode('defineFunction');
var OP_CREATEFUNCTION = defineOpcode('createFunction');

var OP_JMP = defineOpcode('jmp');
var OP_JZ = defineOpcode('jz');
var OP_JNZ = defineOpcode('jnz');
var OP_RETURN = defineOpcode('return');
var OP_RETURNNULL = defineOpcode('returnNull');
var OP_CODE = defineOpcode('code');
var OP_ENDCODE = defineOpcode('endCode');

cc = 0;
var AST_NONE = cc++;
var AST_TOPLIST = cc++;
var AST_STATEMENTLIST = cc++;
var AST_ECHO = cc++;
var AST_IF = cc++;
var AST_WHILE = cc++;
var AST_DO_WHILE = cc++;
var AST_FOR = cc++;
var AST_EXPR_LIST = cc++;
var AST_CONDITIONALEXPR = cc++;
var AST_ARGLIST = cc++;
var AST_PARAMLIST = cc++;
var AST_LEXICALVARLIST = cc++;
var AST_FUNCTIONCALL = cc++;
var AST_METHODCALL = cc++;
var AST_FUNCTION = cc++;
var AST_ANONYFUNCTION = cc++;
var AST_BREAK = cc++;
var AST_CONTINUE = cc++;
var AST_RETURN = cc++;

var AST_VARIABLE = cc++;
var AST_PROPERTY = cc++;
var AST_OFFSET = cc++;
var AST_ASSIGN = cc++;
var AST_BINARYOP = cc++;
var AST_UNARYOP = cc++;
var AST_LOGICALOR = cc++;
var AST_LOGICALAND = cc++;
var AST_POSTINC = cc++;
var AST_SUFFIXINC = cc++;
var AST_POSTDEC = cc++;
var AST_SUFFIXDEC = cc++;

var AST_CONST = cc++;
var AST_INTEGER = cc++;
var AST_FLOAT = cc++;
var AST_STRING = cc++;
var AST_ARRAY = cc++;
var AST_ARRAYPAIR = cc++;
var AST_LOCAL = cc++;


/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     1,     1,     1,     2,     1,     1,     1,     1,     3,
         9,    10,    11,    -1,     3,     3,     3,     3,     3,     3,
         3,     3,    -1,     3,     3,     3,     8,     3,     3,     3,
         3,    -1,     3,     3,     7,     3,     3,     3,     3,     3,
        -1,     5,     3,     3,     6,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     3,     3,     3,     3,    -1,     3,
         4,     3,     3,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexdisnext0 = [ 
         0,    63,    54,    45,    36,    -9,    27,    18,     9,    -9,
        -9,    -9,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
         8,     8,     8,    -1,     8,     8,     8,     8,     7,     7,
         7,     7,    -1,     7,     7,     7,     7,     6,     6,     6,
         6,    -1,     6,     6,     6,     6,     4,     4,     4,     4,
        -1,     4,     4,     4,     4,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     2,     2,     2,     2,    -1,     2,
         2,     2,     2,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexclassTable0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         4,     5,     0,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
         0,     0,     8,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable0 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd0 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,1,0,1,1,1,0,0,0,
]; 
var jjlextable0 = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1 = [ 
        54,    54,   153,    54,    54,    54,    54,    54,    54,    55,
        54,    54,    54,    54,    54,    54,    54,    54,   130,    54,
        54,    54,    54,    54,    54,   130,   130,   130,   130,    54,
        54,    54,    54,    54,    54,    56,    54,    54,    54,    54,
       130,   130,   130,   130,   130,   130,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,   152,    54,    54,    54,
        54,    54,    54,    55,    54,    54,    54,    54,    54,    54,
        54,    54,   130,    54,    54,    54,    54,    54,    54,   130,
       130,   130,   130,    54,    54,    54,    54,    54,    54,    56,
        54,    54,    54,    54,   130,   130,   130,   130,   130,   130,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
       151,    54,    54,    54,    54,    54,    54,    55,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    56,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,   150,    54,    54,    54,    54,    54,
        54,    55,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    56,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,   149,    54,
        54,    54,    54,    54,    54,    55,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    56,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
         1,     2,     3,     4,     5,     6,     7,     8,     9,    10,
        11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
        21,    22,    23,    24,    25,    26,    26,    26,    26,    26,
        27,    26,    28,    29,   148,    30,    31,    32,    33,    26,
        34,    35,    36,    37,    38,    26,    39,    26,    40,    26,
        26,    26,    26,    41,    26,    26,    42,    43,    26,    44,
        45,    46,    47,    75,   101,   147,   101,   103,   104,   102,
        75,    75,    75,    75,    75,    75,    75,    75,    75,     1,
         2,     3,     1,    48,     3,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,     1,     2,     3,     1,
         2,     3,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    72,    73,   144,    93,    70,    71,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    68,    69,
        52,   141,   137,   131,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    94,    53,   121,   102,   102,   109,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
       146,    75,    75,    75,    75,    75,    75,    75,    75,    75,
       106,   105,    99,    95,    80,    57,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    58,    79,    74,    65,    64,
        51,    75,    75,    75,    75,   145,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    49,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,   143,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,   142,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,   140,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
       139,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,   138,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,   136,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,   135,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,   134,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,   133,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
        75,   132,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,   129,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,   128,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,   127,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,   126,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,   125,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,   124,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,   123,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,   122,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    96,    -1,    -1,
        -1,    -1,    -1,    -1,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    -1,    -1,    -1,    -1,    -1,    -1,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,   119,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,   118,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,   117,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,   116,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,   115,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,   114,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
       113,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,   112,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,   111,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,   110,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,   108,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,   107,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    96,    -1,    -1,    -1,    -1,    -1,    -1,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    -1,    -1,    -1,
        -1,    -1,    -1,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    92,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    91,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    90,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    89,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    88,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    86,    75,    75,
        75,    75,    87,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    84,
        75,    75,    75,    75,    75,    75,    85,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    83,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    82,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    81,    75,    75,
        75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,
        75,    75,    75,    75,    75,    75,    78,    75,    75,    -1,
        -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,
        -1,    -1,    75,    75,    75,    75,    75,    75,    75,    77,
        75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    -1,    -1,
        -1,    -1,    -1,    -1,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    76,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        -1,    -1,    -1,    -1,    -1,    -1,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,   120,    97,    66,   100,
        18,    97,   100,   120,   120,   120,   120,    -1,    61,    67,
        67,    -1,    67,    -1,    64,    62,    63,    -1,   120,   120,
       120,   120,   120,   120,    67,    67,    67,    97,    67,    59,
        -1,    -1,    -1,    97,    -1,    -1,    -1,    97,    60,    -1,
        67,    -1,    -1,    97,    -1,    -1,    97,    -1,    97,    98,
        -1,    98,
]; 
var jjlexdisnext1 = [ 
       319,   428,   425,   401,   530,   -64,  3046,   508,   462,   256,
       -64,   -64,   503,  3126,   -64,  3103,   511,   506,  3092,   -64,
       -64,   447,   423,   419,   504,  3011,  2969,  2927,  2885,   -64,
       -64,   504,   476,   -64,  2843,  2801,  2759,  2717,  2675,  2633,
      2591,  2549,  2507,  2465,   -64,   422,   -64,   -64,   398,   491,
      2423,   -64,   -64,   -64,   192,   -64,  3102,   490,   -64,   -64,
       -64,   -64,   -64,   -64,  3106,   -64,  3094,   371,   366,   -64,
       489,   -64,   -64,   488,   -64,  2381,  2339,  2297,  2255,   -64,
       442,  2213,  2171,  2129,  2087,  2045,  2003,  1961,  1919,  1877,
      1835,  1793,  1751,   -64,   -64,   -64,  1709,   128,  3088,   -64,
      3091,   469,   468,   -64,   -64,   -64,   -64,  1667,  1625,   445,
      1583,  1541,  1499,  1457,  1415,  1373,  1331,  1289,  1247,  1205,
        64,   424,  1163,  1121,  1079,  1037,   995,   953,   911,   869,
         0,   416,   827,   785,   743,   701,   659,   433,   617,   575,
       533,   401,   491,   449,   333,   407,   365,   304,   205,   147,
        81,    22,   -52,   -64,
]; 
var jjlexchecknext1 = [ 
       130,   130,   152,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   120,   120,   151,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,    97,    97,
       150,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    54,    54,   149,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,     9,     9,   148,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   147,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   146,    67,   144,    67,    68,    68,    67,
       146,   146,   146,   146,   146,   146,   146,   146,   146,    48,
        48,    48,     3,     3,     3,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   145,     2,     2,     2,     1,
         1,     1,   145,   145,   145,   145,   145,   145,   145,   145,
       145,    23,    23,   141,    45,    22,    22,   145,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   143,    21,    21,
         8,   137,   131,   121,   143,   143,   143,   143,   143,   143,
       143,   143,   143,    45,     8,   109,   102,   101,    80,   143,
       143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
       143,   143,   143,   143,   143,   143,   143,   143,   143,   142,
        73,    70,    57,    49,    32,    12,   142,   142,   142,   142,
       142,   142,   142,   142,   142,    12,    31,    24,    17,    16,
         7,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   140,     4,    -1,    -1,    -1,    -1,    -1,   140,   140,
       140,   140,   140,   140,   140,   140,   140,    -1,    -1,    -1,
        -1,    -1,    -1,   140,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   139,    -1,    -1,    -1,    -1,    -1,    -1,
       139,   139,   139,   139,   139,   139,   139,   139,   139,    -1,
        -1,    -1,    -1,    -1,    -1,   139,   139,   139,   139,   139,
       139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
       139,   139,   139,   139,   139,   138,    -1,    -1,    -1,    -1,
        -1,    -1,   138,   138,   138,   138,   138,   138,   138,   138,
       138,    -1,    -1,    -1,    -1,    -1,    -1,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   136,    -1,    -1,
        -1,    -1,    -1,    -1,   136,   136,   136,   136,   136,   136,
       136,   136,   136,    -1,    -1,    -1,    -1,    -1,    -1,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   135,
        -1,    -1,    -1,    -1,    -1,    -1,   135,   135,   135,   135,
       135,   135,   135,   135,   135,    -1,    -1,    -1,    -1,    -1,
        -1,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   134,    -1,    -1,    -1,    -1,    -1,    -1,   134,   134,
       134,   134,   134,   134,   134,   134,   134,    -1,    -1,    -1,
        -1,    -1,    -1,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   133,    -1,    -1,    -1,    -1,    -1,    -1,
       133,   133,   133,   133,   133,   133,   133,   133,   133,    -1,
        -1,    -1,    -1,    -1,    -1,   133,   133,   133,   133,   133,
       133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
       133,   133,   133,   133,   133,   132,    -1,    -1,    -1,    -1,
        -1,    -1,   132,   132,   132,   132,   132,   132,   132,   132,
       132,    -1,    -1,    -1,    -1,    -1,    -1,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   129,    -1,    -1,
        -1,    -1,    -1,    -1,   129,   129,   129,   129,   129,   129,
       129,   129,   129,    -1,    -1,    -1,    -1,    -1,    -1,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   128,
        -1,    -1,    -1,    -1,    -1,    -1,   128,   128,   128,   128,
       128,   128,   128,   128,   128,    -1,    -1,    -1,    -1,    -1,
        -1,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   127,    -1,    -1,    -1,    -1,    -1,    -1,   127,   127,
       127,   127,   127,   127,   127,   127,   127,    -1,    -1,    -1,
        -1,    -1,    -1,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   126,    -1,    -1,    -1,    -1,    -1,    -1,
       126,   126,   126,   126,   126,   126,   126,   126,   126,    -1,
        -1,    -1,    -1,    -1,    -1,   126,   126,   126,   126,   126,
       126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
       126,   126,   126,   126,   126,   125,    -1,    -1,    -1,    -1,
        -1,    -1,   125,   125,   125,   125,   125,   125,   125,   125,
       125,    -1,    -1,    -1,    -1,    -1,    -1,   125,   125,   125,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       125,   125,   125,   125,   125,   125,   125,   124,    -1,    -1,
        -1,    -1,    -1,    -1,   124,   124,   124,   124,   124,   124,
       124,   124,   124,    -1,    -1,    -1,    -1,    -1,    -1,   124,
       124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
       124,   124,   124,   124,   124,   124,   124,   124,   124,   123,
        -1,    -1,    -1,    -1,    -1,    -1,   123,   123,   123,   123,
       123,   123,   123,   123,   123,    -1,    -1,    -1,    -1,    -1,
        -1,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   122,    -1,    -1,    -1,    -1,    -1,    -1,   122,   122,
       122,   122,   122,   122,   122,   122,   122,    -1,    -1,    -1,
        -1,    -1,    -1,   122,   122,   122,   122,   122,   122,   122,
       122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
       122,   122,   122,   119,    -1,    -1,    -1,    -1,    -1,    -1,
       119,   119,   119,   119,   119,   119,   119,   119,   119,    -1,
        -1,    -1,    -1,    -1,    -1,   119,   119,   119,   119,   119,
       119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
       119,   119,   119,   119,   119,   118,    -1,    -1,    -1,    -1,
        -1,    -1,   118,   118,   118,   118,   118,   118,   118,   118,
       118,    -1,    -1,    -1,    -1,    -1,    -1,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   117,    -1,    -1,
        -1,    -1,    -1,    -1,   117,   117,   117,   117,   117,   117,
       117,   117,   117,    -1,    -1,    -1,    -1,    -1,    -1,   117,
       117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
       117,   117,   117,   117,   117,   117,   117,   117,   117,   116,
        -1,    -1,    -1,    -1,    -1,    -1,   116,   116,   116,   116,
       116,   116,   116,   116,   116,    -1,    -1,    -1,    -1,    -1,
        -1,   116,   116,   116,   116,   116,   116,   116,   116,   116,
       116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
       116,   115,    -1,    -1,    -1,    -1,    -1,    -1,   115,   115,
       115,   115,   115,   115,   115,   115,   115,    -1,    -1,    -1,
        -1,    -1,    -1,   115,   115,   115,   115,   115,   115,   115,
       115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
       115,   115,   115,   114,    -1,    -1,    -1,    -1,    -1,    -1,
       114,   114,   114,   114,   114,   114,   114,   114,   114,    -1,
        -1,    -1,    -1,    -1,    -1,   114,   114,   114,   114,   114,
       114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
       114,   114,   114,   114,   114,   113,    -1,    -1,    -1,    -1,
        -1,    -1,   113,   113,   113,   113,   113,   113,   113,   113,
       113,    -1,    -1,    -1,    -1,    -1,    -1,   113,   113,   113,
       113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
       113,   113,   113,   113,   113,   113,   113,   112,    -1,    -1,
        -1,    -1,    -1,    -1,   112,   112,   112,   112,   112,   112,
       112,   112,   112,    -1,    -1,    -1,    -1,    -1,    -1,   112,
       112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
       112,   112,   112,   112,   112,   112,   112,   112,   112,   111,
        -1,    -1,    -1,    -1,    -1,    -1,   111,   111,   111,   111,
       111,   111,   111,   111,   111,    -1,    -1,    -1,    -1,    -1,
        -1,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   110,    -1,    -1,    -1,    -1,    -1,    -1,   110,   110,
       110,   110,   110,   110,   110,   110,   110,    -1,    -1,    -1,
        -1,    -1,    -1,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   108,    -1,    -1,    -1,    -1,    -1,    -1,
       108,   108,   108,   108,   108,   108,   108,   108,   108,    -1,
        -1,    -1,    -1,    -1,    -1,   108,   108,   108,   108,   108,
       108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
       108,   108,   108,   108,   108,   107,    -1,    -1,    -1,    -1,
        -1,    -1,   107,   107,   107,   107,   107,   107,   107,   107,
       107,    -1,    -1,    -1,    -1,    -1,    -1,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,    96,    -1,    -1,
        -1,    -1,    -1,    -1,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    -1,    -1,    -1,    -1,    -1,    -1,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    92,
        -1,    -1,    -1,    -1,    -1,    -1,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    -1,    -1,    -1,    -1,    -1,
        -1,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    91,    -1,    -1,    -1,    -1,    -1,    -1,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    -1,    -1,    -1,
        -1,    -1,    -1,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    90,    -1,    -1,    -1,    -1,    -1,    -1,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    -1,
        -1,    -1,    -1,    -1,    -1,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    89,    -1,    -1,    -1,    -1,
        -1,    -1,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    -1,    -1,    -1,    -1,    -1,    -1,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    88,    -1,    -1,
        -1,    -1,    -1,    -1,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    -1,    -1,    -1,    -1,    -1,    -1,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    87,
        -1,    -1,    -1,    -1,    -1,    -1,    87,    87,    87,    87,
        87,    87,    87,    87,    87,    -1,    -1,    -1,    -1,    -1,
        -1,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    86,    -1,    -1,    -1,    -1,    -1,    -1,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    -1,    -1,    -1,
        -1,    -1,    -1,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    85,    -1,    -1,    -1,    -1,    -1,    -1,
        85,    85,    85,    85,    85,    85,    85,    85,    85,    -1,
        -1,    -1,    -1,    -1,    -1,    85,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    84,    -1,    -1,    -1,    -1,
        -1,    -1,    84,    84,    84,    84,    84,    84,    84,    84,
        84,    -1,    -1,    -1,    -1,    -1,    -1,    84,    84,    84,
        84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
        84,    84,    84,    84,    84,    84,    84,    83,    -1,    -1,
        -1,    -1,    -1,    -1,    83,    83,    83,    83,    83,    83,
        83,    83,    83,    -1,    -1,    -1,    -1,    -1,    -1,    83,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    82,
        -1,    -1,    -1,    -1,    -1,    -1,    82,    82,    82,    82,
        82,    82,    82,    82,    82,    -1,    -1,    -1,    -1,    -1,
        -1,    82,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    78,    -1,    -1,    -1,    -1,    -1,    -1,
        78,    78,    78,    78,    78,    78,    78,    78,    78,    -1,
        -1,    -1,    -1,    -1,    -1,    78,    78,    78,    78,    78,
        78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
        78,    78,    78,    78,    78,    77,    -1,    -1,    -1,    -1,
        -1,    -1,    77,    77,    77,    77,    77,    77,    77,    77,
        77,    -1,    -1,    -1,    -1,    -1,    -1,    77,    77,    77,
        77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
        77,    77,    77,    77,    77,    77,    77,    76,    -1,    -1,
        -1,    -1,    -1,    -1,    76,    76,    76,    76,    76,    76,
        76,    76,    76,    -1,    -1,    -1,    -1,    -1,    -1,    76,
        76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
        76,    76,    76,    76,    76,    76,    76,    76,    76,    75,
        -1,    -1,    -1,    -1,    -1,    -1,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    -1,    -1,    -1,    -1,    -1,
        -1,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    50,    -1,    -1,    -1,    -1,    -1,    -1,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    -1,    -1,    -1,
        -1,    -1,    -1,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    43,    -1,    -1,    -1,    -1,    -1,    -1,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    -1,
        -1,    -1,    -1,    -1,    -1,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    42,    -1,    -1,    -1,    -1,
        -1,    -1,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    -1,    -1,    -1,    -1,    -1,    -1,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    41,    -1,    -1,
        -1,    -1,    -1,    -1,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    -1,    -1,    -1,    -1,    -1,    -1,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    40,
        -1,    -1,    -1,    -1,    -1,    -1,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    -1,    -1,    -1,    -1,    -1,
        -1,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    39,    -1,    -1,    -1,    -1,    -1,    -1,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    -1,    -1,    -1,
        -1,    -1,    -1,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    38,    -1,    -1,    -1,    -1,    -1,    -1,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    -1,
        -1,    -1,    -1,    -1,    -1,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    37,    -1,    -1,    -1,    -1,
        -1,    -1,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    -1,    -1,    -1,    -1,    -1,    -1,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    36,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    -1,    -1,    -1,    -1,    -1,    -1,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    36,    35,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    34,    -1,    -1,    -1,    -1,    -1,    -1,    34,    34,
        34,    34,    34,    34,    34,    34,    34,    -1,    -1,    -1,
        -1,    -1,    -1,    34,    34,    34,    34,    34,    34,    34,
        34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
        34,    34,    34,    28,    -1,    -1,    -1,    -1,    -1,    -1,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    -1,
        -1,    -1,    -1,    -1,    -1,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    27,    -1,    -1,    -1,    -1,
        -1,    -1,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    -1,    -1,    -1,    -1,    -1,    -1,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    26,    -1,    -1,
        -1,    -1,    -1,    -1,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    -1,    -1,    -1,    -1,    -1,    -1,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    25,
        -1,    -1,    -1,    -1,    -1,    -1,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    -1,    -1,    -1,    -1,    -1,
        -1,    25,    25,    25,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
        25,     6,     6,     6,     6,     6,     6,     6,     6,     6,
        -1,    -1,    -1,    -1,    -1,    -1,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,    98,    56,    18,   100,
        18,    56,    66,    98,    98,    98,    98,    -1,    15,   100,
        18,    -1,    66,    -1,    64,    15,    15,    -1,    98,    98,
        98,    98,    98,    98,    64,   100,    18,    56,    66,    13,
        -1,    -1,    -1,    56,    -1,    -1,    -1,    56,    13,    -1,
        64,    -1,    -1,    56,    -1,    -1,    56,    -1,    56,    56,
        -1,    56,
]; 
var jjlexclassTable1 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     4,     5,     0,     6,     7,     8,     9,
        10,    11,    12,    13,    14,    15,    16,    17,    18,    18,
        18,    18,    18,    18,    18,    18,    18,    18,    19,    20,
        21,    22,    23,    24,     0,    25,    26,    26,    27,    28,
        26,    29,    29,    29,    29,    29,    29,    29,    30,    31,
        29,    29,    32,    29,    29,    29,    29,    29,    33,    29,
        29,    34,    35,    36,    37,    38,    39,    40,    41,    42,
        43,    44,    45,    29,    46,    47,    29,    48,    49,    50,
        51,    52,    53,    29,    54,    55,    56,    57,    29,    58,
        59,    29,    29,    60,    61,    62,    63,     0,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,
]; 
var jjlexunicodeClassTable1 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1 = [ 
    0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,
    1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
    1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,
    1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,
    1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,
    0,0,0,1,
]; 
var jjlexhasArc1 = [ 
    1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,
    1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,
    0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,
    1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,
    0,0,0,0,1,0,1,1,1,0,1,0,0,1,0,
    1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,
    0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,0,
]; 
var jjlextable1 = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2 = [ 
         1,     2,     3,     4,     8,     5,     6,     1,     2,     3,
         1,     7,     3,     1,     2,     3,     1,     2,     3,    10,
        10,     9,     9,    10,    10,     9,     9,
]; 
var jjlexdisnext2 = [ 
         0,    16,    13,    10,    -1,    21,    -7,     7,    19,    17,
        15,
]; 
var jjlexchecknext2 = [ 
         0,     0,     0,     0,     4,     0,     0,     7,     7,     7,
         3,     3,     3,     2,     2,     2,     1,     1,     1,    10,
        10,     9,     9,     8,     8,     5,     5,
]; 
var jjlexclassTable2 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,    -1,    -1,    -1,     3,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,    -1,    -1,    -1,    -1,    -1,    -1,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     6,    -1,    -1,    -1,    -1,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,
]; 
var jjlexunicodeClassTable2 = [ 
    
]; 
var jjlexisEnd2 = [ 
    0,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc2 = [ 
    1,1,1,1,1,1,0,1,1,1,1,
]; 
var jjlextable2 = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
var jjlexpnext3 = [ 
         1,     2,     3,     1,     1,     1,     1,     1,     4,    -1,
        -1,     4,    11,     4,    11,     4,     4,    -1,    -1,     4,
        11,     4,    11,     4,     4,    -1,    -1,     4,     4,     4,
        10,     4,     4,    -1,    -1,     4,     4,     4,     4,     4,
         4,    -1,    -1,     6,     7,     4,     7,     8,     4,    -1,
        -1,     4,     4,     9,     4,     4,     4,    -1,    -1,     6,
         7,     4,     7,     8,     4,    -1,    -1,     4,     4,     4,
         4,     4,     4,    -1,    -1,     4,     4,     4,     5,     4,
         1,    -1,    -1,     1,     1,     1,     1,     1,
]; 
var jjlexdisnext3 = [ 
         0,    80,    -8,    72,    64,    56,    48,    40,    32,    24,
        16,     8,
]; 
var jjlexchecknext3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,    11,    -1,
        -1,    11,    11,    11,    11,    11,    10,    -1,    -1,    10,
        10,    10,    10,    10,     9,    -1,    -1,     9,     9,     9,
         9,     9,     8,    -1,    -1,     8,     8,     8,     8,     8,
         7,    -1,    -1,     7,     7,     7,     7,     7,     6,    -1,
        -1,     6,     6,     6,     6,     6,     5,    -1,    -1,     5,
         5,     5,     5,     5,     4,    -1,    -1,     4,     4,     4,
         4,     4,     3,    -1,    -1,     3,     3,     3,     3,     3,
         1,    -1,    -1,     1,     1,     1,     1,     1,
]; 
var jjlexclassTable3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     0,
         0,     0,     0,     0,     0,     3,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     0,     0,
         0,     0,     5,     0,     0,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     7,     0,     0,     0,     0,     0,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     0,     0,     0,     0,     0,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,
]; 
var jjlexunicodeClassTable3 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd3 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc3 = [ 
    1,1,0,1,1,1,1,1,1,1,1,1,
]; 
var jjlextable3 = {
    pnext: jjlexpnext3,
    disnext: jjlexdisnext3,
    checknext: jjlexchecknext3,
    maxAsicii: 255,
    classTable: jjlexclassTable3,
    unicodeClassTable: jjlexunicodeClassTable3,
    isEnd: jjlexisEnd3,
    hasArc: jjlexhasArc3
};
var jjlexpnext4 = [ 
         3,     4,     7,     4,     5,     3,     4,     6,     4,     5,
         8,     8,     8,     8,     2,     1,
]; 
var jjlexdisnext4 = [ 
        15,    10,     4,     4,    -1,    -6,    -2,     9,     8,
]; 
var jjlexchecknext4 = [ 
         4,     4,     6,     4,     4,     2,     2,     3,     2,     2,
         8,     7,     8,     7,     1,     0,
]; 
var jjlexclassTable4 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,    -1,    -1,
        -1,    -1,     3,    -1,    -1,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     5,    -1,    -1,    -1,    -1,    -1,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexunicodeClassTable4 = [ 
    
]; 
var jjlexisEnd4 = [ 
    0,0,1,0,1,1,0,1,1,
]; 
var jjlexhasArc4 = [ 
    1,1,1,1,1,0,1,1,1,
]; 
var jjlextable4 = {
    pnext: jjlexpnext4,
    disnext: jjlexdisnext4,
    checknext: jjlexchecknext4,
    maxAsicii: 255,
    classTable: jjlexclassTable4,
    unicodeClassTable: jjlexunicodeClassTable4,
    isEnd: jjlexisEnd4,
    hasArc: jjlexhasArc4
};
/*
    dfa tables
*/
var jjdfaTables = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
    jjlextable3,
    jjlextable4,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc, c){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,     1,     1,     1,     1,     2,     1,     1,     1,    -1,
        -1,    -1,
]; 
var jjlexTokens1 = [ 
        -1,    -1,    -1,    -1,    64,     7,     9,    19,    40,    -1,
        51,    52,    14,    12,    55,    13,    77,    15,     5,    18,
        58,    21,    28,    20,    17,     3,     3,     3,     3,    53,
        54,    42,    -1,     8,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,    56,    41,    57,    43,    -1,    26,
        10,    39,    59,    34,    -1,     6,    -1,    16,    31,    44,
        29,    45,    30,    50,     4,    33,     4,    -1,    46,    23,
        24,    49,    22,    47,    -1,     3,     3,    61,     3,    36,
        -1,     3,     3,    69,     3,     3,     3,     3,    65,     3,
         3,     3,     3,    35,    60,    27,    10,    -1,    -1,    32,
         4,    -1,     4,    48,    38,    25,    37,    62,    63,    -1,
         3,     3,     3,     3,    70,     3,     3,     3,    73,     3,
        -1,    -1,     3,     3,    67,    66,     3,    72,     3,     3,
        -1,    -1,    74,     3,     3,     3,    68,    -1,     3,     3,
        76,    -1,     3,     3,    -1,    75,    71,    -1,    -1,    -1,
        -1,    -1,    -1,    11,
]; 
var jjlexTokens2 = [ 
        -1,    -1,    -1,    -1,     9,     3,    56,    -1,    10,     3,
        10,
]; 
var jjlexTokens3 = [ 
        -1,    78,     7,    78,    78,    79,    78,    79,    81,    78,
        80,    80,
]; 
var jjlexTokens4 = [ 
        -1,    -1,    79,    -1,    79,    81,    -1,    80,    80,
]; 

var jjstateCount = 256;
var jjtokenCount = 83;
var jjactERR = 257;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
       125,   126,    49,    47,    46,    48,   255,   232,    19,    18,
       233,    36,    37,   -36,   -34,   252,   -36,    81,    82,    83,
        84,    86,   250,   249,    85,    81,    82,    83,    84,    86,
        19,    18,    85,    63,    64,    65,    66,    67,    68,    69,
        70,   226,    39,    40,    41,   241,   -35,    19,    18,   -35,
        35,   -35,    50,    73,   -35,   122,   251,   123,    12,    75,
        74,   239,   236,    38,   135,   235,   127,   129,   130,   131,
        43,    16,    13,   133,   134,   132,   125,   126,    49,    47,
        46,    48,    87,   230,    19,    18,   120,    36,    37,   224,
        87,    83,    84,    86,   227,   221,    85,   220,   219,   217,
        81,    82,    83,    84,    86,   212,   113,    85,    63,    64,
        65,    66,    67,    68,    69,    70,    19,    18,    39,    40,
        41,   207,    83,    84,    86,   206,    35,    85,    50,   204,
        86,   122,   231,   123,    75,    74,    83,    84,    86,    38,
       135,    85,   127,   129,   130,   131,    43,    16,    86,   133,
       134,   132,   125,   126,    49,    47,    46,    48,    13,    86,
        19,    18,    86,    36,    37,    87,    19,    18,   200,    11,
        11,   196,   194,   189,   188,   186,    81,    82,    83,    84,
        86,   185,   184,    85,    63,    64,    65,    66,    67,    68,
        69,    70,    23,   180,    39,    40,    41,   178,    23,   119,
       114,   113,    35,   103,    50,   -33,    60,   122,   213,   123,
        75,    74,    59,    54,    57,    38,   135,    23,   127,   129,
       130,   131,    43,    16,    53,   133,   134,   132,   125,   126,
        49,    47,    46,    48,    52,    51,    19,    18,     8,    36,
        37,    87,    20,    14,    10,    81,    82,    83,    84,    86,
         4,     0,    85,     0,    81,    82,    83,    84,    86,     0,
         0,    85,    63,    64,    65,    66,    67,    68,    69,    70,
        39,    40,    41,     0,     0,     0,     0,     0,    35,     0,
        50,     0,    73,   122,    71,   123,     0,     0,    75,    74,
         0,    38,   135,     0,   127,   129,   130,   131,     9,    16,
         0,   133,   134,   132,   125,   126,    49,    47,    46,    48,
        87,     0,    19,    18,     0,    36,    37,     0,     0,    87,
        88,    89,    90,    92,    91,    93,    94,    95,    96,    97,
        98,    99,     0,     0,     0,     0,   100,   101,     0,     0,
         0,     0,   -35,     0,     0,   -35,    39,    40,    41,     0,
         0,     0,     0,     0,    35,     0,    50,     0,     0,   122,
         0,   123,    81,    82,    83,    84,    86,    38,   135,    85,
       127,   129,   130,   131,    43,    16,     0,   133,   134,   132,
       125,   126,    49,    47,    46,    48,     0,     0,    19,    18,
         0,    36,    37,     0,     0,     0,    75,    74,     0,     0,
         0,     0,     0,     0,    81,    82,    83,    84,    86,     0,
         0,    85,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,    87,     0,     0,
        35,     0,    50,     0,     0,   122,     0,   123,    75,    74,
         0,     0,     0,    38,   135,     0,   127,   129,   130,   131,
        43,    16,     0,   133,   134,   132,   125,   126,    49,    47,
        46,    48,     0,     0,    19,    18,     0,    36,    37,    87,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        81,    82,    83,    84,    86,     0,     0,    85,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    39,    40,
        41,     0,     0,     0,     0,     0,    35,     0,    50,     0,
         0,   122,     0,   123,    75,    74,     0,     0,     0,    38,
       135,     0,   127,   129,   130,   131,    43,    16,     0,   133,
       134,   132,   125,   126,    49,    47,    46,    48,     0,     0,
        19,    18,     0,    36,    37,    87,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    81,    82,    83,    84,
        86,     0,     0,    85,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    39,    40,    41,     0,     0,     0,
         0,     0,    35,     0,    50,     0,     0,   122,     0,   123,
        75,    74,     0,     0,     0,    38,   135,     0,   127,   129,
       130,   131,    43,    16,     0,   133,   134,   132,   125,   126,
        49,    47,    46,    48,     0,     0,    19,    18,     0,    36,
        37,    87,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    81,    82,    83,    84,    86,
         0,     0,    85,     0,     0,     0,     0,     0,     0,     0,
        39,    40,    41,     0,     0,     0,     0,     0,    35,     0,
        50,     0,     0,   122,     0,   123,     0,     0,     0,    75,
        74,    38,   135,     0,   127,   129,   130,   131,    43,    16,
         0,   133,   134,   132,    81,    82,    83,    84,    86,    62,
         0,    85,    63,    64,    65,    66,    67,    68,    69,    70,
        87,     0,    81,    82,    83,    84,    86,     0,     0,    85,
         0,     0,    73,    72,    71,     0,     0,     0,    75,    74,
         0,     0,     0,     0,   248,     0,     0,     0,     0,     0,
         0,    76,    77,    78,    80,    79,    75,    74,     0,     0,
         0,     0,     0,    81,    82,    83,    84,    86,    62,    87,
        85,    63,    64,    65,    66,    67,    68,    69,    70,     0,
         0,    81,    82,    83,    84,    86,     0,    87,    85,     0,
         0,    73,    72,    71,     0,     0,     0,    75,    74,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
        76,    77,    78,    80,    79,    75,    74,     0,     0,     0,
         0,     0,    81,    82,    83,    84,    86,    62,    87,    85,
        63,    64,    65,    66,    67,    68,    69,    70,     0,     0,
        81,    82,    83,    84,    86,     0,    87,    85,     0,     0,
        73,    72,    71,     0,     0,     0,    75,    74,    49,    47,
        46,    48,   237,     0,    19,    18,     0,    36,    37,    76,
        77,    78,    80,    79,    75,    74,     0,     0,     0,     0,
         0,    81,    82,    83,    84,    86,    62,    87,    85,    63,
        64,    65,    66,    67,    68,    69,    70,     0,    39,    40,
        41,     0,     0,     0,     0,    87,    35,     0,    50,    73,
        72,    71,     0,     0,     0,    75,    74,     0,     0,    38,
         0,   234,     0,     0,     0,     0,    43,    16,    76,    77,
        78,    80,    79,     0,     0,     0,     0,     0,     0,     0,
        81,    82,    83,    84,    86,    62,    87,    85,    63,    64,
        65,    66,    67,    68,    69,    70,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    73,    72,
        71,     0,     0,     0,    75,    74,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   215,    76,    77,    78,
        80,    79,     0,     0,     0,   214,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    87,    81,    82,    83,    84,
        86,    62,     0,    85,    63,    64,    65,    66,    67,    68,
        69,    70,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    73,    72,    71,     0,     0,     0,
        75,    74,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    76,    77,    78,    80,    79,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    87,    81,    82,    83,    84,    86,    62,   201,    85,
        63,    64,    65,    66,    67,    68,    69,    70,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        73,    72,    71,     0,     0,     0,    75,    74,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    76,
        77,    78,    80,    79,     0,     0,     0,     0,     0,     0,
         0,    81,    82,    83,    84,    86,    62,    87,    85,    63,
        64,    65,    66,    67,    68,    69,    70,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
        72,    71,     0,     0,     0,    75,    74,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   191,    76,    77,
        78,    80,    79,     0,     0,     0,     0,     0,     0,     0,
        81,    82,    83,    84,    86,    62,    87,    85,    63,    64,
        65,    66,    67,    68,    69,    70,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    73,    72,
        71,     0,     0,     0,    75,    74,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   187,     0,    76,    77,    78,
        80,    79,     0,     0,     0,     0,     0,     0,     0,    81,
        82,    83,    84,    86,    62,    87,    85,    63,    64,    65,
        66,    67,    68,    69,    70,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    73,    72,    71,
         0,     0,     0,    75,    74,    49,    47,    46,    48,   181,
         0,    19,    18,     0,    36,    37,    76,    77,    78,    80,
        79,     0,     0,     0,     0,     0,     0,     0,    81,    82,
        83,    84,    86,    62,    87,    85,    63,    64,    65,    66,
        67,    68,    69,    70,     0,    39,    40,    41,     0,     0,
         0,     0,     0,    35,     0,    50,    73,    72,    71,     0,
         0,     0,    75,    74,     0,    61,    38,     0,     0,     0,
         0,     0,     0,    43,    16,    76,    77,    78,    80,    79,
         0,     0,     0,     0,     0,     0,     0,    81,    82,    83,
        84,    86,    62,    87,    85,    63,    64,    65,    66,    67,
        68,    69,    70,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    73,    72,    71,     0,     0,
         0,    75,    74,    49,    47,    46,    48,    58,     0,    19,
        18,     0,    36,    37,    76,    77,    78,    80,    79,     0,
         0,     0,     0,     0,     0,     0,    81,    82,    83,    84,
        86,    62,    87,    85,    63,    64,    65,    66,    67,    68,
        69,    70,     0,    39,    40,    41,     0,     0,     0,     0,
         0,    35,     0,    50,    73,    72,    71,     0,     0,     0,
        75,    74,     0,     0,    38,     0,     0,     0,     0,     0,
         0,    43,    16,    76,    77,    78,    80,    79,     0,     0,
         0,     0,     0,     0,     0,    81,    82,    83,    84,    86,
        62,    87,    85,    63,    64,    65,    66,    67,    68,    69,
        70,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    73,    72,    71,     0,     0,     0,    75,
        74,    49,    47,    46,    48,     0,     0,    19,    18,     0,
        36,    37,    76,    77,    78,    80,    79,     0,     0,     0,
         0,     0,     0,     0,    81,    82,    83,    84,    86,    62,
        87,    85,    63,    64,    65,    66,    67,    68,    69,    70,
         0,    39,    40,    41,     0,     0,     0,     0,     0,    35,
         0,    50,    73,    72,    71,     0,     0,     0,    75,    74,
         0,     0,    38,     0,     0,     0,     0,     0,     0,    43,
        16,    76,    77,    78,    80,    79,     0,     0,     0,     0,
         0,     0,     0,    81,    82,    83,    84,    86,    62,    87,
        85,    63,    64,    65,    66,    67,    68,    69,    70,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    73,    72,    71,     0,     0,     0,    75,    74,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
        76,    77,    78,    80,    79,     0,     0,     0,     0,     0,
         0,     0,    81,    82,    83,    84,    86,    62,    87,    85,
        63,    64,    65,    66,    67,    68,    69,    70,     0,    39,
        40,    41,     0,     0,     0,     0,     0,    35,     0,    50,
        73,    72,    71,     0,     0,     0,    75,    74,     0,     0,
        38,     0,     0,     0,     0,     0,     0,    43,    16,    76,
        77,    78,    80,    79,     0,     0,     0,     0,     0,     0,
         0,    81,    82,    83,    84,    86,    62,    87,    85,    63,
        64,    65,    66,    67,    68,    69,    70,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
        72,    71,     0,     0,     0,    75,    74,    49,    47,    46,
        48,     0,     0,    19,    18,     0,    36,    37,    76,    77,
        78,    80,    79,     0,     0,     0,     0,     0,     0,     0,
        81,    82,    83,    84,    86,    62,    87,    85,    63,    64,
        65,    66,    67,    68,    69,    70,     0,    39,    40,    41,
         0,     0,     0,     0,     0,    35,     0,    50,    73,    72,
        71,     0,     0,     0,    75,    74,     0,     0,    38,     0,
         0,     0,     0,     0,     0,    43,    16,    76,    77,    81,
        82,    83,    84,    86,    62,     0,    85,    63,    64,    65,
        66,    67,    68,    69,    70,    87,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    73,    72,    71,
         0,     0,     0,    75,    74,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    76,    77,    81,    82,
        83,    84,    86,    62,     0,    85,    63,    64,    65,    66,
        67,    68,    69,    70,    87,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    73,    72,    71,     0,
         0,     0,    75,    74,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    76,    77,    81,    82,    83,
        84,    86,    62,     0,    85,    63,    64,    65,    66,    67,
        68,    69,    70,    87,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    73,    72,    71,     0,     0,
         0,    75,    74,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    76,    77,    81,    82,    83,    84,
        86,    62,     0,    85,    63,    64,    65,    66,    67,    68,
        69,    70,    87,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    73,    72,    71,     0,     0,     0,
        75,    74,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    76,    77,    81,    82,    83,    84,    86,
        62,     0,    85,    63,    64,    65,    66,    67,    68,    69,
        70,    87,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    73,    72,    71,     0,     0,     0,    75,
        74,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    76,    77,    81,    82,    83,    84,    86,    62,
         0,    85,    63,    64,    65,    66,    67,    68,    69,    70,
        87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    73,    72,    71,     0,     0,     0,    75,    74,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    76,    77,    81,    82,    83,    84,    86,    62,     0,
        85,    63,    64,    65,    66,    67,    68,    69,    70,    87,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    73,    72,    71,     0,     0,     0,    75,    74,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        76,    77,    81,    82,    83,    84,    86,    62,     0,    85,
        63,    64,    65,    66,    67,    68,    69,    70,    87,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        73,    72,    71,     0,     0,     0,    75,    74,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    76,
        77,    81,    82,    83,    84,    86,    62,     0,    85,    63,
        64,    65,    66,    67,    68,    69,    70,    87,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
        72,    71,     0,     0,     0,    75,    74,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    76,    77,
        81,    82,    83,    84,    86,    62,     0,    85,    63,    64,
        65,    66,    67,    68,    69,    70,    87,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    73,    72,
        71,     0,     0,     0,    75,    74,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    76,    77,    81,
        82,    83,    84,    86,    62,     0,    85,    63,    64,    65,
        66,    67,    68,    69,    70,    87,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    73,    72,    71,
         0,     0,     0,    75,    74,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    76,    77,    81,    82,
        83,    84,    86,    62,     0,    85,    63,    64,    65,    66,
        67,    68,    69,    70,    87,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    73,    72,    71,     0,
         0,     0,    75,    74,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    76,    77,    81,    82,    83,
        84,    86,    62,     0,    85,    63,    64,    65,    66,    67,
        68,    69,    70,    87,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    73,    72,    71,     0,     0,
         0,    75,    74,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    76,    77,    81,    82,    83,    84,
        86,    62,     0,    85,    63,    64,    65,    66,    67,    68,
        69,    70,    87,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    73,    72,    71,     0,     0,     0,
        75,    74,     0,     0,     0,     0,     0,     0,    81,    82,
        83,    84,    86,    76,    77,    85,    63,    64,    65,    66,
        67,    68,    69,    70,     0,     0,     0,     0,     0,     0,
         0,    87,     0,     0,     0,     0,    73,    72,    71,     0,
         0,     0,    75,    74,     0,     0,     0,     0,     0,     0,
        81,    82,    83,    84,    86,    76,    77,    85,    63,    64,
        65,    66,    67,    68,    69,    70,     0,     0,     0,     0,
         0,     0,     0,    87,     0,     0,     0,     0,    73,    72,
        71,     0,     0,     0,    75,    74,     0,     0,     0,     0,
         0,     0,    81,    82,    83,    84,    86,    76,    77,    85,
        63,    64,    65,    66,    67,    68,    69,    70,     0,     0,
         0,     0,     0,     0,     0,    87,     0,     0,     0,     0,
        73,    72,    71,     0,     0,     0,    75,    74,     0,     0,
         0,     0,     0,    81,    82,    83,    84,    86,     0,    76,
        85,    63,    64,    65,    66,    67,    68,    69,    70,     0,
         0,     0,     0,     0,     0,     0,     0,    87,     0,     0,
         0,    73,    72,    71,     0,     0,     0,    75,    74,     0,
         0,    81,    82,    83,    84,    86,     0,     0,    85,    63,
        64,    65,    66,    67,    68,    69,    70,    49,    47,    46,
        48,     0,     0,    19,    18,     0,    36,    37,    87,    73,
        72,    71,   140,     0,     0,    75,    74,     0,     0,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,    39,    40,    41,
         0,     0,     0,     0,     0,    35,    87,    50,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,    41,     0,     0,     0,    43,    16,    35,     0,    50,
         0,     0,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,    49,
        47,    46,    48,     0,     0,    19,    18,     0,    36,    37,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,    39,
        40,    41,     0,    38,     0,     0,     0,    35,     0,    50,
        43,    16,    49,    47,    46,    48,     0,     0,    19,    18,
        38,    36,    37,     0,     0,     0,     0,    43,    16,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    39,    40,    41,     0,     0,     0,     0,     0,
        35,     0,    50,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    38,     0,     0,     0,     0,     0,     0,
        43,    16,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -83,   250,   227,   -83,   -83,   -83,   -83,   193,    55,   191,
       -83,   191,  4769,   177,   -83,   183,   173,   -83,   157,   214,
       159,   -83,   -83,  1689,  1335,   157,  1630,   151,   -83,  1276,
       292,   -83,   154,   150,  4716,  4699,  4646,  4629,  4576,   107,
        21,   -83,   150,   -83,   -83,   -83,   -83,   -83,   149,  4559,
       -83,  4506,  4489,  4436,   -83,   147,   195,   -83,  4419,  4366,
      4349,  2664,  4296,  4279,  4226,  4209,  4156,  4139,  4086,  4069,
      4016,  3999,  3946,  3929,  3876,  3859,  3806,  3789,  3736,  3719,
      3666,  3649,  3596,  3579,  3526,  3509,  3456,  3439,  3386,  3369,
      3316,  3299,  3246,  3229,  3176,  3159,  3106,  3089,  3036,   -83,
       -83,   146,  3019,   143,  1217,   -83,   -83,  2639,   164,     1,
       -83,    -4,   189,  2966,   128,   129,   123,  1158,   118,   122,
       -83,   -83,   -83,  1099,   -83,  2949,  2896,   -83,   121,   607,
       120,  2879,   165,   164,   117,  1571,   -83,  1512,  1040,  2826,
       808,   749,   690,   623,   544,   468,   392,   350,    13,   242,
        88,   233,     5,  2601,  2560,  2434,  2385,  2336,   122,   108,
       146,   143,   132,   114,    77,  2287,  2238,  2189,  2140,  2091,
      2042,  1993,  1944,  1895,  1846,  1797,  1748,  2809,    75,   -83,
       -37,    73,    69,   -83,   -83,   -83,   -83,   -83,    95,   151,
       -83,   974,   908,  2756,    31,  2739,    40,    39,    37,  2686,
      1734,  2518,    37,   -83,    38,    13,   -83,    28,  1453,    75,
       -45,   -83,   -83,   -83,   -83,   849,    14,     4,   -83,   -83,
       -83,   790,  2476,   -83,   -83,   -83,  1616,   -83,     5,  1498,
       -83,   -83,    35,   531,  1380,  1262,   455,   731,   -83,  1394,
       -83,   -83,   672,   -35,   -44,   -83,    -1,   -43,   835,   379,
       -83,   -83,   -46,   -83,   303,   -83,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
       246,   246,   246,   246,   246,   246,   252,   210,   246,   246,
       210,   246,   246,   180,   180,   247,   180,   152,   152,   152,
       152,   152,   244,   243,   152,   148,   148,   148,   148,   148,
        40,    40,   148,   148,   148,   148,   148,   148,   148,   148,
       148,   204,   246,   246,   246,   232,   111,   204,   204,   111,
       246,   109,   246,   148,   109,   246,   246,   246,     8,   148,
       148,   228,   217,   246,   246,   216,   246,   246,   246,   246,
       246,   246,    40,   246,   246,   246,   209,   209,   209,   209,
       209,   209,   152,   207,   209,   209,   205,   209,   209,   202,
       148,   164,   164,   164,   204,   198,   164,   197,   196,   194,
       150,   150,   150,   150,   150,   188,     8,   150,   150,   150,
       150,   150,   150,   150,   150,   150,    39,    39,   209,   209,
       209,   182,   159,   159,   159,   181,   209,   159,   209,   178,
       163,   209,   209,   209,   150,   150,   158,   158,   158,   209,
       209,   158,   209,   209,   209,   209,   209,   209,   162,   209,
       209,   209,   189,   189,   189,   189,   189,   189,    39,   161,
       189,   189,   160,   189,   189,   150,    18,    18,   134,   133,
       132,   130,   128,   119,   118,   116,   108,   108,   108,   108,
       108,   115,   114,   108,   108,   108,   108,   108,   108,   108,
       108,   108,   112,   103,   189,   189,   189,   101,    56,    55,
        48,    42,   189,    33,   189,    32,    27,   189,   189,   189,
       108,   108,    25,    18,    20,   189,   189,    19,   189,   189,
       189,   189,   189,   189,    16,   189,   189,   189,     2,     2,
         2,     2,     2,     2,    15,    13,     2,     2,     2,     2,
         2,   108,    11,     9,     7,   151,   151,   151,   151,   151,
         1,     0,   151,     0,   149,   149,   149,   149,   149,     0,
         0,   149,   149,   149,   149,   149,   149,   149,   149,   149,
         2,     2,     2,     0,     0,     0,     0,     0,     2,     0,
         2,     0,   149,     2,   149,     2,     0,     0,   149,   149,
         0,     2,     2,     0,     2,     2,     2,     2,     2,     2,
         0,     2,     2,     2,   254,   254,   254,   254,   254,   254,
       151,     0,   254,   254,     0,   254,   254,     0,     0,   149,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,     0,     0,     0,     0,    30,    30,     0,     0,
         0,     0,    30,     0,     0,    30,   254,   254,   254,     0,
         0,     0,     0,     0,   254,     0,   254,     0,     0,   254,
         0,   254,   147,   147,   147,   147,   147,   254,   254,   147,
       254,   254,   254,   254,   254,   254,     0,   254,   254,   254,
       249,   249,   249,   249,   249,   249,     0,     0,   249,   249,
         0,   249,   249,     0,     0,     0,   147,   147,     0,     0,
         0,     0,     0,     0,   146,   146,   146,   146,   146,     0,
         0,   146,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   249,   249,   249,     0,     0,   147,     0,     0,
       249,     0,   249,     0,     0,   249,     0,   249,   146,   146,
         0,     0,     0,   249,   249,     0,   249,   249,   249,   249,
       249,   249,     0,   249,   249,   249,   236,   236,   236,   236,
       236,   236,     0,     0,   236,   236,     0,   236,   236,   146,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       145,   145,   145,   145,   145,     0,     0,   145,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   236,   236,
       236,     0,     0,     0,     0,     0,   236,     0,   236,     0,
         0,   236,     0,   236,   145,   145,     0,     0,     0,   236,
       236,     0,   236,   236,   236,   236,   236,   236,     0,   236,
       236,   236,   233,   233,   233,   233,   233,   233,     0,     0,
       233,   233,     0,   233,   233,   145,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   144,   144,   144,   144,
       144,     0,     0,   144,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   233,   233,   233,     0,     0,     0,
         0,     0,   233,     0,   233,     0,     0,   233,     0,   233,
       144,   144,     0,     0,     0,   233,   233,     0,   233,   233,
       233,   233,   233,   233,     0,   233,   233,   233,   129,   129,
       129,   129,   129,   129,     0,     0,   129,   129,     0,   129,
       129,   144,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   143,   143,   143,   143,   143,
         0,     0,   143,     0,     0,     0,     0,     0,     0,     0,
       129,   129,   129,     0,     0,     0,     0,     0,   129,     0,
       129,     0,     0,   129,     0,   129,     0,     0,     0,   143,
       143,   129,   129,     0,   129,   129,   129,   129,   129,   129,
         0,   129,   129,   129,   242,   242,   242,   242,   242,   242,
         0,   242,   242,   242,   242,   242,   242,   242,   242,   242,
       143,     0,   142,   142,   142,   142,   142,     0,     0,   142,
         0,     0,   242,   242,   242,     0,     0,     0,   242,   242,
         0,     0,     0,     0,   242,     0,     0,     0,     0,     0,
         0,   242,   242,   242,   242,   242,   142,   142,     0,     0,
         0,     0,     0,   237,   237,   237,   237,   237,   237,   242,
       237,   237,   237,   237,   237,   237,   237,   237,   237,     0,
         0,   141,   141,   141,   141,   141,     0,   142,   141,     0,
         0,   237,   237,   237,     0,     0,     0,   237,   237,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   237,     0,
       237,   237,   237,   237,   237,   141,   141,     0,     0,     0,
         0,     0,   221,   221,   221,   221,   221,   221,   237,   221,
       221,   221,   221,   221,   221,   221,   221,   221,     0,     0,
       140,   140,   140,   140,   140,     0,   141,   140,     0,     0,
       221,   221,   221,     0,     0,     0,   221,   221,   248,   248,
       248,   248,   221,     0,   248,   248,     0,   248,   248,   221,
       221,   221,   221,   221,   140,   140,     0,     0,     0,     0,
         0,   215,   215,   215,   215,   215,   215,   221,   215,   215,
       215,   215,   215,   215,   215,   215,   215,     0,   248,   248,
       248,     0,     0,     0,     0,   140,   248,     0,   248,   215,
       215,   215,     0,     0,     0,   215,   215,     0,     0,   248,
         0,   215,     0,     0,     0,     0,   248,   248,   215,   215,
       215,   215,   215,     0,     0,     0,     0,     0,     0,     0,
       192,   192,   192,   192,   192,   192,   215,   192,   192,   192,
       192,   192,   192,   192,   192,   192,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   192,   192,
       192,     0,     0,     0,   192,   192,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   192,   192,   192,   192,
       192,   192,     0,     0,     0,   191,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   192,   191,   191,   191,   191,
       191,   191,     0,   191,   191,   191,   191,   191,   191,   191,
       191,   191,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   191,   191,   191,     0,     0,     0,
       191,   191,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   191,   191,   191,   191,   191,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   191,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       138,   138,   138,     0,     0,     0,   138,   138,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   138,
       138,   138,   138,   138,     0,     0,     0,     0,     0,     0,
         0,   123,   123,   123,   123,   123,   123,   138,   123,   123,
       123,   123,   123,   123,   123,   123,   123,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
       123,   123,     0,     0,     0,   123,   123,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   123,   123,   123,
       123,   123,   123,     0,     0,     0,     0,     0,     0,     0,
       117,   117,   117,   117,   117,   117,   123,   117,   117,   117,
       117,   117,   117,   117,   117,   117,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   117,   117,
       117,     0,     0,     0,   117,   117,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   117,     0,   117,   117,   117,
       117,   117,     0,     0,     0,     0,     0,     0,     0,   104,
       104,   104,   104,   104,   104,   117,   104,   104,   104,   104,
       104,   104,   104,   104,   104,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   104,   104,   104,
         0,     0,     0,   104,   104,   235,   235,   235,   235,   104,
         0,   235,   235,     0,   235,   235,   104,   104,   104,   104,
       104,     0,     0,     0,     0,     0,     0,     0,    29,    29,
        29,    29,    29,    29,   104,    29,    29,    29,    29,    29,
        29,    29,    29,    29,     0,   235,   235,   235,     0,     0,
         0,     0,     0,   235,     0,   235,    29,    29,    29,     0,
         0,     0,    29,    29,     0,    29,   235,     0,     0,     0,
         0,     0,     0,   235,   235,    29,    29,    29,    29,    29,
         0,     0,     0,     0,     0,     0,     0,    24,    24,    24,
        24,    24,    24,    29,    24,    24,    24,    24,    24,    24,
        24,    24,    24,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    24,    24,    24,     0,     0,
         0,    24,    24,   234,   234,   234,   234,    24,     0,   234,
       234,     0,   234,   234,    24,    24,    24,    24,    24,     0,
         0,     0,     0,     0,     0,     0,   239,   239,   239,   239,
       239,   239,    24,   239,   239,   239,   239,   239,   239,   239,
       239,   239,     0,   234,   234,   234,     0,     0,     0,     0,
         0,   234,     0,   234,   239,   239,   239,     0,     0,     0,
       239,   239,     0,     0,   234,     0,     0,     0,     0,     0,
         0,   234,   234,   239,   239,   239,   239,   239,     0,     0,
         0,     0,     0,     0,     0,   208,   208,   208,   208,   208,
       208,   239,   208,   208,   208,   208,   208,   208,   208,   208,
       208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   208,   208,   208,     0,     0,     0,   208,
       208,   229,   229,   229,   229,     0,     0,   229,   229,     0,
       229,   229,   208,   208,   208,   208,   208,     0,     0,     0,
         0,     0,     0,     0,   137,   137,   137,   137,   137,   137,
       208,   137,   137,   137,   137,   137,   137,   137,   137,   137,
         0,   229,   229,   229,     0,     0,     0,     0,     0,   229,
         0,   229,   137,   137,   137,     0,     0,     0,   137,   137,
         0,     0,   229,     0,     0,     0,     0,     0,     0,   229,
       229,   137,   137,   137,   137,   137,     0,     0,     0,     0,
         0,     0,     0,   135,   135,   135,   135,   135,   135,   137,
       135,   135,   135,   135,   135,   135,   135,   135,   135,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   135,   135,   135,     0,     0,     0,   135,   135,   226,
       226,   226,   226,     0,     0,   226,   226,     0,   226,   226,
       135,   135,   135,   135,   135,     0,     0,     0,     0,     0,
         0,     0,    26,    26,    26,    26,    26,    26,   135,    26,
        26,    26,    26,    26,    26,    26,    26,    26,     0,   226,
       226,   226,     0,     0,     0,     0,     0,   226,     0,   226,
        26,    26,    26,     0,     0,     0,    26,    26,     0,     0,
       226,     0,     0,     0,     0,     0,     0,   226,   226,    26,
        26,    26,    26,    26,     0,     0,     0,     0,     0,     0,
         0,    23,    23,    23,    23,    23,    23,    26,    23,    23,
        23,    23,    23,    23,    23,    23,    23,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
        23,    23,     0,     0,     0,    23,    23,   200,   200,   200,
       200,     0,     0,   200,   200,     0,   200,   200,    23,    23,
        23,    23,    23,     0,     0,     0,     0,     0,     0,     0,
       176,   176,   176,   176,   176,   176,    23,   176,   176,   176,
       176,   176,   176,   176,   176,   176,     0,   200,   200,   200,
         0,     0,     0,     0,     0,   200,     0,   200,   176,   176,
       176,     0,     0,     0,   176,   176,     0,     0,   200,     0,
         0,     0,     0,     0,     0,   200,   200,   176,   176,   175,
       175,   175,   175,   175,   175,     0,   175,   175,   175,   175,
       175,   175,   175,   175,   175,   176,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   175,   175,   175,
         0,     0,     0,   175,   175,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   175,   175,   174,   174,
       174,   174,   174,   174,     0,   174,   174,   174,   174,   174,
       174,   174,   174,   174,   175,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   174,   174,   174,     0,
         0,     0,   174,   174,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   174,   174,   173,   173,   173,
       173,   173,   173,     0,   173,   173,   173,   173,   173,   173,
       173,   173,   173,   174,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   173,   173,   173,     0,     0,
         0,   173,   173,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   173,   173,   172,   172,   172,   172,
       172,   172,     0,   172,   172,   172,   172,   172,   172,   172,
       172,   172,   173,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   172,   172,   172,     0,     0,     0,
       172,   172,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   172,   172,   171,   171,   171,   171,   171,
       171,     0,   171,   171,   171,   171,   171,   171,   171,   171,
       171,   172,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   171,   171,   171,     0,     0,     0,   171,
       171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   171,   171,   170,   170,   170,   170,   170,   170,
         0,   170,   170,   170,   170,   170,   170,   170,   170,   170,
       171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   170,   170,   170,     0,     0,     0,   170,   170,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   170,   170,   169,   169,   169,   169,   169,   169,     0,
       169,   169,   169,   169,   169,   169,   169,   169,   169,   170,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   169,   169,   169,     0,     0,     0,   169,   169,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       169,   169,   168,   168,   168,   168,   168,   168,     0,   168,
       168,   168,   168,   168,   168,   168,   168,   168,   169,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       168,   168,   168,     0,     0,     0,   168,   168,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
       168,   167,   167,   167,   167,   167,   167,     0,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   168,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   167,
       167,   167,     0,     0,     0,   167,   167,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   167,   167,
       166,   166,   166,   166,   166,   166,     0,   166,   166,   166,
       166,   166,   166,   166,   166,   166,   167,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   166,   166,
       166,     0,     0,     0,   166,   166,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   166,   166,   165,
       165,   165,   165,   165,   165,     0,   165,   165,   165,   165,
       165,   165,   165,   165,   165,   166,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   165,   165,   165,
         0,     0,     0,   165,   165,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   165,   165,   157,   157,
       157,   157,   157,   157,     0,   157,   157,   157,   157,   157,
       157,   157,   157,   157,   165,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   157,   157,   157,     0,
         0,     0,   157,   157,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   157,   157,   156,   156,   156,
       156,   156,   156,     0,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   157,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   156,   156,   156,     0,     0,
         0,   156,   156,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   156,   156,   155,   155,   155,   155,
       155,   155,     0,   155,   155,   155,   155,   155,   155,   155,
       155,   155,   156,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   155,   155,   155,     0,     0,     0,
       155,   155,     0,     0,     0,     0,     0,     0,   222,   222,
       222,   222,   222,   155,   155,   222,   222,   222,   222,   222,
       222,   222,   222,   222,     0,     0,     0,     0,     0,     0,
         0,   155,     0,     0,     0,     0,   222,   222,   222,     0,
         0,     0,   222,   222,     0,     0,     0,     0,     0,     0,
       201,   201,   201,   201,   201,   222,   222,   201,   201,   201,
       201,   201,   201,   201,   201,   201,     0,     0,     0,     0,
         0,     0,     0,   222,     0,     0,     0,     0,   201,   201,
       201,     0,     0,     0,   201,   201,     0,     0,     0,     0,
         0,     0,   154,   154,   154,   154,   154,   201,   201,   154,
       154,   154,   154,   154,   154,   154,   154,   154,     0,     0,
         0,     0,     0,     0,     0,   201,     0,     0,     0,     0,
       154,   154,   154,     0,     0,     0,   154,   154,     0,     0,
         0,     0,     0,   153,   153,   153,   153,   153,     0,   154,
       153,   153,   153,   153,   153,   153,   153,   153,   153,     0,
         0,     0,     0,     0,     0,     0,     0,   154,     0,     0,
         0,   153,   153,   153,     0,     0,     0,   153,   153,     0,
         0,   107,   107,   107,   107,   107,     0,     0,   107,   107,
       107,   107,   107,   107,   107,   107,   107,    61,    61,    61,
        61,     0,     0,    61,    61,     0,    61,    61,   153,   107,
       107,   107,    61,     0,     0,   107,   107,     0,     0,   199,
       199,   199,   199,     0,     0,   199,   199,     0,   199,   199,
         0,     0,     0,     0,     0,     0,     0,    61,    61,    61,
         0,     0,     0,     0,     0,    61,   107,    61,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    61,   199,
       199,   199,     0,     0,     0,    61,    61,   199,     0,   199,
         0,     0,   195,   195,   195,   195,     0,     0,   195,   195,
       199,   195,   195,     0,     0,     0,     0,   199,   199,   193,
       193,   193,   193,     0,     0,   193,   193,     0,   193,   193,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   195,   195,   195,     0,     0,     0,     0,     0,
       195,     0,   195,     0,     0,     0,     0,     0,     0,   193,
       193,   193,     0,   195,     0,     0,     0,   193,     0,   193,
       195,   195,   177,   177,   177,   177,     0,     0,   177,   177,
       193,   177,   177,     0,     0,     0,     0,   193,   193,   139,
       139,   139,   139,     0,     0,   139,   139,     0,   139,   139,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   177,   177,   177,     0,     0,     0,     0,     0,
       177,     0,   177,     0,     0,     0,     0,     0,     0,   139,
       139,   139,     0,   177,     0,     0,     0,   139,     0,   139,
       177,   177,   131,   131,   131,   131,     0,     0,   131,   131,
       139,   131,   131,     0,     0,     0,     0,   139,   139,   126,
       126,   126,   126,     0,     0,   126,   126,     0,   126,   126,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   131,   131,   131,     0,     0,     0,     0,     0,
       131,     0,   131,     0,     0,     0,     0,     0,     0,   126,
       126,   126,     0,   131,     0,     0,     0,   126,     0,   126,
       131,   131,   125,   125,   125,   125,     0,     0,   125,   125,
       126,   125,   125,     0,     0,     0,     0,   126,   126,   113,
       113,   113,   113,     0,     0,   113,   113,     0,   113,   113,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   125,   125,   125,     0,     0,     0,     0,     0,
       125,     0,   125,     0,     0,     0,     0,     0,     0,   113,
       113,   113,     0,   125,     0,     0,     0,   113,     0,   113,
       125,   125,   102,   102,   102,   102,     0,     0,   102,   102,
       113,   102,   102,     0,     0,     0,     0,   113,   113,    98,
        98,    98,    98,     0,     0,    98,    98,     0,    98,    98,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   102,   102,   102,     0,     0,     0,     0,     0,
       102,     0,   102,     0,     0,     0,     0,     0,     0,    98,
        98,    98,     0,   102,     0,     0,     0,    98,     0,    98,
       102,   102,    97,    97,    97,    97,     0,     0,    97,    97,
        98,    97,    97,     0,     0,     0,     0,    98,    98,    96,
        96,    96,    96,     0,     0,    96,    96,     0,    96,    96,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    97,    97,    97,     0,     0,     0,     0,     0,
        97,     0,    97,     0,     0,     0,     0,     0,     0,    96,
        96,    96,     0,    97,     0,     0,     0,    96,     0,    96,
        97,    97,    95,    95,    95,    95,     0,     0,    95,    95,
        96,    95,    95,     0,     0,     0,     0,    96,    96,    94,
        94,    94,    94,     0,     0,    94,    94,     0,    94,    94,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    95,    95,    95,     0,     0,     0,     0,     0,
        95,     0,    95,     0,     0,     0,     0,     0,     0,    94,
        94,    94,     0,    95,     0,     0,     0,    94,     0,    94,
        95,    95,    93,    93,    93,    93,     0,     0,    93,    93,
        94,    93,    93,     0,     0,     0,     0,    94,    94,    92,
        92,    92,    92,     0,     0,    92,    92,     0,    92,    92,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    93,    93,    93,     0,     0,     0,     0,     0,
        93,     0,    93,     0,     0,     0,     0,     0,     0,    92,
        92,    92,     0,    93,     0,     0,     0,    92,     0,    92,
        93,    93,    91,    91,    91,    91,     0,     0,    91,    91,
        92,    91,    91,     0,     0,     0,     0,    92,    92,    90,
        90,    90,    90,     0,     0,    90,    90,     0,    90,    90,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    91,    91,    91,     0,     0,     0,     0,     0,
        91,     0,    91,     0,     0,     0,     0,     0,     0,    90,
        90,    90,     0,    91,     0,     0,     0,    90,     0,    90,
        91,    91,    89,    89,    89,    89,     0,     0,    89,    89,
        90,    89,    89,     0,     0,     0,     0,    90,    90,    88,
        88,    88,    88,     0,     0,    88,    88,     0,    88,    88,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    89,    89,    89,     0,     0,     0,     0,     0,
        89,     0,    89,     0,     0,     0,     0,     0,     0,    88,
        88,    88,     0,    89,     0,     0,     0,    88,     0,    88,
        89,    89,    87,    87,    87,    87,     0,     0,    87,    87,
        88,    87,    87,     0,     0,     0,     0,    88,    88,    86,
        86,    86,    86,     0,     0,    86,    86,     0,    86,    86,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    87,    87,    87,     0,     0,     0,     0,     0,
        87,     0,    87,     0,     0,     0,     0,     0,     0,    86,
        86,    86,     0,    87,     0,     0,     0,    86,     0,    86,
        87,    87,    85,    85,    85,    85,     0,     0,    85,    85,
        86,    85,    85,     0,     0,     0,     0,    86,    86,    84,
        84,    84,    84,     0,     0,    84,    84,     0,    84,    84,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    85,    85,    85,     0,     0,     0,     0,     0,
        85,     0,    85,     0,     0,     0,     0,     0,     0,    84,
        84,    84,     0,    85,     0,     0,     0,    84,     0,    84,
        85,    85,    83,    83,    83,    83,     0,     0,    83,    83,
        84,    83,    83,     0,     0,     0,     0,    84,    84,    82,
        82,    82,    82,     0,     0,    82,    82,     0,    82,    82,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    83,    83,    83,     0,     0,     0,     0,     0,
        83,     0,    83,     0,     0,     0,     0,     0,     0,    82,
        82,    82,     0,    83,     0,     0,     0,    82,     0,    82,
        83,    83,    81,    81,    81,    81,     0,     0,    81,    81,
        82,    81,    81,     0,     0,     0,     0,    82,    82,    80,
        80,    80,    80,     0,     0,    80,    80,     0,    80,    80,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    81,    81,    81,     0,     0,     0,     0,     0,
        81,     0,    81,     0,     0,     0,     0,     0,     0,    80,
        80,    80,     0,    81,     0,     0,     0,    80,     0,    80,
        81,    81,    79,    79,    79,    79,     0,     0,    79,    79,
        80,    79,    79,     0,     0,     0,     0,    80,    80,    78,
        78,    78,    78,     0,     0,    78,    78,     0,    78,    78,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    79,    79,    79,     0,     0,     0,     0,     0,
        79,     0,    79,     0,     0,     0,     0,     0,     0,    78,
        78,    78,     0,    79,     0,     0,     0,    78,     0,    78,
        79,    79,    77,    77,    77,    77,     0,     0,    77,    77,
        78,    77,    77,     0,     0,     0,     0,    78,    78,    76,
        76,    76,    76,     0,     0,    76,    76,     0,    76,    76,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    77,    77,    77,     0,     0,     0,     0,     0,
        77,     0,    77,     0,     0,     0,     0,     0,     0,    76,
        76,    76,     0,    77,     0,     0,     0,    76,     0,    76,
        77,    77,    75,    75,    75,    75,     0,     0,    75,    75,
        76,    75,    75,     0,     0,     0,     0,    76,    76,    74,
        74,    74,    74,     0,     0,    74,    74,     0,    74,    74,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    75,    75,    75,     0,     0,     0,     0,     0,
        75,     0,    75,     0,     0,     0,     0,     0,     0,    74,
        74,    74,     0,    75,     0,     0,     0,    74,     0,    74,
        75,    75,    73,    73,    73,    73,     0,     0,    73,    73,
        74,    73,    73,     0,     0,     0,     0,    74,    74,    72,
        72,    72,    72,     0,     0,    72,    72,     0,    72,    72,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    73,    73,    73,     0,     0,     0,     0,     0,
        73,     0,    73,     0,     0,     0,     0,     0,     0,    72,
        72,    72,     0,    73,     0,     0,     0,    72,     0,    72,
        73,    73,    71,    71,    71,    71,     0,     0,    71,    71,
        72,    71,    71,     0,     0,     0,     0,    72,    72,    70,
        70,    70,    70,     0,     0,    70,    70,     0,    70,    70,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    71,    71,    71,     0,     0,     0,     0,     0,
        71,     0,    71,     0,     0,     0,     0,     0,     0,    70,
        70,    70,     0,    71,     0,     0,     0,    70,     0,    70,
        71,    71,    69,    69,    69,    69,     0,     0,    69,    69,
        70,    69,    69,     0,     0,     0,     0,    70,    70,    68,
        68,    68,    68,     0,     0,    68,    68,     0,    68,    68,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    69,    69,    69,     0,     0,     0,     0,     0,
        69,     0,    69,     0,     0,     0,     0,     0,     0,    68,
        68,    68,     0,    69,     0,     0,     0,    68,     0,    68,
        69,    69,    67,    67,    67,    67,     0,     0,    67,    67,
        68,    67,    67,     0,     0,     0,     0,    68,    68,    66,
        66,    66,    66,     0,     0,    66,    66,     0,    66,    66,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    67,    67,    67,     0,     0,     0,     0,     0,
        67,     0,    67,     0,     0,     0,     0,     0,     0,    66,
        66,    66,     0,    67,     0,     0,     0,    66,     0,    66,
        67,    67,    65,    65,    65,    65,     0,     0,    65,    65,
        66,    65,    65,     0,     0,     0,     0,    66,    66,    64,
        64,    64,    64,     0,     0,    64,    64,     0,    64,    64,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    65,    65,    65,     0,     0,     0,     0,     0,
        65,     0,    65,     0,     0,     0,     0,     0,     0,    64,
        64,    64,     0,    65,     0,     0,     0,    64,     0,    64,
        65,    65,    63,    63,    63,    63,     0,     0,    63,    63,
        64,    63,    63,     0,     0,     0,     0,    64,    64,    62,
        62,    62,    62,     0,     0,    62,    62,     0,    62,    62,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    63,    63,    63,     0,     0,     0,     0,     0,
        63,     0,    63,     0,     0,     0,     0,     0,     0,    62,
        62,    62,     0,    63,     0,     0,     0,    62,     0,    62,
        63,    63,    60,    60,    60,    60,     0,     0,    60,    60,
        62,    60,    60,     0,     0,     0,     0,    62,    62,    59,
        59,    59,    59,     0,     0,    59,    59,     0,    59,    59,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    60,    60,    60,     0,     0,     0,     0,     0,
        60,     0,    60,     0,     0,     0,     0,     0,     0,    59,
        59,    59,     0,    60,     0,     0,     0,    59,     0,    59,
        60,    60,    58,    58,    58,    58,     0,     0,    58,    58,
        59,    58,    58,     0,     0,     0,     0,    59,    59,    53,
        53,    53,    53,     0,     0,    53,    53,     0,    53,    53,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    58,    58,    58,     0,     0,     0,     0,     0,
        58,     0,    58,     0,     0,     0,     0,     0,     0,    53,
        53,    53,     0,    58,     0,     0,     0,    53,     0,    53,
        58,    58,    52,    52,    52,    52,     0,     0,    52,    52,
        53,    52,    52,     0,     0,     0,     0,    53,    53,    51,
        51,    51,    51,     0,     0,    51,    51,     0,    51,    51,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    52,    52,    52,     0,     0,     0,     0,     0,
        52,     0,    52,     0,     0,     0,     0,     0,     0,    51,
        51,    51,     0,    52,     0,     0,     0,    51,     0,    51,
        52,    52,    49,    49,    49,    49,     0,     0,    49,    49,
        51,    49,    49,     0,     0,     0,     0,    51,    51,    38,
        38,    38,    38,     0,     0,    38,    38,     0,    38,    38,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    49,    49,    49,     0,     0,     0,     0,     0,
        49,     0,    49,     0,     0,     0,     0,     0,     0,    38,
        38,    38,     0,    49,     0,     0,     0,    38,     0,    38,
        49,    49,    37,    37,    37,    37,     0,     0,    37,    37,
        38,    37,    37,     0,     0,     0,     0,    38,    38,    36,
        36,    36,    36,     0,     0,    36,    36,     0,    36,    36,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    37,    37,    37,     0,     0,     0,     0,     0,
        37,     0,    37,     0,     0,     0,     0,     0,     0,    36,
        36,    36,     0,    37,     0,     0,     0,    36,     0,    36,
        37,    37,    35,    35,    35,    35,     0,     0,    35,    35,
        36,    35,    35,     0,     0,     0,     0,    36,    36,    34,
        34,    34,    34,     0,     0,    34,    34,     0,    34,    34,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    35,    35,    35,     0,     0,     0,     0,     0,
        35,     0,    35,     0,     0,     0,     0,     0,     0,    34,
        34,    34,     0,    35,     0,     0,     0,    34,     0,    34,
        35,    35,    12,    12,    12,    12,     0,     0,    12,    12,
        34,    12,    12,     0,     0,     0,     0,    34,    34,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    12,    12,    12,     0,     0,     0,     0,     0,
        12,     0,    12,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    12,     0,     0,     0,     0,     0,     0,
        12,    12,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         3,    -1,     1,     0,     2,     4,     5,    -1,    -1,    -1,
        22,    -1,    -1,    -1,     7,    -1,    -1,    41,    -1,   110,
       111,   113,   114,    51,    -1,    55,    57,   125,   128,   129,
        30,    31,    36,    44,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,   106,    -1,   108,    38,   119,   120,   121,   122,   126,
         6,   126,    54,    -1,    43,    -1,    -1,    35,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
       105,    37,    50,    -1,    -1,    98,    99,   100,   101,   102,
        36,   103,   110,    54,    -1,    -1,    -1,    -1,    -1,    -1,
       112,     8,    10,    -1,    12,    -1,    -1,    15,    -1,    -1,
        -1,    50,    23,    23,    -1,    56,   127,   130,    -1,    -1,
        72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
        82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
        92,    93,    94,    95,    96,    58,    59,    60,    61,    62,
        63,    64,    65,    66,    67,    68,    69,    54,    -1,    45,
        97,    -1,    -1,   123,   124,    53,    42,     8,    -1,    -1,
        11,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
        -1,    71,    -1,    39,    -1,   115,    52,    27,    29,    -1,
        -1,   118,     9,    13,    14,    -1,    -1,    -1,    19,    20,
        21,    -1,    70,    40,    46,    47,    -1,    49,    -1,    -1,
       109,   116,    -1,    -1,    -1,    26,    -1,    -1,     8,    28,
       117,    16,    -1,    -1,    24,    48,    -1,    -1,    26,    -1,
       107,    17,    -1,    25,    -1,    18,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         4,   227,     5,    54,   127,   224,   210,   123,    16,    33,
        30,    32,    44,    33,   111,   110,    44,   198,    43,   197,
       120,    31,     6,   246,   255,   228,   127,   209,    41,   123,
        16,    33,    30,    32,    44,    33,   109,   110,    44,   253,
        43,   127,   204,    31,   123,    16,    33,    30,    32,    44,
        41,   181,    20,    21,    14,    43,   127,   189,    31,   123,
        16,    33,    30,    32,    44,    41,    55,    20,    21,   244,
        43,   127,    -1,    31,   123,    16,    33,    30,    32,    44,
        41,   101,   103,    -1,   241,    43,   127,    -1,    31,   123,
        16,    33,    30,    32,    44,    41,     1,     2,    -1,    14,
        43,   127,    -1,    31,   123,    16,    33,    30,    32,    44,
        41,    -1,    -1,    -1,    14,    43,   127,    -1,    31,   123,
        16,    33,    30,    32,    44,    41,    -1,    -1,    -1,   194,
        43,   127,    -1,    31,   123,    16,    33,    30,    32,    44,
        41,    -1,    -1,    -1,    -1,    43,    -1,    -1,    31,   138,
        16,    33,    30,    32,    44,    41,    -1,    -1,    -1,    -1,
        43,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
        41,   252,   207,   208,    16,    33,    30,    32,    44,    -1,
        -1,    -1,    -1,    -1,    43,    -1,    -1,    31,    -1,    -1,
        -1,    -1,    -1,    -1,    41,   243,   207,   208,    16,    33,
        30,    32,    44,    -1,    -1,    -1,    -1,    -1,    43,    -1,
        -1,    31,   242,    16,    33,    30,    32,    44,    41,    -1,
        -1,    -1,    -1,    43,    -1,    -1,    31,   239,    16,    33,
        30,    32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,
        -1,    31,   237,    16,    33,    30,    32,    44,    41,    -1,
        -1,    -1,    -1,    43,    -1,    -1,    31,   222,    16,    33,
        30,    32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,
        -1,    31,   221,    16,    33,    30,    32,    44,    41,    -1,
        -1,    -1,    -1,    43,    -1,    -1,    31,    -1,    -1,    -1,
        -1,    -1,    -1,    41,   217,   207,   208,    16,    33,    30,
        32,    44,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   215,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,    26,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,   202,    25,
        31,   201,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,    23,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,   196,    43,    -1,    -1,
        31,   192,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   191,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,    26,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,   182,    25,    31,    23,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,   178,    43,    -1,    -1,
        31,   176,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   175,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   174,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   173,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   172,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   171,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   170,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   169,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   168,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   167,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   166,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   165,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   164,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   163,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   162,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   161,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   160,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   159,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   158,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   157,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   156,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   155,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   154,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   153,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   152,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   151,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   150,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   149,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   148,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   147,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   146,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   145,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   144,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   143,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   142,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   141,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   140,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   137,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,    29,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   135,    16,    33,    30,
        32,    44,    41,    -1,    -1,   136,    -1,    43,    -1,    -1,
        31,   117,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,    26,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,   116,    25,
        31,    29,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,    29,    16,    33,    30,
        32,    44,    41,   115,    27,    28,    -1,    43,    -1,    -1,
        31,   108,    16,    33,    30,    32,    44,    41,   114,    27,
        28,    -1,    43,    -1,    -1,    31,   107,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   106,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,   105,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,   104,    16,    33,    30,    32,    44,    41,    -1,    -1,
        -1,    -1,    43,    -1,    -1,    31,    24,    16,    33,    30,
        32,    44,    41,    -1,    -1,    -1,    -1,    43,    -1,    -1,
        31,    -1,    -1,    -1,    -1,    -1,    -1,    41,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
        95,   -35,    -3,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,  1156,   -35,   -35,   -35,   -35,   -35,   -12,    40,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,   -35,    65,  1141,  1126,  1111,  1096,  1081,    23,
         1,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,  1066,
       -35,  1051,  1036,  1021,   -35,   -35,    -8,   -35,  1006,   991,
       976,   139,   961,   946,   931,   916,   901,   886,   871,   856,
       841,   826,   811,   796,   781,   766,   751,   736,   721,   706,
       691,   676,   661,   646,   631,   616,   601,   586,   571,   556,
       541,   526,   511,   496,   481,   466,   451,   436,   421,   -35,
       -35,   -35,   406,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,    25,   391,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,    53,   -35,   -35,   -35,   376,   361,   -35,   -35,   124,
       -35,   346,    13,    11,   -35,   -35,   -35,   -35,   -35,   331,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,   316,   -35,    24,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,    23,   -24,   109,
       -35,   -35,   -35,   301,   -35,   286,   -35,   -35,   -35,   262,
       247,   -35,   -35,   -35,   -14,    -4,   -35,   -35,   -35,    94,
       -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
       -35,   -35,   -35,   -35,   -35,   -35,   232,   -35,   -35,   217,
       -35,   -35,   -35,    79,   202,   187,    64,   -35,    19,   -35,
       -35,   -35,   -35,   -35,   -35,   -35,    49,   -35,   163,    34,
       -35,   -35,   -35,   -35,    19,   -35,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     1,     2,     0,     1,     1,     4,     2,     0,     3,
         1,     2,     1,     3,     3,     1,     5,     7,     9,     3,
         3,     3,     1,     0,     5,     7,     0,     1,     3,     1,
         1,     1,     1,     3,     1,     3,     1,     2,     1,     4,
         5,     1,     4,     2,     0,     0,     4,     1,     3,     1,
         0,     1,     4,     4,     0,     1,     3,     1,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         5,     4,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
         2,     2,     2,     2,     2,     2,     1,     8,     1,     8,
         0,     1,     3,     1,     1,     0,     4,     3,     1,     1,
         1,     1,     1,     3,     4,     1,     0,     3,     1,     1,
         3,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     4,     4,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     6,     6,     7,     7,     8,     8,     9,     9,
        10,    10,    11,    11,    12,    12,    13,    13,    14,    14,
        14,    15,    15,    15,    17,    18,    16,    19,    19,    19,
        20,    20,    21,    21,    22,    22,    23,    23,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    25,
        26,    26,    27,    27,    28,    29,    29,    30,    30,    31,
        31,    31,    31,    31,    31,    32,    32,    33,    33,    34,
        34,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",       "INLINE_HTML",          "ECHO_TAG",
                  "NAME",           "DECIMAL",               "INT",
                "STRING",      "DOUBLE_QUOTE",        "BACK_QUOTE",
                "DOLLAR",          "VARIABLE",     "HALT_COMPILER",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "POW",          "QUESTION",
                 "COLON",           "PERCENT",                "GT",
                    "LT",              "GTOE",              "LTOE",
                   "EQU",         "IDENTICAL",               "NEQ",
            "NIDENTICAL",            "ASSIGN",       "PLUS_ASSIGN",
          "MINUS_ASSIGN",      "TIMES_ASSIGN",        "POW_ASSIGN",
         "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",     "BIT_OR_ASSIGN",
        "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN", "LEFT_SHIFT_ASSIGN",
            "MOD_ASSIGN",           "BIT_AND",            "BIT_OR",
               "BIT_XOR",           "BIT_NOT",               "INC",
                   "DEC",        "LEFT_SHIFT",       "RIGHT_SHIFT",
        "HEREDOC_HEADER",             "ARROW",    "PROPERTY_ARROW",
                   "BRA",               "KET",              "CBRA",
                  "CKET",             "COMMA",              "BBRA",
                  "BKET",               "EOL",               "AND",
                    "OR",        "LOGICAL_OR",       "LOGICAL_AND",
           "LOGICAL_XOR",               "NOT",                "IF",
                  "ELSE",              "ECHO",             "WHILE",
                    "DO",               "FOR",          "FUNCTION",
                  "LIST",               "USE",             "BREAK",
              "CONTINUE",            "RETURN",               "DOT",
           "ANY_CONTENT","VARIABLE_IN_STRING","PROPERTY_IN_STRING",
      "OFFSET_IN_STRING",    "END_OF_HEREDOC",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,               "<?=",
                    null,                null,                null,
                    null,                "\"",                 "`",
                     "$",                null,   "__halt_compiler",
                     "+",                 "-",                 "*",
                     "/",                "**",                 "?",
                     ":",                 "%",                 ">",
                     "<",                ">=",                "<=",
                    "==",               "===",                "!=",
                   "!==",                 "=",                "+=",
                    "-=",                "*=",               "**=",
                    "/=",                "&=",                "|=",
                    "^=",               ">>=",               "<<=",
                    "%=",                 "&",                 "|",
                     "^",                 "~",                "++",
                    "--",                "<<",                ">>",
                   "<<<",                "=>",                "->",
                     "(",                 ")",                 "[",
                     "]",                 ",",                 "{",
                     "}",                 ";",                "&&",
                    "||",                "OR",               "AND",
                   "XOR",                 "!",                "if",
                  "else",              "echo",             "while",
                    "do",               "for",          "function",
                  "list",               "use",             "break",
              "continue",            "return",                 ".",
                    null,                null,                null,
                    null,                null,
]; 


function tokenToString(tk){
    return jjtokenAlias[tk] === null ? "<" + jjtokenNames[tk] + ">" : '"' + jjtokenAlias[tk] + '"';
}
function Token(id, val, startLine, startColumn, endLine, endColumn){
    this.id = id;
    this.val = val;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
}
Token.prototype.clone = function(){
    return new Token(
        this.id,
        this.val,
        this.startLine,
        this.startColumn,
        this.endLine,
        this.endColumn
    );
}
Token.prototype.toString = function(){
    return (jjtokenAlias[this.id] === null ? 
        '<' + jjtokenNames[this.id] + '>' :
        '"' + jjtokenAlias[this.id] + '"') + "(" + this.val + ")";
}
function createParser() {
    // members for lexer
    var jjlexState;
    var jjstate;
    var jjmatched;
    var jjtoken;
    
    var jjmarker = { state: -1, line: 0, column: 0 };
    var jjbackupCount;

    var jjline;
    var jjcolumn;
    var jjtline;
    var jjtcolumn;

    // members for parser
    var jjlrState;
    var jjsematicS;
    var jjsematicVal;
    var jjemittedTokens;

    var jjstop;

    var jjhandlers = {};

    // extra members, defined by %extra_arg
    
    var outputs;


    return {
        init: init,
        on: on,
        accept: accept,
        end: end,
        halt: halt
    };
    function init(outputs1){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjemittedTokens = [];

        jjstop = false;
        
    outputs = outputs1;

    }
    /**
     *  set 
     */
    function jjsetImg(s){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjreturnToken(){
        jjemit('token', jjtoken);
        jjconsumeTokens(jjtoken);
        jjtoken.id = -1;
    }
    function jjemit(name, a1, a2, a3){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name, cb){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                jjlexState.push(1); 
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 9:
                jjlexState.push(1); 
                break;
            case 10:
                jjlexState.push(1); 
                break;
            case 11:
                jjlexState.push(1); 
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten){
        var jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 25:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 26:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 27:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 28:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 34:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 35:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 36:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 37:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 38:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 39:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 40:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 41:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 42:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 43:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 48:
                jjsetImg(""); 
                break;
            case 50:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 55:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 64:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 66:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 74:
                jjsetImg(""); jjlexState.pop(); 
                break;
            case 75:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 76:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 78:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 81:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 82:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 84:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 85:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 86:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 87:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 89:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 90:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 91:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 92:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 96:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 100:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 102:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 110:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 111:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 112:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 113:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 115:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 116:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 117:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 119:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 122:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 123:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 126:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 128:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 129:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 132:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 133:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 134:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 135:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 138:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 139:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 142:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 143:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 145:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 146:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten){
        var jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                jjsetImg(""); 
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 9:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            default:;
        }
    }
    function jjdoLexAction3(jjstaten){
        var jjtk = jjlexTokens3[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            default:;
        }
    }
    function jjdoLexAction4(jjstaten){
        var jjtk = jjlexTokens4[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate, state){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            case 3:
                jjdoLexAction3(state);
                break;
            case 4:
                jjdoLexAction4(state);
                break;
            default:;
        }
        jjtoken.id !== -1 && jjreturnToken();
    }
    function jjrollback(){
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjreturnToken();
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: start => top_statement_list */
                var l = jjsematicS[jjsp - 1];
                { outputs.astRoot = l; } 
                break;
            case 2:
                /* 2: top_statement_list => top_statement_list top_statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 3:
                /* 3: top_statement_list => */
                { jjtop = new ZNode(AST_TOPLIST); } 
                break;
            case 6:
                /* 6: top_statement => "__halt_compiler" "(" ")" ";" */
                { halt(); } 
                break;
            case 7:
                /* 7: statement_list => statement_list statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 8:
                /* 8: statement_list => */
                { jjtop = new ZNode(AST_STATEMENTLIST); } 
                break;
            case 9:
                /* 9: statement => "{" statement_list "}" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 10:
                /* 10: statement => ";" */
                { jjtop = null; } 
                break;
            case 11:
                /* 11: statement => expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 12:
                /* 12: statement => <INLINE_HTML> */
                var h = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ECHO, h); h.type = AST_STRING; } 
                break;
            case 13:
                /* 13: statement => "<?=" expr <INLINE_HTML> */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 14:
                /* 14: statement => "echo" expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 16:
                /* 16: statement => "while" "(" expr ")" statement */
                var cond = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_WHILE, [cond, s]); } 
                break;
            case 17:
                /* 17: statement => "do" statement "while" "(" expr ")" ";" */
                var s = jjsematicS[jjsp - 6];
                var cond = jjsematicS[jjsp - 3];
                { jjtop = new ZNode(AST_DO_WHILE, [cond, s]); } 
                break;
            case 18:
                /* 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement */
                var e1 = jjsematicS[jjsp - 7];
                var e2 = jjsematicS[jjsp - 5];
                var e3 = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_FOR, [e1, e2, e3, s]); } 
                break;
            case 19:
                /* 19: statement => "return" optional_expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_RETURN, e); } 
                break;
            case 20:
                /* 20: statement => "break" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                { jjtop.type = AST_BREAK; jjtop.add(n); } 
                break;
            case 21:
                /* 21: statement => "continue" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                { jjtop.type = AST_CONTINUE; jjtop.add(n); } 
                break;
            case 23:
                /* 23: optional_num => */
                { jjtop = ZNode.NONE; } 
                break;
            case 24:
                /* 24: if_statement => "if" "(" expr ")" statement */
                var c = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, ZNode.NONE]); } 
                break;
            case 25:
                /* 25: if_statement => "if" "(" expr ")" statement "else" statement */
                var c = jjsematicS[jjsp - 5];
                var s = jjsematicS[jjsp - 3];
                var el = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, el]); } 
                break;
            case 26:
                /* 26: for_exprs => */
                { jjtop = new ZNode(AST_EXPR_LIST); } 
                break;
            case 28:
                /* 28: non_empty_for_exprs => non_empty_for_exprs "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 29:
                /* 29: non_empty_for_exprs => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 33:
                /* 33: callable_expr => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 35:
                /* 35: dereferencable => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 37:
                /* 37: var => dereferencable arrow_and_property */
                var v = jjsematicS[jjsp - 2];
                var pn = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PROPERTY, [v, pn]); } 
                break;
            case 39:
                /* 39: callable_variable => dereferencable "[" optional_expr "]" */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_OFFSET, [v, e]); } 
                break;
            case 40:
                /* 40: callable_variable => dereferencable arrow_and_property "(" argument_list ")" */
                var v = jjsematicS[jjsp - 5];
                var pn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_METHODCALL, [v, pn, l]); } 
                break;
            case 41:
                /* 41: simple_var => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 42:
                /* 42: simple_var => "$" "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_VARIABLE, e); } 
                break;
            case 43:
                /* 43: simple_var => "$" simple_var */
                var v = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 44:
                /* 44: @0 => */
                jjlexState.push(2); 
                break;
            case 45:
                /* 45: @1 => */
                jjlexState.pop(); 
                break;
            case 46:
                /* 46: arrow_and_property => @0 "->" @1 property_name */
                var pn = jjsematicS[jjsp - 1];
                { jjtop = pn; } 
                break;
            case 47:
                /* 47: property_name => <NAME> */
                var n = jjsematicS[jjsp - 1];
                { jjtop.type = AST_STRING; } 
                break;
            case 48:
                /* 48: property_name => "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 50:
                /* 50: optional_expr => */
                { jjtop = ZNode.NONE; } 
                break;
            case 52:
                /* 52: function_call => <NAME> "(" argument_list ")" */
                var fn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { fn.type = AST_STRING; jjtop = new ZNode(AST_FUNCTIONCALL, [fn, l]); } 
                break;
            case 53:
                /* 53: function_call => callable_expr "(" argument_list ")" */
                var f = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_FUNCTIONCALL, [f, l]); } 
                break;
            case 54:
                /* 54: argument_list => */
                { jjtop = new ZNode(AST_ARGLIST); } 
                break;
            case 56:
                /* 56: non_empty_argument_list => non_empty_argument_list "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 57:
                /* 57: non_empty_argument_list => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARGLIST, e); } 
                break;
            case 58:
                /* 58: expr_without_var => var "=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b]); } 
                break;
            case 59:
                /* 59: expr_without_var => var "+=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_PLUS); } 
                break;
            case 60:
                /* 60: expr_without_var => var "-=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MINUS); } 
                break;
            case 61:
                /* 61: expr_without_var => var "**=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_POW); } 
                break;
            case 62:
                /* 62: expr_without_var => var "*=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_TIMES); } 
                break;
            case 63:
                /* 63: expr_without_var => var "/=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_DIVIDE); } 
                break;
            case 64:
                /* 64: expr_without_var => var "&=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITAND); } 
                break;
            case 65:
                /* 65: expr_without_var => var "|=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITOR); } 
                break;
            case 66:
                /* 66: expr_without_var => var "^=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITXOR); } 
                break;
            case 67:
                /* 67: expr_without_var => var ">>=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 68:
                /* 68: expr_without_var => var "<<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_LEFTSHIFT); } 
                break;
            case 69:
                /* 69: expr_without_var => var "%=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MOD); } 
                break;
            case 70:
                /* 70: expr_without_var => expr "?" expr ":" expr */
                var a = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 3];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, b, c]); } 
                break;
            case 71:
                /* 71: expr_without_var => expr "?" ":" expr */
                var a = jjsematicS[jjsp - 4];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, ZNode.NONE, c]); } 
                break;
            case 72:
                /* 72: expr_without_var => expr ">" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHAN);        } 
                break;
            case 73:
                /* 73: expr_without_var => expr "<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHAN);           } 
                break;
            case 74:
                /* 74: expr_without_var => expr ">=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHANOREQUAL); } 
                break;
            case 75:
                /* 75: expr_without_var => expr "<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHANOREQUAL);    } 
                break;
            case 76:
                /* 76: expr_without_var => expr "==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_EQUAL);              } 
                break;
            case 77:
                /* 77: expr_without_var => expr "===" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_IDENTICAL);          } 
                break;
            case 78:
                /* 78: expr_without_var => expr "!=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTEQUAL);           } 
                break;
            case 79:
                /* 79: expr_without_var => expr "!==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTIDENTICAL);       } 
                break;
            case 80:
                /* 80: expr_without_var => expr "^" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITXOR);      } 
                break;
            case 81:
                /* 81: expr_without_var => expr "|" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITOR);       } 
                break;
            case 82:
                /* 82: expr_without_var => expr "&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITAND);      } 
                break;
            case 83:
                /* 83: expr_without_var => expr ">>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 84:
                /* 84: expr_without_var => expr "<<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LEFTSHIFT);  } 
                break;
            case 85:
                /* 85: expr_without_var => expr "&&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_AND); } 
                break;
            case 86:
                /* 86: expr_without_var => expr "||" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_OR);  } 
                break;
            case 87:
                /* 87: expr_without_var => expr "OR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALOR, [a, b]);         } 
                break;
            case 88:
                /* 88: expr_without_var => expr "XOR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_XOR); } 
                break;
            case 89:
                /* 89: expr_without_var => expr "AND" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALAND, [a, b]);       } 
                break;
            case 90:
                /* 90: expr_without_var => expr "+" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_PLUS);   } 
                break;
            case 91:
                /* 91: expr_without_var => expr "-" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MINUS);  } 
                break;
            case 92:
                /* 92: expr_without_var => expr "*" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_TIMES);  } 
                break;
            case 93:
                /* 93: expr_without_var => expr "/" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_DIVIDE); } 
                break;
            case 94:
                /* 94: expr_without_var => expr "%" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MOD);    } 
                break;
            case 95:
                /* 95: expr_without_var => expr "**" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_POW);   } 
                break;
            case 96:
                /* 96: expr_without_var => expr "." expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_CONCAT); } 
                break;
            case 97:
                /* 97: expr_without_var => "(" expr ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 98:
                /* 98: expr_without_var => "+" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_POSITIVE); } 
                break;
            case 99:
                /* 99: expr_without_var => "-" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NEGATIVE); } 
                break;
            case 100:
                /* 100: expr_without_var => "!" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NOT);    } 
                break;
            case 101:
                /* 101: expr_without_var => "~" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_BITNOT); } 
                break;
            case 102:
                /* 102: expr_without_var => "++" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTINC, a);   } 
                break;
            case 103:
                /* 103: expr_without_var => "--" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTDEC, a);  } 
                break;
            case 104:
                /* 104: expr_without_var => var "++" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXINC, a); } 
                break;
            case 105:
                /* 105: expr_without_var => var "--" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXDEC, a); } 
                break;
            case 107:
                /* 107: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" */
                var l = jjsematicS[jjsp - 6];
                var ll = jjsematicS[jjsp - 4];
                var b = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ANONYFUNCTION, [l, ll, b]); } 
                break;
            case 109:
                /* 109: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" */
                var n = jjsematicS[jjsp - 7];
                var l = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 2];
                { n.type = AST_STRING; jjtop = new ZNode(AST_FUNCTION, [n, l, b]); } 
                break;
            case 110:
                /* 110: parameter_list => */
                { jjtop = new ZNode(AST_PARAMLIST); } 
                break;
            case 112:
                /* 112: non_empty_parameter_list => non_empty_parameter_list "," parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop.add(p); } 
                break;
            case 113:
                /* 113: non_empty_parameter_list => parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PARAMLIST, p); } 
                break;
            case 114:
                /* 114: parameter => <NAME> */
                var p = jjsematicS[jjsp - 1];
                { p.type = AST_STRING; jjtop = p; } 
                break;
            case 115:
                /* 115: lexical_vars => */
                { jjtop = new ZNode(AST_LEXICALVARLIST); } 
                break;
            case 116:
                /* 116: lexical_vars => "use" "(" lexical_var_list ")" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 117:
                /* 117: lexical_var_list => lexical_var_list "," <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop.add(v); } 
                break;
            case 118:
                /* 118: lexical_var_list => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_LEXICALVARLIST, v); } 
                break;
            case 119:
                /* 119: primitive => <INT> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_INTEGER; jjtop = s; } 
                break;
            case 120:
                /* 120: primitive => <DECIMAL> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_FLOAT; jjtop = s; } 
                break;
            case 121:
                /* 121: primitive => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_STRING; jjtop = s; } 
                break;
            case 122:
                /* 122: primitive => <NAME> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_CONST; jjtop = s; } 
                break;
            case 123:
                /* 123: primitive => "[" array_pair_list "]" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 124:
                /* 124: primitive => "list" "(" array_pair_list ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 126:
                /* 126: array_pair_list => */
                { jjtop = new ZNode(AST_ARRAY); } 
                break;
            case 127:
                /* 127: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop.add(a); } 
                break;
            case 128:
                /* 128: non_empty_array_pair_list => array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAY, a); } 
                break;
            case 130:
                /* 130: array_pair => expr "=>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAYPAIR, [a, b]); } 
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjconsumeTokens(t){
        if(t !== null){
            while(!jjstop && !jjacceptToken(jjtoken));
        }
        while(!jjstop && jjemittedTokens.length > 0){
            jjacceptToken(new Token(jjemittedTokens[0], null, 0, 0, 0, 0)) && jjemittedTokens.shift();
        }
    }
    function jjacceptToken(t){
        // look up action table
        var cstate = jjlrState[jjlrState.length - 1];
        var ind = jjdisact[cstate] + t.id;
        var act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            jjsyntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                jjstop = true;
                jjemit('accept');
                return true;
            }
            else {
                jjlrState.push(act - 1);
                jjsematicS.push(jjsematicVal);
                jjsematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            jjdoReduction(-act - 1);
            return false;
        }
        else {
            // error
            jjsyntaxError(t);
            // force consume
            return true;
        }
    }
    function jjsyntaxError(t){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}


function OpArray(){
    this.opcode = [];
    this.opCount = 0;
    this.functions = [];
}
OpArray.prototype.dump = function(){
    var ret = [];
    var labels = [];
    var labelCount = 0;
    var labelOps = [];
    for(var i = 0, _a = this.opcode; i < this.opCount; i++){
        var op = _a[2 * i];
        var line = op.name;
        var arg = _a[2 * i + 1];
        if(op === OP_JMP || op === OP_JZ || op === OP_JNZ){
            labels[arg] = labelCount++;
            labelOps.push({ op: op, loc: i, target: arg });
            ret.push(null);
        }
        else {
            if(arg !== null){
                if(isArray(arg)){
                    for(var j = 0; j < arg.length; j++){
                        line += ' ' + arg[j];
                    }
                }
                else {
                    if(typeof arg === 'string'){
                        arg = '"' + arg.replace(/\n/g, '\\n') + '"';
                    }
                    line += ' ' + String(arg);
                }
            }
            ret.push(line);
        }
    }
    for(var i = 0; i < labels.length; i++){
        var l = labels[i];
        if(l !== undefined){
            ret[i] = ('label' + l) + ': ' + ret[i];
        }
    }
    for(var i = 0, _a = labelOps; i < _a.length; i++){
        ret[_a[i].loc] = _a[i].op.name + ' label' + labels[_a[i].target];
    }
    return ret;
}

function createCompiler(fname){
    var opa = new OpArray();
    var registers = [];
    var scope = [];
    var onErr = [];
    var compileQueue = [];

    var localNode = new ZNode(AST_LOCAL);
    
    function LoopInfo(allowBreak, allowContinue){
        this.allowBreak = allowBreak;
        this.allowContinue = allowContinue;
        this.breaks = [];
        this.continues = [];
    }
    LoopInfo.prototype.done = function(bl, cl){
        for(var i = 0, _a = this.breaks; i < _a.length; i++){
            setArg(_a[i], bl);
        }
        for(var i = 0, _a = this.continues; i < _a.length; i++){
            setArg(_a[i], cl);
        }
    }

    return {
        compile: compile,
        addErrHandler: addErrHandler
    };

    function addErrHandler(cb){
        onErr.push(cb);
    }
    function err(msg){
        for(var i = 0; i < onErr.length; i++){
            onErr[i](msg);
        }
    }
    function singlePosErr(msg, pos){
        err(msg + ' (at line ' + pos.startLine + ')');
    }
    function allocateRegister(){
        var i = 0;
        while(registers[i] !== undefined){ i++; };
        registers[i] = true;
        return i;
    }
    function releaseRegister(i){
        if(i === registers.length - 1){
            registers.pop();
        }
        else {
            registers[i] = undefined;
        }
    }
    function pushScope(){
        scope.push(registers);
        registers = [];
    }
    function popScope(){
        registers = scope.pop();
    }
    function emit(s, args){
        opa.opcode.push(s);
        opa.opcode.push(typeof args !== 'undefined' ? args : null);
        return opa.opCount++;
    }
    function setArg(op, arg){
        opa.opcode[op * 2 + 1] = arg;
    }
    function breakTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowBreak){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }
    function continueTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowContinue){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }

    function compile(astRoot){
        compileBlock(astRoot);
        return opa;
    }
    function compileBlock(ast){
        for(var i = 0, _a = ast.child; i < _a.length; i++){
            compileStatement(_a[i]);
        }
        emit(OP_RETURNNULL);
    }
    function compileStatement(ast){
        switch(ast.type){
            case AST_NONE: break;
            case AST_STATEMENTLIST:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileStatement(_a[i]);
                }
                break;
            case AST_ECHO:
                compileExpression(ast.child[0]);
                emit(OP_ECHO);
                break;
            case AST_EXPR_LIST:
                compileExpression(ast.child[0]);
                emit(OP_POP);
                break;
            case AST_BREAK:
                var leveln = ast.child[0];
                var target = breakTarget(ast, leveln === ZNode.NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid break statement', ast.pos);
                }
                else {
                    target.val.breaks.push(emit(OP_JMP));
                }
                break;
            case AST_CONTINUE:
                var leveln = ast.child[0];
                var target = continueTarget(ast, leveln === ZNode.NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid continue statement', ast.pos);
                }
                else {
                    target.val.continues.push(emit(OP_JMP));
                }
                break;
            case AST_RETURN:
                if(ast.child[0] === ZNode.NONE){
                    emit(OP_RETURNNULL);
                }
                else {
                    compileExpression(ast.child[0]);
                    emit(OP_RETURN);
                }
                break;
            case AST_IF:
                compileExpression(ast.child[0]);
                var line1 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                var line2 = emit(OP_JMP);
                setArg(line1, opa.opCount);
                ast.child[2] !== ZNode.NONE && compileStatement(ast.child[2]);
                setArg(line2, opa.opCount);
                break;
            case AST_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileExpression(ast.child[0]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line1);
                break;
            case AST_DO_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileStatement(ast.child[1]);
                var line2 = opa.opCount;
                compileExpression(ast.child[0]);
                emit(OP_JNZ, line1);
                ast.val.done(opa.opCount, line2);
                break;
            case AST_FOR:
                ast.val = new LoopInfo(true, true);
                compileExpression(ast.child[0]);
                var line1 = opa.opCount;
                compileExpression(ast.child[1]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[3]);
                var line3 = opa.opCount;
                compileExpression(ast.child[2]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line3);
                break;
        }
    }
    function compileExpression(root){
        switch(root.type){
            case AST_NONE: break;
            case AST_EXPR_LIST:
                for(var i = 0, _a = root.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    i < _a.length - 1 && emit(OP_POP);
                }
                break;
            case AST_BINARYOP:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(root.val);
                break;
            case AST_UNARYOP:
                compileExpression(root.child[0]);
                emit(root.val);
                break;
            case AST_POSTINC:
                compileExpression(root.child[0]);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                break;
            case AST_POSTDEC:
                compileExpression(root.child[0]);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                break;
            case AST_SUFFIXINC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_SUFFIXDEC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_ASSIGN:
                if(root.val === null){
                    compileAssign(root.child[0], root.child[1]);
                }
                else {
                    compileExpression(root.child[0]);
                    compileExpression(root.child[1]);
                    emit(root.val);
                    compileAssignTop(root.child[0]);
                }
                break;
            case AST_VARIABLE:
                compileExpression(root.child[0]);
                emit(OP_GETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(OP_GETPROP);
                break;
            case AST_OFFSET:
                compileExpression(root.child[0]);
                if(root.child[1] === ZNode.NONE){
                    emit(OP_GETMAXOFFSET);
                }
                else {
                    compileExpression(root.child[1]);
                    emit(OP_GETOFFSET);
                }
                break;
            case AST_FUNCTIONCALL:
                if(root.child[0].type === AST_STRING){
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKENAME, [root.child[0].val, root.child[1].child.length]);
                }
                else {
                    compileExpression(root.child[0]);
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKE, root.child[1].child.length);
                }
                break;
            case AST_METHODCALL:
                compileExpression(root.child[0]);
                if(root.child[1].type === AST_STRING){
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHODNAME, [root.child[1].val, root.child[2].length]);
                }
                else {
                    compileExpression(root.child[1]);
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHOD, root.child[2].length);
                }
                break;
            case AST_LOCAL:
                emit(OP_GETLOCAL, root.val);
                break;
            case AST_INTEGER:
            case AST_FLOAT:
            case AST_STRING:
                emit(OP_PUSH, root.val);
                break;
            case AST_CONST:
                emit(OP_GETCONST, root.val);
                break;
        }
    }
    function compileAssign(dest, src){
        switch(dest.type){
            case AST_LOCAL:
                compileExpression(src);
                emit(OP_SETLOCAL, dest.val);
                break;
            case AST_VARIABLE:
                compileExpression(dest.child[0]);
                compileExpression(src);
                emit(OP_SETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(dest.child[0]);
                compileExpression(dest.child[1]);
                compileExpression(src);
                emit(OP_SETPROP);
                break;
            case AST_OFFSET:
                compileExpression(dest.child[0]);
                if(dest.child[0] === ZNode.NONE){
                    compileExpression(src);
                    emit(OP_SETMAXOFFSET);
                }
                else {
                    compileExpression(dest.child[1]);
                    compileExpression(src);
                    emit(OP_SETOFFSET);
                }
                break;
            default:;
        }
    }
    function compileAssignTop(dest){
        localNode.val = allocateRegister();
        emit(OP_SETLOCAL, localNode.val);
        emit(OP_POP);
        compileAssign(dest, localNode);
        releaseRegister(localNode.val);
    }
}

exports.compile = function compile(fname, source, errs){
    var parser = createParser();
    var outputs = { astRoot: null };
    var err = false;
    parser.init(outputs);
    parser.on('lexicalerror', function(c, line, column){
        line++;
        column++;
        errs.push('lexical error: (line ' + line + ', column ' + column + '): unexpected character "' + c + '"');
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', function(msg, token){
        errs.push('syntax error: (line ' + token.startLine + ', column ' + token.startColumn + '):' + msg);
        parser.halt();
        err = true;
    });
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        var cp = createCompiler(fname);
        cp.addErrHandler(function(msg){
            errs.push(msg);
        });
        return cp.compile(outputs.astRoot);
    }
}

})));