/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.zend = {})));
}(this, (function (exports) { 'use strict';

function ZNode(type, child, val, pos){
    this.type = type;
    this.val = val || null;
    this.child = typeof child === 'array' ? child : typeof child === 'undefined' ? [] : [child];
    this.pos = pos || null;
}
ZNode.NONE = new ZNode(AST_NONE);
ZNode.prototype.add = function(c){
    this.child.push(c);
}

function nodeFromToken(t){
    return new ZNode(AST_NONE, null, t.val, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeFromTrivalToken(t){
    return new ZNode(AST_NONE, null, null, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
var escapes = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'"
};
function unescape(s){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}
var cc = 0;
var OP_NOP = cc++;
var OP_PUSH = cc++;
var OP_POP = cc++;
var OP_GETVAR = cc++;
var OP_SETVAR = cc++;
var OP_SETPROP = cc++;
var OP_GETPROP = cc++;
var OP_GETOFFSET = cc++;
var OP_SETOFFSET = cc++;

var OP_PLUS = cc++;
var OP_MINUS = cc++;
var OP_TIMES = cc++;
var OP_DIVIDE = cc++;
var OP_POW = cc++;
var OP_MOD = cc++;
var OP_BITAND = cc++;
var OP_BITOR = cc++;
var OP_BITXOR = cc++;
var OP_BITNOT = cc++;
var OP_AND = cc++;
var OP_OR = cc++;
var OP_NOT = cc++;
var OP_XOR = cc++;
var OP_LEFTSHIFT = cc++;
var OP_RIGHTSHIFT = cc++;
var OP_POSITIVE = cc++;
var OP_NEGATIVE = cc++;
var OP_INC = cc++;
var OP_DEC = cc++;
var OP_GREATERTHAN = cc++;
var OP_LESSTHAN = cc++;
var OP_EQUAL = cc++;
var OP_IDENTICAL = cc++;
var OP_GREATERTHANOREQUAL = cc++;
var OP_LESSTHANOREQUAL = cc++;
var OP_NOTEQUAL = cc++;
var OP_NOTIDENTICAL = cc++;

var OP_CALL = cc++;
var OP_NEW = cc++;
var OP_DEFINEFUNCTION = cc++;

cc = 0;
var AST_NONE = cc++;
var AST_TOPLIST = cc++;
var AST_STATEMENTLIST = cc++;
var AST_ECHO = cc++;
var AST_IF = cc++;
var AST_WHILE = cc++;
var AST_DO_WHILE = cc++;
var AST_FOR = cc++;
var AST_EXPR_LIST = cc++;
var AST_CONDITIONALEXPR = cc++;
var AST_ARGLIST = cc++;
var AST_PARAMLIST = cc++;
var AST_LEXICALVARLIST = cc++;
var AST_FUNCCALL = cc++;

var AST_VARIABLE = cc++;
var AST_PROPERTY = cc++;
var AST_OFFSET = cc++;
var AST_ASSIGN = cc++;
var AST_BINARYOP = cc++;
var AST_UNARYOP = cc++;
var AST_LOGICALOR = cc++;
var AST_LOGICALAND = cc++;
var AST_POSTINC = cc++;
var AST_SUFFIXINC = cc++;
var AST_POSTDEC = cc++;
var AST_SUFFIXDEC = cc++;

var AST_CONST = cc++;
var AST_INTEGER = cc++;
var AST_FLOAT = cc++;
var AST_STRING = cc++;
var AST_ARRAY = cc++;
var AST_ARRAYPAIR = cc++;


/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
         1,     1,     1,    11,     1,     1,     1,     1,     8,     9,
        10,     4,     7,     6,     5,     3,
]; 
var jjlexdisnext0 = [ 
         0,     9,    19,    16,    -9,    16,    14,    17,    -9,    -9,
        11,    -9,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         1,     1,     1,    10,     1,     1,     1,     1,     7,     7,
         7,     3,     6,     5,     3,     2,
]; 
var jjlexclassTable0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         4,     5,     0,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
         0,     0,     8,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable0 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd0 = [ 
    0,1,1,0,1,0,0,0,1,1,1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,0,1,1,1,0,0,1,0,
]; 
var jjlextable0 = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1 = [ 
        51,    51,   134,    51,    51,    51,    51,    51,    51,    52,
        51,    51,    51,    51,    51,    51,    51,    51,   118,    51,
        51,    51,    51,    51,    51,   118,   118,   118,   118,    51,
        51,    51,    51,    51,    51,    53,    51,    51,    51,    51,
       118,   118,   118,   118,   118,   118,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,   133,    51,    51,    51,    51,
        51,    51,    52,    51,    51,    51,    51,    51,    51,    51,
        51,   118,    51,    51,    51,    51,    51,    51,   118,   118,
       118,   118,    51,    51,    51,    51,    51,    51,    53,    51,
        51,    51,    51,   118,   118,   118,   118,   118,   118,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,   132,    51,
        51,    51,    51,    51,    51,    52,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    53,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,   131,    51,    51,    51,    51,    51,    51,    52,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    53,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,   130,    51,    51,    51,    51,    51,
        51,    52,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    53,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,     1,     2,     3,     4,     5,
         6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
        16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
        26,    26,    26,    26,    26,    27,    26,    28,    29,   129,
        30,    31,    32,    33,    26,    26,    26,    34,    35,    36,
        26,    37,    38,    26,    26,    26,    26,    26,    26,    26,
        39,    40,    26,    41,    42,    43,    44,    72,    95,   128,
        95,    97,    98,    96,    72,    72,    72,    72,    72,    72,
        72,    72,    72,     1,     2,     3,     1,    45,     3,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,     1,
         2,     3,     1,     2,     3,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    69,    70,   126,    87,    67,    68,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
       127,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        65,    66,    49,   124,   122,   119,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    88,    50,   112,    96,    96,
       103,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,   125,    72,    72,    72,    72,    72,    72,    72,
        72,   100,    99,    93,    89,    77,    54,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    55,    76,    71,    62,
        61,    48,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    46,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
       123,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,   121,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,   120,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,   117,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,   116,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,   115,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,   114,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,   113,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    90,    -1,    -1,    -1,
        -1,    -1,    -1,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    -1,    -1,    -1,    -1,    -1,    -1,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,   110,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,   109,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,   108,    72,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,   107,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,   106,    72,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,   105,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,   104,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
       102,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,   101,    72,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        90,    -1,    -1,    -1,    -1,    -1,    -1,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    -1,    -1,    -1,    -1,
        -1,    -1,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    86,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    85,    72,
        72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    72,    84,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    83,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    81,    72,
        72,    72,    72,    82,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        79,    72,    72,    72,    72,    72,    80,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        78,    72,    72,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,
        72,    75,    72,    72,    -1,    -1,    -1,    -1,    -1,    -1,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    74,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,
        -1,    -1,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    -1,    -1,    -1,    -1,    -1,    -1,    72,    72,
        72,    72,    72,    73,    72,    72,    72,    -1,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    -1,    -1,    -1,    -1,    -1,    -1,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,   111,    91,    63,    94,
        18,    91,    94,   111,   111,   111,   111,    -1,    58,    64,
        64,    -1,    64,    -1,    61,    59,    60,    -1,   111,   111,
       111,   111,   111,   111,    64,    64,    64,    91,    64,    56,
        -1,    -1,    -1,    91,    -1,    -1,    -1,    91,    57,    -1,
        64,    -1,    91,    -1,    -1,    91,    -1,    91,    92,    -1,
        92,
]; 
var jjlexdisnext1 = [ 
       314,   421,   418,   395,   520,   -63,  2197,   499,   454,   252,
       -63,   -63,   494,  2276,   -63,  2253,   502,   497,  2242,   -63,
       -63,   439,   416,   412,   495,  2163,  2122,  2081,  2040,   -63,
       -63,   495,   467,   -63,  1999,  1958,  1917,  1876,  1835,  1794,
      1753,   -63,   415,   -63,   -63,   392,   482,  1712,   -63,   -63,
       -63,   189,   -63,  2252,   481,   -63,   -63,   -63,   -63,   -63,
       -63,  2256,   -63,  2244,   365,   360,   -63,   480,   -63,   -63,
       479,   -63,  1671,  1630,  1589,  1548,   -63,   434,  1507,  1466,
      1425,  1384,  1343,  1302,  1261,  1220,  1179,   -63,   -63,   -63,
      1138,   126,  2238,   -63,  2241,   461,   460,   -63,   -63,   -63,
       -63,  1097,  1056,   437,  1015,   974,   933,   892,   851,   810,
       769,    63,   417,   728,   687,   646,   605,   564,     0,   409,
       523,   482,   425,   441,   394,   400,   328,   359,   300,   202,
       144,    80,    21,   -51,   -63,
]; 
var jjlexchecknext1 = [ 
       118,   118,   133,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   111,   111,   132,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
       111,   111,   111,   111,   111,   111,    91,    91,   131,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    51,
        51,   130,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,     9,     9,   129,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   127,    64,   126,
        64,    65,    65,    64,   127,   127,   127,   127,   127,   127,
       127,   127,   127,    45,    45,    45,     3,     3,     3,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   125,     2,
         2,     2,     1,     1,     1,   125,   125,   125,   125,   125,
       125,   125,   125,   125,    23,    23,   124,    42,    22,    22,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   123,
        21,    21,     8,   122,   119,   112,   123,   123,   123,   123,
       123,   123,   123,   123,   123,    42,     8,   103,    96,    95,
        77,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       121,    70,    67,    54,    46,    32,    12,   121,   121,   121,
       121,   121,   121,   121,   121,   121,    12,    31,    24,    17,
        16,     7,   121,   121,   121,   121,   121,   121,   121,   121,
       121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
       121,   120,     4,    -1,    -1,    -1,    -1,    -1,   120,   120,
       120,   120,   120,   120,   120,   120,   120,    -1,    -1,    -1,
        -1,    -1,    -1,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   117,    -1,    -1,    -1,    -1,    -1,    -1,   117,
       117,   117,   117,   117,   117,   117,   117,   117,    -1,    -1,
        -1,    -1,    -1,    -1,   117,   117,   117,   117,   117,   117,
       117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
       117,   117,   117,   116,    -1,    -1,    -1,    -1,    -1,    -1,
       116,   116,   116,   116,   116,   116,   116,   116,   116,    -1,
        -1,    -1,    -1,    -1,    -1,   116,   116,   116,   116,   116,
       116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
       116,   116,   116,   116,   115,    -1,    -1,    -1,    -1,    -1,
        -1,   115,   115,   115,   115,   115,   115,   115,   115,   115,
        -1,    -1,    -1,    -1,    -1,    -1,   115,   115,   115,   115,
       115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
       115,   115,   115,   115,   115,   114,    -1,    -1,    -1,    -1,
        -1,    -1,   114,   114,   114,   114,   114,   114,   114,   114,
       114,    -1,    -1,    -1,    -1,    -1,    -1,   114,   114,   114,
       114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
       114,   114,   114,   114,   114,   114,   113,    -1,    -1,    -1,
        -1,    -1,    -1,   113,   113,   113,   113,   113,   113,   113,
       113,   113,    -1,    -1,    -1,    -1,    -1,    -1,   113,   113,
       113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
       113,   113,   113,   113,   113,   113,   113,   110,    -1,    -1,
        -1,    -1,    -1,    -1,   110,   110,   110,   110,   110,   110,
       110,   110,   110,    -1,    -1,    -1,    -1,    -1,    -1,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   109,    -1,
        -1,    -1,    -1,    -1,    -1,   109,   109,   109,   109,   109,
       109,   109,   109,   109,    -1,    -1,    -1,    -1,    -1,    -1,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
       109,   109,   109,   109,   109,   109,   109,   109,   109,   108,
        -1,    -1,    -1,    -1,    -1,    -1,   108,   108,   108,   108,
       108,   108,   108,   108,   108,    -1,    -1,    -1,    -1,    -1,
        -1,   108,   108,   108,   108,   108,   108,   108,   108,   108,
       108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
       107,    -1,    -1,    -1,    -1,    -1,    -1,   107,   107,   107,
       107,   107,   107,   107,   107,   107,    -1,    -1,    -1,    -1,
        -1,    -1,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   106,    -1,    -1,    -1,    -1,    -1,    -1,   106,   106,
       106,   106,   106,   106,   106,   106,   106,    -1,    -1,    -1,
        -1,    -1,    -1,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   105,    -1,    -1,    -1,    -1,    -1,    -1,   105,
       105,   105,   105,   105,   105,   105,   105,   105,    -1,    -1,
        -1,    -1,    -1,    -1,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   104,    -1,    -1,    -1,    -1,    -1,    -1,
       104,   104,   104,   104,   104,   104,   104,   104,   104,    -1,
        -1,    -1,    -1,    -1,    -1,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   102,    -1,    -1,    -1,    -1,    -1,
        -1,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        -1,    -1,    -1,    -1,    -1,    -1,   102,   102,   102,   102,
       102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
       102,   102,   102,   102,   102,   101,    -1,    -1,    -1,    -1,
        -1,    -1,   101,   101,   101,   101,   101,   101,   101,   101,
       101,    -1,    -1,    -1,    -1,    -1,    -1,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,    90,    -1,    -1,    -1,
        -1,    -1,    -1,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    -1,    -1,    -1,    -1,    -1,    -1,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    86,    -1,    -1,
        -1,    -1,    -1,    -1,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    -1,    -1,    -1,    -1,    -1,    -1,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    85,    -1,
        -1,    -1,    -1,    -1,    -1,    85,    85,    85,    85,    85,
        85,    85,    85,    85,    -1,    -1,    -1,    -1,    -1,    -1,
        85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    85,    85,    85,    85,    84,
        -1,    -1,    -1,    -1,    -1,    -1,    84,    84,    84,    84,
        84,    84,    84,    84,    84,    -1,    -1,    -1,    -1,    -1,
        -1,    84,    84,    84,    84,    84,    84,    84,    84,    84,
        84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
        83,    -1,    -1,    -1,    -1,    -1,    -1,    83,    83,    83,
        83,    83,    83,    83,    83,    83,    -1,    -1,    -1,    -1,
        -1,    -1,    83,    83,    83,    83,    83,    83,    83,    83,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
        83,    82,    -1,    -1,    -1,    -1,    -1,    -1,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    -1,    -1,    -1,
        -1,    -1,    -1,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    81,    -1,    -1,    -1,    -1,    -1,    -1,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    -1,    -1,
        -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    78,    -1,    -1,    -1,    -1,
        -1,    -1,    78,    78,    78,    78,    78,    78,    78,    78,
        78,    -1,    -1,    -1,    -1,    -1,    -1,    78,    78,    78,
        78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
        78,    78,    78,    78,    78,    78,    75,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    -1,    -1,    -1,    -1,    -1,    -1,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    75,    74,    -1,    -1,
        -1,    -1,    -1,    -1,    74,    74,    74,    74,    74,    74,
        74,    74,    74,    -1,    -1,    -1,    -1,    -1,    -1,    74,
        74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
        74,    74,    74,    74,    74,    74,    74,    74,    73,    -1,
        -1,    -1,    -1,    -1,    -1,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    -1,    -1,    -1,    -1,    -1,    -1,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    72,
        -1,    -1,    -1,    -1,    -1,    -1,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        47,    -1,    -1,    -1,    -1,    -1,    -1,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    -1,    -1,    -1,    -1,
        -1,    -1,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    40,    -1,    -1,    -1,    -1,    -1,    -1,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    -1,    -1,    -1,
        -1,    -1,    -1,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    39,    -1,    -1,    -1,    -1,    -1,    -1,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    -1,    -1,
        -1,    -1,    -1,    -1,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    38,    -1,    -1,    -1,    -1,    -1,    -1,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    -1,
        -1,    -1,    -1,    -1,    -1,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    37,    -1,    -1,    -1,    -1,    -1,
        -1,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        -1,    -1,    -1,    -1,    -1,    -1,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    36,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    34,    -1,    -1,
        -1,    -1,    -1,    -1,    34,    34,    34,    34,    34,    34,
        34,    34,    34,    -1,    -1,    -1,    -1,    -1,    -1,    34,
        34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
        34,    34,    34,    34,    34,    34,    34,    34,    28,    -1,
        -1,    -1,    -1,    -1,    -1,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    -1,    -1,    -1,    -1,    -1,    -1,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    27,
        -1,    -1,    -1,    -1,    -1,    -1,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    -1,    -1,    -1,    -1,    -1,
        -1,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        26,    -1,    -1,    -1,    -1,    -1,    -1,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    -1,    -1,    -1,    -1,
        -1,    -1,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    25,    -1,    -1,    -1,    -1,    -1,    -1,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    -1,    -1,    -1,
        -1,    -1,    -1,    25,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
        25,    25,     6,     6,     6,     6,     6,     6,     6,     6,
         6,    -1,    -1,    -1,    -1,    -1,    -1,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,    92,    53,    18,    94,
        18,    53,    63,    92,    92,    92,    92,    -1,    15,    94,
        18,    -1,    63,    -1,    61,    15,    15,    -1,    92,    92,
        92,    92,    92,    92,    61,    94,    18,    53,    63,    13,
        -1,    -1,    -1,    53,    -1,    -1,    -1,    53,    13,    -1,
        61,    -1,    53,    -1,    -1,    53,    -1,    53,    53,    -1,
        53,
]; 
var jjlexclassTable1 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     4,     5,     0,     6,     7,     8,     9,
        10,    11,    12,    13,    14,    15,    16,    17,    18,    18,
        18,    18,    18,    18,    18,    18,    18,    18,    19,    20,
        21,    22,    23,    24,     0,    25,    26,    26,    27,    28,
        26,    29,    29,    29,    29,    29,    29,    29,    30,    31,
        29,    29,    32,    29,    29,    29,    29,    29,    33,    29,
        29,    34,    35,    36,    37,    38,    39,    40,    41,    42,
        43,    44,    45,    29,    46,    47,    29,    29,    48,    49,
        50,    51,    52,    29,    53,    54,    55,    56,    29,    57,
        58,    29,    29,    59,    60,    61,    62,     0,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,
]; 
var jjlexunicodeClassTable1 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1 = [ 
    0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,
    1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,
    1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
    1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,
    1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,
    1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,
    
]; 
var jjlexhasArc1 = [ 
    1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,
    1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,
    0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,
    1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,
    0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,
    1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
    1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
    
]; 
var jjlextable1 = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2 = [ 
         1,     2,     3,     4,     8,     5,     6,     1,     2,     3,
         1,     7,     3,     1,     2,     3,     1,     2,     3,    10,
        10,     9,     9,    10,    10,     9,     9,
]; 
var jjlexdisnext2 = [ 
         0,    16,    13,    10,    -1,    21,    -7,     7,    19,    17,
        15,
]; 
var jjlexchecknext2 = [ 
         0,     0,     0,     0,     4,     0,     0,     7,     7,     7,
         3,     3,     3,     2,     2,     2,     1,     1,     1,    10,
        10,     9,     9,     8,     8,     5,     5,
]; 
var jjlexclassTable2 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,    -1,    -1,    -1,     3,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,    -1,    -1,    -1,    -1,    -1,    -1,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     6,    -1,    -1,    -1,    -1,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,
]; 
var jjlexunicodeClassTable2 = [ 
    
]; 
var jjlexisEnd2 = [ 
    0,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc2 = [ 
    1,1,1,1,1,1,0,1,1,1,1,
]; 
var jjlextable2 = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
var jjlexpnext3 = [ 
         1,     2,     3,     1,     1,     1,     1,     1,     4,    -1,
        -1,     4,    11,     4,    11,     4,     4,    -1,    -1,     4,
        11,     4,    11,     4,     4,    -1,    -1,     4,     4,     4,
        10,     4,     4,    -1,    -1,     4,     4,     4,     4,     4,
         4,    -1,    -1,     6,     7,     4,     7,     8,     4,    -1,
        -1,     4,     4,     9,     4,     4,     4,    -1,    -1,     6,
         7,     4,     7,     8,     4,    -1,    -1,     4,     4,     4,
         4,     4,     4,    -1,    -1,     4,     4,     4,     5,     4,
         1,    -1,    -1,     1,     1,     1,     1,     1,
]; 
var jjlexdisnext3 = [ 
         0,    80,    -8,    72,    64,    56,    48,    40,    32,    24,
        16,     8,
]; 
var jjlexchecknext3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,    11,    -1,
        -1,    11,    11,    11,    11,    11,    10,    -1,    -1,    10,
        10,    10,    10,    10,     9,    -1,    -1,     9,     9,     9,
         9,     9,     8,    -1,    -1,     8,     8,     8,     8,     8,
         7,    -1,    -1,     7,     7,     7,     7,     7,     6,    -1,
        -1,     6,     6,     6,     6,     6,     5,    -1,    -1,     5,
         5,     5,     5,     5,     4,    -1,    -1,     4,     4,     4,
         4,     4,     3,    -1,    -1,     3,     3,     3,     3,     3,
         1,    -1,    -1,     1,     1,     1,     1,     1,
]; 
var jjlexclassTable3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     0,
         0,     0,     0,     0,     0,     3,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     0,     0,
         0,     0,     5,     0,     0,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     7,     0,     0,     0,     0,     0,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     0,     0,     0,     0,     0,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,
]; 
var jjlexunicodeClassTable3 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd3 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc3 = [ 
    1,1,0,1,1,1,1,1,1,1,1,1,
]; 
var jjlextable3 = {
    pnext: jjlexpnext3,
    disnext: jjlexdisnext3,
    checknext: jjlexchecknext3,
    maxAsicii: 255,
    classTable: jjlexclassTable3,
    unicodeClassTable: jjlexunicodeClassTable3,
    isEnd: jjlexisEnd3,
    hasArc: jjlexhasArc3
};
var jjlexpnext4 = [ 
         3,     4,     7,     4,     5,     3,     4,     6,     4,     5,
         8,     8,     8,     8,     2,     1,
]; 
var jjlexdisnext4 = [ 
        15,    10,     4,     4,    -1,    -6,    -2,     9,     8,
]; 
var jjlexchecknext4 = [ 
         4,     4,     6,     4,     4,     2,     2,     3,     2,     2,
         8,     7,     8,     7,     1,     0,
]; 
var jjlexclassTable4 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,    -1,    -1,
        -1,    -1,     3,    -1,    -1,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     5,    -1,    -1,    -1,    -1,    -1,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexunicodeClassTable4 = [ 
    
]; 
var jjlexisEnd4 = [ 
    0,0,1,0,1,1,0,1,1,
]; 
var jjlexhasArc4 = [ 
    1,1,1,1,1,0,1,1,1,
]; 
var jjlextable4 = {
    pnext: jjlexpnext4,
    disnext: jjlexdisnext4,
    checknext: jjlexchecknext4,
    maxAsicii: 255,
    classTable: jjlexclassTable4,
    unicodeClassTable: jjlexunicodeClassTable4,
    isEnd: jjlexisEnd4,
    hasArc: jjlexhasArc4
};
/*
    dfa tables
*/
var jjdfaTables = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
    jjlextable3,
    jjlextable4,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc, c){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,     1,     1,    -1,     2,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,
]; 
var jjlexTokens1 = [ 
        -1,    -1,    -1,    -1,    64,     7,     9,    19,    40,    -1,
        51,    52,    14,    12,    55,    13,    -1,    15,     5,    18,
        58,    21,    28,    20,    17,     3,     3,     3,     3,    53,
        54,    42,    -1,     8,     3,     3,     3,     3,     3,     3,
         3,    56,    41,    57,    43,    -1,    26,    10,    39,    59,
        34,    -1,     6,    -1,    16,    31,    44,    29,    45,    30,
        50,     4,    33,     4,    -1,    46,    23,    24,    49,    22,
        47,    -1,     3,     3,    61,     3,    36,    -1,    69,     3,
         3,     3,     3,    65,     3,     3,     3,    35,    60,    27,
        10,    -1,    -1,    32,     4,    -1,     4,    48,    38,    25,
        37,    62,    63,    -1,     3,     3,    70,     3,     3,    73,
         3,    -1,    -1,    67,    66,     3,    72,     3,    -1,    -1,
         3,    68,    -1,     3,    -1,     3,    -1,    71,    -1,    -1,
        -1,    -1,    -1,    -1,    11,
]; 
var jjlexTokens2 = [ 
        -1,    -1,    -1,    -1,     9,     3,    56,    -1,    10,     3,
        10,
]; 
var jjlexTokens3 = [ 
        -1,    74,     7,    74,    74,    75,    74,    75,    77,    74,
        76,    76,
]; 
var jjlexTokens4 = [ 
        -1,    -1,    75,    -1,    75,    77,    -1,    76,    76,
]; 

var jjstateCount = 240;
var jjtokenCount = 79;
var jjactERR = 241;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
       122,   123,    48,    46,    45,    47,   239,   216,    18,    17,
       217,    35,    36,    82,    83,    85,   236,   234,    84,    80,
        81,    82,    83,    85,   233,   225,    84,    62,    63,    64,
        65,    66,    67,    68,    69,    82,    83,    85,   -31,   -29,
        84,   -31,    38,    39,    40,   223,   220,    72,    71,    70,
        34,   219,    49,    74,    73,   119,   235,   120,    80,    81,
        82,    83,    85,    37,   129,    84,   124,   126,   127,   128,
        42,    15,    80,    81,    82,    83,    85,    61,   214,    84,
        62,    63,    64,    65,    66,    67,    68,    69,    86,    87,
        88,    90,    89,    91,    92,    93,    94,    95,    96,    97,
        72,    71,    70,   117,    98,    99,    74,    73,    18,    17,
       -30,   -30,   232,   -30,   -30,    18,    17,    11,   205,    75,
        76,    77,    79,    78,    80,    81,    82,    83,    85,    61,
       200,    84,    62,    63,    64,    65,    66,    67,    68,    69,
        80,    81,    82,    83,    85,    18,    17,    84,   -30,   210,
        12,   -30,    72,    71,    70,    18,    17,    12,    74,    73,
        80,    81,    82,    83,    85,   110,   195,    84,   194,   230,
       193,    75,    76,    77,    79,    78,    80,    81,    82,    83,
        85,    61,    85,    84,    62,    63,    64,    65,    66,    67,
        68,    69,    53,    85,    74,    73,    85,    85,   189,   188,
       186,   181,   211,   180,    72,    71,    70,   178,   177,   176,
        74,    73,    22,   171,    22,   116,   221,   111,   110,   101,
       -28,    59,    58,    75,    76,    77,    79,    78,    80,    81,
        82,    83,    85,    61,    56,    84,    62,    63,    64,    65,
        66,    67,    68,    69,    22,    52,    51,    50,    19,    13,
        10,     4,     0,     0,     0,     0,    72,    71,    70,     0,
         0,     0,    74,    73,     0,     0,     0,     0,   218,     0,
         0,     0,     0,     0,     0,    75,    76,    77,    79,    78,
       122,   123,    48,    46,    45,    47,     0,     0,    18,    17,
         0,    35,    36,     0,     0,     0,     0,     0,     0,    80,
        81,    82,    83,    85,     0,     0,    84,    62,    63,    64,
        65,    66,    67,    68,    69,     0,     0,     0,     0,     0,
         0,     0,    38,    39,    40,     0,     0,    72,    71,    70,
        34,     0,    49,    74,    73,   119,   215,   120,    80,    81,
        82,    83,    85,    37,   129,    84,   124,   126,   127,   128,
        42,    15,    80,    81,    82,    83,    85,    61,     0,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
         0,     0,    74,    73,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,    80,    81,
        82,    83,    85,   202,     0,    84,     0,     0,   203,    75,
        76,    77,    79,    78,    80,    81,    82,    83,    85,    61,
         0,    84,    62,    63,    64,    65,    66,    67,    68,    69,
         0,     0,    74,    73,     0,     0,     0,     0,     0,     0,
         0,     0,    72,    71,    70,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    75,    76,    77,    79,    78,   122,   123,    48,    46,
        45,    47,     0,     0,    18,    17,     0,    35,    36,     0,
         0,     0,     0,     0,     0,    80,    81,    82,    83,    85,
         0,     0,    84,    62,    63,    64,    65,    66,    67,    68,
        69,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,    72,     0,    70,    34,     0,    49,    74,
        73,   119,   201,   120,    80,    81,    82,    83,    85,    37,
       129,    84,   124,   126,   127,   128,    42,    15,    80,    81,
        82,    83,    85,    61,   190,    84,    62,    63,    64,    65,
        66,    67,    68,    69,     0,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,    72,    71,    70,     0,
         0,     0,    74,    73,    80,    81,    82,    83,    85,     0,
         0,    84,     0,     0,     0,    75,    76,    77,    79,    78,
        80,    81,    82,    83,    85,    61,     0,    84,    62,    63,
        64,    65,    66,    67,    68,    69,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,     0,     0,    72,    71,
        70,     0,     0,     0,    74,    73,    80,    81,    82,    83,
        85,     0,     0,    84,     0,     0,   183,    75,    76,    77,
        79,    78,    80,    81,    82,    83,    85,    61,     0,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
        74,    73,     0,     0,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,    80,    81,
        82,    83,    85,     0,     0,    84,     0,   179,     0,    75,
        76,    77,    79,    78,    80,    81,    82,    83,    85,    61,
         0,    84,    62,    63,    64,    65,    66,    67,    68,    69,
         0,     0,    74,    73,     0,     0,     0,     0,     0,     0,
         0,     0,    72,    71,    70,     0,     0,     0,    74,    73,
         0,     0,     0,     0,   173,     0,     0,     0,     0,     0,
         0,    75,    76,    77,    79,    78,    80,    81,    82,    83,
        85,    61,     0,    84,    62,    63,    64,    65,    66,    67,
        68,    69,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    72,    71,    70,     0,     0,     0,
        74,    73,     0,    60,    80,    81,    82,    83,    85,     0,
         0,    84,     0,    75,    76,    77,    79,    78,    80,    81,
        82,    83,    85,    61,     0,    84,    62,    63,    64,    65,
        66,    67,    68,    69,     0,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,    72,    71,    70,     0,
         0,     0,    74,    73,     0,     0,     0,     0,    57,     0,
         0,     0,     0,     0,     0,    75,    76,    77,    79,    78,
       122,   123,    48,    46,    45,    47,     0,     0,    18,    17,
         8,    35,    36,    80,    81,    82,    83,    85,     0,     0,
        84,    62,    63,    64,    65,    66,    67,    68,    69,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    72,    38,    39,    40,     0,     0,    74,    73,     0,
        34,     0,    49,     0,     0,   119,     0,   120,     0,     0,
         0,     0,     0,    37,   129,     0,   124,   126,   127,   128,
         9,    15,   122,   123,    48,    46,    45,    47,     0,     0,
        18,    17,     0,    35,    36,    80,    81,    82,    83,    85,
         0,     0,    84,    62,    63,    64,    65,    66,    67,    68,
        69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    38,    39,    40,     0,     0,    74,
        73,     0,    34,     0,    49,     0,     0,   119,     0,   120,
         0,     0,     0,     0,     0,    37,   129,     0,   124,   126,
       127,   128,    42,    15,   122,   123,    48,    46,    45,    47,
         0,     0,    18,    17,     0,    35,    36,    80,    81,    82,
        83,    85,     0,     0,    84,    62,    63,    64,    65,    66,
        67,    68,    69,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    38,    39,    40,     0,
         0,    74,    73,     0,    34,     0,    49,     0,     0,   119,
         0,   120,     0,     0,     0,     0,     0,    37,   129,     0,
       124,   126,   127,   128,    42,    15,    80,    81,    82,    83,
        85,    61,     0,    84,    62,    63,    64,    65,    66,    67,
        68,    69,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    72,    71,    70,     0,     0,     0,
        74,    73,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    75,    76,    77,    79,    78,   122,   123,
        48,    46,    45,    47,     0,     0,    18,    17,     0,    35,
        36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        38,    39,    40,     0,     0,     0,     0,     0,    34,     0,
        49,     0,     0,   119,     0,   120,     0,     0,     0,     0,
         0,    37,   129,     0,   124,   126,   127,   128,    42,    15,
       122,   123,    48,    46,    45,    47,     0,     0,    18,    17,
         0,    35,    36,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    38,    39,    40,     0,     0,     0,     0,     0,
        34,     0,    49,     0,     0,   119,     0,   120,     0,     0,
         0,     0,     0,    37,   129,     0,   124,   126,   127,   128,
        42,    15,    80,    81,    82,    83,    85,    61,     0,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    75,
        76,    77,    79,    78,    80,    81,    82,    83,    85,    61,
         0,    84,    62,    63,    64,    65,    66,    67,    68,    69,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    72,    71,    70,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    75,    76,    77,    79,    78,    80,    81,    82,    83,
        85,    61,     0,    84,    62,    63,    64,    65,    66,    67,
        68,    69,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    72,    71,    70,     0,     0,     0,
        74,    73,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    75,    76,    77,    79,    78,   122,   123,
        48,    46,    45,    47,     0,     0,    18,    17,     0,    35,
        36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        38,    39,    40,     0,     0,     0,     0,     0,    34,     0,
        49,     0,     0,   119,     0,   120,     0,     0,     0,     0,
         0,    37,   129,     0,   124,   126,   127,   128,    42,    15,
        80,    81,    82,    83,    85,    61,     0,    84,    62,    63,
        64,    65,    66,    67,    68,    69,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    72,    71,
        70,     0,     0,     0,    74,    73,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    75,    76,    77,
        79,    78,    80,    81,    82,    83,    85,    61,     0,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    75,
        76,    77,    79,    78,    80,    81,    82,    83,    85,    61,
         0,    84,    62,    63,    64,    65,    66,    67,    68,    69,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    72,    71,    70,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    75,    76,    80,    81,    82,    83,    85,    61,     0,
        84,    62,    63,    64,    65,    66,    67,    68,    69,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    72,    71,    70,     0,     0,     0,    74,    73,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        75,    76,    80,    81,    82,    83,    85,    61,     0,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    75,
        76,    80,    81,    82,    83,    85,    61,     0,    84,    62,
        63,    64,    65,    66,    67,    68,    69,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    72,
        71,    70,     0,     0,     0,    74,    73,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    75,    76,
        80,    81,    82,    83,    85,    61,     0,    84,    62,    63,
        64,    65,    66,    67,    68,    69,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    72,    71,
        70,     0,     0,     0,    74,    73,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    75,    76,    80,
        81,    82,    83,    85,    61,     0,    84,    62,    63,    64,
        65,    66,    67,    68,    69,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    72,    71,    70,
         0,     0,     0,    74,    73,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    75,    76,    80,    81,
        82,    83,    85,    61,     0,    84,    62,    63,    64,    65,
        66,    67,    68,    69,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    72,    71,    70,     0,
         0,     0,    74,    73,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    75,    76,    80,    81,    82,
        83,    85,    61,     0,    84,    62,    63,    64,    65,    66,
        67,    68,    69,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    72,    71,    70,     0,     0,
         0,    74,    73,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    75,    76,    80,    81,    82,    83,
        85,    61,     0,    84,    62,    63,    64,    65,    66,    67,
        68,    69,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    72,    71,    70,     0,     0,     0,
        74,    73,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    75,    76,    80,    81,    82,    83,    85,
        61,     0,    84,    62,    63,    64,    65,    66,    67,    68,
        69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    72,    71,    70,     0,     0,     0,    74,
        73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    75,    76,    80,    81,    82,    83,    85,    61,
         0,    84,    62,    63,    64,    65,    66,    67,    68,    69,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    72,    71,    70,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    75,    76,    80,    81,    82,    83,    85,    61,     0,
        84,    62,    63,    64,    65,    66,    67,    68,    69,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    72,    71,    70,     0,     0,     0,    74,    73,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        75,    76,    80,    81,    82,    83,    85,    61,     0,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    75,
        76,    80,    81,    82,    83,    85,    61,     0,    84,    62,
        63,    64,    65,    66,    67,    68,    69,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    72,
        71,    70,     0,     0,     0,    74,    73,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    75,    76,
        80,    81,    82,    83,    85,    61,     0,    84,    62,    63,
        64,    65,    66,    67,    68,    69,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    72,    71,
        70,     0,     0,     0,    74,    73,     0,     0,     0,     0,
         0,     0,    80,    81,    82,    83,    85,    75,    76,    84,
        62,    63,    64,    65,    66,    67,    68,    69,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        72,    71,    70,     0,     0,     0,    74,    73,     0,     0,
         0,     0,     0,     0,    80,    81,    82,    83,    85,    75,
        76,    84,    62,    63,    64,    65,    66,    67,    68,    69,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    72,    71,    70,     0,     0,     0,    74,    73,
         0,     0,     0,     0,     0,     0,    80,    81,    82,    83,
        85,    75,    76,    84,    62,    63,    64,    65,    66,    67,
        68,    69,    48,    46,    45,    47,     0,     0,    18,    17,
         0,    35,    36,     0,    72,    71,    70,   134,     0,     0,
        74,    73,     0,     0,     0,    48,    46,    45,    47,     0,
         0,    18,    17,    75,    35,    36,     0,     0,     0,     0,
         0,     0,    38,    39,    40,     0,     0,     0,     0,     0,
        34,     0,    49,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    37,     0,    38,    39,    40,     0,     0,
        42,    15,     0,    34,     0,    49,     0,     0,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,    48,    46,
        45,    47,     0,     0,    18,    17,    37,    35,    36,     0,
         0,     0,     0,    42,    15,    48,    46,    45,    47,     0,
         0,    18,    17,     0,    35,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    38,    39,
        40,     0,     0,     0,     0,     0,    34,     0,    49,     0,
         0,     0,     0,     0,     0,    38,    39,    40,     0,    37,
         0,     0,     0,    34,     0,    49,    42,    15,     0,     0,
         0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
         0,     0,     0,    42,    15,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -79,   251,   839,   -79,   -79,   -79,   -79,   199,   114,   197,
       197,  4602,   189,   -79,   195,   194,   -79,   136,   241,   179,
       -79,   -79,  1520,   776,   167,  1468,   166,   -79,   724,    60,
       -79,   169,   166,  4585,  4532,  4515,  4462,  4445,   106,    99,
       -79,   167,   -79,   -79,   -79,   -79,   -79,   166,  4392,   -79,
      4375,  4322,  4305,   -79,   163,   211,   -79,  4252,  4235,  4182,
      2409,  4165,  4112,  4095,  4042,  4025,  3972,  3955,  3902,  3885,
      3832,  3815,  3762,  3745,  3692,  3675,  3622,  3605,  3552,  3535,
      3482,  3465,  3412,  3395,  3342,  3325,  3272,  3255,  3202,  3185,
      3132,  3115,  3062,  3045,  2992,  2975,  2922,   -79,   -79,   163,
      2905,   672,   -79,   -79,   287,   985,    98,   -79,    61,   209,
      2852,   155,   156,   155,   620,   147,   150,   -79,   -79,   -79,
       568,   -79,  2835,  2782,   -79,   149,  1407,   148,   147,  1344,
       -79,  1292,   516,  2765,   762,   656,   604,   552,   502,   376,
       326,   148,   841,   463,   913,   128,    46,     7,  2384,  2258,
      2209,  2160,    21,    -1,   181,   180,   177,   166,  2111,  2062,
      2013,  1964,  1915,  1866,  1817,  1768,  1719,  1670,  1621,  1572,
       -79,   116,   -12,   116,   114,   -79,   -79,   -79,   -79,   -79,
       120,   455,   -79,   392,   340,  2712,    50,  2695,  2642,  2625,
      2342,   146,   -79,    30,   -79,    23,  1240,   279,   -45,   -79,
       -79,   -79,   -79,   216,     0,   -12,   164,  2300,   -79,   -79,
      2572,   -79,   -11,  2555,   -79,   -79,    15,  1179,  2502,  2485,
      1107,   112,   -79,  1044,   -79,   -79,    60,   -34,   -49,   -79,
        -1,   -42,  2432,   983,   -79,   -79,   -46,   -79,   911,   -79,
    
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
       230,   230,   230,   230,   230,   230,   236,   198,   230,   230,
       198,   230,   230,   153,   153,   153,   231,   228,   153,   147,
       147,   147,   147,   147,   227,   216,   147,   147,   147,   147,
       147,   147,   147,   147,   147,   152,   152,   152,   172,   172,
       152,   172,   230,   230,   230,   212,   205,   147,   147,   147,
       230,   204,   230,   147,   147,   230,   230,   230,   146,   146,
       146,   146,   146,   230,   230,   146,   230,   230,   230,   230,
       230,   230,   226,   226,   226,   226,   226,   226,   195,   226,
       226,   226,   226,   226,   226,   226,   226,   226,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
       226,   226,   226,   193,    29,    29,   226,   226,    39,    39,
        29,   108,   226,    29,   108,    38,    38,     8,   186,   226,
       226,   226,   226,   226,   221,   221,   221,   221,   221,   221,
       180,   221,   221,   221,   221,   221,   221,   221,   221,   221,
       145,   145,   145,   145,   145,    17,    17,   145,   106,   191,
        39,   106,   221,   221,   221,   191,   191,    38,   221,   221,
       141,   141,   141,   141,   141,     8,   174,   141,   173,   221,
       171,   221,   221,   221,   221,   221,   206,   206,   206,   206,
       206,   206,   157,   206,   206,   206,   206,   206,   206,   206,
       206,   206,    17,   156,   141,   141,   155,   154,   128,   127,
       125,   116,   191,   115,   206,   206,   206,   113,   112,   111,
       206,   206,   109,    99,    55,    54,   206,    47,    41,    32,
        31,    26,    24,   206,   206,   206,   206,   206,   203,   203,
       203,   203,   203,   203,    19,   203,   203,   203,   203,   203,
       203,   203,   203,   203,    18,    15,    14,    12,    10,     9,
         7,     1,     0,     0,     0,     0,   203,   203,   203,     0,
         0,     0,   203,   203,     0,     0,     0,     0,   203,     0,
         0,     0,     0,     0,     0,   203,   203,   203,   203,   203,
       197,   197,   197,   197,   197,   197,     0,     0,   197,   197,
         0,   197,   197,     0,     0,     0,     0,     0,     0,   104,
       104,   104,   104,   104,     0,     0,   104,   104,   104,   104,
       104,   104,   104,   104,   104,     0,     0,     0,     0,     0,
         0,     0,   197,   197,   197,     0,     0,   104,   104,   104,
       197,     0,   197,   104,   104,   197,   197,   197,   140,   140,
       140,   140,   140,   197,   197,   140,   197,   197,   197,   197,
       197,   197,   184,   184,   184,   184,   184,   184,     0,   184,
       184,   184,   184,   184,   184,   184,   184,   184,     0,     0,
         0,     0,   140,   140,     0,     0,     0,     0,     0,     0,
       184,   184,   184,     0,     0,     0,   184,   184,   139,   139,
       139,   139,   139,   183,     0,   139,     0,     0,   184,   184,
       184,   184,   184,   184,   183,   183,   183,   183,   183,   183,
         0,   183,   183,   183,   183,   183,   183,   183,   183,   183,
         0,     0,   139,   139,     0,     0,     0,     0,     0,     0,
         0,     0,   183,   183,   183,     0,     0,     0,   183,   183,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   183,   183,   183,   183,   183,   181,   181,   181,   181,
       181,   181,     0,     0,   181,   181,     0,   181,   181,     0,
         0,     0,     0,     0,     0,   143,   143,   143,   143,   143,
         0,     0,   143,   143,   143,   143,   143,   143,   143,   143,
       143,     0,     0,     0,     0,     0,     0,     0,   181,   181,
       181,     0,     0,   143,     0,   143,   181,     0,   181,   143,
       143,   181,   181,   181,   138,   138,   138,   138,   138,   181,
       181,   138,   181,   181,   181,   181,   181,   181,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,     0,     0,     0,     0,   138,   138,
         0,     0,     0,     0,     0,     0,   132,   132,   132,     0,
         0,     0,   132,   132,   137,   137,   137,   137,   137,     0,
         0,   137,     0,     0,     0,   132,   132,   132,   132,   132,
       120,   120,   120,   120,   120,   120,     0,   120,   120,   120,
       120,   120,   120,   120,   120,   120,     0,     0,   137,   137,
         0,     0,     0,     0,     0,     0,     0,     0,   120,   120,
       120,     0,     0,     0,   120,   120,   136,   136,   136,   136,
       136,     0,     0,   136,     0,     0,   120,   120,   120,   120,
       120,   120,   114,   114,   114,   114,   114,   114,     0,   114,
       114,   114,   114,   114,   114,   114,   114,   114,     0,     0,
       136,   136,     0,     0,     0,     0,     0,     0,     0,     0,
       114,   114,   114,     0,     0,     0,   114,   114,   135,   135,
       135,   135,   135,     0,     0,   135,     0,   114,     0,   114,
       114,   114,   114,   114,   101,   101,   101,   101,   101,   101,
         0,   101,   101,   101,   101,   101,   101,   101,   101,   101,
         0,     0,   135,   135,     0,     0,     0,     0,     0,     0,
         0,     0,   101,   101,   101,     0,     0,     0,   101,   101,
         0,     0,     0,     0,   101,     0,     0,     0,     0,     0,
         0,   101,   101,   101,   101,   101,    28,    28,    28,    28,
        28,    28,     0,    28,    28,    28,    28,    28,    28,    28,
        28,    28,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    28,    28,    28,     0,     0,     0,
        28,    28,     0,    28,   134,   134,   134,   134,   134,     0,
         0,   134,     0,    28,    28,    28,    28,    28,    23,    23,
        23,    23,    23,    23,     0,    23,    23,    23,    23,    23,
        23,    23,    23,    23,     0,     0,     0,     0,   134,   134,
         0,     0,     0,     0,     0,     0,    23,    23,    23,     0,
         0,     0,    23,    23,     0,     0,     0,     0,    23,     0,
         0,     0,     0,     0,     0,    23,    23,    23,    23,    23,
         2,     2,     2,     2,     2,     2,     0,     0,     2,     2,
         2,     2,     2,   142,   142,   142,   142,   142,     0,     0,
       142,   142,   142,   142,   142,   142,   142,   142,   142,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   142,     2,     2,     2,     0,     0,   142,   142,     0,
         2,     0,     2,     0,     0,     2,     0,     2,     0,     0,
         0,     0,     0,     2,     2,     0,     2,     2,     2,     2,
         2,     2,   238,   238,   238,   238,   238,   238,     0,     0,
       238,   238,     0,   238,   238,   144,   144,   144,   144,   144,
         0,     0,   144,   144,   144,   144,   144,   144,   144,   144,
       144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   238,   238,   238,     0,     0,   144,
       144,     0,   238,     0,   238,     0,     0,   238,     0,   238,
         0,     0,     0,     0,     0,   238,   238,     0,   238,   238,
       238,   238,   238,   238,   233,   233,   233,   233,   233,   233,
         0,     0,   233,   233,     0,   233,   233,   105,   105,   105,
       105,   105,     0,     0,   105,   105,   105,   105,   105,   105,
       105,   105,   105,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   233,   233,   233,     0,
         0,   105,   105,     0,   233,     0,   233,     0,     0,   233,
         0,   233,     0,     0,     0,     0,     0,   233,   233,     0,
       233,   233,   233,   233,   233,   233,   223,   223,   223,   223,
       223,   223,     0,   223,   223,   223,   223,   223,   223,   223,
       223,   223,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   223,   223,   223,     0,     0,     0,
       223,   223,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   223,   223,   223,   223,   223,   220,   220,
       220,   220,   220,   220,     0,     0,   220,   220,     0,   220,
       220,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       220,   220,   220,     0,     0,     0,     0,     0,   220,     0,
       220,     0,     0,   220,     0,   220,     0,     0,     0,     0,
         0,   220,   220,     0,   220,   220,   220,   220,   220,   220,
       217,   217,   217,   217,   217,   217,     0,     0,   217,   217,
         0,   217,   217,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   217,   217,   217,     0,     0,     0,     0,     0,
       217,     0,   217,     0,     0,   217,     0,   217,     0,     0,
         0,     0,     0,   217,   217,     0,   217,   217,   217,   217,
       217,   217,   196,   196,   196,   196,   196,   196,     0,   196,
       196,   196,   196,   196,   196,   196,   196,   196,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       196,   196,   196,     0,     0,     0,   196,   196,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
       196,   196,   196,   196,   131,   131,   131,   131,   131,   131,
         0,   131,   131,   131,   131,   131,   131,   131,   131,   131,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   131,   131,   131,     0,     0,     0,   131,   131,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   131,   131,   131,   131,   131,   129,   129,   129,   129,
       129,   129,     0,   129,   129,   129,   129,   129,   129,   129,
       129,   129,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   129,   129,   129,     0,     0,     0,
       129,   129,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   129,   129,   129,   129,   129,   126,   126,
       126,   126,   126,   126,     0,     0,   126,   126,     0,   126,
       126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       126,   126,   126,     0,     0,     0,     0,     0,   126,     0,
       126,     0,     0,   126,     0,   126,     0,     0,     0,     0,
         0,   126,   126,     0,   126,   126,   126,   126,   126,   126,
        25,    25,    25,    25,    25,    25,     0,    25,    25,    25,
        25,    25,    25,    25,    25,    25,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    25,    25,
        25,     0,     0,     0,    25,    25,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    25,    25,    25,
        25,    25,    22,    22,    22,    22,    22,    22,     0,    22,
        22,    22,    22,    22,    22,    22,    22,    22,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        22,    22,    22,     0,     0,     0,    22,    22,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
        22,    22,    22,    22,   169,   169,   169,   169,   169,   169,
         0,   169,   169,   169,   169,   169,   169,   169,   169,   169,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   169,   169,   169,     0,     0,     0,   169,   169,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   169,   169,   168,   168,   168,   168,   168,   168,     0,
       168,   168,   168,   168,   168,   168,   168,   168,   168,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   168,   168,   168,     0,     0,     0,   168,   168,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       168,   168,   167,   167,   167,   167,   167,   167,     0,   167,
       167,   167,   167,   167,   167,   167,   167,   167,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       167,   167,   167,     0,     0,     0,   167,   167,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   167,
       167,   166,   166,   166,   166,   166,   166,     0,   166,   166,
       166,   166,   166,   166,   166,   166,   166,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
       166,   166,     0,     0,     0,   166,   166,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   166,   166,
       165,   165,   165,   165,   165,   165,     0,   165,   165,   165,
       165,   165,   165,   165,   165,   165,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   165,   165,
       165,     0,     0,     0,   165,   165,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   165,   165,   164,
       164,   164,   164,   164,   164,     0,   164,   164,   164,   164,
       164,   164,   164,   164,   164,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   164,   164,   164,
         0,     0,     0,   164,   164,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   164,   164,   163,   163,
       163,   163,   163,   163,     0,   163,   163,   163,   163,   163,
       163,   163,   163,   163,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   163,   163,   163,     0,
         0,     0,   163,   163,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   163,   163,   162,   162,   162,
       162,   162,   162,     0,   162,   162,   162,   162,   162,   162,
       162,   162,   162,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   162,   162,   162,     0,     0,
         0,   162,   162,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   162,   162,   161,   161,   161,   161,
       161,   161,     0,   161,   161,   161,   161,   161,   161,   161,
       161,   161,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   161,   161,   161,     0,     0,     0,
       161,   161,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   161,   161,   160,   160,   160,   160,   160,
       160,     0,   160,   160,   160,   160,   160,   160,   160,   160,
       160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   160,   160,   160,     0,     0,     0,   160,
       160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   160,   160,   159,   159,   159,   159,   159,   159,
         0,   159,   159,   159,   159,   159,   159,   159,   159,   159,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   159,   159,   159,     0,     0,     0,   159,   159,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   159,   159,   158,   158,   158,   158,   158,   158,     0,
       158,   158,   158,   158,   158,   158,   158,   158,   158,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   158,   158,   158,     0,     0,     0,   158,   158,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       158,   158,   151,   151,   151,   151,   151,   151,     0,   151,
       151,   151,   151,   151,   151,   151,   151,   151,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       151,   151,   151,     0,     0,     0,   151,   151,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   151,
       151,   150,   150,   150,   150,   150,   150,     0,   150,   150,
       150,   150,   150,   150,   150,   150,   150,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
       150,   150,     0,     0,     0,   150,   150,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   150,   150,
       149,   149,   149,   149,   149,   149,     0,   149,   149,   149,
       149,   149,   149,   149,   149,   149,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   149,   149,
       149,     0,     0,     0,   149,   149,     0,     0,     0,     0,
         0,     0,   207,   207,   207,   207,   207,   149,   149,   207,
       207,   207,   207,   207,   207,   207,   207,   207,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       207,   207,   207,     0,     0,     0,   207,   207,     0,     0,
         0,     0,     0,     0,   190,   190,   190,   190,   190,   207,
       207,   190,   190,   190,   190,   190,   190,   190,   190,   190,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   190,   190,   190,     0,     0,     0,   190,   190,
         0,     0,     0,     0,     0,     0,   148,   148,   148,   148,
       148,   190,   190,   148,   148,   148,   148,   148,   148,   148,
       148,   148,    60,    60,    60,    60,     0,     0,    60,    60,
         0,    60,    60,     0,   148,   148,   148,    60,     0,     0,
       148,   148,     0,     0,     0,   232,   232,   232,   232,     0,
         0,   232,   232,   148,   232,   232,     0,     0,     0,     0,
         0,     0,    60,    60,    60,     0,     0,     0,     0,     0,
        60,     0,    60,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    60,     0,   232,   232,   232,     0,     0,
        60,    60,     0,   232,     0,   232,     0,     0,   219,   219,
       219,   219,     0,     0,   219,   219,   232,   219,   219,     0,
         0,     0,     0,   232,   232,   218,   218,   218,   218,     0,
         0,   218,   218,     0,   218,   218,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   219,   219,
       219,     0,     0,     0,     0,     0,   219,     0,   219,     0,
         0,     0,     0,     0,     0,   218,   218,   218,     0,   219,
         0,     0,     0,   218,     0,   218,   219,   219,   213,   213,
       213,   213,     0,     0,   213,   213,   218,   213,   213,     0,
         0,     0,     0,   218,   218,   210,   210,   210,   210,     0,
         0,   210,   210,     0,   210,   210,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   213,   213,
       213,     0,     0,     0,     0,     0,   213,     0,   213,     0,
         0,     0,     0,     0,     0,   210,   210,   210,     0,   213,
         0,     0,     0,   210,     0,   210,   213,   213,   189,   189,
       189,   189,     0,     0,   189,   189,   210,   189,   189,     0,
         0,     0,     0,   210,   210,   188,   188,   188,   188,     0,
         0,   188,   188,     0,   188,   188,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   189,   189,
       189,     0,     0,     0,     0,     0,   189,     0,   189,     0,
         0,     0,     0,     0,     0,   188,   188,   188,     0,   189,
         0,     0,     0,   188,     0,   188,   189,   189,   187,   187,
       187,   187,     0,     0,   187,   187,   188,   187,   187,     0,
         0,     0,     0,   188,   188,   185,   185,   185,   185,     0,
         0,   185,   185,     0,   185,   185,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   187,   187,
       187,     0,     0,     0,     0,     0,   187,     0,   187,     0,
         0,     0,     0,     0,     0,   185,   185,   185,     0,   187,
         0,     0,     0,   185,     0,   185,   187,   187,   133,   133,
       133,   133,     0,     0,   133,   133,   185,   133,   133,     0,
         0,     0,     0,   185,   185,   123,   123,   123,   123,     0,
         0,   123,   123,     0,   123,   123,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   133,   133,
       133,     0,     0,     0,     0,     0,   133,     0,   133,     0,
         0,     0,     0,     0,     0,   123,   123,   123,     0,   133,
         0,     0,     0,   123,     0,   123,   133,   133,   122,   122,
       122,   122,     0,     0,   122,   122,   123,   122,   122,     0,
         0,     0,     0,   123,   123,   110,   110,   110,   110,     0,
         0,   110,   110,     0,   110,   110,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   122,   122,
       122,     0,     0,     0,     0,     0,   122,     0,   122,     0,
         0,     0,     0,     0,     0,   110,   110,   110,     0,   122,
         0,     0,     0,   110,     0,   110,   122,   122,   100,   100,
       100,   100,     0,     0,   100,   100,   110,   100,   100,     0,
         0,     0,     0,   110,   110,    96,    96,    96,    96,     0,
         0,    96,    96,     0,    96,    96,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   100,   100,
       100,     0,     0,     0,     0,     0,   100,     0,   100,     0,
         0,     0,     0,     0,     0,    96,    96,    96,     0,   100,
         0,     0,     0,    96,     0,    96,   100,   100,    95,    95,
        95,    95,     0,     0,    95,    95,    96,    95,    95,     0,
         0,     0,     0,    96,    96,    94,    94,    94,    94,     0,
         0,    94,    94,     0,    94,    94,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    95,    95,
        95,     0,     0,     0,     0,     0,    95,     0,    95,     0,
         0,     0,     0,     0,     0,    94,    94,    94,     0,    95,
         0,     0,     0,    94,     0,    94,    95,    95,    93,    93,
        93,    93,     0,     0,    93,    93,    94,    93,    93,     0,
         0,     0,     0,    94,    94,    92,    92,    92,    92,     0,
         0,    92,    92,     0,    92,    92,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    93,    93,
        93,     0,     0,     0,     0,     0,    93,     0,    93,     0,
         0,     0,     0,     0,     0,    92,    92,    92,     0,    93,
         0,     0,     0,    92,     0,    92,    93,    93,    91,    91,
        91,    91,     0,     0,    91,    91,    92,    91,    91,     0,
         0,     0,     0,    92,    92,    90,    90,    90,    90,     0,
         0,    90,    90,     0,    90,    90,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    91,    91,
        91,     0,     0,     0,     0,     0,    91,     0,    91,     0,
         0,     0,     0,     0,     0,    90,    90,    90,     0,    91,
         0,     0,     0,    90,     0,    90,    91,    91,    89,    89,
        89,    89,     0,     0,    89,    89,    90,    89,    89,     0,
         0,     0,     0,    90,    90,    88,    88,    88,    88,     0,
         0,    88,    88,     0,    88,    88,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    89,    89,
        89,     0,     0,     0,     0,     0,    89,     0,    89,     0,
         0,     0,     0,     0,     0,    88,    88,    88,     0,    89,
         0,     0,     0,    88,     0,    88,    89,    89,    87,    87,
        87,    87,     0,     0,    87,    87,    88,    87,    87,     0,
         0,     0,     0,    88,    88,    86,    86,    86,    86,     0,
         0,    86,    86,     0,    86,    86,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    87,    87,
        87,     0,     0,     0,     0,     0,    87,     0,    87,     0,
         0,     0,     0,     0,     0,    86,    86,    86,     0,    87,
         0,     0,     0,    86,     0,    86,    87,    87,    85,    85,
        85,    85,     0,     0,    85,    85,    86,    85,    85,     0,
         0,     0,     0,    86,    86,    84,    84,    84,    84,     0,
         0,    84,    84,     0,    84,    84,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    85,    85,
        85,     0,     0,     0,     0,     0,    85,     0,    85,     0,
         0,     0,     0,     0,     0,    84,    84,    84,     0,    85,
         0,     0,     0,    84,     0,    84,    85,    85,    83,    83,
        83,    83,     0,     0,    83,    83,    84,    83,    83,     0,
         0,     0,     0,    84,    84,    82,    82,    82,    82,     0,
         0,    82,    82,     0,    82,    82,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    83,    83,
        83,     0,     0,     0,     0,     0,    83,     0,    83,     0,
         0,     0,     0,     0,     0,    82,    82,    82,     0,    83,
         0,     0,     0,    82,     0,    82,    83,    83,    81,    81,
        81,    81,     0,     0,    81,    81,    82,    81,    81,     0,
         0,     0,     0,    82,    82,    80,    80,    80,    80,     0,
         0,    80,    80,     0,    80,    80,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    81,    81,
        81,     0,     0,     0,     0,     0,    81,     0,    81,     0,
         0,     0,     0,     0,     0,    80,    80,    80,     0,    81,
         0,     0,     0,    80,     0,    80,    81,    81,    79,    79,
        79,    79,     0,     0,    79,    79,    80,    79,    79,     0,
         0,     0,     0,    80,    80,    78,    78,    78,    78,     0,
         0,    78,    78,     0,    78,    78,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    79,    79,
        79,     0,     0,     0,     0,     0,    79,     0,    79,     0,
         0,     0,     0,     0,     0,    78,    78,    78,     0,    79,
         0,     0,     0,    78,     0,    78,    79,    79,    77,    77,
        77,    77,     0,     0,    77,    77,    78,    77,    77,     0,
         0,     0,     0,    78,    78,    76,    76,    76,    76,     0,
         0,    76,    76,     0,    76,    76,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    77,    77,
        77,     0,     0,     0,     0,     0,    77,     0,    77,     0,
         0,     0,     0,     0,     0,    76,    76,    76,     0,    77,
         0,     0,     0,    76,     0,    76,    77,    77,    75,    75,
        75,    75,     0,     0,    75,    75,    76,    75,    75,     0,
         0,     0,     0,    76,    76,    74,    74,    74,    74,     0,
         0,    74,    74,     0,    74,    74,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    75,    75,
        75,     0,     0,     0,     0,     0,    75,     0,    75,     0,
         0,     0,     0,     0,     0,    74,    74,    74,     0,    75,
         0,     0,     0,    74,     0,    74,    75,    75,    73,    73,
        73,    73,     0,     0,    73,    73,    74,    73,    73,     0,
         0,     0,     0,    74,    74,    72,    72,    72,    72,     0,
         0,    72,    72,     0,    72,    72,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    73,    73,
        73,     0,     0,     0,     0,     0,    73,     0,    73,     0,
         0,     0,     0,     0,     0,    72,    72,    72,     0,    73,
         0,     0,     0,    72,     0,    72,    73,    73,    71,    71,
        71,    71,     0,     0,    71,    71,    72,    71,    71,     0,
         0,     0,     0,    72,    72,    70,    70,    70,    70,     0,
         0,    70,    70,     0,    70,    70,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    71,    71,
        71,     0,     0,     0,     0,     0,    71,     0,    71,     0,
         0,     0,     0,     0,     0,    70,    70,    70,     0,    71,
         0,     0,     0,    70,     0,    70,    71,    71,    69,    69,
        69,    69,     0,     0,    69,    69,    70,    69,    69,     0,
         0,     0,     0,    70,    70,    68,    68,    68,    68,     0,
         0,    68,    68,     0,    68,    68,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    69,    69,
        69,     0,     0,     0,     0,     0,    69,     0,    69,     0,
         0,     0,     0,     0,     0,    68,    68,    68,     0,    69,
         0,     0,     0,    68,     0,    68,    69,    69,    67,    67,
        67,    67,     0,     0,    67,    67,    68,    67,    67,     0,
         0,     0,     0,    68,    68,    66,    66,    66,    66,     0,
         0,    66,    66,     0,    66,    66,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    67,    67,
        67,     0,     0,     0,     0,     0,    67,     0,    67,     0,
         0,     0,     0,     0,     0,    66,    66,    66,     0,    67,
         0,     0,     0,    66,     0,    66,    67,    67,    65,    65,
        65,    65,     0,     0,    65,    65,    66,    65,    65,     0,
         0,     0,     0,    66,    66,    64,    64,    64,    64,     0,
         0,    64,    64,     0,    64,    64,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    65,    65,
        65,     0,     0,     0,     0,     0,    65,     0,    65,     0,
         0,     0,     0,     0,     0,    64,    64,    64,     0,    65,
         0,     0,     0,    64,     0,    64,    65,    65,    63,    63,
        63,    63,     0,     0,    63,    63,    64,    63,    63,     0,
         0,     0,     0,    64,    64,    62,    62,    62,    62,     0,
         0,    62,    62,     0,    62,    62,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    63,    63,
        63,     0,     0,     0,     0,     0,    63,     0,    63,     0,
         0,     0,     0,     0,     0,    62,    62,    62,     0,    63,
         0,     0,     0,    62,     0,    62,    63,    63,    61,    61,
        61,    61,     0,     0,    61,    61,    62,    61,    61,     0,
         0,     0,     0,    62,    62,    59,    59,    59,    59,     0,
         0,    59,    59,     0,    59,    59,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    61,    61,
        61,     0,     0,     0,     0,     0,    61,     0,    61,     0,
         0,     0,     0,     0,     0,    59,    59,    59,     0,    61,
         0,     0,     0,    59,     0,    59,    61,    61,    58,    58,
        58,    58,     0,     0,    58,    58,    59,    58,    58,     0,
         0,     0,     0,    59,    59,    57,    57,    57,    57,     0,
         0,    57,    57,     0,    57,    57,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    58,    58,
        58,     0,     0,     0,     0,     0,    58,     0,    58,     0,
         0,     0,     0,     0,     0,    57,    57,    57,     0,    58,
         0,     0,     0,    57,     0,    57,    58,    58,    52,    52,
        52,    52,     0,     0,    52,    52,    57,    52,    52,     0,
         0,     0,     0,    57,    57,    51,    51,    51,    51,     0,
         0,    51,    51,     0,    51,    51,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    52,    52,
        52,     0,     0,     0,     0,     0,    52,     0,    52,     0,
         0,     0,     0,     0,     0,    51,    51,    51,     0,    52,
         0,     0,     0,    51,     0,    51,    52,    52,    50,    50,
        50,    50,     0,     0,    50,    50,    51,    50,    50,     0,
         0,     0,     0,    51,    51,    48,    48,    48,    48,     0,
         0,    48,    48,     0,    48,    48,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    50,    50,
        50,     0,     0,     0,     0,     0,    50,     0,    50,     0,
         0,     0,     0,     0,     0,    48,    48,    48,     0,    50,
         0,     0,     0,    48,     0,    48,    50,    50,    37,    37,
        37,    37,     0,     0,    37,    37,    48,    37,    37,     0,
         0,     0,     0,    48,    48,    36,    36,    36,    36,     0,
         0,    36,    36,     0,    36,    36,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    37,    37,
        37,     0,     0,     0,     0,     0,    37,     0,    37,     0,
         0,     0,     0,     0,     0,    36,    36,    36,     0,    37,
         0,     0,     0,    36,     0,    36,    37,    37,    35,    35,
        35,    35,     0,     0,    35,    35,    36,    35,    35,     0,
         0,     0,     0,    36,    36,    34,    34,    34,    34,     0,
         0,    34,    34,     0,    34,    34,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    35,    35,
        35,     0,     0,     0,     0,     0,    35,     0,    35,     0,
         0,     0,     0,     0,     0,    34,    34,    34,     0,    35,
         0,     0,     0,    34,     0,    34,    35,    35,    33,    33,
        33,    33,     0,     0,    33,    33,    34,    33,    33,     0,
         0,     0,     0,    34,    34,    11,    11,    11,    11,     0,
         0,    11,    11,     0,    11,    11,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    33,    33,
        33,     0,     0,     0,     0,     0,    33,     0,    33,     0,
         0,     0,     0,     0,     0,    11,    11,    11,     0,    33,
         0,     0,     0,    11,     0,    11,    33,    33,     0,     0,
         0,     0,     0,     0,     0,     0,    11,     0,     0,     0,
         0,     0,     0,    11,    11,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         3,    -1,     1,     0,     2,     4,     5,    -1,    -1,    -1,
        -1,    -1,    -1,     7,    -1,    -1,    37,    -1,   102,   103,
       105,   106,    44,    -1,    48,    50,   117,   120,   121,    25,
        26,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        98,    -1,   100,    35,   111,   112,   113,   114,   118,     6,
       118,    47,    -1,    39,    -1,    -1,    30,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
        43,    -1,    90,    91,    92,    93,    94,    31,    95,   102,
        47,    -1,    -1,    -1,    -1,    -1,    -1,   104,     8,    10,
        -1,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    49,
       119,   122,    -1,    -1,    65,    66,    67,    68,    69,    70,
        71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
        81,    82,    83,    84,    85,    86,    87,    88,    51,    52,
        53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
        33,    -1,    89,    -1,    -1,   115,   116,    46,    38,     8,
        -1,    -1,    11,    -1,    -1,    -1,    -1,    21,    -1,    -1,
        64,    -1,    36,   107,    45,    22,    24,    -1,    -1,   110,
         9,    13,    14,    -1,    -1,    -1,    -1,    63,    34,    40,
        -1,    42,    -1,    -1,   101,   108,    -1,    -1,    -1,    21,
        -1,    -1,     8,    23,   109,    16,    -1,    -1,    19,    41,
        -1,    -1,    21,    -1,    99,    17,    -1,    20,    -1,    18,
    
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         4,    53,     5,   124,   211,   208,   120,    15,    32,    29,
        32,   108,    31,    43,   107,    43,    42,   239,   124,    30,
         6,   120,    15,    32,    29,   198,    40,    31,    43,   117,
       230,    42,   237,   124,    30,   212,   120,    15,    32,    29,
       197,    40,    31,    43,   191,   181,    42,    13,   124,    30,
        99,   120,    15,    32,    29,    -1,    40,    31,    43,     1,
         2,    42,   228,   124,    30,    -1,   120,    15,    32,    29,
        -1,    40,    31,    43,    -1,    -1,    42,   225,   124,    30,
        -1,   120,    15,    32,    29,    -1,    40,    31,    43,    -1,
        -1,    42,    13,   124,    30,    -1,   120,    15,    32,    29,
        -1,    40,    31,    43,    -1,    -1,    42,    13,   124,    30,
        -1,   120,    15,    32,    29,    -1,    40,    31,    43,    -1,
        -1,    42,   186,   124,    30,    -1,   120,    15,    32,    29,
        -1,    40,    31,    43,    -1,    -1,    42,    -1,    -1,    30,
        -1,   132,    15,    32,    29,    -1,    40,    31,    43,    -1,
        -1,    42,    -1,    -1,    30,   236,   195,   196,    15,    32,
        29,    40,    -1,    31,    43,    -1,    -1,    42,    -1,    -1,
        30,   227,   195,   196,    15,    32,    29,    40,    -1,    31,
        43,    -1,    -1,    42,    -1,    -1,    30,    -1,   226,    15,
        32,    29,    -1,    40,    31,    43,    -1,    -1,    42,    -1,
        -1,    30,    -1,   223,    15,    32,    29,    -1,    40,    31,
        43,    -1,    -1,    42,    -1,    -1,    30,    -1,   221,    15,
        32,    29,    -1,    40,    31,    43,    -1,    -1,    42,    -1,
        -1,    30,    -1,   207,    15,    32,    29,    -1,    40,    31,
        43,    -1,    -1,    42,    -1,    -1,    30,    -1,   206,    15,
        32,    29,    -1,    40,    31,    43,    -1,    -1,    42,    -1,
        -1,    30,   205,   195,   196,    15,    32,    29,    40,    -1,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   203,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   190,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   184,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   183,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,    25,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
       174,    24,    30,    -1,    22,    15,    32,    29,    -1,    40,
        31,    43,    -1,   171,    42,    -1,    -1,    30,    -1,   169,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   168,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   167,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   166,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   165,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   164,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   163,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   162,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   161,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   160,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   159,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   158,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   157,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   156,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   155,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   154,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   153,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   152,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   151,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   150,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   149,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   148,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   147,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   146,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   145,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   144,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   143,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   142,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   141,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   140,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   139,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   138,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   137,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   136,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   135,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,   134,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   131,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
        -1,    -1,    30,    -1,    28,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,   129,
        15,    32,    29,    -1,    40,    31,    43,   130,    -1,    42,
        -1,    -1,    30,    -1,   114,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    -1,    -1,    30,    -1,    25,
        15,    32,    29,    -1,    40,    31,    43,    -1,    -1,    42,
       113,    24,    30,    -1,    28,    15,    32,    29,    -1,    40,
        31,    43,    -1,    -1,    42,    32,   106,    30,    -1,   107,
        43,   173,    19,    20,    40,   112,    26,    27,    28,    15,
        32,    29,    -1,    -1,    31,    43,    -1,    -1,    42,    -1,
        -1,    30,    54,    19,    20,    -1,    -1,    -1,    40,   111,
        26,    27,   105,    15,    32,    29,    -1,    -1,    31,    43,
        -1,    -1,    42,    -1,    -1,    30,    -1,   104,    15,    32,
        29,    -1,    40,    31,    43,    -1,    -1,    42,    -1,    -1,
        30,    -1,   103,    15,    32,    29,    -1,    40,    31,    43,
        -1,    -1,    42,    -1,    -1,    30,    -1,   102,    15,    32,
        29,    -1,    40,    31,    43,    -1,    -1,    42,    -1,    -1,
        30,    -1,   101,    15,    32,    29,    -1,    40,    31,    43,
        -1,    -1,    42,    -1,    -1,    30,    -1,    23,    15,    32,
        29,    -1,    40,    31,    43,    -1,    -1,    42,    -1,    -1,
        30,    -1,    -1,    -1,    -1,    -1,    -1,    40,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
        58,   -33,    -3,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
       -33,  1098,   -33,   -33,   -33,   -33,   -33,   -15,   998,   -33,
       -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
       -33,   -33,    37,  1083,  1068,  1053,  1038,  1023,   984,    -1,
       -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   999,   -33,
       975,   960,   945,   -33,   -33,     3,   -33,   930,   915,   900,
       132,   885,   870,   855,   840,   825,   810,   795,   780,   765,
       750,   735,   720,   705,   690,   675,   660,   645,   630,   615,
       600,   585,   570,   555,   540,   525,   510,   495,   480,   465,
       450,   435,   420,   405,   390,   375,   360,   -33,   -33,   -33,
       345,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   977,
       330,   -33,   -33,   -33,   -33,   -33,   -33,   -33,    41,   -33,
       -33,   -33,   315,   300,   -33,   -33,   117,   -33,   -33,   -33,
       -33,   -33,   -33,   285,   -33,   -33,   -33,   -33,   -33,   -33,
       -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
       -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
       -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
        30,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,    36,
        -3,   102,   -33,   -33,   -33,   270,   -33,   255,   239,   224,
       -33,   -12,   -33,     8,   -33,   -33,   -33,    87,   -33,   -33,
       -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
       209,   -33,   -33,   194,   -33,   -33,   -33,    72,   179,   164,
        57,   -33,    26,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
        42,   -33,   148,    27,   -33,   -33,   -33,   -33,    12,   -33,
    
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     1,     2,     0,     1,     1,     4,     2,     0,     3,
         1,     2,     1,     3,     3,     1,     5,     7,     9,     5,
         7,     0,     1,     3,     1,     1,     1,     1,     3,     1,
         3,     1,     0,     0,     5,     1,     4,     1,     4,     2,
         1,     3,     1,     0,     1,     4,     4,     0,     1,     3,
         1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     5,     4,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         2,     2,     2,     2,     2,     2,     2,     2,     1,     8,
         1,     8,     0,     1,     3,     1,     1,     0,     4,     3,
         1,     1,     1,     1,     1,     3,     4,     1,     0,     3,
         1,     1,     3,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     4,     4,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     6,
         6,     7,     7,     8,     8,     9,     9,    10,    10,    11,
        11,    12,    13,    14,    12,    15,    15,    16,    16,    16,
        17,    17,    17,    18,    18,    19,    19,    20,    20,    21,
        21,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    23,    24,    24,    25,    25,    26,    27,    27,    28,
        28,    29,    29,    29,    29,    29,    29,    30,    30,    31,
        31,    32,    32,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",       "INLINE_HTML",          "ECHO_TAG",
                  "NAME",           "DECIMAL",               "INT",
                "STRING",      "DOUBLE_QUOTE",        "BACK_QUOTE",
                "DOLLAR",          "VARIABLE",     "HALT_COMPILER",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "POW",          "QUESTION",
                 "COLON",           "PERCENT",                "GT",
                    "LT",              "GTOE",              "LTOE",
                   "EQU",         "IDENTICAL",               "NEQ",
            "NIDENTICAL",            "ASSIGN",       "PLUS_ASSIGN",
          "MINUS_ASSIGN",      "TIMES_ASSIGN",        "POW_ASSIGN",
         "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",     "BIT_OR_ASSIGN",
        "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN", "LEFT_SHIFT_ASSIGN",
            "MOD_ASSIGN",           "BIT_AND",            "BIT_OR",
               "BIT_XOR",           "BIT_NOT",               "INC",
                   "DEC",        "LEFT_SHIFT",       "RIGHT_SHIFT",
        "HEREDOC_HEADER",             "ARROW",    "PROPERTY_ARROW",
                   "BRA",               "KET",              "CBRA",
                  "CKET",             "COMMA",              "BBRA",
                  "BKET",               "EOL",               "AND",
                    "OR",        "LOGICAL_OR",       "LOGICAL_AND",
           "LOGICAL_XOR",               "NOT",                "IF",
                  "ELSE",              "ECHO",             "WHILE",
                    "DO",               "FOR",          "FUNCTION",
                  "LIST",               "USE",       "ANY_CONTENT",
    "VARIABLE_IN_STRING","PROPERTY_IN_STRING",  "OFFSET_IN_STRING",
        "END_OF_HEREDOC",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,               "<?=",
                    null,                null,                null,
                    null,                "\"",                 "`",
                     "$",                null,   "__halt_compiler",
                     "+",                 "-",                 "*",
                     "/",                "**",                 "?",
                     ":",                 "%",                 ">",
                     "<",                ">=",                "<=",
                    "==",               "===",                "!=",
                   "!==",                 "=",                "+=",
                    "-=",                "*=",               "**=",
                    "/=",                "&=",                "|=",
                    "^=",               ">>=",               "<<=",
                    "%=",                 "&",                 "|",
                     "^",                 "~",                "++",
                    "--",                "<<",                ">>",
                   "<<<",                "=>",                "->",
                     "(",                 ")",                 "[",
                     "]",                 ",",                 "{",
                     "}",                 ";",                "&&",
                    "||",                "OR",               "AND",
                   "XOR",                 "!",                "if",
                  "else",              "echo",             "while",
                    "do",               "for",          "function",
                  "list",               "use",                null,
                    null,                null,                null,
                    null,
]; 


function tokenToString(tk){
    return jjtokenAlias[tk] === null ? "<" + jjtokenNames[tk] + ">" : '"' + jjtokenAlias[tk] + '"';
}
function Token(id, val, startLine, startColumn, endLine, endColumn){
    this.id = id;
    this.val = val;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
}
Token.prototype.clone = function(){
    return new Token(
        this.id,
        this.val,
        this.startLine,
        this.startColumn,
        this.endLine,
        this.endColumn
    );
}
Token.prototype.toString = function(){
    return (jjtokenAlias[this.id] === null ? 
        '<' + jjtokenNames[this.id] + '>' :
        '"' + jjtokenAlias[this.id] + '"') + "(" + this.val + ")";
}
function createParser() {
    // members for lexer
    var jjlexState;
    var jjstate;
    var jjmatched;
    var jjtoken;
    
    var jjmarker = { state: -1, line: 0, column: 0 };
    var jjbackupCount;

    var jjline;
    var jjcolumn;
    var jjtline;
    var jjtcolumn;

    // members for parser
    var jjlrState;
    var jjsematicS;
    var jjsematicVal;
    var jjemittedTokens;

    var jjstop;

    var jjhandlers = {};

    // extra members, defined by %extra_arg
    
    var outputs;


    return {
        init: init,
        on: on,
        accept: accept,
        end: end,
        halt: halt
    };
    function init(outputs1){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjemittedTokens = [];

        jjstop = false;
        
    outputs = outputs1;

    }
    /**
     *  set 
     */
    function jjsetImg(s){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjreturnToken(){
        jjemit('token', jjtoken);
        jjconsumeTokens(jjtoken);
        jjtoken.id = -1;
    }
    function jjemit(name, a1, a2, a3){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name, cb){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                jjlexState.push(1); 
                break;
            case 8:
                jjsetImg(""); jjlexState.push(1); 
                break;
            case 9:
                jjsetImg(""); jjlexState.push(1); 
                break;
            case 10:
                jjsetImg(""); jjlexState.push(1); 
                break;
            case 11:
                jjsetImg(""); jjlexState.push(1); 
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten){
        var jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 25:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 26:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 27:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 28:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 34:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 35:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 36:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 37:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 38:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 39:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 40:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 45:
                jjsetImg(""); 
                break;
            case 47:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 52:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 61:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 63:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 71:
                jjsetImg(""); jjlexState.pop(); 
                break;
            case 72:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 73:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 75:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 79:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 80:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 81:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 82:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 84:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 85:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 86:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 90:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 94:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 96:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 104:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 105:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 107:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 108:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 110:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 115:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 117:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 120:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 123:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 125:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten){
        var jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                jjsetImg(""); 
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 9:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            default:;
        }
    }
    function jjdoLexAction3(jjstaten){
        var jjtk = jjlexTokens3[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            default:;
        }
    }
    function jjdoLexAction4(jjstaten){
        var jjtk = jjlexTokens4[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate, state){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            case 3:
                jjdoLexAction3(state);
                break;
            case 4:
                jjdoLexAction4(state);
                break;
            default:;
        }
        jjtoken.id !== -1 && jjreturnToken();
    }
    function jjrollback(){
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjreturnToken();
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: start => top_statement_list */
                var l = jjsematicS[jjsp - 1];
                { outputs.astRoot = l; } 
                break;
            case 2:
                /* 2: top_statement_list => top_statement_list top_statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 3:
                /* 3: top_statement_list => */
                { jjtop = new ZNode(AST_TOPLIST); } 
                break;
            case 6:
                /* 6: top_statement => "__halt_compiler" "(" ")" ";" */
                { halt(); } 
                break;
            case 7:
                /* 7: statement_list => statement_list statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 8:
                /* 8: statement_list => */
                { jjtop = new ZNode(AST_STATEMENTLIST); } 
                break;
            case 9:
                /* 9: statement => "{" statement_list "}" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 10:
                /* 10: statement => ";" */
                { jjtop = null; } 
                break;
            case 12:
                /* 12: statement => <INLINE_HTML> */
                var h = jjsematicS[jjsp - 1];
                { h.type = AST_STRING; jjtop = new ZNode(AST_ECHO, h); } 
                break;
            case 13:
                /* 13: statement => "<?=" expr <INLINE_HTML> */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 14:
                /* 14: statement => "echo" expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 16:
                /* 16: statement => "while" "(" expr ")" statement */
                var cond = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_WHILE, [cond, s]); } 
                break;
            case 17:
                /* 17: statement => "do" statement "while" "(" expr ")" ";" */
                var s = jjsematicS[jjsp - 6];
                var cond = jjsematicS[jjsp - 3];
                { jjtop = new ZNode(AST_DO_WHILE, [cond, s]); } 
                break;
            case 18:
                /* 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement */
                var e1 = jjsematicS[jjsp - 7];
                var e2 = jjsematicS[jjsp - 5];
                var e3 = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_FOR, [e1, e2, e3, s]); } 
                break;
            case 19:
                /* 19: if_statement => "if" "(" expr ")" statement */
                var c = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, ZNode.NONE]); } 
                break;
            case 20:
                /* 20: if_statement => "if" "(" expr ")" statement "else" statement */
                var c = jjsematicS[jjsp - 5];
                var s = jjsematicS[jjsp - 3];
                var el = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, el]); } 
                break;
            case 21:
                /* 21: for_exprs => */
                { jjtop = new ZNode(AST_EXPR_LIST); } 
                break;
            case 23:
                /* 23: non_empty_for_exprs => non_empty_for_exprs "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 24:
                /* 24: non_empty_for_exprs => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 28:
                /* 28: callable_expr => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 30:
                /* 30: dereferencable => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 32:
                /* 32: @0 => */
                var v = jjsematicS[jjsp - 1];
                jjlexState.push(2); 
                break;
            case 33:
                /* 33: @1 => */
                var v = jjsematicS[jjsp - 3];
                jjlexState.pop(); 
                break;
            case 34:
                /* 34: var => dereferencable @0 "->" @1 property_name */
                var v = jjsematicS[jjsp - 5];
                var pn = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PROPERTY, [v, pn]); } 
                break;
            case 36:
                /* 36: callable_variable => dereferencable "[" optional_expr "]" */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_OFFSET, [v, e]); } 
                break;
            case 37:
                /* 37: simple_var => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 38:
                /* 38: simple_var => "$" "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_VARIABLE, e); } 
                break;
            case 39:
                /* 39: simple_var => "$" simple_var */
                var v = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 40:
                /* 40: property_name => <NAME> */
                var n = jjsematicS[jjsp - 1];
                { jjtop.type = AST_STRING; } 
                break;
            case 41:
                /* 41: property_name => "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 43:
                /* 43: optional_expr => */
                { jjtop = ZNode.NONE; } 
                break;
            case 47:
                /* 47: argument_list => */
                { jjtop = new ZNode(AST_ARGLIST); } 
                break;
            case 49:
                /* 49: non_empty_argument_list => non_empty_argument_list "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 50:
                /* 50: non_empty_argument_list => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARGLIST, e); } 
                break;
            case 51:
                /* 51: expr_without_var => var "=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b]); } 
                break;
            case 52:
                /* 52: expr_without_var => var "+=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_PLUS); } 
                break;
            case 53:
                /* 53: expr_without_var => var "-=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MINUS); } 
                break;
            case 54:
                /* 54: expr_without_var => var "**=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_POW); } 
                break;
            case 55:
                /* 55: expr_without_var => var "*=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_TIMES); } 
                break;
            case 56:
                /* 56: expr_without_var => var "/=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_DIVIDE); } 
                break;
            case 57:
                /* 57: expr_without_var => var "&=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITAND); } 
                break;
            case 58:
                /* 58: expr_without_var => var "|=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITOR); } 
                break;
            case 59:
                /* 59: expr_without_var => var "^=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITXOR); } 
                break;
            case 60:
                /* 60: expr_without_var => var ">>=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 61:
                /* 61: expr_without_var => var "<<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_LEFTSHIFT); } 
                break;
            case 62:
                /* 62: expr_without_var => var "%=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MOD); } 
                break;
            case 63:
                /* 63: expr_without_var => expr "?" expr ":" expr */
                var a = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 3];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, b, c]); } 
                break;
            case 64:
                /* 64: expr_without_var => expr "?" ":" expr */
                var a = jjsematicS[jjsp - 4];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, ZNode.NONE, c]); } 
                break;
            case 65:
                /* 65: expr_without_var => expr ">" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHAN); } 
                break;
            case 66:
                /* 66: expr_without_var => expr "<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHAN); } 
                break;
            case 67:
                /* 67: expr_without_var => expr ">=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHANOREQUAL); } 
                break;
            case 68:
                /* 68: expr_without_var => expr "<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHANOREQUAL); } 
                break;
            case 69:
                /* 69: expr_without_var => expr "==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_EQUAL); } 
                break;
            case 70:
                /* 70: expr_without_var => expr "===" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_IDENTICAL); } 
                break;
            case 71:
                /* 71: expr_without_var => expr "!=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTEQUAL); } 
                break;
            case 72:
                /* 72: expr_without_var => expr "!==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTIDENTICAL); } 
                break;
            case 73:
                /* 73: expr_without_var => expr "^" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITXOR); } 
                break;
            case 74:
                /* 74: expr_without_var => expr "|" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITOR); } 
                break;
            case 75:
                /* 75: expr_without_var => expr "&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITAND); } 
                break;
            case 76:
                /* 76: expr_without_var => expr ">>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 77:
                /* 77: expr_without_var => expr "<<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LEFTSHIFT); } 
                break;
            case 78:
                /* 78: expr_without_var => expr "&&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_AND); } 
                break;
            case 79:
                /* 79: expr_without_var => expr "||" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_OR); } 
                break;
            case 80:
                /* 80: expr_without_var => expr "OR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALOR, [a, b]); } 
                break;
            case 81:
                /* 81: expr_without_var => expr "XOR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_XOR); } 
                break;
            case 82:
                /* 82: expr_without_var => expr "AND" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALAND, [a, b]); } 
                break;
            case 83:
                /* 83: expr_without_var => expr "+" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_PLUS); } 
                break;
            case 84:
                /* 84: expr_without_var => expr "-" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MINUS); } 
                break;
            case 85:
                /* 85: expr_without_var => expr "*" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_TIMES); } 
                break;
            case 86:
                /* 86: expr_without_var => expr "/" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_DIVIDE); } 
                break;
            case 87:
                /* 87: expr_without_var => expr "%" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MOD); } 
                break;
            case 88:
                /* 88: expr_without_var => expr "**" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_POW); } 
                break;
            case 89:
                /* 89: expr_without_var => "(" expr ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 90:
                /* 90: expr_without_var => "+" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_POSITIVE); } 
                break;
            case 91:
                /* 91: expr_without_var => "-" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NEGATIVE); } 
                break;
            case 92:
                /* 92: expr_without_var => "!" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NOT); } 
                break;
            case 93:
                /* 93: expr_without_var => "~" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_BITNOT); } 
                break;
            case 94:
                /* 94: expr_without_var => "++" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTINC, a); } 
                break;
            case 95:
                /* 95: expr_without_var => "--" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTDEC, a); } 
                break;
            case 96:
                /* 96: expr_without_var => var "++" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXINC, a); } 
                break;
            case 97:
                /* 97: expr_without_var => var "--" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXDEC, a); } 
                break;
            case 101:
                /* 101: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" */
                var n = jjsematicS[jjsp - 7];
                var l = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 2];
                { jjtop = vm.emitFunction(n, l, b); } 
                break;
            case 102:
                /* 102: parameter_list => */
                { jjtop = new ZNode(AST_PARAMLIST); } 
                break;
            case 104:
                /* 104: non_empty_parameter_list => non_empty_parameter_list "," parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop.add(p); } 
                break;
            case 105:
                /* 105: non_empty_parameter_list => parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PARAMLIST, p); } 
                break;
            case 106:
                /* 106: parameter => <NAME> */
                var p = jjsematicS[jjsp - 1];
                { p.type = AST_STRING; jjtop = p; } 
                break;
            case 107:
                /* 107: lexical_vars => */
                { jjtop = new ZNode(AST_LEXICALVARLIST); } 
                break;
            case 108:
                /* 108: lexical_vars => "use" "(" lexical_var_list ")" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 109:
                /* 109: lexical_var_list => lexical_var_list "," <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop.add(v); } 
                break;
            case 110:
                /* 110: lexical_var_list => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_LEXICALVARLIST, v); } 
                break;
            case 111:
                /* 111: primitive => <INT> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_INTEGER; jjtop = s; } 
                break;
            case 112:
                /* 112: primitive => <DECIMAL> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_FLOAT; jjtop = s; } 
                break;
            case 113:
                /* 113: primitive => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_STRING; jjtop = s; } 
                break;
            case 114:
                /* 114: primitive => <NAME> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_CONST; jjtop = s; } 
                break;
            case 115:
                /* 115: primitive => "[" array_pair_list "]" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 116:
                /* 116: primitive => "list" "(" array_pair_list ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 118:
                /* 118: array_pair_list => */
                { jjtop = new ZNode(AST_ARRAY); } 
                break;
            case 119:
                /* 119: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop.add(a); } 
                break;
            case 120:
                /* 120: non_empty_array_pair_list => array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAY, a); } 
                break;
            case 122:
                /* 122: array_pair => expr "=>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAYPAIR, [a, b]); } 
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjconsumeTokens(t){
        if(t !== null){
            while(!jjstop && !jjacceptToken(jjtoken));
        }
        while(!jjstop && jjemittedTokens.length > 0){
            jjacceptToken(new Token(jjemittedTokens[0], null, 0, 0, 0, 0)) && jjemittedTokens.shift();
        }
    }
    function jjacceptToken(t){
        // look up action table
        var cstate = jjlrState[jjlrState.length - 1];
        var ind = jjdisact[cstate] + t.id;
        var act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            jjsyntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                jjstop = true;
                jjemit('accept');
                return true;
            }
            else {
                jjlrState.push(act - 1);
                jjsematicS.push(jjsematicVal);
                jjsematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            jjdoReduction(-act - 1);
            return false;
        }
        else {
            // error
            jjsyntaxError(t);
            // force consume
            return true;
        }
    }
    function jjsyntaxError(t){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}


exports.compile = function compile(source, errs){
    var parser = createParser();
    var outputs = { astRoot: null };
    var err = false;
    parser.init(outputs);
    parser.on('lexicalerror', function(c, line, column){
        line++;
        column++;
        errs.push('lexical error: (line ' + line + ', column ' + column + '): unexpected character "' + c + '"');
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', function(msg, token){
        errs.push('syntax error: (line ' + token.startLine + ', column ' + token.startColumn + '):' + msg);
        parser.halt();
        err = true;
    });
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        return outputs.astRoot;
    }
}

})));