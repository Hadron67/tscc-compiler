/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

// universal module defination
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.zend = {})));
}(this, (function (exports) { 'use strict';
var toString = {}.toString;
function isArray(a){
    return toString.call(a) === '[object Array]';
}
function ZNode(type, child, val, pos){
    this.parent = null;
    this.type = type;
    this.val = val || null;
    this.child = isArray(child) ? child : child === null || typeof child === 'undefined' ? [] : [child];
    this.pos = pos || null;
    for(var i = 0, _a = this.child; i < _a.length; i++){
        _a[i] !== ZNode.NONE && (_a[i].parent = this);
    }
}
ZNode.NONE = new ZNode(AST_NONE);
ZNode.prototype.add = function(c){
    this.child.push(c);
    c.parent = this;
}
ZNode.prototype.toString = function(){

}

function nodeFromToken(t){
    return new ZNode(AST_NONE, null, t.val, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeFromTrivalToken(t){
    return new ZNode(AST_NONE, null, null, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeBetween(from, to, val){
    return new ZNode(AST_NONE, null, val, {
        startLine: from.startLine,
        startColumn: from.startColumn,
        endLine: to.endLine,
        endColumn: to.endColumn
    });
}
var escapes = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'",
    '`': '`'
};
function unescape(s){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}
function extractHeredocStart(s){
    s = s.substr(3, s.length - 4).trim();
    if(s.charAt(0) === '"' || s.charAt(0) === "'"){
        s = s.substr(1, s.length - 2);
    }
    return s;
}


var cc = 0;
function defineOpcode(name, handler){
    return {
        code: cc++,
        name: name,
        handler: handler || null
    };
}
var OP_NOP = defineOpcode('nop');
var OP_PUSH = defineOpcode('push');
var OP_POP = defineOpcode('pop');
var OP_DUP = defineOpcode('dup');
var OP_GETVAR = defineOpcode('getVar');
var OP_SETVAR = defineOpcode('setVar');
var OP_SETPROP = defineOpcode('setProp');
var OP_GETPROP = defineOpcode('getProp');
var OP_GETOFFSET = defineOpcode('getOffset');
var OP_SETOFFSET = defineOpcode('setOffset');
var OP_GETMAXOFFSET = defineOpcode('getMaxOffset');
var OP_SETMAXOFFSET = defineOpcode('setMaxOffset');
var OP_GETCONST = defineOpcode('getConst');
var OP_SETLOCAL = defineOpcode('setLocal');
var OP_GETLOCAL = defineOpcode('getLocal');

var OP_PLUS = defineOpcode('plus');
var OP_MINUS = defineOpcode('minus');
var OP_TIMES = defineOpcode('times');
var OP_DIVIDE = defineOpcode('divide');
var OP_POW = defineOpcode('pow');
var OP_CONCAT = defineOpcode('concat');
var OP_MOD = defineOpcode('mod');
var OP_BITAND = defineOpcode('bitAnd');
var OP_BITOR = defineOpcode('bitOr');
var OP_BITXOR = defineOpcode('bitXor');
var OP_BITNOT = defineOpcode('bitNot');
var OP_AND = defineOpcode('and');
var OP_OR = defineOpcode('or');
var OP_NOT = defineOpcode('not');
var OP_XOR = defineOpcode('xor');
var OP_LEFTSHIFT = defineOpcode('leftShift');
var OP_RIGHTSHIFT = defineOpcode('rightShift');
var OP_POSITIVE = defineOpcode('positive');
var OP_NEGATIVE = defineOpcode('negative');
var OP_INC = defineOpcode('inc');
var OP_DEC = defineOpcode('dec');
var OP_GREATERTHAN = defineOpcode('greaterThan');
var OP_LESSTHAN = defineOpcode('lessThan');
var OP_EQUAL = defineOpcode('equal');
var OP_IDENTICAL = defineOpcode('identical');
var OP_GREATERTHANOREQUAL = defineOpcode('greaterThanOrEqual');
var OP_LESSTHANOREQUAL = defineOpcode('lessThanOrEqual');
var OP_NOTEQUAL = defineOpcode('notEqual');
var OP_NOTIDENTICAL = defineOpcode('notIdentical');
var OP_ECHO = defineOpcode('echo');

var OP_INVOKE = defineOpcode('invoke');
var OP_INVOKENAME = defineOpcode('invokeName');
var OP_INVOKEMETHOD = defineOpcode('invokeMethod');
var OP_INVOKEMETHODNAME = defineOpcode('invokeMethodName');
var OP_NEW = defineOpcode('new');
var OP_DEFINEFUNCTION = defineOpcode('defineFunction');
var OP_ENTRY = defineOpcode('entry');
var OP_PARAM = defineOpcode('param');
var OP_USE = defineOpcode('use');
var OP_ENDFUNCTION = defineOpcode('endFunction');

var OP_JMP = defineOpcode('jmp');
var OP_JZ = defineOpcode('jz');
var OP_JNZ = defineOpcode('jnz');
var OP_RETURN = defineOpcode('return');
var OP_RETURNNULL = defineOpcode('returnNull');
var OP_CODE = defineOpcode('code');
var OP_ENDCODE = defineOpcode('endCode');

cc = 0;
var AST_NONE = cc++;
var AST_TOPLIST = cc++;
var AST_STATEMENTLIST = cc++;
var AST_ECHO = cc++;
var AST_IF = cc++;
var AST_WHILE = cc++;
var AST_DO_WHILE = cc++;
var AST_FOR = cc++;
var AST_EXPR_LIST = cc++;
var AST_CONDITIONALEXPR = cc++;
var AST_ARGLIST = cc++;
var AST_PARAMLIST = cc++;
var AST_LEXICALVARLIST = cc++;
var AST_FUNCTIONCALL = cc++;
var AST_METHODCALL = cc++;
var AST_FUNCTION = cc++;
var AST_ANONYFUNCTION = cc++;
var AST_BREAK = cc++;
var AST_CONTINUE = cc++;
var AST_RETURN = cc++;

var AST_VARIABLE = cc++;
var AST_PROPERTY = cc++;
var AST_OFFSET = cc++;
var AST_ASSIGN = cc++;
var AST_BINARYOP = cc++;
var AST_UNARYOP = cc++;
var AST_LOGICALOR = cc++;
var AST_LOGICALAND = cc++;
var AST_POSTINC = cc++;
var AST_SUFFIXINC = cc++;
var AST_POSTDEC = cc++;
var AST_SUFFIXDEC = cc++;

var AST_CONST = cc++;
var AST_INTEGER = cc++;
var AST_FLOAT = cc++;
var AST_STRING = cc++;
var AST_STRING_LIST = cc++;
var AST_NONE_END_LABEL = cc++;
var AST_ARRAY = cc++;
var AST_ARRAYPAIR = cc++;
var AST_LOCAL = cc++;


/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     1,     1,     1,     2,     1,     1,     1,     1,     3,
         9,    10,    11,    -1,     3,     3,     3,     3,     3,     3,
         3,     3,    -1,     3,     3,     3,     8,     3,     3,     3,
         3,    -1,     3,     3,     7,     3,     3,     3,     3,     3,
        -1,     5,     3,     3,     6,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     3,     3,     3,     3,    -1,     3,
         4,     3,     3,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexdisnext0 = [ 
         0,    63,    54,    45,    36,    -9,    27,    18,     9,    -9,
        -9,    -9,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
         8,     8,     8,    -1,     8,     8,     8,     8,     7,     7,
         7,     7,    -1,     7,     7,     7,     7,     6,     6,     6,
         6,    -1,     6,     6,     6,     6,     4,     4,     4,     4,
        -1,     4,     4,     4,     4,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     2,     2,     2,     2,    -1,     2,
         2,     2,     2,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexclassTable0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         4,     5,     0,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
         0,     0,     8,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable0 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd0 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,1,0,1,1,1,0,0,0,
]; 
var jjlextable0 = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1 = [ 
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   105,   104,   104,   104,   104,   106,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   105,   104,
       104,   104,   104,   106,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   105,   104,   104,   104,   104,   128,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   130,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   105,   104,   104,   104,   104,   128,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   105,   104,
       104,   104,   104,   106,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
        56,    56,   181,    56,    56,    56,    56,    56,    56,    56,
        57,    56,    56,    56,    56,    56,    56,    56,    56,   142,
        56,    56,    56,    56,    56,    56,   142,   142,   142,   142,
        56,    56,    56,    56,    56,    56,    58,    56,    56,    56,
        56,   142,   142,   142,   142,   142,   142,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,   180,    56,    56,
        56,    56,    56,    56,    56,    57,    56,    56,    56,    56,
        56,    56,    56,    56,   142,    56,    56,    56,    56,    56,
        56,   142,   142,   142,   142,    56,    56,    56,    56,    56,
        56,    58,    56,    56,    56,    56,   142,   142,   142,   142,
       142,   142,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,   179,    56,    56,    56,    56,    56,    56,    56,
        57,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    58,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    51,    51,   178,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        56,    56,   177,    56,    56,    56,    56,    56,    56,    56,
        57,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    58,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    51,    51,   176,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        56,    56,   175,    56,    56,    56,    56,    56,    56,    56,
        57,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    58,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    51,    51,   174,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
         1,     2,     3,     4,     5,     6,     7,     8,     9,    10,
        11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
        21,    22,    23,    24,    25,    26,    27,    27,    27,    27,
        27,    28,    27,    29,    30,   171,    31,    32,    33,    34,
        27,    35,    36,    37,    38,    39,    27,    40,    27,    41,
        27,    27,    27,    27,    42,    27,    27,    43,    44,    27,
        45,    46,    47,    48,   154,   155,   108,   166,   108,    63,
       165,   109,     1,     2,     3,   127,    64,    65,     1,    49,
         3,   156,   127,   127,   127,   127,   169,   170,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   127,   127,   127,
       127,   127,   127,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   154,   155,    67,     1,     2,     3,    70,
        68,    19,   107,   107,    66,    69,     1,     2,     3,   157,
       156,    71,    71,    71,    71,   154,   155,   156,   156,   156,
       156,   156,   156,   156,   156,   156,    97,    71,    71,    71,
        71,   146,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   132,   110,   111,    61,   143,    76,    77,    74,
        75,   144,    72,    73,    62,    98,    59,   133,   132,   109,
       109,   131,    54,   116,   113,   112,    60,   145,   145,   145,
       145,   145,   145,   145,   145,   145,    55,   103,    99,    84,
        83,    78,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   163,    66,    53,    50,    -1,    -1,    -1,    -1,
        -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,   164,   164,
       164,   164,   164,   164,   164,   164,   164,    -1,    -1,    -1,
        -1,    -1,    -1,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   161,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
        -1,    -1,    -1,    -1,   162,   162,   162,   162,   162,   162,
       162,   162,   162,    -1,    -1,    -1,    -1,    -1,    -1,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   163,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,
        -1,    -1,    -1,    -1,    -1,   164,   164,   164,   164,   164,
       164,   164,   164,   164,    -1,    -1,    -1,    -1,    -1,    -1,
       164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
       161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,
        -1,   162,   162,   162,   162,   162,   162,   162,   162,   162,
        -1,    -1,    -1,    -1,    -1,    -1,   162,   162,   162,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
       162,   162,   162,   162,   162,   162,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,   173,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,   172,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
       168,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,   167,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,   160,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,   159,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,   158,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,   151,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,   150,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,   149,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,   148,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,    79,   147,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,   141,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,   140,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
       139,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,   138,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,   137,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,   136,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
       135,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,   134,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
       100,    -1,    -1,    -1,    -1,    -1,    -1,   100,   100,   100,
       100,   100,   100,   100,   100,   100,    -1,    -1,    -1,    -1,
        -1,    -1,   100,   100,   100,   100,   100,   100,   100,   100,
       100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
       100,   100,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,   126,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
       125,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,   124,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,   123,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,   122,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
       121,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,   120,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,   119,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,   118,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
       117,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
       115,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,   114,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,   100,    -1,    -1,    -1,    -1,    -1,
        -1,   100,   100,   100,   100,   100,   100,   100,   100,   100,
        -1,    -1,    -1,    -1,    -1,    -1,   100,   100,   100,   100,
       100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
       100,   100,   100,   100,   100,   100,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    96,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    95,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    94,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    93,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    92,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        90,    79,    79,    79,    79,    91,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    88,    79,    79,    79,    79,    79,    79,    89,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    87,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    86,    79,    79,    79,
        79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,    -1,
        -1,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        85,    79,    79,    79,    79,    79,    79,    -1,    -1,    -1,
        -1,    -1,    -1,    79,    79,    79,    79,    79,    79,    82,
        79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    -1,
        -1,    -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,
        79,    79,    81,    79,    -1,    -1,    -1,    -1,    -1,    -1,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    -1,    -1,    -1,    -1,    -1,    -1,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    -1,    -1,    -1,    -1,
        -1,    -1,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    80,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,   153,   153,   153,   153,   153,   153,
       153,   153,   153,    -1,    -1,    -1,    -1,    -1,    -1,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   152,
       152,   152,   152,   152,   152,   152,   152,   152,    -1,    -1,
        -1,    -1,    -1,    -1,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   152,    52,    52,    52,    52,    52,    52,
        52,    52,    52,   101,    -1,    -1,    -1,    -1,   101,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    -1,
        -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
       101,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
       101,    -1,    -1,   101,    -1,   101,   102,    -1,   102,
]; 
var jjlexdisnext1 = [ 
       909,  1045,  1035,   987,  1132,   -65,   845,  4098,  1131,  1103,
       780,   -65,   -65,  1093,  1081,   -65,   963,  1134,  1022,  1022,
       -65,   -65,  1080,  1076,  1074,  1107,  3993,  3951,  3909,  3867,
       -65,   -65,  1107,  1090,   -65,  3825,  3783,  3741,  3699,  3657,
      3615,  3573,  3531,  3489,  3447,   -65,  1043,   -65,   -65,   981,
      1105,   715,  3405,   -65,   -65,   -65,   650,   -65,  4128,  1104,
       -65,   -65,   -65,   -65,   -65,   -65,  1025,   325,   585,   -65,
      1024,   962,  1071,   -65,  1092,   -65,   -65,  1091,   -65,  3363,
      3321,  3279,  3237,   -65,  1066,  3195,  3153,  3111,  3069,  3027,
      2985,  2943,  2901,  2859,  2817,  2775,  2733,   -65,   -65,   -65,
      2691,   520,   966,   -65,   260,   195,  1093,  1023,  1091,  1090,
      1107,   -65,   -65,   -65,  2649,  2607,  1066,  2565,  2523,  2481,
      2439,  2397,  2355,  2313,  2271,  2229,  2187,   455,   130,    65,
       -65,     0,  1091,  1021,  2145,  2103,  2061,  2019,  1977,  1935,
      1893,  1851,   390,  4063,  4028,  1031,   992,  1809,  1767,  1725,
      1683,  1641,  1305,  1249,   -65,   978,   972,   938,  1599,  1557,
      1515,  1053,  1198,   994,  1142,   -65,   902,  1473,  1431,   -65,
       845,   729,  1389,  1347,   -65,   666,   598,   539,   472,   412,
       337,   -65,
]; 
var jjlexchecknext1 = [ 
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
       104,   104,   104,   104,   104,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
       142,   142,   180,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   127,   127,   179,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       101,   101,   178,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
       101,   101,   101,   101,   101,    68,    68,   177,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        56,    56,   176,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    56,    56,    56,    51,    51,   175,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        10,    10,   171,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,     6,     6,   170,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   166,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   156,   156,    71,   157,    71,    16,
       155,    71,    49,    49,    49,   102,    16,    16,     3,     3,
         3,   156,   102,   102,   102,   102,   163,   163,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   102,   102,   102,
       102,   102,   102,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   145,   145,    18,     2,     2,     2,    19,
        18,    19,   107,    70,    66,    18,     1,     1,     1,   146,
       145,    19,   107,    70,    66,   161,   161,   145,   145,   145,
       145,   145,   145,   145,   145,   145,    46,    19,   107,    70,
        66,   133,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   132,    72,    72,    14,   132,    24,    24,    23,
        23,   132,    22,    22,    14,    46,    13,   116,   110,   109,
       108,   106,     9,    84,    77,    74,    13,   132,   132,   132,
       132,   132,   132,   132,   132,   132,     9,    59,    50,    33,
        32,    25,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   164,    17,     8,     4,    -1,    -1,    -1,    -1,
        -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,   164,   164,
       164,   164,   164,   164,   164,   164,   164,    -1,    -1,    -1,
        -1,    -1,    -1,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   162,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
        -1,    -1,    -1,    -1,   162,   162,   162,   162,   162,   162,
       162,   162,   162,    -1,    -1,    -1,    -1,    -1,    -1,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   153,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,    -1,
        -1,    -1,    -1,    -1,    -1,   153,   153,   153,   153,   153,
       153,   153,   153,   153,    -1,    -1,    -1,    -1,    -1,    -1,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
        -1,   152,   152,   152,   152,   152,   152,   152,   152,   152,
        -1,    -1,    -1,    -1,    -1,    -1,   152,   152,   152,   152,
       152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   152,   152,   152,   173,    -1,    -1,    -1,
        -1,    -1,    -1,   173,   173,   173,   173,   173,   173,   173,
       173,   173,    -1,    -1,    -1,    -1,    -1,    -1,   173,   173,
       173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
       173,   173,   173,   173,   173,   173,   173,   173,   172,    -1,
        -1,    -1,    -1,    -1,    -1,   172,   172,   172,   172,   172,
       172,   172,   172,   172,    -1,    -1,    -1,    -1,    -1,    -1,
       172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
       172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
       168,    -1,    -1,    -1,    -1,    -1,    -1,   168,   168,   168,
       168,   168,   168,   168,   168,   168,    -1,    -1,    -1,    -1,
        -1,    -1,   168,   168,   168,   168,   168,   168,   168,   168,
       168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
       168,   168,   167,    -1,    -1,    -1,    -1,    -1,    -1,   167,
       167,   167,   167,   167,   167,   167,   167,   167,    -1,    -1,
        -1,    -1,    -1,    -1,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   160,    -1,    -1,    -1,    -1,    -1,
        -1,   160,   160,   160,   160,   160,   160,   160,   160,   160,
        -1,    -1,    -1,    -1,    -1,    -1,   160,   160,   160,   160,
       160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
       160,   160,   160,   160,   160,   160,   159,    -1,    -1,    -1,
        -1,    -1,    -1,   159,   159,   159,   159,   159,   159,   159,
       159,   159,    -1,    -1,    -1,    -1,    -1,    -1,   159,   159,
       159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
       159,   159,   159,   159,   159,   159,   159,   159,   158,    -1,
        -1,    -1,    -1,    -1,    -1,   158,   158,   158,   158,   158,
       158,   158,   158,   158,    -1,    -1,    -1,    -1,    -1,    -1,
       158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       151,    -1,    -1,    -1,    -1,    -1,    -1,   151,   151,   151,
       151,   151,   151,   151,   151,   151,    -1,    -1,    -1,    -1,
        -1,    -1,   151,   151,   151,   151,   151,   151,   151,   151,
       151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
       151,   151,   150,    -1,    -1,    -1,    -1,    -1,    -1,   150,
       150,   150,   150,   150,   150,   150,   150,   150,    -1,    -1,
        -1,    -1,    -1,    -1,   150,   150,   150,   150,   150,   150,
       150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
       150,   150,   150,   150,   149,    -1,    -1,    -1,    -1,    -1,
        -1,   149,   149,   149,   149,   149,   149,   149,   149,   149,
        -1,    -1,    -1,    -1,    -1,    -1,   149,   149,   149,   149,
       149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
       149,   149,   149,   149,   149,   149,   148,    -1,    -1,    -1,
        -1,    -1,    -1,   148,   148,   148,   148,   148,   148,   148,
       148,   148,    -1,    -1,    -1,    -1,    -1,    -1,   148,   148,
       148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
       148,   148,   148,   148,   148,   148,   148,   148,   147,    -1,
        -1,    -1,    -1,    -1,    -1,   147,   147,   147,   147,   147,
       147,   147,   147,   147,    -1,    -1,    -1,    -1,    -1,    -1,
       147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
       147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
       141,    -1,    -1,    -1,    -1,    -1,    -1,   141,   141,   141,
       141,   141,   141,   141,   141,   141,    -1,    -1,    -1,    -1,
        -1,    -1,   141,   141,   141,   141,   141,   141,   141,   141,
       141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
       141,   141,   140,    -1,    -1,    -1,    -1,    -1,    -1,   140,
       140,   140,   140,   140,   140,   140,   140,   140,    -1,    -1,
        -1,    -1,    -1,    -1,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   140,   139,    -1,    -1,    -1,    -1,    -1,
        -1,   139,   139,   139,   139,   139,   139,   139,   139,   139,
        -1,    -1,    -1,    -1,    -1,    -1,   139,   139,   139,   139,
       139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
       139,   139,   139,   139,   139,   139,   138,    -1,    -1,    -1,
        -1,    -1,    -1,   138,   138,   138,   138,   138,   138,   138,
       138,   138,    -1,    -1,    -1,    -1,    -1,    -1,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   137,    -1,
        -1,    -1,    -1,    -1,    -1,   137,   137,   137,   137,   137,
       137,   137,   137,   137,    -1,    -1,    -1,    -1,    -1,    -1,
       137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
       137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
       136,    -1,    -1,    -1,    -1,    -1,    -1,   136,   136,   136,
       136,   136,   136,   136,   136,   136,    -1,    -1,    -1,    -1,
        -1,    -1,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   135,    -1,    -1,    -1,    -1,    -1,    -1,   135,
       135,   135,   135,   135,   135,   135,   135,   135,    -1,    -1,
        -1,    -1,    -1,    -1,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   134,    -1,    -1,    -1,    -1,    -1,
        -1,   134,   134,   134,   134,   134,   134,   134,   134,   134,
        -1,    -1,    -1,    -1,    -1,    -1,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   126,    -1,    -1,    -1,
        -1,    -1,    -1,   126,   126,   126,   126,   126,   126,   126,
       126,   126,    -1,    -1,    -1,    -1,    -1,    -1,   126,   126,
       126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
       126,   126,   126,   126,   126,   126,   126,   126,   125,    -1,
        -1,    -1,    -1,    -1,    -1,   125,   125,   125,   125,   125,
       125,   125,   125,   125,    -1,    -1,    -1,    -1,    -1,    -1,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       124,    -1,    -1,    -1,    -1,    -1,    -1,   124,   124,   124,
       124,   124,   124,   124,   124,   124,    -1,    -1,    -1,    -1,
        -1,    -1,   124,   124,   124,   124,   124,   124,   124,   124,
       124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
       124,   124,   123,    -1,    -1,    -1,    -1,    -1,    -1,   123,
       123,   123,   123,   123,   123,   123,   123,   123,    -1,    -1,
        -1,    -1,    -1,    -1,   123,   123,   123,   123,   123,   123,
       123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   123,   123,   123,   122,    -1,    -1,    -1,    -1,    -1,
        -1,   122,   122,   122,   122,   122,   122,   122,   122,   122,
        -1,    -1,    -1,    -1,    -1,    -1,   122,   122,   122,   122,
       122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
       122,   122,   122,   122,   122,   122,   121,    -1,    -1,    -1,
        -1,    -1,    -1,   121,   121,   121,   121,   121,   121,   121,
       121,   121,    -1,    -1,    -1,    -1,    -1,    -1,   121,   121,
       121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
       121,   121,   121,   121,   121,   121,   121,   121,   120,    -1,
        -1,    -1,    -1,    -1,    -1,   120,   120,   120,   120,   120,
       120,   120,   120,   120,    -1,    -1,    -1,    -1,    -1,    -1,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       119,    -1,    -1,    -1,    -1,    -1,    -1,   119,   119,   119,
       119,   119,   119,   119,   119,   119,    -1,    -1,    -1,    -1,
        -1,    -1,   119,   119,   119,   119,   119,   119,   119,   119,
       119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
       119,   119,   118,    -1,    -1,    -1,    -1,    -1,    -1,   118,
       118,   118,   118,   118,   118,   118,   118,   118,    -1,    -1,
        -1,    -1,    -1,    -1,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   117,    -1,    -1,    -1,    -1,    -1,
        -1,   117,   117,   117,   117,   117,   117,   117,   117,   117,
        -1,    -1,    -1,    -1,    -1,    -1,   117,   117,   117,   117,
       117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
       117,   117,   117,   117,   117,   117,   115,    -1,    -1,    -1,
        -1,    -1,    -1,   115,   115,   115,   115,   115,   115,   115,
       115,   115,    -1,    -1,    -1,    -1,    -1,    -1,   115,   115,
       115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
       115,   115,   115,   115,   115,   115,   115,   115,   114,    -1,
        -1,    -1,    -1,    -1,    -1,   114,   114,   114,   114,   114,
       114,   114,   114,   114,    -1,    -1,    -1,    -1,    -1,    -1,
       114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
       114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
       100,    -1,    -1,    -1,    -1,    -1,    -1,   100,   100,   100,
       100,   100,   100,   100,   100,   100,    -1,    -1,    -1,    -1,
        -1,    -1,   100,   100,   100,   100,   100,   100,   100,   100,
       100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
       100,   100,    96,    -1,    -1,    -1,    -1,    -1,    -1,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    -1,    -1,
        -1,    -1,    -1,    -1,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    95,    -1,    -1,    -1,    -1,    -1,
        -1,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        -1,    -1,    -1,    -1,    -1,    -1,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    94,    -1,    -1,    -1,
        -1,    -1,    -1,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    -1,    -1,    -1,    -1,    -1,    -1,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    93,    -1,
        -1,    -1,    -1,    -1,    -1,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    -1,    -1,    -1,    -1,    -1,    -1,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        92,    -1,    -1,    -1,    -1,    -1,    -1,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    -1,    -1,    -1,    -1,
        -1,    -1,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    91,    -1,    -1,    -1,    -1,    -1,    -1,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    -1,    -1,
        -1,    -1,    -1,    -1,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    90,    -1,    -1,    -1,    -1,    -1,
        -1,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        -1,    -1,    -1,    -1,    -1,    -1,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    89,    -1,    -1,    -1,
        -1,    -1,    -1,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    -1,    -1,    -1,    -1,    -1,    -1,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    88,    -1,
        -1,    -1,    -1,    -1,    -1,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    -1,    -1,    -1,    -1,    -1,    -1,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        87,    -1,    -1,    -1,    -1,    -1,    -1,    87,    87,    87,
        87,    87,    87,    87,    87,    87,    -1,    -1,    -1,    -1,
        -1,    -1,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    87,    86,    -1,    -1,    -1,    -1,    -1,    -1,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    -1,    -1,
        -1,    -1,    -1,    -1,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    85,    -1,    -1,    -1,    -1,    -1,
        -1,    85,    85,    85,    85,    85,    85,    85,    85,    85,
        -1,    -1,    -1,    -1,    -1,    -1,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    85,    82,    -1,    -1,    -1,
        -1,    -1,    -1,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    -1,    -1,    -1,    -1,    -1,    -1,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    81,    -1,
        -1,    -1,    -1,    -1,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    79,    -1,    -1,    -1,    -1,    -1,    -1,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    -1,    -1,
        -1,    -1,    -1,    -1,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
        79,    79,    79,    79,    52,    -1,    -1,    -1,    -1,    -1,
        -1,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        -1,    -1,    -1,    -1,    -1,    -1,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    44,    -1,    -1,    -1,
        -1,    -1,    -1,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    -1,    -1,    -1,    -1,    -1,    -1,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    43,    -1,
        -1,    -1,    -1,    -1,    -1,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    -1,    -1,    -1,    -1,    -1,    -1,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        42,    -1,    -1,    -1,    -1,    -1,    -1,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    -1,    -1,    -1,    -1,
        -1,    -1,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    41,    -1,    -1,    -1,    -1,    -1,    -1,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    -1,    -1,
        -1,    -1,    -1,    -1,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    40,    -1,    -1,    -1,    -1,    -1,
        -1,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        -1,    -1,    -1,    -1,    -1,    -1,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    39,    -1,    -1,    -1,
        -1,    -1,    -1,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    -1,    -1,    -1,    -1,    -1,    -1,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    38,    -1,
        -1,    -1,    -1,    -1,    -1,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    -1,    -1,    -1,    -1,    -1,    -1,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        37,    -1,    -1,    -1,    -1,    -1,    -1,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    -1,    -1,    -1,    -1,
        -1,    -1,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    36,    -1,    -1,    -1,    -1,    -1,    -1,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    29,    -1,    -1,    -1,
        -1,    -1,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    -1,    -1,    -1,    -1,    -1,    -1,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    28,    -1,
        -1,    -1,    -1,    -1,    -1,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    -1,    -1,    -1,    -1,    -1,    -1,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        27,    -1,    -1,    -1,    -1,    -1,    -1,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    -1,    -1,    -1,    -1,
        -1,    -1,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    26,    -1,    -1,    -1,    -1,    -1,    -1,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    -1,    -1,
        -1,    -1,    -1,    -1,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,   144,   144,   144,   144,   144,   144,
       144,   144,   144,    -1,    -1,    -1,    -1,    -1,    -1,   144,
       144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
       144,   144,   144,   144,   144,   144,   144,   144,   144,   143,
       143,   143,   143,   143,   143,   143,   143,   143,    -1,    -1,
        -1,    -1,    -1,    -1,   143,   143,   143,   143,   143,   143,
       143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
       143,   143,   143,   143,     7,     7,     7,     7,     7,     7,
         7,     7,     7,    58,    -1,    -1,    -1,    -1,    58,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,    -1,
        -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,
        58,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,
        58,    -1,    -1,    58,    -1,    58,    58,    -1,    58,
]; 
var jjlexclassTable1 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     4,     5,     6,     7,     8,     9,    10,
        11,    12,    13,    14,    15,    16,    17,    18,    19,    19,
        19,    19,    19,    19,    19,    19,    19,    19,    20,    21,
        22,    23,    24,    25,     0,    26,    27,    27,    28,    29,
        27,    30,    30,    30,    30,    30,    30,    30,    31,    32,
        30,    30,    33,    30,    30,    30,    30,    30,    34,    30,
        30,    35,    36,    37,    38,    39,    40,    41,    42,    43,
        44,    45,    46,    30,    47,    48,    30,    49,    50,    51,
        52,    53,    54,    30,    55,    56,    57,    58,    30,    59,
        60,    30,    30,    61,    62,    63,    64,     0,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,
]; 
var jjlexunicodeClassTable1 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1 = [ 
    0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,
    1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,
    1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,
    0,0,1,0,1,0,1,1,1,1,1,0,1,1,1,
    1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,
    1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,
    1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,
    1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,
    0,1,
]; 
var jjlexhasArc1 = [ 
    1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,
    0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,
    0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,
    0,1,0,0,1,1,1,1,0,0,0,1,0,1,1,
    0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,
    0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,
    1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,
    1,0,
]; 
var jjlextable1 = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2 = [ 
         1,     2,     3,     4,     8,     5,     6,     1,     2,     3,
         1,     7,     3,     1,     2,     3,     1,     2,     3,    10,
        10,     9,     9,    10,    10,     9,     9,
]; 
var jjlexdisnext2 = [ 
         0,    16,    13,    10,    -1,    21,    -7,     7,    19,    17,
        15,
]; 
var jjlexchecknext2 = [ 
         0,     0,     0,     0,     4,     0,     0,     7,     7,     7,
         3,     3,     3,     2,     2,     2,     1,     1,     1,    10,
        10,     9,     9,     8,     8,     5,     5,
]; 
var jjlexclassTable2 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,    -1,    -1,    -1,     3,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,    -1,    -1,    -1,    -1,    -1,    -1,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     6,    -1,    -1,    -1,    -1,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,
]; 
var jjlexunicodeClassTable2 = [ 
    
]; 
var jjlexisEnd2 = [ 
    0,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc2 = [ 
    1,1,1,1,1,1,0,1,1,1,1,
]; 
var jjlextable2 = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
var jjlexpnext3 = [ 
         1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
         4,     1,     1,     1,     1,     1,     1,    15,     7,     1,
         1,     1,     1,     1,     1,     1,     8,     1,     1,     1,
         1,     1,     9,    10,    -1,    10,    10,    11,    -1,    10,
        10,    10,     9,    10,    -1,    10,    10,    11,    -1,    10,
        10,    10,    16,    -1,    16,    16,    -1,    -1,    16,    16,
        16,    16,    17,    16,    16,    -1,    -1,    16,    16,    16,
        20,    17,    20,    20,    -1,    -1,    20,    20,    20,    20,
        -1,    20,    20,    -1,    -1,    20,    20,    20,    13,    18,
        13,    18,    -1,    -1,    -1,    18,    -1,    13,    13,    13,
        14,     5,     5,    -1,    -1,     5,     5,     5,     6,    19,
        19,    -1,    -1,    19,    19,    19,    12,    12,    -1,    -1,
        12,    12,    12,    18,    -1,    18,    -1,    -1,    -1,    18,
    
]; 
var jjlexdisnext3 = [ 
         0,    16,   -16,    94,    16,    38,   109,   -16,    87,    11,
        28,   -16,    56,   -16,   118,   102,    47,   -16,    84,    74,
        65,
]; 
var jjlexchecknext3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,     9,     4,     1,
         1,     1,     1,     1,     1,     1,     4,     1,     1,     1,
         1,     1,    10,    10,    -1,    10,    10,    10,    -1,    10,
        10,    10,     5,     5,    -1,     5,     5,     5,    -1,     5,
         5,     5,    16,    -1,    16,    16,    -1,    -1,    16,    16,
        16,    12,    16,    12,    12,    -1,    -1,    12,    12,    12,
        20,    12,    20,    20,    -1,    -1,    20,    20,    20,    19,
        -1,    19,    19,    -1,    -1,    19,    19,    19,     8,    18,
         8,    18,    -1,    -1,    -1,    18,    -1,     8,     8,     8,
         8,     3,     3,    -1,    -1,     3,     3,     3,     3,    15,
        15,    -1,    -1,    15,    15,    15,     6,     6,    -1,    -1,
         6,     6,     6,    14,    -1,    14,    -1,    -1,    -1,    14,
    
]; 
var jjlexclassTable3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        -1,     0,     0,    -1,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     3,
         0,     0,     0,     0,     0,     4,     0,     0,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     0,     0,
         0,     0,     6,     0,     0,     7,     7,     7,     7,     7,
         7,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     9,    10,     0,     0,     0,     0,     7,    11,     7,
         7,     7,    11,     8,     8,     8,     8,     8,     8,     8,
        12,     8,     8,     8,    12,     8,    12,    13,     8,     8,
        13,     8,     8,    14,     0,    15,     0,     0,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,
]; 
var jjlexunicodeClassTable3 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd3 = [ 
    0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,
    0,0,1,1,1,1,
]; 
var jjlexhasArc3 = [ 
    1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,
    1,1,0,1,1,1,
]; 
var jjlextable3 = {
    pnext: jjlexpnext3,
    disnext: jjlexdisnext3,
    checknext: jjlexchecknext3,
    maxAsicii: 255,
    classTable: jjlexclassTable3,
    unicodeClassTable: jjlexunicodeClassTable3,
    isEnd: jjlexisEnd3,
    hasArc: jjlexhasArc3
};
var jjlexpnext4 = [ 
         1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
         4,     1,     1,     1,     1,     1,     1,     1,     7,     1,
         1,     1,     1,     1,     1,     8,    15,     1,     1,     1,
         1,     1,     9,    10,    -1,    10,    10,    11,    -1,    -1,
        10,    10,    10,     9,    10,    -1,    10,    10,    11,    -1,
        -1,    10,    10,    10,    16,    -1,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    16,    17,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    20,    17,    20,    20,    18,    -1,
        18,    20,    20,    20,    20,    18,    20,    20,    -1,     5,
         5,    20,    20,    20,     5,     5,     5,     6,    19,    19,
        13,    -1,    -1,    19,    19,    19,    -1,    -1,    13,    -1,
        13,    13,    14,    12,    12,    18,    -1,    18,    12,    12,
        12,    -1,    18,
]; 
var jjlexdisnext4 = [ 
         0,    16,    83,    16,   -16,    40,   107,   -16,    99,    21,
        29,   -16,    60,   -16,   111,    92,    50,   -16,    74,    80,
        70,
]; 
var jjlexchecknext4 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,     1,     3,     1,
         1,     1,     1,     1,     1,     3,     9,     1,     1,     1,
         1,     1,    10,    10,    -1,    10,    10,    10,    -1,    -1,
        10,    10,    10,     5,     5,    -1,     5,     5,     5,    -1,
        -1,     5,     5,     5,    16,    -1,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    12,    16,    12,    12,    -1,    -1,
        -1,    12,    12,    12,    20,    12,    20,    20,    18,    -1,
        18,    20,    20,    20,    19,    18,    19,    19,    -1,     2,
         2,    19,    19,    19,     2,     2,     2,     2,    15,    15,
         8,    -1,    -1,    15,    15,    15,    -1,    -1,     8,    -1,
         8,     8,     8,     6,     6,    14,    -1,    14,     6,     6,
         6,    -1,    14,
]; 
var jjlexclassTable4 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     1,
         0,     0,     0,     0,     0,     3,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     0,     0,
         0,     0,     5,     0,     0,     6,     6,     6,     6,     6,
         6,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     8,     9,     0,     0,     0,    10,     6,    11,     6,
         6,     6,    11,     7,     7,     7,     7,     7,     7,     7,
        12,     7,     7,     7,    12,     7,    12,    13,     7,     7,
        13,     7,     7,    14,     0,    15,     0,     0,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,
]; 
var jjlexunicodeClassTable4 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd4 = [ 
    0,1,0,0,1,1,1,1,0,0,1,1,0,1,0,
    0,0,1,1,1,1,
]; 
var jjlexhasArc4 = [ 
    1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,
    1,1,0,1,1,1,
]; 
var jjlextable4 = {
    pnext: jjlexpnext4,
    disnext: jjlexdisnext4,
    checknext: jjlexchecknext4,
    maxAsicii: 255,
    classTable: jjlexclassTable4,
    unicodeClassTable: jjlexunicodeClassTable4,
    isEnd: jjlexisEnd4,
    hasArc: jjlexhasArc4
};
var jjlexpnext5 = [ 
         1,     2,     3,     1,     4,     1,     1,     1,     1,     1,
         1,     5,     1,     1,     1,     1,     1,     1,    19,    -1,
         1,    10,     1,     1,     1,     1,     1,     1,    11,     1,
         1,     1,     1,     1,    13,    14,    -1,    14,    14,    15,
        -1,    14,    14,    14,    13,    14,    -1,    14,    14,    15,
        -1,    14,    14,    14,    20,    -1,    20,    20,    -1,    -1,
        20,    20,    20,    20,    21,    20,    20,    -1,    -1,    20,
        20,    20,    24,    21,    24,    24,    -1,    -1,    24,    24,
        24,    24,    -1,    24,    24,    -1,    -1,    24,    24,    24,
        12,    -1,    12,    12,    -1,    -1,    12,    12,    12,    12,
        -1,    12,    12,    -1,    -1,    12,    12,    12,     8,     8,
         7,    -1,     8,     8,     8,     9,    -1,     6,     6,    -1,
        -1,     6,     6,     6,    23,    23,    17,    -1,    23,    23,
        23,    -1,    -1,    -1,    17,    17,    17,    18,    16,    16,
        -1,    -1,    16,    16,    16,     6,     6,    -1,    -1,     6,
         6,     6,     6,     6,    -1,    -1,     6,     6,     6,    22,
        22,    22,    22,    -1,    -1,    22,    22,
]; 
var jjlexdisnext5 = [ 
         0,    17,   144,   109,   100,    17,    93,   137,    39,   130,
       -17,   123,    84,    11,    29,   -17,    57,   -17,   154,   116,
        48,   -17,   153,    75,    66,
]; 
var jjlexchecknext5 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     1,    13,    -1,
         1,     5,     1,     1,     1,     1,     1,     1,     5,     1,
         1,     1,     1,     1,    14,    14,    -1,    14,    14,    14,
        -1,    14,    14,    14,     8,     8,    -1,     8,     8,     8,
        -1,     8,     8,     8,    20,    -1,    20,    20,    -1,    -1,
        20,    20,    20,    16,    20,    16,    16,    -1,    -1,    16,
        16,    16,    24,    16,    24,    24,    -1,    -1,    24,    24,
        24,    23,    -1,    23,    23,    -1,    -1,    23,    23,    23,
        12,    -1,    12,    12,    -1,    -1,    12,    12,    12,     6,
        -1,     6,     6,    -1,    -1,     6,     6,     6,     4,     4,
         3,    -1,     4,     4,     4,     4,    -1,     3,     3,    -1,
        -1,     3,     3,     3,    19,    19,    11,    -1,    19,    19,
        19,    -1,    -1,    -1,    11,    11,    11,    11,     9,     9,
        -1,    -1,     9,     9,     9,     7,     7,    -1,    -1,     7,
         7,     7,     2,     2,    -1,    -1,     2,     2,     2,    22,
        18,    22,    18,    -1,    -1,    22,    18,
]; 
var jjlexclassTable5 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         1,     0,     0,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     3,     0,     4,     0,     0,     3,
         0,     0,     0,     0,     0,     5,     0,     0,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     0,     0,
         0,     0,     7,     0,     0,     8,     8,     8,     8,     8,
         8,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,    10,    11,     0,     0,     0,     0,     8,    12,     8,
         8,     8,    12,     9,     9,     9,     9,     9,     9,     9,
        13,     9,     9,     9,    13,     9,    13,    14,     9,     9,
        14,     9,     9,    15,     0,    16,     0,     0,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,
]; 
var jjlexunicodeClassTable5 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd5 = [ 
    0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,
    1,0,1,0,0,0,1,1,1,1,
]; 
var jjlexhasArc5 = [ 
    1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
    0,1,0,1,1,1,0,1,1,1,
]; 
var jjlextable5 = {
    pnext: jjlexpnext5,
    disnext: jjlexdisnext5,
    checknext: jjlexchecknext5,
    maxAsicii: 255,
    classTable: jjlexclassTable5,
    unicodeClassTable: jjlexunicodeClassTable5,
    isEnd: jjlexisEnd5,
    hasArc: jjlexhasArc5
};
var jjlexpnext6 = [ 
         1,     2,     3,     1,     1,     1,     6,     6,     1,     1,
         6,     6,     5,     4,     4,     4,
]; 
var jjlexdisnext6 = [ 
         0,     5,    10,    11,     7,     9,     3,
]; 
var jjlexchecknext6 = [ 
         0,     0,     0,     0,     0,     1,     6,     6,     1,     1,
         4,     4,     3,     5,     2,     3,
]; 
var jjlexclassTable6 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         1,     0,     0,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     0,     0,
         0,     0,     0,     0,     0,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     0,     0,     0,     0,     0,     0,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     0,     0,     0,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexunicodeClassTable6 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd6 = [ 
    0,1,1,1,1,1,1,
]; 
var jjlexhasArc6 = [ 
    1,1,1,1,1,1,1,
]; 
var jjlextable6 = {
    pnext: jjlexpnext6,
    disnext: jjlexdisnext6,
    checknext: jjlexchecknext6,
    maxAsicii: 255,
    classTable: jjlexclassTable6,
    unicodeClassTable: jjlexunicodeClassTable6,
    isEnd: jjlexisEnd6,
    hasArc: jjlexhasArc6
};
/*
    dfa tables
*/
var jjdfaTables = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
    jjlextable3,
    jjlextable4,
    jjlextable5,
    jjlextable6,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc, c){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,     1,     1,     1,     1,     2,     1,     1,     1,    -1,
        -1,    -1,
]; 
var jjlexTokens1 = [ 
        -1,    -1,    -1,    -1,    65,     7,    -1,     9,    19,    40,
        -1,    52,    53,    14,    12,    56,    13,    78,    15,     5,
        18,    59,    21,    28,    20,    17,     3,     3,     3,     3,
        54,    55,    42,    -1,     8,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,    57,    41,    58,    43,    -1,
        26,    -1,    10,    39,    60,    34,    -1,     6,    -1,    16,
        31,    44,    29,    45,    30,    51,     4,    -1,    -1,    33,
         4,    -1,    46,    23,    24,    50,    22,    47,    -1,     3,
         3,    62,     3,    36,    -1,     3,     3,    70,     3,     3,
         3,     3,    66,     3,     3,     3,     3,    35,    61,    27,
        10,    -1,    -1,    32,    -1,    -1,    -1,     4,    -1,     4,
        -1,    38,    25,    37,    63,    64,    -1,     3,     3,     3,
         3,    71,     3,     3,     3,    74,     3,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,     3,     3,    68,    67,     3,    73,
         3,     3,    -1,    -1,    -1,    -1,    -1,    75,     3,     3,
         3,    69,    -1,    -1,    48,    48,    -1,    -1,     3,     3,
        77,    -1,    -1,    -1,    -1,    48,    -1,     3,     3,    49,
        49,    -1,    76,    72,    49,    -1,    -1,    -1,    -1,    -1,
        -1,    11,
]; 
var jjlexTokens2 = [ 
        -1,    -1,    -1,    -1,     9,     3,    57,    -1,    10,     3,
        10,
]; 
var jjlexTokens3 = [ 
        -1,    79,     7,    -1,    -1,    81,    84,    79,    -1,    -1,
        81,    83,    -1,    79,    -1,    -1,    -1,    81,    79,    82,
        82,
]; 
var jjlexTokens4 = [ 
        -1,    79,    -1,    -1,     8,    81,    84,    79,    -1,    -1,
        81,    83,    -1,    79,    -1,    -1,    -1,    81,    79,    82,
        82,
]; 
var jjlexTokens5 = [ 
        -1,    79,    79,    79,    -1,    -1,    80,    79,    81,    84,
        79,    -1,    80,    -1,    81,    83,    -1,    79,    -1,    -1,
        -1,    81,    79,    82,    82,
]; 
var jjlexTokens6 = [ 
        -1,    79,    79,    79,    80,    79,    80,
]; 

var jjstateCount = 300;
var jjtokenCount = 86;
var jjactERR = 301;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
       151,   142,    55,    53,    52,    54,    18,    19,    24,    23,
       299,    42,    43,   159,   157,   160,   161,   162,   163,   246,
        95,    96,    98,    24,    23,    97,    93,    94,    95,    96,
        98,   296,   294,    97,    75,    76,    77,    78,    79,    80,
        81,    82,    45,    46,    47,   293,   284,    20,    21,   -40,
       -38,    41,   -40,    56,    85,   282,   138,   295,   139,   273,
        87,    86,   274,   277,    44,   152,    14,   143,   145,   146,
       147,    49,    17,   276,   149,   150,   148,   151,   142,    55,
        53,    52,    54,    18,    19,    24,    23,    25,    42,    43,
       254,   271,    99,   159,   157,   160,   161,   162,   163,   245,
       212,   136,    93,    94,    95,    96,    98,    24,    23,    97,
        75,    76,    77,    78,    79,    80,    81,    82,   265,    45,
        46,    47,    24,    23,    20,    21,   -39,   260,    41,   -39,
        56,   259,   258,   138,   272,   139,    87,    86,    95,    96,
        98,    44,   152,    97,   143,   145,   146,   147,    49,    17,
        14,   149,   150,   148,   151,   142,    55,    53,    52,    54,
        18,    19,    24,    23,   -39,    42,    43,   -39,    99,   116,
        64,   159,   115,   160,   161,   162,   163,   256,    13,    93,
        94,    95,    96,    98,   251,   242,    97,    75,    76,    77,
        78,    79,    80,    81,    82,   241,    45,    46,    47,   236,
        98,    20,    21,    98,    98,    41,    98,    56,   230,    12,
       138,   252,   139,    87,    86,    12,   211,   226,    44,   152,
       224,   143,   145,   146,   147,    49,    17,   125,   149,   150,
       148,   151,   142,    55,    53,    52,    54,    18,    19,    24,
        23,     8,    42,    43,   221,    99,   100,   101,   102,   104,
       103,   105,   106,   107,   108,   109,   110,   111,   218,   217,
       215,   210,   112,   113,    93,    94,    95,    96,    98,   -39,
       238,    97,   -39,    45,    46,    47,    24,    23,    20,    21,
       209,    29,    41,   203,    56,    29,   135,   138,   159,   139,
       160,   161,   162,   163,   126,    44,   152,   125,   143,   145,
       146,   147,     9,    17,   -37,   149,   150,   148,   151,   142,
        55,    53,    52,    54,    18,    19,    24,    23,    71,    42,
        43,    95,    96,    98,   239,    70,    97,    68,    29,    63,
        99,    58,    57,    93,    94,    95,    96,    98,    26,    15,
        97,    93,    94,    95,    96,    98,    10,     4,    97,     0,
        45,    46,    47,     0,     0,    20,    21,     0,     0,    41,
         0,    56,     0,     0,   138,     0,   139,    87,    86,     0,
         0,     0,    44,   152,     0,   143,   145,   146,   147,    49,
        17,     0,   149,   150,   148,   151,   142,    55,    53,    52,
        54,    18,    19,    24,    23,     0,    42,    43,     0,    99,
         0,     0,     0,     0,     0,     0,     0,    99,     0,     0,
        93,    94,    95,    96,    98,     0,     0,    97,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
         0,     0,    20,    21,     0,     0,    41,     0,    56,     0,
         0,   138,     0,   139,    87,    86,     0,     0,     0,    44,
       152,     0,   143,   145,   146,   147,    49,    17,     0,   149,
       150,   148,   151,   142,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,    99,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,     0,     0,    97,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    45,    46,    47,     0,     0,    20,
        21,     0,     0,    41,     0,    56,     0,     0,   138,     0,
       139,    87,    86,     0,     0,     0,    44,   152,     0,   143,
       145,   146,   147,    49,    17,     0,   149,   150,   148,   151,
       142,    55,    53,    52,    54,    18,    19,    24,    23,     0,
        42,    43,     0,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    93,    94,    95,    96,    98,     0,
         0,    97,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    45,    46,    47,     0,     0,    20,    21,     0,     0,
        41,     0,    56,     0,     0,   138,     0,   139,    87,    86,
         0,     0,     0,    44,   152,     0,   143,   145,   146,   147,
        49,    17,     0,   149,   150,   148,   151,   142,    55,    53,
        52,    54,    18,    19,    24,    23,     0,    42,    43,     0,
        99,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,     0,     0,
        97,     0,     0,     0,     0,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,   138,     0,   139,     0,     0,    87,    86,     0,
        44,   152,     0,   143,   145,   146,   147,    49,    17,     0,
       149,   150,   148,    93,    94,    95,    96,    98,    74,     0,
        97,    75,    76,    77,    78,    79,    80,    81,    82,    99,
         0,     0,    93,    94,    95,    96,    98,     0,     0,    97,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,   292,     0,     0,     0,     0,     0,
         0,    88,    89,    90,    92,    91,    87,    86,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,    74,    99,
        97,    75,    76,    77,    78,    79,    80,    81,    82,     0,
         0,     0,    93,    94,    95,    96,    98,     0,    99,    97,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   281,
         0,    88,    89,    90,    92,    91,    87,    86,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,    74,    99,
        97,    75,    76,    77,    78,    79,    80,    81,    82,     0,
         0,     0,    93,    94,    95,    96,    98,     0,    99,    97,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   280,
         0,    88,    89,    90,    92,    91,    87,    86,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,    74,    99,
        97,    75,    76,    77,    78,    79,    80,    81,    82,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    99,     0,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,     0,     0,   279,     0,     0,     0,
         0,    88,    89,    90,    92,    91,     0,     0,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,    74,    99,
        97,    75,    76,    77,    78,    79,    80,    81,    82,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
         0,    88,    89,    90,    92,    91,     0,     0,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,    74,    99,
        97,    75,    76,    77,    78,    79,    80,    81,    82,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,   275,     0,     0,     0,     0,     0,
         0,    88,    89,    90,    92,    91,     0,     0,     0,   253,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    99,
        93,    94,    95,    96,    98,    74,     0,    97,    75,    76,
        77,    78,    79,    80,    81,    82,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    85,    84,
        83,     0,     0,     0,    87,    86,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    88,    89,
        90,    92,    91,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    99,    93,    94,    95,
        96,    98,    74,   233,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    45,    46,    47,     0,     0,    20,    21,
         0,     0,    41,     0,    56,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,    44,     0,     0,     0,     0,
         0,     0,    49,    17,   220,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   216,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,   206,     0,
         0,     0,     0,     0,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,    72,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,    69,     0,
         0,     0,     0,     0,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    45,    46,    47,     0,     0,    20,    21,
         0,     0,    41,     0,    56,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,    44,     0,     0,     0,     0,
         0,     0,    49,    17,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    45,    46,    47,     0,     0,    20,    21,
         0,     0,    41,     0,    56,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,    44,     0,     0,     0,     0,
         0,     0,    49,    17,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    45,    46,    47,     0,     0,    20,    21,
         0,     0,    41,     0,    56,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,    44,     0,     0,     0,     0,
         0,     0,    49,    17,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    45,    46,    47,     0,     0,    20,    21,
         0,     0,    41,     0,    56,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,    44,     0,     0,     0,     0,
         0,     0,    49,    17,     0,    88,    89,    90,    92,    91,
         0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
        96,    98,    74,    99,    97,    75,    76,    77,    78,    79,
        80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    88,    89,    93,    94,    95,
        96,    98,    74,     0,    97,    75,    76,    77,    78,    79,
        80,    81,    82,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    85,    84,    83,     0,     0,
         0,    87,    86,     0,     0,     0,     0,     0,     0,     0,
        93,    94,    95,    96,    98,    88,    89,    97,    75,    76,
        77,    78,    79,    80,    81,    82,     0,     0,     0,     0,
         0,     0,     0,    99,     0,     0,     0,     0,    85,    84,
        83,     0,     0,     0,    87,    86,     0,     0,     0,     0,
         0,     0,     0,    93,    94,    95,    96,    98,    88,    89,
        97,    75,    76,    77,    78,    79,    80,    81,    82,     0,
         0,     0,     0,     0,     0,     0,    99,     0,     0,     0,
         0,    85,    84,    83,     0,     0,     0,    87,    86,     0,
         0,     0,     0,     0,     0,     0,    93,    94,    95,    96,
        98,    88,    89,    97,    75,    76,    77,    78,    79,    80,
        81,    82,     0,     0,     0,     0,     0,     0,     0,    99,
         0,     0,     0,     0,    85,    84,    83,     0,     0,     0,
        87,    86,    55,    53,    52,    54,    18,    19,    24,    23,
         0,    42,    43,     0,    88,     0,     0,   165,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    99,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    45,    46,    47,     0,     0,    20,    21,     0,
         0,    41,     0,    56,     0,     0,    55,    53,    52,    54,
        18,    19,    24,    23,    44,    42,    43,     0,     0,     0,
         0,    49,    17,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    55,    53,    52,    54,    18,    19,    24,    23,
         0,    42,    43,     0,     0,     0,    45,    46,    47,     0,
         0,    20,    21,     0,     0,    41,     0,    56,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
         0,     0,    45,    46,    47,    49,    17,    20,    21,     0,
         0,    41,     0,    56,     0,     0,    55,    53,    52,    54,
        18,    19,    24,    23,    44,    42,    43,     0,     0,     0,
         0,    49,    17,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    55,    53,    52,    54,    18,    19,    24,    23,
         0,    42,    43,     0,     0,     0,    45,    46,    47,     0,
         0,    20,    21,     0,     0,    41,     0,    56,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
         0,     0,    45,    46,    47,    49,    17,    20,    21,     0,
         0,    41,     0,    56,     0,     0,    55,    53,    52,    54,
        18,    19,    24,    23,    44,    42,    43,     0,     0,     0,
         0,    49,    17,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    55,    53,    52,    54,    18,    19,    24,    23,
         0,    42,    43,     0,     0,     0,    45,    46,    47,     0,
         0,    20,    21,     0,     0,    41,     0,    56,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
         0,     0,    45,    46,    47,    49,    17,    20,    21,     0,
         0,    41,     0,    56,     0,     0,    55,    53,    52,    54,
        18,    19,    24,    23,    44,    42,    43,     0,     0,     0,
         0,    49,    17,     0,     0,     0,     0,     0,     0,     0,
        93,    94,    95,    96,    98,     0,     0,    97,    75,    76,
        77,    78,    79,    80,    81,    82,    45,    46,    47,     0,
         0,    20,    21,     0,     0,    41,     0,    56,    85,    84,
        83,     0,     0,     0,    87,    86,     0,     0,    44,     0,
         0,     0,     0,     0,     0,    49,    17,    55,    53,    52,
        54,    18,    19,    24,    23,     0,    42,    43,     0,     0,
         0,     0,     0,     0,     0,     0,    99,     0,     0,     0,
         0,     0,     0,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,     0,     0,    45,    46,    47,
         0,     0,    20,    21,     0,     0,    41,     0,    56,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
         0,     0,     0,    45,    46,    47,    49,    17,    20,    21,
         0,     0,    41,     0,    56,     0,     0,    55,    53,    52,
        54,    18,    19,    24,    23,    44,    42,    43,     0,     0,
         0,     0,    49,    17,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    55,    53,    52,    54,    18,    19,    24,
        23,     0,    42,    43,     0,     0,     0,    45,    46,    47,
         0,     0,    20,    21,     0,     0,    41,     0,    56,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
         0,     0,     0,    45,    46,    47,    49,    17,    20,    21,
         0,     0,    41,     0,    56,     0,     0,    55,    53,    52,
        54,    18,    19,    24,    23,    44,    42,    43,     0,     0,
         0,     0,    49,    17,     0,     0,     0,     0,     0,     0,
         0,    93,    94,    95,    96,    98,     0,     0,    97,    75,
        76,    77,    78,    79,    80,    81,    82,    45,    46,    47,
         0,     0,    20,    21,     0,     0,    41,     0,    56,    85,
        84,    83,     0,     0,     0,    87,    86,     0,     0,    44,
         0,     0,     0,     0,     0,     0,    49,    17,    55,    53,
        52,    54,    18,    19,    24,    23,     0,    42,    43,     0,
         0,     0,     0,     0,     0,     0,     0,    99,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,    55,    53,
        52,    54,    18,    19,    24,    23,    44,    42,    43,     0,
         0,     0,     0,    49,    17,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    53,    52,    54,    18,    19,
        24,    23,     0,    42,    43,     0,     0,     0,    45,    46,
        47,     0,     0,    20,    21,     0,     0,    41,     0,    56,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,     0,     0,     0,    45,    46,    47,    49,    17,    20,
        21,     0,     0,    41,     0,    56,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    44,     0,    93,    94,
        95,    96,    98,    49,    17,    97,    75,    76,    77,    78,
        79,    80,    81,    82,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    85,     0,    83,     0,
         0,     0,    87,    86,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    99,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -86,   347,   230,   -86,   -86,   -86,   -86,   294,   175,   286,
      1895,   -86,   286,  5451,   273,   -86,   279,   -86,   -86,   -86,
       -86,   277,   -86,   113,  5425,   318,   271,   -86,   -86,  1835,
      1415,   269,  1775,   262,   -86,  1355,   218,   -86,   252,   118,
      5371,  5345,  5291,  5265,  5211,    98,    14,   -86,   245,   -86,
       -86,   -86,   -86,   -86,   242,  5185,   -86,  5131,   -86,   -86,
       -86,   -86,  5105,  5051,   -86,  1715,   233,   275,   -86,  5025,
      4971,  4945,   -86,  2829,  4891,  4865,  4811,  4785,  4731,  4705,
      4651,  4625,  4571,  4545,  4491,  4465,  4411,  4385,  4331,  4305,
      4251,  4225,  4171,  4145,  4091,  4065,  4011,  3985,  3931,  3905,
      3851,  3825,  3771,  3745,  3691,  3665,  3611,  3585,  3531,  3505,
      3451,   -86,   -86,   231,  3425,   -86,  1295,   -86,   -86,  3369,
       167,   113,   -86,    75,   271,  3354,   225,   208,   209,    92,
       -86,   -86,   207,  1235,   202,   206,   -86,   -86,   -86,  1175,
       243,  3300,  3274,   -86,   168,   615,   165,  3220,   210,   204,
       -86,   156,  1655,   -86,  1595,   -86,   -86,   -86,   -86,   -86,
       -86,   -86,   -86,  1115,  3194,   820,   760,   700,   631,   552,
       475,   398,   321,    14,  5506,    90,   329,   252,  3138,  2784,
      2655,  2605,  2555,   307,   124,   190,   188,   187,   184,     6,
      2505,  2455,  2405,  2355,  2305,  2255,  2205,  2155,  2105,  2055,
      2005,  1955,  3123,   144,   267,    -2,   142,   132,   -86,   -86,
       -86,   -86,    14,   -66,   -86,   -86,   -86,   174,   153,   -86,
       -86,  1048,    31,  3069,   108,  3043,    73,    72,    68,  2989,
      2963,  2909,  2883,  2741,    65,   -86,   -86,   -86,  1880,   -86,
        27,   -86,   -86,   -86,   -86,   -86,    35,  1535,    76,     6,
       -86,   -86,   -86,   -86,   981,    21,     4,   -86,   -86,   -86,
       921,   861,   801,  2698,   -86,   -86,   741,    -2,   -86,   -86,
      1760,   -86,   -86,    36,   538,  1640,  1520,   461,   -86,   -86,
       -86,   -86,  1475,   -86,   -86,   681,   -14,   -35,   -86,   -86,
        -1,   -28,  1160,   384,   -86,   -86,   -43,   -86,   307,   -86,
    
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
       290,   290,   290,   290,   290,   290,   290,   290,   290,   290,
       296,   290,   290,   213,   213,   213,   213,   213,   213,   213,
       189,   189,   189,    46,    46,   189,   173,   173,   173,   173,
       173,   291,   287,   173,   173,   173,   173,   173,   173,   173,
       173,   173,   290,   290,   290,   286,   273,   290,   290,   205,
       205,   290,   205,   290,   173,   267,   290,   290,   290,   249,
       173,   173,   249,   256,   290,   290,    46,   290,   290,   290,
       290,   290,   290,   255,   290,   290,   290,   248,   248,   248,
       248,   248,   248,   248,   248,   248,   248,   222,   248,   248,
       222,   246,   173,   212,   212,   212,   212,   212,   212,   212,
       129,   240,   175,   175,   175,   175,   175,    45,    45,   175,
       175,   175,   175,   175,   175,   175,   175,   175,   234,   248,
       248,   248,    23,    23,   248,   248,   123,   228,   248,   123,
       248,   227,   226,   248,   248,   248,   175,   175,   184,   184,
       184,   248,   248,   184,   248,   248,   248,   248,   248,   248,
        45,   248,   248,   248,   218,   218,   218,   218,   218,   218,
       218,   218,   218,   218,   121,   218,   218,   121,   175,    39,
        23,   129,    39,   129,   129,   129,   129,   224,     8,   120,
       120,   120,   120,   120,   217,   207,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   206,   218,   218,   218,   203,
       188,   218,   218,   187,   186,   218,   185,   218,   151,   149,
       218,   218,   218,   120,   120,   148,   128,   146,   218,   218,
       144,   218,   218,   218,   218,   218,   218,     8,   218,   218,
       218,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,   140,   120,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,   135,   134,
       132,   127,    36,    36,   177,   177,   177,   177,   177,    36,
       204,   177,    36,     2,     2,     2,   204,   204,     2,     2,
       126,   124,     2,   113,     2,    67,    66,     2,   128,     2,
       128,   128,   128,   128,    54,     2,     2,    48,     2,     2,
         2,     2,     2,     2,    38,     2,     2,     2,   298,   298,
       298,   298,   298,   298,   298,   298,   298,   298,    33,   298,
       298,   183,   183,   183,   204,    31,   183,    26,    25,    21,
       177,    16,    14,   172,   172,   172,   172,   172,    12,     9,
       172,   176,   176,   176,   176,   176,     7,     1,   176,     0,
       298,   298,   298,     0,     0,   298,   298,     0,     0,   298,
         0,   298,     0,     0,   298,     0,   298,   172,   172,     0,
         0,     0,   298,   298,     0,   298,   298,   298,   298,   298,
       298,     0,   298,   298,   298,   293,   293,   293,   293,   293,
       293,   293,   293,   293,   293,     0,   293,   293,     0,   172,
         0,     0,     0,     0,     0,     0,     0,   176,     0,     0,
       171,   171,   171,   171,   171,     0,     0,   171,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   293,   293,   293,
         0,     0,   293,   293,     0,     0,   293,     0,   293,     0,
         0,   293,     0,   293,   171,   171,     0,     0,     0,   293,
       293,     0,   293,   293,   293,   293,   293,   293,     0,   293,
       293,   293,   277,   277,   277,   277,   277,   277,   277,   277,
       277,   277,     0,   277,   277,     0,   171,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   170,   170,   170,
       170,   170,     0,     0,   170,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   277,   277,   277,     0,     0,   277,
       277,     0,     0,   277,     0,   277,     0,     0,   277,     0,
       277,   170,   170,     0,     0,     0,   277,   277,     0,   277,
       277,   277,   277,   277,   277,     0,   277,   277,   277,   274,
       274,   274,   274,   274,   274,   274,   274,   274,   274,     0,
       274,   274,     0,   170,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   169,   169,   169,   169,   169,     0,
         0,   169,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   274,   274,   274,     0,     0,   274,   274,     0,     0,
       274,     0,   274,     0,     0,   274,     0,   274,   169,   169,
         0,     0,     0,   274,   274,     0,   274,   274,   274,   274,
       274,   274,     0,   274,   274,   274,   145,   145,   145,   145,
       145,   145,   145,   145,   145,   145,     0,   145,   145,     0,
       169,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   168,   168,   168,   168,   168,     0,     0,
       168,     0,     0,     0,     0,     0,     0,     0,   145,   145,
       145,     0,     0,   145,   145,     0,     0,   145,     0,   145,
         0,     0,   145,     0,   145,     0,     0,   168,   168,     0,
       145,   145,     0,   145,   145,   145,   145,   145,   145,     0,
       145,   145,   145,   285,   285,   285,   285,   285,   285,     0,
       285,   285,   285,   285,   285,   285,   285,   285,   285,   168,
         0,     0,   167,   167,   167,   167,   167,     0,     0,   167,
         0,   285,   285,   285,     0,     0,     0,   285,   285,     0,
         0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
         0,   285,   285,   285,   285,   285,   167,   167,     0,     0,
         0,     0,     0,   266,   266,   266,   266,   266,   266,   285,
       266,   266,   266,   266,   266,   266,   266,   266,   266,     0,
         0,     0,   166,   166,   166,   166,   166,     0,   167,   166,
         0,   266,   266,   266,     0,     0,     0,   266,   266,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   266,
         0,   266,   266,   266,   266,   266,   166,   166,     0,     0,
         0,     0,     0,   262,   262,   262,   262,   262,   262,   266,
       262,   262,   262,   262,   262,   262,   262,   262,   262,     0,
         0,     0,   165,   165,   165,   165,   165,     0,   166,   165,
         0,   262,   262,   262,     0,     0,     0,   262,   262,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   262,
         0,   262,   262,   262,   262,   262,   165,   165,     0,     0,
         0,     0,     0,   261,   261,   261,   261,   261,   261,   262,
       261,   261,   261,   261,   261,   261,   261,   261,   261,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
         0,   261,   261,   261,     0,     0,     0,   261,   261,     0,
         0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
         0,   261,   261,   261,   261,   261,     0,     0,     0,     0,
         0,     0,     0,   260,   260,   260,   260,   260,   260,   261,
       260,   260,   260,   260,   260,   260,   260,   260,   260,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   260,   260,   260,     0,     0,     0,   260,   260,     0,
         0,     0,     0,     0,   260,     0,     0,     0,     0,     0,
         0,   260,   260,   260,   260,   260,     0,     0,     0,     0,
         0,     0,     0,   254,   254,   254,   254,   254,   254,   260,
       254,   254,   254,   254,   254,   254,   254,   254,   254,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   254,   254,   254,     0,     0,     0,   254,   254,     0,
         0,     0,     0,     0,   254,     0,     0,     0,     0,     0,
         0,   254,   254,   254,   254,   254,     0,     0,     0,   221,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   254,
       221,   221,   221,   221,   221,   221,     0,   221,   221,   221,
       221,   221,   221,   221,   221,   221,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   221,   221,
       221,     0,     0,     0,   221,   221,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   221,   221,
       221,   221,   221,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   221,   163,   163,   163,
       163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
       163,   163,   163,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   163,   163,   163,     0,     0,
         0,   163,   163,   292,   292,   292,   292,   292,   292,   292,
       292,     0,   292,   292,     0,   163,   163,   163,   163,   163,
         0,     0,     0,     0,     0,     0,     0,   139,   139,   139,
       139,   139,   139,   163,   139,   139,   139,   139,   139,   139,
       139,   139,   139,   292,   292,   292,     0,     0,   292,   292,
         0,     0,   292,     0,   292,   139,   139,   139,     0,     0,
         0,   139,   139,     0,     0,   292,     0,     0,     0,     0,
         0,     0,   292,   292,   139,   139,   139,   139,   139,   139,
         0,     0,     0,     0,     0,     0,     0,   133,   133,   133,
       133,   133,   133,   139,   133,   133,   133,   133,   133,   133,
       133,   133,   133,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   133,   133,   133,     0,     0,
         0,   133,   133,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   133,     0,   133,   133,   133,   133,   133,
         0,     0,     0,     0,     0,     0,     0,   116,   116,   116,
       116,   116,   116,   133,   116,   116,   116,   116,   116,   116,
       116,   116,   116,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   116,   116,   116,     0,     0,
         0,   116,   116,     0,     0,     0,     0,     0,   116,     0,
         0,     0,     0,     0,     0,   116,   116,   116,   116,   116,
         0,     0,     0,     0,     0,     0,     0,    35,    35,    35,
        35,    35,    35,   116,    35,    35,    35,    35,    35,    35,
        35,    35,    35,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    35,    35,    35,     0,     0,
         0,    35,    35,     0,     0,    35,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    35,    35,    35,    35,    35,
         0,     0,     0,     0,     0,     0,     0,    30,    30,    30,
        30,    30,    30,    35,    30,    30,    30,    30,    30,    30,
        30,    30,    30,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    30,    30,    30,     0,     0,
         0,    30,    30,     0,     0,     0,     0,     0,    30,     0,
         0,     0,     0,     0,     0,    30,    30,    30,    30,    30,
         0,     0,     0,     0,     0,     0,     0,   282,   282,   282,
       282,   282,   282,    30,   282,   282,   282,   282,   282,   282,
       282,   282,   282,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   282,   282,   282,     0,     0,
         0,   282,   282,   276,   276,   276,   276,   276,   276,   276,
       276,     0,   276,   276,     0,   282,   282,   282,   282,   282,
         0,     0,     0,     0,     0,     0,     0,   247,   247,   247,
       247,   247,   247,   282,   247,   247,   247,   247,   247,   247,
       247,   247,   247,   276,   276,   276,     0,     0,   276,   276,
         0,     0,   276,     0,   276,   247,   247,   247,     0,     0,
         0,   247,   247,     0,     0,   276,     0,     0,     0,     0,
         0,     0,   276,   276,     0,   247,   247,   247,   247,   247,
         0,     0,     0,     0,     0,     0,     0,   154,   154,   154,
       154,   154,   154,   247,   154,   154,   154,   154,   154,   154,
       154,   154,   154,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   154,   154,   154,     0,     0,
         0,   154,   154,   275,   275,   275,   275,   275,   275,   275,
       275,     0,   275,   275,     0,   154,   154,   154,   154,   154,
         0,     0,     0,     0,     0,     0,     0,   152,   152,   152,
       152,   152,   152,   154,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   275,   275,   275,     0,     0,   275,   275,
         0,     0,   275,     0,   275,   152,   152,   152,     0,     0,
         0,   152,   152,     0,     0,   275,     0,     0,     0,     0,
         0,     0,   275,   275,     0,   152,   152,   152,   152,   152,
         0,     0,     0,     0,     0,     0,     0,    65,    65,    65,
        65,    65,    65,   152,    65,    65,    65,    65,    65,    65,
        65,    65,    65,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    65,    65,    65,     0,     0,
         0,    65,    65,   270,   270,   270,   270,   270,   270,   270,
       270,     0,   270,   270,     0,    65,    65,    65,    65,    65,
         0,     0,     0,     0,     0,     0,     0,    32,    32,    32,
        32,    32,    32,    65,    32,    32,    32,    32,    32,    32,
        32,    32,    32,   270,   270,   270,     0,     0,   270,   270,
         0,     0,   270,     0,   270,    32,    32,    32,     0,     0,
         0,    32,    32,     0,     0,   270,     0,     0,     0,     0,
         0,     0,   270,   270,     0,    32,    32,    32,    32,    32,
         0,     0,     0,     0,     0,     0,     0,    29,    29,    29,
        29,    29,    29,    32,    29,    29,    29,    29,    29,    29,
        29,    29,    29,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    29,    29,    29,     0,     0,
         0,    29,    29,   238,   238,   238,   238,   238,   238,   238,
       238,     0,   238,   238,     0,    29,    29,    29,    29,    29,
         0,     0,     0,     0,     0,     0,     0,    10,    10,    10,
        10,    10,    10,    29,    10,    10,    10,    10,    10,    10,
        10,    10,    10,   238,   238,   238,     0,     0,   238,   238,
         0,     0,   238,     0,   238,    10,    10,    10,     0,     0,
         0,    10,    10,     0,     0,   238,     0,     0,     0,     0,
         0,     0,   238,   238,     0,    10,    10,    10,    10,    10,
         0,     0,     0,     0,     0,     0,     0,   201,   201,   201,
       201,   201,   201,    10,   201,   201,   201,   201,   201,   201,
       201,   201,   201,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   201,   201,   201,     0,     0,
         0,   201,   201,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   201,   201,   200,   200,   200,
       200,   200,   200,     0,   200,   200,   200,   200,   200,   200,
       200,   200,   200,   201,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   200,   200,   200,     0,     0,
         0,   200,   200,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   200,   200,   199,   199,   199,
       199,   199,   199,     0,   199,   199,   199,   199,   199,   199,
       199,   199,   199,   200,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   199,   199,   199,     0,     0,
         0,   199,   199,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   199,   199,   198,   198,   198,
       198,   198,   198,     0,   198,   198,   198,   198,   198,   198,
       198,   198,   198,   199,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   198,   198,   198,     0,     0,
         0,   198,   198,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   198,   198,   197,   197,   197,
       197,   197,   197,     0,   197,   197,   197,   197,   197,   197,
       197,   197,   197,   198,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   197,   197,   197,     0,     0,
         0,   197,   197,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   197,   197,   196,   196,   196,
       196,   196,   196,     0,   196,   196,   196,   196,   196,   196,
       196,   196,   196,   197,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   196,   196,   196,     0,     0,
         0,   196,   196,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   196,   196,   195,   195,   195,
       195,   195,   195,     0,   195,   195,   195,   195,   195,   195,
       195,   195,   195,   196,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   195,   195,   195,     0,     0,
         0,   195,   195,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   195,   195,   194,   194,   194,
       194,   194,   194,     0,   194,   194,   194,   194,   194,   194,
       194,   194,   194,   195,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   194,   194,   194,     0,     0,
         0,   194,   194,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   194,   194,   193,   193,   193,
       193,   193,   193,     0,   193,   193,   193,   193,   193,   193,
       193,   193,   193,   194,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   193,   193,   193,     0,     0,
         0,   193,   193,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   193,   193,   192,   192,   192,
       192,   192,   192,     0,   192,   192,   192,   192,   192,   192,
       192,   192,   192,   193,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   192,   192,   192,     0,     0,
         0,   192,   192,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   192,   192,   191,   191,   191,
       191,   191,   191,     0,   191,   191,   191,   191,   191,   191,
       191,   191,   191,   192,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   191,   191,   191,     0,     0,
         0,   191,   191,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   191,   191,   190,   190,   190,
       190,   190,   190,     0,   190,   190,   190,   190,   190,   190,
       190,   190,   190,   191,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   190,   190,   190,     0,     0,
         0,   190,   190,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   190,   190,   182,   182,   182,
       182,   182,   182,     0,   182,   182,   182,   182,   182,   182,
       182,   182,   182,   190,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   182,   182,   182,     0,     0,
         0,   182,   182,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   182,   182,   181,   181,   181,
       181,   181,   181,     0,   181,   181,   181,   181,   181,   181,
       181,   181,   181,   182,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   181,   181,   181,     0,     0,
         0,   181,   181,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   181,   181,   180,   180,   180,
       180,   180,   180,     0,   180,   180,   180,   180,   180,   180,
       180,   180,   180,   181,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   180,   180,   180,     0,     0,
         0,   180,   180,     0,     0,     0,     0,     0,     0,     0,
       263,   263,   263,   263,   263,   180,   180,   263,   263,   263,
       263,   263,   263,   263,   263,   263,     0,     0,     0,     0,
         0,     0,     0,   180,     0,     0,     0,     0,   263,   263,
       263,     0,     0,     0,   263,   263,     0,     0,     0,     0,
         0,     0,     0,   233,   233,   233,   233,   233,   263,   263,
       233,   233,   233,   233,   233,   233,   233,   233,   233,     0,
         0,     0,     0,     0,     0,     0,   263,     0,     0,     0,
         0,   233,   233,   233,     0,     0,     0,   233,   233,     0,
         0,     0,     0,     0,     0,     0,   179,   179,   179,   179,
       179,   233,   233,   179,   179,   179,   179,   179,   179,   179,
       179,   179,     0,     0,     0,     0,     0,     0,     0,   233,
         0,     0,     0,     0,   179,   179,   179,     0,     0,     0,
       179,   179,    73,    73,    73,    73,    73,    73,    73,    73,
         0,    73,    73,     0,   179,     0,     0,    73,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   179,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    73,    73,    73,     0,     0,    73,    73,     0,
         0,    73,     0,    73,     0,     0,   232,   232,   232,   232,
       232,   232,   232,   232,    73,   232,   232,     0,     0,     0,
         0,    73,    73,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   231,   231,   231,   231,   231,   231,   231,   231,
         0,   231,   231,     0,     0,     0,   232,   232,   232,     0,
         0,   232,   232,     0,     0,   232,     0,   232,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   232,     0,
         0,     0,   231,   231,   231,   232,   232,   231,   231,     0,
         0,   231,     0,   231,     0,     0,   230,   230,   230,   230,
       230,   230,   230,   230,   231,   230,   230,     0,     0,     0,
         0,   231,   231,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   229,   229,   229,   229,   229,   229,   229,   229,
         0,   229,   229,     0,     0,     0,   230,   230,   230,     0,
         0,   230,   230,     0,     0,   230,     0,   230,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
         0,     0,   229,   229,   229,   230,   230,   229,   229,     0,
         0,   229,     0,   229,     0,     0,   225,   225,   225,   225,
       225,   225,   225,   225,   229,   225,   225,     0,     0,     0,
         0,   229,   229,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   223,   223,   223,   223,   223,   223,   223,   223,
         0,   223,   223,     0,     0,     0,   225,   225,   225,     0,
         0,   225,   225,     0,     0,   225,     0,   225,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
         0,     0,   223,   223,   223,   225,   225,   223,   223,     0,
         0,   223,     0,   223,     0,     0,   202,   202,   202,   202,
       202,   202,   202,   202,   223,   202,   202,     0,     0,     0,
         0,   223,   223,     0,     0,     0,     0,     0,     0,     0,
       178,   178,   178,   178,   178,     0,     0,   178,   178,   178,
       178,   178,   178,   178,   178,   178,   202,   202,   202,     0,
         0,   202,   202,     0,     0,   202,     0,   202,   178,   178,
       178,     0,     0,     0,   178,   178,     0,     0,   202,     0,
         0,     0,     0,     0,     0,   202,   202,   164,   164,   164,
       164,   164,   164,   164,   164,     0,   164,   164,     0,     0,
         0,     0,     0,     0,     0,     0,   178,     0,     0,     0,
         0,     0,     0,   147,   147,   147,   147,   147,   147,   147,
       147,     0,   147,   147,     0,     0,     0,   164,   164,   164,
         0,     0,   164,   164,     0,     0,   164,     0,   164,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
         0,     0,     0,   147,   147,   147,   164,   164,   147,   147,
         0,     0,   147,     0,   147,     0,     0,   142,   142,   142,
       142,   142,   142,   142,   142,   147,   142,   142,     0,     0,
         0,     0,   147,   147,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   141,   141,   141,   141,   141,   141,   141,
       141,     0,   141,   141,     0,     0,     0,   142,   142,   142,
         0,     0,   142,   142,     0,     0,   142,     0,   142,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   142,
         0,     0,     0,   141,   141,   141,   142,   142,   141,   141,
         0,     0,   141,     0,   141,     0,     0,   125,   125,   125,
       125,   125,   125,   125,   125,   141,   125,   125,     0,     0,
         0,     0,   141,   141,     0,     0,     0,     0,     0,     0,
         0,   119,   119,   119,   119,   119,     0,     0,   119,   119,
       119,   119,   119,   119,   119,   119,   119,   125,   125,   125,
         0,     0,   125,   125,     0,     0,   125,     0,   125,   119,
       119,   119,     0,     0,     0,   119,   119,     0,     0,   125,
         0,     0,     0,     0,     0,     0,   125,   125,   114,   114,
       114,   114,   114,   114,   114,   114,     0,   114,   114,     0,
         0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
         0,     0,     0,     0,   110,   110,   110,   110,   110,   110,
       110,   110,     0,   110,   110,     0,     0,     0,   114,   114,
       114,     0,     0,   114,   114,     0,     0,   114,     0,   114,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       114,     0,     0,     0,   110,   110,   110,   114,   114,   110,
       110,     0,     0,   110,     0,   110,     0,     0,   109,   109,
       109,   109,   109,   109,   109,   109,   110,   109,   109,     0,
         0,     0,     0,   110,   110,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   108,   108,   108,   108,   108,   108,
       108,   108,     0,   108,   108,     0,     0,     0,   109,   109,
       109,     0,     0,   109,   109,     0,     0,   109,     0,   109,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       109,     0,     0,     0,   108,   108,   108,   109,   109,   108,
       108,     0,     0,   108,     0,   108,     0,     0,   107,   107,
       107,   107,   107,   107,   107,   107,   108,   107,   107,     0,
         0,     0,     0,   108,   108,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   106,   106,   106,   106,   106,   106,
       106,   106,     0,   106,   106,     0,     0,     0,   107,   107,
       107,     0,     0,   107,   107,     0,     0,   107,     0,   107,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       107,     0,     0,     0,   106,   106,   106,   107,   107,   106,
       106,     0,     0,   106,     0,   106,     0,     0,   105,   105,
       105,   105,   105,   105,   105,   105,   106,   105,   105,     0,
         0,     0,     0,   106,   106,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   104,   104,   104,   104,   104,   104,
       104,   104,     0,   104,   104,     0,     0,     0,   105,   105,
       105,     0,     0,   105,   105,     0,     0,   105,     0,   105,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       105,     0,     0,     0,   104,   104,   104,   105,   105,   104,
       104,     0,     0,   104,     0,   104,     0,     0,   103,   103,
       103,   103,   103,   103,   103,   103,   104,   103,   103,     0,
         0,     0,     0,   104,   104,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   102,   102,   102,   102,   102,   102,
       102,   102,     0,   102,   102,     0,     0,     0,   103,   103,
       103,     0,     0,   103,   103,     0,     0,   103,     0,   103,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       103,     0,     0,     0,   102,   102,   102,   103,   103,   102,
       102,     0,     0,   102,     0,   102,     0,     0,   101,   101,
       101,   101,   101,   101,   101,   101,   102,   101,   101,     0,
         0,     0,     0,   102,   102,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   100,   100,   100,   100,   100,   100,
       100,   100,     0,   100,   100,     0,     0,     0,   101,   101,
       101,     0,     0,   101,   101,     0,     0,   101,     0,   101,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       101,     0,     0,     0,   100,   100,   100,   101,   101,   100,
       100,     0,     0,   100,     0,   100,     0,     0,    99,    99,
        99,    99,    99,    99,    99,    99,   100,    99,    99,     0,
         0,     0,     0,   100,   100,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    98,    98,    98,    98,    98,    98,
        98,    98,     0,    98,    98,     0,     0,     0,    99,    99,
        99,     0,     0,    99,    99,     0,     0,    99,     0,    99,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        99,     0,     0,     0,    98,    98,    98,    99,    99,    98,
        98,     0,     0,    98,     0,    98,     0,     0,    97,    97,
        97,    97,    97,    97,    97,    97,    98,    97,    97,     0,
         0,     0,     0,    98,    98,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    96,    96,    96,    96,    96,    96,
        96,    96,     0,    96,    96,     0,     0,     0,    97,    97,
        97,     0,     0,    97,    97,     0,     0,    97,     0,    97,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        97,     0,     0,     0,    96,    96,    96,    97,    97,    96,
        96,     0,     0,    96,     0,    96,     0,     0,    95,    95,
        95,    95,    95,    95,    95,    95,    96,    95,    95,     0,
         0,     0,     0,    96,    96,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    94,    94,    94,    94,    94,    94,
        94,    94,     0,    94,    94,     0,     0,     0,    95,    95,
        95,     0,     0,    95,    95,     0,     0,    95,     0,    95,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        95,     0,     0,     0,    94,    94,    94,    95,    95,    94,
        94,     0,     0,    94,     0,    94,     0,     0,    93,    93,
        93,    93,    93,    93,    93,    93,    94,    93,    93,     0,
         0,     0,     0,    94,    94,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    92,    92,    92,    92,    92,    92,
        92,    92,     0,    92,    92,     0,     0,     0,    93,    93,
        93,     0,     0,    93,    93,     0,     0,    93,     0,    93,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        93,     0,     0,     0,    92,    92,    92,    93,    93,    92,
        92,     0,     0,    92,     0,    92,     0,     0,    91,    91,
        91,    91,    91,    91,    91,    91,    92,    91,    91,     0,
         0,     0,     0,    92,    92,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    90,    90,    90,    90,    90,    90,
        90,    90,     0,    90,    90,     0,     0,     0,    91,    91,
        91,     0,     0,    91,    91,     0,     0,    91,     0,    91,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        91,     0,     0,     0,    90,    90,    90,    91,    91,    90,
        90,     0,     0,    90,     0,    90,     0,     0,    89,    89,
        89,    89,    89,    89,    89,    89,    90,    89,    89,     0,
         0,     0,     0,    90,    90,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    88,    88,    88,    88,    88,    88,
        88,    88,     0,    88,    88,     0,     0,     0,    89,    89,
        89,     0,     0,    89,    89,     0,     0,    89,     0,    89,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        89,     0,     0,     0,    88,    88,    88,    89,    89,    88,
        88,     0,     0,    88,     0,    88,     0,     0,    87,    87,
        87,    87,    87,    87,    87,    87,    88,    87,    87,     0,
         0,     0,     0,    88,    88,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    86,    86,    86,    86,    86,    86,
        86,    86,     0,    86,    86,     0,     0,     0,    87,    87,
        87,     0,     0,    87,    87,     0,     0,    87,     0,    87,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        87,     0,     0,     0,    86,    86,    86,    87,    87,    86,
        86,     0,     0,    86,     0,    86,     0,     0,    85,    85,
        85,    85,    85,    85,    85,    85,    86,    85,    85,     0,
         0,     0,     0,    86,    86,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    84,    84,    84,    84,    84,    84,
        84,    84,     0,    84,    84,     0,     0,     0,    85,    85,
        85,     0,     0,    85,    85,     0,     0,    85,     0,    85,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        85,     0,     0,     0,    84,    84,    84,    85,    85,    84,
        84,     0,     0,    84,     0,    84,     0,     0,    83,    83,
        83,    83,    83,    83,    83,    83,    84,    83,    83,     0,
         0,     0,     0,    84,    84,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    82,    82,    82,    82,    82,    82,
        82,    82,     0,    82,    82,     0,     0,     0,    83,    83,
        83,     0,     0,    83,    83,     0,     0,    83,     0,    83,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        83,     0,     0,     0,    82,    82,    82,    83,    83,    82,
        82,     0,     0,    82,     0,    82,     0,     0,    81,    81,
        81,    81,    81,    81,    81,    81,    82,    81,    81,     0,
         0,     0,     0,    82,    82,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    80,    80,    80,    80,    80,    80,
        80,    80,     0,    80,    80,     0,     0,     0,    81,    81,
        81,     0,     0,    81,    81,     0,     0,    81,     0,    81,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        81,     0,     0,     0,    80,    80,    80,    81,    81,    80,
        80,     0,     0,    80,     0,    80,     0,     0,    79,    79,
        79,    79,    79,    79,    79,    79,    80,    79,    79,     0,
         0,     0,     0,    80,    80,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    78,    78,    78,    78,    78,    78,
        78,    78,     0,    78,    78,     0,     0,     0,    79,    79,
        79,     0,     0,    79,    79,     0,     0,    79,     0,    79,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        79,     0,     0,     0,    78,    78,    78,    79,    79,    78,
        78,     0,     0,    78,     0,    78,     0,     0,    77,    77,
        77,    77,    77,    77,    77,    77,    78,    77,    77,     0,
         0,     0,     0,    78,    78,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    76,    76,    76,    76,    76,    76,
        76,    76,     0,    76,    76,     0,     0,     0,    77,    77,
        77,     0,     0,    77,    77,     0,     0,    77,     0,    77,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        77,     0,     0,     0,    76,    76,    76,    77,    77,    76,
        76,     0,     0,    76,     0,    76,     0,     0,    75,    75,
        75,    75,    75,    75,    75,    75,    76,    75,    75,     0,
         0,     0,     0,    76,    76,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    74,    74,    74,    74,    74,    74,
        74,    74,     0,    74,    74,     0,     0,     0,    75,    75,
        75,     0,     0,    75,    75,     0,     0,    75,     0,    75,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        75,     0,     0,     0,    74,    74,    74,    75,    75,    74,
        74,     0,     0,    74,     0,    74,     0,     0,    71,    71,
        71,    71,    71,    71,    71,    71,    74,    71,    71,     0,
         0,     0,     0,    74,    74,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    70,    70,    70,    70,    70,    70,
        70,    70,     0,    70,    70,     0,     0,     0,    71,    71,
        71,     0,     0,    71,    71,     0,     0,    71,     0,    71,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        71,     0,     0,     0,    70,    70,    70,    71,    71,    70,
        70,     0,     0,    70,     0,    70,     0,     0,    69,    69,
        69,    69,    69,    69,    69,    69,    70,    69,    69,     0,
         0,     0,     0,    70,    70,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    63,    63,    63,    63,    63,    63,
        63,    63,     0,    63,    63,     0,     0,     0,    69,    69,
        69,     0,     0,    69,    69,     0,     0,    69,     0,    69,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        69,     0,     0,     0,    63,    63,    63,    69,    69,    63,
        63,     0,     0,    63,     0,    63,     0,     0,    62,    62,
        62,    62,    62,    62,    62,    62,    63,    62,    62,     0,
         0,     0,     0,    63,    63,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    57,    57,    57,    57,    57,    57,
        57,    57,     0,    57,    57,     0,     0,     0,    62,    62,
        62,     0,     0,    62,    62,     0,     0,    62,     0,    62,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        62,     0,     0,     0,    57,    57,    57,    62,    62,    57,
        57,     0,     0,    57,     0,    57,     0,     0,    55,    55,
        55,    55,    55,    55,    55,    55,    57,    55,    55,     0,
         0,     0,     0,    57,    57,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    44,    44,    44,    44,    44,    44,
        44,    44,     0,    44,    44,     0,     0,     0,    55,    55,
        55,     0,     0,    55,    55,     0,     0,    55,     0,    55,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        55,     0,     0,     0,    44,    44,    44,    55,    55,    44,
        44,     0,     0,    44,     0,    44,     0,     0,    43,    43,
        43,    43,    43,    43,    43,    43,    44,    43,    43,     0,
         0,     0,     0,    44,    44,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    42,    42,    42,    42,    42,    42,
        42,    42,     0,    42,    42,     0,     0,     0,    43,    43,
        43,     0,     0,    43,    43,     0,     0,    43,     0,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        43,     0,     0,     0,    42,    42,    42,    43,    43,    42,
        42,     0,     0,    42,     0,    42,     0,     0,    41,    41,
        41,    41,    41,    41,    41,    41,    42,    41,    41,     0,
         0,     0,     0,    42,    42,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    40,    40,    40,    40,    40,    40,
        40,    40,     0,    40,    40,     0,     0,     0,    41,    41,
        41,     0,     0,    41,    41,     0,     0,    41,     0,    41,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        41,     0,     0,     0,    40,    40,    40,    41,    41,    40,
        40,     0,     0,    40,     0,    40,     0,     0,    24,    24,
        24,    24,    24,    24,    24,    24,    40,    24,    24,     0,
         0,     0,     0,    40,    40,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    13,    13,    13,    13,    13,    13,
        13,    13,     0,    13,    13,     0,     0,     0,    24,    24,
        24,     0,     0,    24,    24,     0,     0,    24,     0,    24,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        24,     0,     0,     0,    13,    13,    13,    24,    24,    13,
        13,     0,     0,    13,     0,    13,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    13,     0,   174,   174,
       174,   174,   174,    13,    13,   174,   174,   174,   174,   174,
       174,   174,   174,   174,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   174,     0,   174,     0,
         0,     0,   174,   174,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   174,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         3,    -1,     1,     0,     2,     4,     5,    -1,    -1,    -1,
        25,    26,    -1,    -1,    -1,     7,    -1,   129,   132,   135,
       139,    -1,    45,    -1,    -1,   114,   115,   117,   118,    55,
        -1,    59,    61,   158,   161,   162,    34,    35,    40,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,   112,
        42,   123,   124,   125,   126,   159,     6,   159,   148,   148,
       136,   140,    58,    -1,    47,    24,    -1,    -1,    39,    -1,
        -1,    -1,   147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,   108,   109,    41,    54,    48,    -1,   102,   103,   104,
       105,   106,    40,   107,   114,    58,    -1,    -1,    -1,    -1,
       144,   144,    -1,    -1,    -1,    -1,   116,     8,    10,    -1,
        12,    -1,    -1,    15,    -1,    -1,    -1,    54,    27,    27,
        23,    -1,    60,   160,   163,   143,   145,   146,   149,   150,
       151,   152,   155,    -1,    -1,    76,    77,    78,    79,    80,
        81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
        91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
        62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
        72,    73,    58,    -1,    -1,   101,    -1,    -1,   127,   128,
       130,   133,    -1,    -1,    57,    46,     8,    -1,    -1,    11,
        22,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    75,    -1,    43,    49,    51,    -1,    53,
       119,    56,   131,   134,   137,   141,    31,    33,    -1,    -1,
       122,     9,    13,    14,    -1,    -1,    -1,    19,    20,    21,
        -1,    -1,    -1,    74,    44,    50,    -1,    -1,   138,   142,
        -1,   113,   120,    -1,    -1,    -1,    30,    -1,   153,   156,
        52,     8,    32,   121,    16,    -1,    -1,    28,   154,   157,
        -1,    -1,    30,    -1,   111,    17,    -1,    29,    -1,    18,
    
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         4,   239,     5,   140,   113,   236,   143,    64,   249,   139,
        21,    39,    36,    38,    50,    39,   123,   122,    50,   228,
        49,   227,    72,    37,     6,   299,   140,    72,   136,   143,
        47,   290,   139,    21,    39,    36,    38,    50,   289,   288,
       297,   140,   269,    49,   143,   268,    37,   139,    21,    39,
        36,    38,    50,    47,   267,    15,   140,   265,    49,   143,
       248,    37,   139,    21,    39,    36,    38,    50,    47,   243,
       287,   140,   242,    49,   143,   231,    37,   139,    21,    39,
        36,    38,    50,    47,   230,   284,   140,   218,    49,   143,
       213,    37,   139,    21,    39,    36,    38,    50,    47,   212,
        15,   140,   204,    49,   143,   131,    37,   139,    21,    39,
        36,    38,    50,    47,   130,    15,   140,   129,    49,   143,
       128,    37,   139,    21,    39,    36,    38,    50,    47,    61,
       224,   140,    60,    49,   143,    59,    37,   139,    21,    39,
        36,    38,    50,    47,    39,   121,   122,    50,    49,    58,
        -1,    37,   163,    21,    39,    36,    38,    50,    47,   206,
        26,    27,   155,    49,   157,    -1,    37,    66,    26,    27,
       155,    -1,   157,    47,   296,   246,   247,    21,    39,    36,
        38,    50,     1,     2,    -1,    -1,    -1,    49,    -1,    -1,
        37,    -1,    -1,    -1,    -1,    -1,    -1,    47,   286,   246,
       247,    21,    39,    36,    38,    50,    -1,    -1,    -1,    -1,
        -1,    49,    -1,    -1,    37,   285,    21,    39,    36,    38,
        50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,    37,
       282,    21,    39,    36,    38,    50,    47,    -1,    -1,    -1,
        -1,    49,    -1,    -1,    37,   266,    21,    39,    36,    38,
        50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,    37,
       263,    21,    39,    36,    38,    50,    47,    -1,    -1,    -1,
        -1,    49,    -1,    -1,    37,   262,    21,    39,    36,    38,
        50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,    37,
       261,    21,    39,    36,    38,    50,    47,    -1,    -1,    -1,
        -1,    49,    -1,    -1,    37,   260,    21,    39,    36,    38,
        50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,    37,
        -1,    -1,    -1,    -1,    -1,    -1,    47,   256,   246,   247,
        21,    39,    36,    38,    50,    -1,    -1,    -1,    -1,    -1,
        49,    -1,    -1,    37,   254,    21,    39,    36,    38,    50,
        47,    -1,    -1,    -1,    -1,    49,    -1,    -1,    37,    32,
        21,    39,    36,    38,    50,    47,    -1,    -1,    -1,    -1,
        49,   234,    31,    37,   233,    21,    39,    36,    38,    50,
        47,    -1,    -1,    -1,    -1,    49,    -1,    -1,    37,    29,
        21,    39,    36,    38,    50,    47,    -1,    -1,    -1,   226,
        49,    -1,    -1,    37,    -1,    -1,   222,    -1,    -1,    -1,
        47,    10,    21,    39,    36,    38,    50,    -1,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   221,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,    32,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,   207,    31,    37,    29,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,   203,    49,    -1,    -1,
        37,   201,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   200,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   199,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   198,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   197,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   196,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   195,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   194,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   193,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   192,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   191,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   190,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   189,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   188,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   187,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   186,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   185,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   184,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   183,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   182,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   181,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   180,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   179,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   178,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   177,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   176,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   175,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   174,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   173,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   172,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   171,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   170,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   169,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   168,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   167,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   166,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   165,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   154,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,    35,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,   152,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,   133,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,   153,    -1,    37,    32,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,   132,    31,
        37,    35,    21,    39,    36,    38,    50,    47,    -1,    -1,
        -1,    -1,    49,    -1,    -1,    37,    35,    21,    39,    36,
        38,    50,    47,    -1,    -1,    -1,    -1,    49,    -1,    -1,
        37,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
        -1,   127,    33,    34,    -1,    -1,    -1,    -1,   120,    21,
        39,    36,    38,    50,    -1,    -1,   126,    33,    34,    49,
        -1,    -1,    37,   119,    21,    39,    36,    38,    50,    47,
        -1,    -1,    -1,    -1,    49,    -1,    -1,    37,   118,    21,
        39,    36,    38,    50,    47,    -1,    -1,    -1,    -1,    49,
        -1,    -1,    37,   117,    21,    39,    36,    38,    50,    47,
        -1,    -1,    -1,    -1,    49,    -1,    -1,    37,   116,    21,
        39,    36,    38,    50,    47,    -1,    -1,    -1,    -1,    49,
        -1,    -1,    37,    65,    21,    39,    36,    38,    50,    47,
        -1,    -1,    -1,    -1,    49,    -1,    -1,    37,    30,    21,
        39,    36,    38,    50,    47,    -1,    -1,    -1,    -1,    49,
        -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    47,
    
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
       181,   -55,    -3,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,  1226,   -55,   -55,   -55,   115,    99,    94,
        88,   -55,   -55,   -10,  1211,   139,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -14,
      1196,  1181,  1166,  1151,  1136,   130,     1,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,  1104,   -55,  1089,    74,    71,
        75,    63,  1074,  1059,   -55,   -55,   -55,    -2,   -55,  1044,
      1029,  1014,   -55,   140,   999,   984,   969,   954,   939,   924,
       909,   894,   879,   864,   849,   834,   819,   804,   789,   774,
       759,   744,   729,   714,   699,   684,   669,   654,   639,   624,
       609,   594,   579,   564,   549,   534,   519,   504,   489,   474,
       459,   -55,   -55,   -55,   444,    83,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   131,   429,   -55,   -55,   -20,   -25,
        55,    46,   -55,   -55,   -55,   -55,   -55,    83,   -55,   -55,
       -55,   414,   399,   -55,   -55,   125,   -55,   377,    13,    11,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,    36,    25,   -55,   362,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   347,   -55,   -16,   -55,   -55,   -55,   -55,   -55,
        37,    32,   125,   117,   -55,   -55,    56,   -24,   110,   -55,
       -55,   -55,   -55,   332,   -55,   317,   -55,   -55,   -55,   293,
       278,   263,   248,   -55,   -55,   -55,    37,   -55,   233,   -55,
        23,   -55,   -55,   -55,     5,    -1,   -55,   -55,    95,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       218,   -55,   -55,   -55,    80,   203,   188,    65,   -10,   -13,
       -55,    27,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
        50,   -55,   164,    35,   -55,   -55,   -55,   -55,    20,   -55,
    
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     1,     2,     0,     1,     1,     4,     2,     0,     3,
         1,     2,     1,     3,     3,     1,     5,     7,     9,     3,
         3,     3,     2,     1,     3,     1,     1,     0,     5,     7,
         0,     1,     3,     1,     1,     1,     1,     3,     1,     3,
         1,     2,     1,     4,     5,     1,     4,     2,     0,     0,
         4,     1,     3,     1,     0,     1,     4,     4,     0,     1,
         3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     5,     4,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     2,     2,     2,     2,     2,     2,     2,     2,
         1,     8,     1,     8,     0,     1,     3,     1,     1,     0,
         4,     3,     1,     1,     1,     1,     1,     3,     4,     0,
         0,     5,     0,     0,     5,     0,     0,     0,     6,     0,
         0,     0,     6,     2,     0,     1,     1,     2,     0,     1,
         1,     1,     0,     0,     5,     0,     0,     5,     1,     0,
         3,     1,     1,     3,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     4,     4,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     6,     6,     7,     7,     8,     8,     9,     9,
        10,    10,    11,    11,    12,    12,    13,    13,    14,    14,
        15,    15,    16,    16,    16,    17,    17,    17,    19,    20,
        18,    21,    21,    21,    22,    22,    23,    23,    24,    24,
        25,    25,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    27,    28,    28,    29,    29,    30,    31,
        31,    32,    32,    33,    33,    33,    33,    33,    33,    34,
        35,    33,    36,    37,    33,    38,    39,    40,    33,    41,
        42,    43,    33,    44,    44,    45,    45,    46,    46,    47,
        47,    47,    48,    49,    47,    50,    51,    47,    52,    52,
        53,    53,    54,    54,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",       "INLINE_HTML",          "ECHO_TAG",
                  "NAME",           "DECIMAL",               "INT",
                "STRING",      "DOUBLE_QUOTE",        "BACK_QUOTE",
                "DOLLAR",          "VARIABLE",     "HALT_COMPILER",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "POW",          "QUESTION",
                 "COLON",           "PERCENT",                "GT",
                    "LT",              "GTOE",              "LTOE",
                   "EQU",         "IDENTICAL",               "NEQ",
            "NIDENTICAL",            "ASSIGN",       "PLUS_ASSIGN",
          "MINUS_ASSIGN",      "TIMES_ASSIGN",        "POW_ASSIGN",
         "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",     "BIT_OR_ASSIGN",
        "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN", "LEFT_SHIFT_ASSIGN",
            "MOD_ASSIGN",           "BIT_AND",            "BIT_OR",
               "BIT_XOR",           "BIT_NOT",               "INC",
                   "DEC",        "LEFT_SHIFT",       "RIGHT_SHIFT",
        "HEREDOC_HEADER",     "NOWDOC_HEADER",             "ARROW",
        "PROPERTY_ARROW",               "BRA",               "KET",
                  "CBRA",              "CKET",             "COMMA",
                  "BBRA",              "BKET",               "EOL",
                   "AND",                "OR",        "LOGICAL_OR",
           "LOGICAL_AND",       "LOGICAL_XOR",               "NOT",
                    "IF",              "ELSE",              "ECHO",
                 "WHILE",                "DO",               "FOR",
              "FUNCTION",              "LIST",               "USE",
                 "BREAK",          "CONTINUE",            "RETURN",
                   "DOT",       "ANY_CONTENT", "HEREDOC_END_LABEL",
    "VARIABLE_IN_STRING","PROPERTY_IN_STRING",  "OFFSET_IN_STRING",
      "OPEN_CURLY_BRACE",    "END_OF_HEREDOC",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,               "<?=",
                    null,                null,                null,
                    null,                "\"",                 "`",
                     "$",                null,   "__halt_compiler",
                     "+",                 "-",                 "*",
                     "/",                "**",                 "?",
                     ":",                 "%",                 ">",
                     "<",                ">=",                "<=",
                    "==",               "===",                "!=",
                   "!==",                 "=",                "+=",
                    "-=",                "*=",               "**=",
                    "/=",                "&=",                "|=",
                    "^=",               ">>=",               "<<=",
                    "%=",                 "&",                 "|",
                     "^",                 "~",                "++",
                    "--",                "<<",                ">>",
                    null,                null,                "=>",
                    "->",                 "(",                 ")",
                     "[",                 "]",                 ",",
                     "{",                 "}",                 ";",
                    "&&",                "||",                "OR",
                   "AND",               "XOR",                 "!",
                    "if",              "else",              "echo",
                 "while",                "do",               "for",
              "function",              "list",               "use",
                 "break",          "continue",            "return",
                     ".",                null,                null,
                    null,                null,                null,
                    "${",                null,
]; 


function tokenToString(tk){
    return jjtokenAlias[tk] === null ? "<" + jjtokenNames[tk] + ">" : '"' + jjtokenAlias[tk] + '"';
}
function Token(id, val, startLine, startColumn, endLine, endColumn){
    this.id = id;
    this.val = val;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
}
Token.prototype.clone = function(){
    return new Token(
        this.id,
        this.val,
        this.startLine,
        this.startColumn,
        this.endLine,
        this.endColumn
    );
}
Token.prototype.toString = function(){
    return (jjtokenAlias[this.id] === null ? 
        '<' + jjtokenNames[this.id] + '>' :
        '"' + jjtokenAlias[this.id] + '"') + "(" + this.val + ")";
}
function createParser() {
    // members for lexer
    var jjlexState;
    var jjstate;
    var jjmatched;
    var jjtoken;
    
    var jjmarker = { state: -1, line: 0, column: 0 };
    var jjbackupCount;

    var jjline;
    var jjcolumn;
    var jjtline;
    var jjtcolumn;

    // members for parser
    var jjlrState;
    var jjsematicS;
    var jjsematicVal;
    var jjtokenQueue;

    var jjstop;

    var jjhandlers = {};

    // extra members, defined by %extra_arg
    
    var outputs;
    var heredocStart;
    var propertyName;


    return {
        init: init,
        on: on,
        accept: accept,
        end: end,
        halt: halt
    };
    function init(outputs1){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjtokenQueue = [];

        jjstop = false;
        
    outputs = outputs1;
    heredocStart = [];


        jjtryReduce();
    }
    /**
     *  set 
     */
    function jjsetImg(s){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjtokenQueue.push(jjtoken);

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjemit(name, a1, a2, a3){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name, cb){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                jjlexState.push(1); 
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 9:
                jjlexState.push(1); 
                break;
            case 10:
                jjlexState.push(1); 
                break;
            case 11:
                jjlexState.push(1); 
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten){
        var jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 6:
                jjsetImg(""); 
                break;
            case 19:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 26:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 27:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 28:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 29:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 35:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 36:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 37:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 38:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 39:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 40:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 41:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 42:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 43:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 44:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 49:
                jjsetImg(""); 
                break;
            case 51:
                jjsetImg(""); 
                break;
            case 52:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 57:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 66:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 68:
                jjsetImg(""); 
                break;
            case 70:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 78:
                jjsetImg(""); jjlexState.pop(); 
                break;
            case 79:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 80:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 82:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 85:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 86:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 88:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 89:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 90:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 91:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 93:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 94:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 95:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 96:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 100:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 107:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 109:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 117:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 118:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 119:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 120:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 122:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 123:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 124:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 126:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 130:
                jjsetImg(""); 
                break;
            case 134:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 135:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 138:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 140:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 141:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 147:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 148:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 149:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 150:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 154:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 155:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 158:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 159:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 165:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 167:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 168:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 169:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 170:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 172:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 173:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 174:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten){
        var jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                jjsetImg(""); 
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 9:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            default:;
        }
    }
    function jjdoLexAction3(jjstaten){
        var jjtk = jjlexTokens3[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 11:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 13:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 19:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 20:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction4(jjstaten){
        var jjtk = jjlexTokens4[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 11:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 13:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 19:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 20:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction5(jjstaten){
        var jjtk = jjlexTokens5[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 12:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 14:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 15:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 21:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 22:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 23:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 24:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction6(jjstaten){
        var jjtk = jjlexTokens6[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate, state){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            case 3:
                jjdoLexAction3(state);
                break;
            case 4:
                jjdoLexAction4(state);
                break;
            case 5:
                jjdoLexAction5(state);
                break;
            case 6:
                jjdoLexAction6(state);
                break;
            default:;
        }
        jjtokenQueue.length > 0 && jjacceptToken(null);
    }
    function jjrollback(){
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjacceptToken(null);
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: start => top_statement_list */
                var l = jjsematicS[jjsp - 1];
                { outputs.astRoot = l; } 
                break;
            case 2:
                /* 2: top_statement_list => top_statement_list top_statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 3:
                /* 3: top_statement_list => */
                { jjtop = new ZNode(AST_TOPLIST); } 
                break;
            case 6:
                /* 6: top_statement => "__halt_compiler" "(" ")" ";" */
                { halt(); } 
                break;
            case 7:
                /* 7: statement_list => statement_list statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 8:
                /* 8: statement_list => */
                { jjtop = new ZNode(AST_STATEMENTLIST); } 
                break;
            case 9:
                /* 9: statement => "{" statement_list "}" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 10:
                /* 10: statement => ";" */
                { jjtop = null; } 
                break;
            case 11:
                /* 11: statement => expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 12:
                /* 12: statement => inline_html_list */
                var l = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ECHO, l); } 
                break;
            case 13:
                /* 13: statement => "<?=" expr <INLINE_HTML> */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 14:
                /* 14: statement => "echo" echo_expr_list ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 16:
                /* 16: statement => "while" "(" expr ")" statement */
                var cond = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_WHILE, [cond, s]); } 
                break;
            case 17:
                /* 17: statement => "do" statement "while" "(" expr ")" ";" */
                var s = jjsematicS[jjsp - 6];
                var cond = jjsematicS[jjsp - 3];
                { jjtop = new ZNode(AST_DO_WHILE, [cond, s]); } 
                break;
            case 18:
                /* 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement */
                var e1 = jjsematicS[jjsp - 7];
                var e2 = jjsematicS[jjsp - 5];
                var e3 = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_FOR, [e1, e2, e3, s]); } 
                break;
            case 19:
                /* 19: statement => "return" optional_expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_RETURN, e); } 
                break;
            case 20:
                /* 20: statement => "break" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                { jjtop.type = AST_BREAK; jjtop.add(n); } 
                break;
            case 21:
                /* 21: statement => "continue" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                { jjtop.type = AST_CONTINUE; jjtop.add(n); } 
                break;
            case 22:
                /* 22: inline_html_list => inline_html_list <INLINE_HTML> */
                var h = jjsematicS[jjsp - 1];
                { jjtop = nodeBetween(jjtop, h, jjtop.val + h.val); jjtop.type = AST_STRING; } 
                break;
            case 23:
                /* 23: inline_html_list => <INLINE_HTML> */
                { jjtop.type = AST_STRING; } 
                break;
            case 24:
                /* 24: echo_expr_list => echo_expr_list "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 25:
                /* 25: echo_expr_list => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 27:
                /* 27: optional_num => */
                { jjtop = ZNode.NONE; } 
                break;
            case 28:
                /* 28: if_statement => "if" "(" expr ")" statement */
                var c = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, ZNode.NONE]); } 
                break;
            case 29:
                /* 29: if_statement => "if" "(" expr ")" statement "else" statement */
                var c = jjsematicS[jjsp - 5];
                var s = jjsematicS[jjsp - 3];
                var el = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, el]); } 
                break;
            case 30:
                /* 30: for_exprs => */
                { jjtop = new ZNode(AST_EXPR_LIST); } 
                break;
            case 32:
                /* 32: non_empty_for_exprs => non_empty_for_exprs "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 33:
                /* 33: non_empty_for_exprs => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 37:
                /* 37: callable_expr => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 39:
                /* 39: dereferencable => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 41:
                /* 41: var => dereferencable arrow_and_property */
                var v = jjsematicS[jjsp - 2];
                var pn = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PROPERTY, [v, pn]); } 
                break;
            case 43:
                /* 43: callable_variable => dereferencable "[" optional_expr "]" */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_OFFSET, [v, e]); } 
                break;
            case 44:
                /* 44: callable_variable => dereferencable arrow_and_property "(" argument_list ")" */
                var v = jjsematicS[jjsp - 5];
                var pn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_METHODCALL, [v, pn, l]); } 
                break;
            case 45:
                /* 45: simple_var => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 46:
                /* 46: simple_var => "$" "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_VARIABLE, e); } 
                break;
            case 47:
                /* 47: simple_var => "$" simple_var */
                var v = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 48:
                /* 48: @0 => */
                jjlexState.push(2); 
                break;
            case 49:
                /* 49: @1 => */
                var pn = jjsematicS[jjsp - 1];
                jjlexState.pop(); 
                break;
            case 50:
                /* 50: arrow_and_property => "->" @0 property_name @1 */
                var pn = jjsematicS[jjsp - 2];
                { jjtop = pn; } 
                break;
            case 51:
                /* 51: property_name => <NAME> */
                var n = jjsematicS[jjsp - 1];
                { jjtop.type = AST_STRING; } 
                break;
            case 52:
                /* 52: property_name => "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 54:
                /* 54: optional_expr => */
                { jjtop = ZNode.NONE; } 
                break;
            case 56:
                /* 56: function_call => <NAME> "(" argument_list ")" */
                var fn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { fn.type = AST_STRING; jjtop = new ZNode(AST_FUNCTIONCALL, [fn, l]); } 
                break;
            case 57:
                /* 57: function_call => callable_expr "(" argument_list ")" */
                var f = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_FUNCTIONCALL, [f, l]); } 
                break;
            case 58:
                /* 58: argument_list => */
                { jjtop = new ZNode(AST_ARGLIST); } 
                break;
            case 60:
                /* 60: non_empty_argument_list => non_empty_argument_list "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 61:
                /* 61: non_empty_argument_list => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARGLIST, e); } 
                break;
            case 62:
                /* 62: expr_without_var => var "=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b]); } 
                break;
            case 63:
                /* 63: expr_without_var => var "+=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_PLUS); } 
                break;
            case 64:
                /* 64: expr_without_var => var "-=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MINUS); } 
                break;
            case 65:
                /* 65: expr_without_var => var "**=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_POW); } 
                break;
            case 66:
                /* 66: expr_without_var => var "*=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_TIMES); } 
                break;
            case 67:
                /* 67: expr_without_var => var "/=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_DIVIDE); } 
                break;
            case 68:
                /* 68: expr_without_var => var "&=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITAND); } 
                break;
            case 69:
                /* 69: expr_without_var => var "|=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITOR); } 
                break;
            case 70:
                /* 70: expr_without_var => var "^=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITXOR); } 
                break;
            case 71:
                /* 71: expr_without_var => var ">>=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 72:
                /* 72: expr_without_var => var "<<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_LEFTSHIFT); } 
                break;
            case 73:
                /* 73: expr_without_var => var "%=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MOD); } 
                break;
            case 74:
                /* 74: expr_without_var => expr "?" expr ":" expr */
                var a = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 3];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, b, c]); } 
                break;
            case 75:
                /* 75: expr_without_var => expr "?" ":" expr */
                var a = jjsematicS[jjsp - 4];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, ZNode.NONE, c]); } 
                break;
            case 76:
                /* 76: expr_without_var => expr ">" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHAN);        } 
                break;
            case 77:
                /* 77: expr_without_var => expr "<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHAN);           } 
                break;
            case 78:
                /* 78: expr_without_var => expr ">=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHANOREQUAL); } 
                break;
            case 79:
                /* 79: expr_without_var => expr "<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHANOREQUAL);    } 
                break;
            case 80:
                /* 80: expr_without_var => expr "==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_EQUAL);              } 
                break;
            case 81:
                /* 81: expr_without_var => expr "===" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_IDENTICAL);          } 
                break;
            case 82:
                /* 82: expr_without_var => expr "!=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTEQUAL);           } 
                break;
            case 83:
                /* 83: expr_without_var => expr "!==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTIDENTICAL);       } 
                break;
            case 84:
                /* 84: expr_without_var => expr "^" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITXOR);      } 
                break;
            case 85:
                /* 85: expr_without_var => expr "|" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITOR);       } 
                break;
            case 86:
                /* 86: expr_without_var => expr "&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITAND);      } 
                break;
            case 87:
                /* 87: expr_without_var => expr ">>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 88:
                /* 88: expr_without_var => expr "<<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LEFTSHIFT);  } 
                break;
            case 89:
                /* 89: expr_without_var => expr "&&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_AND); } 
                break;
            case 90:
                /* 90: expr_without_var => expr "||" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_OR);  } 
                break;
            case 91:
                /* 91: expr_without_var => expr "OR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALOR, [a, b]);         } 
                break;
            case 92:
                /* 92: expr_without_var => expr "XOR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_XOR); } 
                break;
            case 93:
                /* 93: expr_without_var => expr "AND" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALAND, [a, b]);       } 
                break;
            case 94:
                /* 94: expr_without_var => expr "+" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_PLUS);   } 
                break;
            case 95:
                /* 95: expr_without_var => expr "-" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MINUS);  } 
                break;
            case 96:
                /* 96: expr_without_var => expr "*" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_TIMES);  } 
                break;
            case 97:
                /* 97: expr_without_var => expr "/" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_DIVIDE); } 
                break;
            case 98:
                /* 98: expr_without_var => expr "%" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MOD);    } 
                break;
            case 99:
                /* 99: expr_without_var => expr "**" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_POW);   } 
                break;
            case 100:
                /* 100: expr_without_var => expr "." expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_CONCAT); } 
                break;
            case 101:
                /* 101: expr_without_var => "(" expr ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 102:
                /* 102: expr_without_var => "+" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_POSITIVE); } 
                break;
            case 103:
                /* 103: expr_without_var => "-" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NEGATIVE); } 
                break;
            case 104:
                /* 104: expr_without_var => "!" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NOT);    } 
                break;
            case 105:
                /* 105: expr_without_var => "~" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_BITNOT); } 
                break;
            case 106:
                /* 106: expr_without_var => "++" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTINC, a);   } 
                break;
            case 107:
                /* 107: expr_without_var => "--" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTDEC, a);  } 
                break;
            case 108:
                /* 108: expr_without_var => var "++" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXINC, a); } 
                break;
            case 109:
                /* 109: expr_without_var => var "--" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXDEC, a); } 
                break;
            case 111:
                /* 111: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" */
                var l = jjsematicS[jjsp - 6];
                var ll = jjsematicS[jjsp - 4];
                var b = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ANONYFUNCTION, [l, ll, b]); } 
                break;
            case 113:
                /* 113: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" */
                var n = jjsematicS[jjsp - 7];
                var l = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 2];
                { n.type = AST_STRING; jjtop = new ZNode(AST_FUNCTION, [n, l, b]); } 
                break;
            case 114:
                /* 114: parameter_list => */
                { jjtop = new ZNode(AST_PARAMLIST); } 
                break;
            case 116:
                /* 116: non_empty_parameter_list => non_empty_parameter_list "," parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop.add(p); } 
                break;
            case 117:
                /* 117: non_empty_parameter_list => parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PARAMLIST, p); } 
                break;
            case 118:
                /* 118: parameter => <VARIABLE> */
                { jjtop.type = AST_STRING; } 
                break;
            case 119:
                /* 119: lexical_vars => */
                { jjtop = new ZNode(AST_LEXICALVARLIST); } 
                break;
            case 120:
                /* 120: lexical_vars => "use" "(" lexical_var_list ")" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 121:
                /* 121: lexical_var_list => lexical_var_list "," <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop.add(v); } 
                break;
            case 122:
                /* 122: lexical_var_list => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_LEXICALVARLIST, v); } 
                break;
            case 123:
                /* 123: primitive => <INT> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_INTEGER; jjtop = s; } 
                break;
            case 124:
                /* 124: primitive => <DECIMAL> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_FLOAT; jjtop = s; } 
                break;
            case 125:
                /* 125: primitive => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_STRING; jjtop = s; } 
                break;
            case 126:
                /* 126: primitive => <NAME> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_CONST; jjtop = s; } 
                break;
            case 127:
                /* 127: primitive => "[" array_pair_list "]" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 128:
                /* 128: primitive => "list" "(" array_pair_list ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 129:
                /* 129: @2 => */
                jjlexState.push(3); 
                break;
            case 130:
                /* 130: @3 => */
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 131:
                /* 131: primitive => """ @2 quote_list """ @3 */
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 132:
                /* 132: @4 => */
                jjlexState.push(4); 
                break;
            case 133:
                /* 133: @5 => */
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 134:
                /* 134: primitive => "`" @4 quote_list "`" @5 */
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 135:
                /* 135: @6 => */
                var h = jjsematicS[jjsp - 1];
                jjlexState.push(5); 
                break;
            case 136:
                /* 136: @7 => */
                var h = jjsematicS[jjsp - 2];
                { heredocStart.push(h.val); } 
                break;
            case 137:
                /* 137: @8 => */
                var h = jjsematicS[jjsp - 5];
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 138:
                /* 138: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 */
                var h = jjsematicS[jjsp - 6];
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 139:
                /* 139: @9 => */
                var h = jjsematicS[jjsp - 1];
                jjlexState.push(6); 
                break;
            case 140:
                /* 140: @10 => */
                var h = jjsematicS[jjsp - 2];
                { heredocStart.push(h.val); } 
                break;
            case 141:
                /* 141: @11 => */
                var h = jjsematicS[jjsp - 5];
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 142:
                /* 142: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 */
                var h = jjsematicS[jjsp - 6];
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 143:
                /* 143: heredoc_list => heredoc_list heredoc_item */
                var i = jjsematicS[jjsp - 1];
                { i !== null && jjtop.add(i); } 
                break;
            case 144:
                /* 144: heredoc_list => */
                { jjtop = new ZNode(AST_STRING_LIST); } 
                break;
            case 145:
                /* 145: heredoc_item => <HEREDOC_END_LABEL> */
                var n = jjsematicS[jjsp - 1];
                { 
        if(n.val.trim() === heredocStart[heredocStart.length - 1]){ 
            jjtokenQueue.push(new Token(85, null, -1, 0, 0, 0)); 
            heredocStart.pop(); 
            jjtop = null; 
        }
        else {
            jjtop.type = AST_STRING;
        }
    } 
                break;
            case 147:
                /* 147: quote_list => quote_list encaps */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 148:
                /* 148: quote_list => */
                { jjtop = new ZNode(AST_STRING_LIST); } 
                break;
            case 149:
                /* 149: encaps => <ANY_CONTENT> */
                { jjtop.type = AST_STRING; jjtop.val = unescape(jjtop.val); } 
                break;
            case 150:
                /* 150: encaps => <VARIABLE_IN_STRING> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 151:
                /* 151: encaps => <PROPERTY_IN_STRING> */
                var pn = jjsematicS[jjsp - 1];
                { 
        pn.type = AST_STRING; 
        jjtop = new ZNode(AST_PROPERTY, [new ZNode(AST_VARIABLE, pn), new ZNode(AST_STRING, null, propertyName, pn)]); 
    } 
                break;
            case 152:
                /* 152: @12 => */
                var v = jjsematicS[jjsp - 1];
                jjlexState.push(1); 
                break;
            case 153:
                /* 153: @13 => */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 154:
                /* 154: encaps => <OFFSET_IN_STRING> @12 expr "]" @13 */
                var v = jjsematicS[jjsp - 5];
                var e = jjsematicS[jjsp - 3];
                {
        v.type = AST_STRING;
        jjtop = new ZNode(AST_OFFSET, [new ZNode(AST_VARIABLE, v), e]); 
    } 
                break;
            case 155:
                /* 155: @14 => */
                jjlexState.push(1); 
                break;
            case 156:
                /* 156: @15 => */
                var e = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 157:
                /* 157: encaps => "${" @14 expr "}" @15 */
                var e = jjsematicS[jjsp - 3];
                { jjtop = e; } 
                break;
            case 159:
                /* 159: array_pair_list => */
                { jjtop = new ZNode(AST_ARRAY); } 
                break;
            case 160:
                /* 160: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop.add(a); } 
                break;
            case 161:
                /* 161: non_empty_array_pair_list => array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAY, a); } 
                break;
            case 163:
                /* 163: array_pair => expr "=>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAYPAIR, [a, b]); } 
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjacceptToken(tk){
        // look up action table
        var shifted = false;
        tk !== null && jjtokenQueue.push(tk);
        while(!jjstop && jjtokenQueue.length > 0){
            var t = jjtokenQueue[0];
            var cstate = jjlrState[jjlrState.length - 1];
            var ind = jjdisact[cstate] + t.id;
            var act = 0;
            if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
                act = -jjdefred[cstate] - 1;
            }
            else {
                act = jjpact[ind];
            }
            if(act === jjactERR){
                // explicit error
                jjsyntaxError(t);
                jjtokenQueue.shift();
            }
            else if(act > 0){
                // shift
                if(t.id === 0){
                    // end of file
                    jjstop = true;
                    jjemit('accept');
                    jjtokenQueue.shift();
                }
                else {
                    jjlrState.push(act - 1);
                    jjsematicS.push(jjsematicVal);
                    jjsematicVal = null;
                    jjtryReduce();
                    // token consumed
                    jjtokenQueue.shift();
                }
            }
            else if(act < 0){
                jjdoReduction(-act - 1);
                jjtryReduce();
            }
            else {
                // error
                jjsyntaxError(t);
                // force consume
                jjtokenQueue.shift();
            }
        }
    }
    function jjtryReduce(){
        var cstate = jjlrState[jjlrState.length - 1];
        var act;
        while(jjdisact[cstate] === -jjtokenCount && (act = jjdefred[cstate]) !== -1){
            jjdoReduction(act);
            cstate = jjlrState[jjlrState.length - 1];
        }
    }
    function jjsyntaxError(t){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}


function OpArray(){
    this.opcode = [];
    this.opCount = 0;
    this.functions = [];
}
OpArray.prototype.dump = function(){
    var ret = [];
    var labels = [];
    var labelCount = 0;
    var labelOps = [];
    for(var i = 0, _a = this.opcode; i < this.opCount; i++){
        var op = _a[2 * i];
        var line = op.name;
        var arg = _a[2 * i + 1];
        if(op === OP_JMP || op === OP_JZ || op === OP_JNZ || op === OP_ENTRY){
            labels[arg] = labelCount++;
            labelOps.push({ op: op, loc: i, target: arg });
            ret.push(null);
        }
        else {
            if(arg !== null){
                if(isArray(arg)){
                    for(var j = 0; j < arg.length; j++){
                        line += ' ' + arg[j];
                    }
                }
                else {
                    if(typeof arg === 'string'){
                        arg = '"' + arg.replace(/\n/g, '\\n') + '"';
                    }
                    line += ' ' + String(arg);
                }
            }
            ret.push(line);
        }
    }
    for(var i = 0; i < labels.length; i++){
        var l = labels[i];
        if(l !== undefined){
            ret[i] = ('label' + l) + ': ' + ret[i];
        }
    }
    for(var i = 0, _a = labelOps; i < _a.length; i++){
        ret[_a[i].loc] = _a[i].op.name + ' label' + labels[_a[i].target];
    }
    return ret;
}

function createCompiler(fname){
    var opa = new OpArray();
    var registers = [];
    var scope = [];
    var onErr = [];
    var funcQueue = [];

    var localNode = new ZNode(AST_LOCAL);
    
    function LoopInfo(allowBreak, allowContinue){
        this.allowBreak = allowBreak;
        this.allowContinue = allowContinue;
        this.breaks = [];
        this.continues = [];
    }
    LoopInfo.prototype.done = function(bl, cl){
        for(var i = 0, _a = this.breaks; i < _a.length; i++){
            setArg(_a[i], bl);
        }
        for(var i = 0, _a = this.continues; i < _a.length; i++){
            setArg(_a[i], cl);
        }
    }

    return {
        compile: compile,
        addErrHandler: addErrHandler
    };

    function addErrHandler(cb){
        onErr.push(cb);
    }
    function err(msg){
        for(var i = 0; i < onErr.length; i++){
            onErr[i](msg);
        }
    }
    function singlePosErr(msg, pos){
        err(msg + ' (at line ' + (pos.startLine + 1) + ')');
    }
    function allocateRegister(){
        var i = 0;
        while(registers[i] !== undefined){ i++; };
        registers[i] = true;
        return i;
    }
    function releaseRegister(i){
        if(i === registers.length - 1){
            registers.pop();
        }
        else {
            registers[i] = undefined;
        }
    }
    function pushScope(){
        scope.push(registers);
        registers = [];
    }
    function popScope(){
        registers = scope.pop();
    }
    function emit(s, args){
        opa.opcode.push(s);
        opa.opcode.push(typeof args !== 'undefined' ? args : null);
        return opa.opCount++;
    }
    function setArg(op, arg){
        opa.opcode[op * 2 + 1] = arg;
    }
    function breakTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowBreak){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }
    function continueTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowContinue){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }

    function compile(astRoot){
        compileBlock(astRoot);
        return opa;
    }
    function compileBlock(ast){
        for(var i = 0, _a = ast.child; i < _a.length; i++){
            var func = _a[i];
            if(func.type === AST_FUNCTION){
                emit(OP_DEFINEFUNCTION, func.child[0].val);
                var entry = emit(OP_ENTRY);
                var params = [];
                for(var j = 0, _b = func.child[1].child; i < _b.length; i++){
                    params.push(_b[j].val);
                }
                emit(OP_PARAM, params);
                emit(OP_ENDFUNCTION);
                funcQueue.push({ body: func.child[2], entryOp: entry });   
            }
        }
        for(var i = 0, _a = ast.child; i < _a.length; i++){
            compileStatement(_a[i]);
        }
        emit(OP_RETURNNULL);
    }
    function compileStatement(ast){
        switch(ast.type){
            case AST_NONE: break;
            case AST_STATEMENTLIST:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileStatement(_a[i]);
                }
                break;
            case AST_ECHO:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    emit(OP_ECHO);
                }
                break;
            case AST_EXPR_LIST:
                compileExpression(ast.child[0]);
                emit(OP_POP);
                break;
            case AST_BREAK:
                var leveln = ast.child[0];
                var target = breakTarget(ast, leveln === ZNode.NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid break statement', ast.pos);
                }
                else {
                    target.val.breaks.push(emit(OP_JMP));
                }
                break;
            case AST_CONTINUE:
                var leveln = ast.child[0];
                var target = continueTarget(ast, leveln === ZNode.NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid continue statement', ast.pos);
                }
                else {
                    target.val.continues.push(emit(OP_JMP));
                }
                break;
            case AST_RETURN:
                if(ast.child[0] === ZNode.NONE){
                    emit(OP_RETURNNULL);
                }
                else {
                    compileExpression(ast.child[0]);
                    emit(OP_RETURN);
                }
                break;
            case AST_IF:
                compileExpression(ast.child[0]);
                var line1 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                var line2 = emit(OP_JMP);
                setArg(line1, opa.opCount);
                ast.child[2] !== ZNode.NONE && compileStatement(ast.child[2]);
                setArg(line2, opa.opCount);
                break;
            case AST_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileExpression(ast.child[0]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line1);
                break;
            case AST_DO_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileStatement(ast.child[1]);
                var line2 = opa.opCount;
                compileExpression(ast.child[0]);
                emit(OP_JNZ, line1);
                ast.val.done(opa.opCount, line2);
                break;
            case AST_FOR:
                ast.val = new LoopInfo(true, true);
                compileExpression(ast.child[0]);
                var line1 = opa.opCount;
                compileExpression(ast.child[1]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[3]);
                var line3 = opa.opCount;
                compileExpression(ast.child[2]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line3);
                break;
        }
    }
    function compileExpression(root){
        switch(root.type){
            case AST_NONE: break;
            case AST_EXPR_LIST:
                for(var i = 0, _a = root.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    i < _a.length - 1 && emit(OP_POP);
                }
                break;
            case AST_BINARYOP:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(root.val);
                break;
            case AST_UNARYOP:
                compileExpression(root.child[0]);
                emit(root.val);
                break;
            case AST_POSTINC:
                compileExpression(root.child[0]);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                break;
            case AST_POSTDEC:
                compileExpression(root.child[0]);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                break;
            case AST_SUFFIXINC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_SUFFIXDEC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_ASSIGN:
                if(root.val === null){
                    compileAssign(root.child[0], root.child[1]);
                }
                else {
                    compileExpression(root.child[0]);
                    compileExpression(root.child[1]);
                    emit(root.val);
                    compileAssignTop(root.child[0]);
                }
                break;
            case AST_VARIABLE:
                compileExpression(root.child[0]);
                emit(OP_GETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(OP_GETPROP);
                break;
            case AST_OFFSET:
                compileExpression(root.child[0]);
                if(root.child[1] === ZNode.NONE){
                    emit(OP_GETMAXOFFSET);
                }
                else {
                    compileExpression(root.child[1]);
                    emit(OP_GETOFFSET);
                }
                break;
            case AST_FUNCTIONCALL:
                if(root.child[0].type === AST_STRING){
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKENAME, [root.child[0].val, root.child[1].child.length]);
                }
                else {
                    compileExpression(root.child[0]);
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKE, root.child[1].child.length);
                }
                break;
            case AST_METHODCALL:
                compileExpression(root.child[0]);
                if(root.child[1].type === AST_STRING){
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHODNAME, [root.child[1].val, root.child[2].length]);
                }
                else {
                    compileExpression(root.child[1]);
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHOD, root.child[2].length);
                }
                break;
            case AST_LOCAL:
                emit(OP_GETLOCAL, root.val);
                break;
            case AST_INTEGER:
            case AST_FLOAT:
            case AST_STRING:
                emit(OP_PUSH, root.val);
                break;
            case AST_STRING_LIST:
                compileStringList(root);
                break;
            case AST_CONST:
                emit(OP_GETCONST, root.val);
                break;
        }
    }
    function compileStringList(list){
        var s = '', sc = 0;
        for(var i = 0, _a = list.child; i < _a.length; i++){
            if(_a[i].type === AST_STRING){
                s += _a[i].val;
            }
            else {
                sc++;
                emit(OP_PUSH, s);
                s = '';
                compileExpression(_a[i]);
            }
        }
        if(s !== ''){
            sc++;
            emit(OP_PUSH, s);
        }
        emit(OP_CONCAT, sc);
    }
    function compileAssign(dest, src){
        switch(dest.type){
            case AST_LOCAL:
                compileExpression(src);
                emit(OP_SETLOCAL, dest.val);
                break;
            case AST_VARIABLE:
                compileExpression(dest.child[0]);
                compileExpression(src);
                emit(OP_SETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(dest.child[0]);
                compileExpression(dest.child[1]);
                compileExpression(src);
                emit(OP_SETPROP);
                break;
            case AST_OFFSET:
                compileExpression(dest.child[0]);
                if(dest.child[0] === ZNode.NONE){
                    compileExpression(src);
                    emit(OP_SETMAXOFFSET);
                }
                else {
                    compileExpression(dest.child[1]);
                    compileExpression(src);
                    emit(OP_SETOFFSET);
                }
                break;
            default:;
        }
    }
    function compileAssignTop(dest){
        localNode.val = allocateRegister();
        emit(OP_SETLOCAL, localNode.val);
        emit(OP_POP);
        compileAssign(dest, localNode);
        releaseRegister(localNode.val);
    }
}

exports.compile = function compile(fname, source, errs){
    var parser = createParser();
    var outputs = { astRoot: null };
    var err = false;
    parser.init(outputs);
    parser.on('lexicalerror', function(c, line, column){
        line++;
        column++;
        errs.push('lexical error: (line ' + line + ', column ' + column + '): unexpected character "' + c + '"');
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', function(msg, token){
        errs.push('syntax error: (line ' + token.startLine + ', column ' + token.startColumn + '):' + msg);
        parser.halt();
        err = true;
    });
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        var cp = createCompiler(fname);
        cp.addErrHandler(function(msg){
            errs.push(msg);
        });
        return cp.compile(outputs.astRoot);
    }
}

})));