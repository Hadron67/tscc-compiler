/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

// universal module defination
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.zend = {})));
}(this, (function (exports) { 'use strict';
var toString = {}.toString;
function isArray(a){
    return toString.call(a) === '[object Array]';
}
function ZNode(type, child, val, pos){
    this.parent = null;
    this.type = type;
    this.val = val || null;
    this.child = isArray(child) ? child : child === null || typeof child === 'undefined' ? [] : [child];
    this.pos = pos || null;
    for(var i = 0, _a = this.child; i < _a.length; i++){
        _a[i] !== ZNode.NONE && (_a[i].parent = this);
    }
}
ZNode.NONE = new ZNode(AST_NONE);
ZNode.prototype.add = function(c){
    this.child.push(c);
    c.parent = this;
}
ZNode.prototype.toString = function(){

}
ZNode.prototype.getPos = function(){
    var start = this;
    var end = this;
    while(start.child.length > 0){
        start = start.child[0];
    }
    while(end.child.length > 0){
        end = end.child[end.child.length - 1];
    }
    return {
        startLine: start.pos.startLine,
        startColumn: start.pos.startColumn,
        endLine: end.pos.endLine,
        endColumn: end.pos.endColumn
    };
}

function nodeFromToken(t){
    return new ZNode(AST_NONE, null, t.val, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeFromTrivalToken(t){
    return new ZNode(AST_NONE, null, null, {
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    });
}
function nodeBetween(from, to, val){
    return new ZNode(AST_NONE, null, val, {
        startLine: from.pos.startLine,
        startColumn: from.pos.startColumn,
        endLine: to.pos.endLine,
        endColumn: to.pos.endColumn
    });
}
var escapes = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'",
    '`': '`'
};
function unescape(s){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}
function extractHeredocStart(s){
    s = s.substr(3, s.length - 4).trim();
    if(s.charAt(0) === '"' || s.charAt(0) === "'"){
        s = s.substr(1, s.length - 2);
    }
    return s;
}


var cc = 0;
function defineOpcode(name, handler){
    return {
        code: cc++,
        name: name,
        handler: handler || null
    };
}
var OP_NOP = defineOpcode('nop');
var OP_PUSH = defineOpcode('push');
var OP_POP = defineOpcode('pop');
var OP_DUP = defineOpcode('dup');
var OP_GETVAR = defineOpcode('getVar');
var OP_SETVAR = defineOpcode('setVar');
var OP_SETPROP = defineOpcode('setProp');
var OP_GETPROP = defineOpcode('getProp');
var OP_GETOFFSET = defineOpcode('getOffset');
var OP_SETOFFSET = defineOpcode('setOffset');
var OP_GETMAXOFFSET = defineOpcode('getMaxOffset');
var OP_SETMAXOFFSET = defineOpcode('setMaxOffset');
var OP_GETCONST = defineOpcode('getConst');
var OP_SETLOCAL = defineOpcode('setLocal');
var OP_GETLOCAL = defineOpcode('getLocal');

var OP_PLUS = defineOpcode('plus');
var OP_MINUS = defineOpcode('minus');
var OP_TIMES = defineOpcode('times');
var OP_DIVIDE = defineOpcode('divide');
var OP_POW = defineOpcode('pow');
var OP_CONCAT = defineOpcode('concat');
var OP_MOD = defineOpcode('mod');
var OP_BITAND = defineOpcode('bitAnd');
var OP_BITOR = defineOpcode('bitOr');
var OP_BITXOR = defineOpcode('bitXor');
var OP_BITNOT = defineOpcode('bitNot');
var OP_AND = defineOpcode('and');
var OP_OR = defineOpcode('or');
var OP_NOT = defineOpcode('not');
var OP_XOR = defineOpcode('xor');
var OP_LEFTSHIFT = defineOpcode('leftShift');
var OP_RIGHTSHIFT = defineOpcode('rightShift');
var OP_POSITIVE = defineOpcode('positive');
var OP_NEGATIVE = defineOpcode('negative');
var OP_INC = defineOpcode('inc');
var OP_DEC = defineOpcode('dec');
var OP_GREATERTHAN = defineOpcode('greaterThan');
var OP_LESSTHAN = defineOpcode('lessThan');
var OP_EQUAL = defineOpcode('equal');
var OP_IDENTICAL = defineOpcode('identical');
var OP_GREATERTHANOREQUAL = defineOpcode('greaterThanOrEqual');
var OP_LESSTHANOREQUAL = defineOpcode('lessThanOrEqual');
var OP_NOTEQUAL = defineOpcode('notEqual');
var OP_NOTIDENTICAL = defineOpcode('notIdentical');
var OP_ECHO = defineOpcode('echo');

var OP_ARRAY = defineOpcode('array');
var OP_ADDARRAYITEM = defineOpcode('addArrayItem');
var OP_ADDARRAYPAIR = defineOpcode('addArrayPair');

var OP_BOOLCAST = defineOpcode('boolCast');

var OP_INVOKE = defineOpcode('invoke');
var OP_INVOKENAME = defineOpcode('invokeName');
var OP_INVOKEMETHOD = defineOpcode('invokeMethod');
var OP_INVOKEMETHODNAME = defineOpcode('invokeMethodName');
var OP_NEW = defineOpcode('new');
var OP_DEFINEFUNCTION = defineOpcode('defineFunction');
var OP_ENTRY = defineOpcode('entry');
var OP_PARAM = defineOpcode('param');
var OP_USE = defineOpcode('use');
var OP_ENDFUNCTION = defineOpcode('endFunction');

var OP_JMP = defineOpcode('jmp');
var OP_JZ = defineOpcode('jz');
var OP_JNZ = defineOpcode('jnz');
var OP_RETURN = defineOpcode('return');
var OP_RETURNNULL = defineOpcode('returnNull');
var OP_CODE = defineOpcode('code');
var OP_ENDCODE = defineOpcode('endCode');

cc = 0;
var AST_NONE = cc++;
var AST_TOPLIST = cc++;
var AST_STATEMENTLIST = cc++;
var AST_ECHO = cc++;
var AST_IF = cc++;
var AST_WHILE = cc++;
var AST_DO_WHILE = cc++;
var AST_FOR = cc++;
var AST_EXPR_LIST = cc++;
var AST_CONDITIONALEXPR = cc++;
var AST_ARGLIST = cc++;
var AST_PARAMLIST = cc++;
var AST_LEXICALVARLIST = cc++;
var AST_FUNCTIONCALL = cc++;
var AST_METHODCALL = cc++;
var AST_FUNCTION = cc++;
var AST_ANONYFUNCTION = cc++;
var AST_BREAK = cc++;
var AST_CONTINUE = cc++;
var AST_RETURN = cc++;

var AST_VARIABLE = cc++;
var AST_PROPERTY = cc++;
var AST_OFFSET = cc++;
var AST_ASSIGN = cc++;
var AST_BINARYOP = cc++;
var AST_UNARYOP = cc++;
var AST_LOGICALOR = cc++;
var AST_LOGICALAND = cc++;
var AST_POSTINC = cc++;
var AST_SUFFIXINC = cc++;
var AST_POSTDEC = cc++;
var AST_SUFFIXDEC = cc++;

var AST_CONST = cc++;
var AST_INTEGER = cc++;
var AST_FLOAT = cc++;
var AST_STRING = cc++;
var AST_STRING_LIST = cc++;
var AST_NONE_END_LABEL = cc++;
var AST_ARRAY = cc++;
var AST_ARRAYPAIR = cc++;
var AST_LOCAL = cc++;


/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     1,     1,     1,     2,     1,     1,     1,     1,     3,
         9,    10,    11,    -1,     3,     3,     3,     3,     3,     3,
         3,     3,    -1,     3,     3,     3,     8,     3,     3,     3,
         3,    -1,     3,     3,     7,     3,     3,     3,     3,     3,
        -1,     5,     3,     3,     6,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     3,     3,     3,     3,    -1,     3,
         4,     3,     3,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexdisnext0 = [ 
         0,    63,    54,    45,    36,    -9,    27,    18,     9,    -9,
        -9,    -9,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
         8,     8,     8,    -1,     8,     8,     8,     8,     7,     7,
         7,     7,    -1,     7,     7,     7,     7,     6,     6,     6,
         6,    -1,     6,     6,     6,     6,     4,     4,     4,     4,
        -1,     4,     4,     4,     4,     3,     3,     3,     3,    -1,
         3,     3,     3,     3,     2,     2,     2,     2,    -1,     2,
         2,     2,     2,     1,     1,     1,     1,    -1,     1,     1,
         1,     1,
]; 
var jjlexclassTable0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         4,     5,     0,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
         0,     0,     8,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable0 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd0 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,1,0,1,1,1,0,0,0,
]; 
var jjlextable0 = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1 = [ 
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        58,    57,    57,    57,    57,    57,    57,    57,    57,   146,
        57,    57,    57,    57,    57,    57,   146,   146,   146,   146,
        57,    57,    57,    57,    57,    57,    59,    57,    57,    57,
        57,   146,   146,   146,   146,   146,   146,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   107,
       106,   106,   106,   106,   108,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   107,   106,   106,   106,   106,
       108,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   107,   106,   106,   106,   106,   131,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    58,    57,    57,    57,    57,    57,
        57,    57,    57,   146,    57,    57,    57,    57,    57,    57,
       146,   146,   146,   146,    57,    57,    57,    57,    57,    57,
        59,    57,    57,    57,    57,   146,   146,   146,   146,   146,
       146,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   133,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   107,
       106,   106,   106,   106,   131,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    58,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    59,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   107,   106,   106,   106,   106,   108,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    58,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        59,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        58,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    59,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    52,    52,   179,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,   170,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
       135,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,     1,     2,     3,     4,     5,     6,
         7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
        17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
        27,    27,    27,    27,    27,    28,    27,    29,    30,   111,
        31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
        27,    41,    27,    42,    27,    27,    27,    27,    43,    27,
        27,    44,    45,    27,    27,    46,    47,    48,    49,   159,
       160,   110,   111,   110,   134,    71,   111,    19,   109,   109,
        68,    67,     1,     2,     3,    69,   161,    72,    72,    72,
        70,    72,    60,   161,   161,   161,   161,   161,   161,   161,
       161,   161,    61,    72,    72,    72,   161,    72,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   159,
       160,    64,     1,    50,     3,     1,     2,     3,    65,    66,
         1,     2,     3,   174,   175,   115,   161,   159,   160,   112,
       113,    99,   114,   161,   161,   161,   161,   161,   161,   161,
       161,   161,    77,    78,    75,    76,   161,   105,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   135,
        62,   100,    55,   147,    73,    74,   101,    84,   148,    63,
        79,    67,    54,    51,    -1,    -1,    56,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,   149,   149,   149,   149,   149,   149,
       149,   149,   149,    -1,    -1,    -1,    -1,   149,    -1,   149,
       149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
       149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
       168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   169,
        -1,    -1,    -1,    -1,    -1,    -1,   169,   169,   169,   169,
       169,   169,   169,   169,   169,    -1,    -1,    -1,    -1,   169,
        -1,   169,   169,   169,   169,   169,   169,   169,   169,   169,
       169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
       169,   169,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
        -1,    -1,    -1,   167,   167,   167,   167,   167,   167,   167,
       167,   167,    -1,    -1,    -1,    -1,   167,    -1,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   168,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   169,    -1,
        -1,    -1,    -1,    -1,    -1,   169,   169,   169,   169,   169,
       169,   169,   169,   169,    -1,    -1,    -1,    -1,   169,    -1,
       169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
       169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
       169,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
        -1,    -1,   167,   167,   167,   167,   167,   167,   167,   167,
       167,    -1,    -1,    -1,    -1,   167,    -1,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,   186,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
       185,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,   184,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    80,    80,    80,    80,    80,   183,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,   182,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,   181,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,   180,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,   178,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,   177,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,   176,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,   173,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,   172,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,   171,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,   165,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,   164,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,   163,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,   162,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    80,    80,   156,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,   155,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,   154,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,    80,    80,    80,   153,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,   152,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,   151,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,   150,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,   145,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,   144,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,   143,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,   142,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,   141,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,   140,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,   139,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,   138,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,   137,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,   136,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,   102,    -1,    -1,    -1,    -1,    -1,    -1,   102,
       102,   102,   102,   102,   102,   102,   102,   102,    -1,    -1,
        -1,    -1,   102,    -1,   102,   102,   102,   102,   102,   102,
       102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
       102,   102,   102,   102,   102,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,   129,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,   128,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,   127,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,   126,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,   125,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,   124,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,   123,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,   122,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,   121,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,   120,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,   119,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    80,   118,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,   117,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,   116,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,   102,
        -1,    -1,    -1,    -1,    -1,    -1,   102,   102,   102,   102,
       102,   102,   102,   102,   102,    -1,    -1,    -1,    -1,   102,
        -1,   102,   102,   102,   102,   102,   102,   102,   102,   102,
       102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
       102,   102,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,    80,    80,    80,    80,
        98,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    97,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,    96,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        95,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    94,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    92,    80,    80,    80,    80,    93,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        80,    -1,    80,    80,    90,    80,    80,    80,    80,    80,
        80,    91,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    89,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        88,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    80,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    87,    80,    80,    80,    80,
        80,    80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    80,    -1,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    86,    80,
        80,    80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,
        -1,    -1,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    -1,    -1,    -1,    -1,    85,    -1,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    -1,
        -1,    -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,
        80,    83,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    -1,    -1,    80,    80,
        80,    80,    80,    80,    80,    82,    80,    -1,    -1,    -1,
        -1,    80,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    -1,    -1,    -1,    -1,    -1,
        -1,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        -1,    -1,    -1,    -1,    80,    -1,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    -1,    -1,
        -1,    -1,    -1,    -1,    80,    80,    80,    80,    80,    81,
        80,    80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
       158,   158,   158,   158,   158,   158,   158,   158,   158,    -1,
        -1,    -1,    -1,   158,    -1,   158,   158,   158,   158,   158,
       158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       158,   158,   158,   158,   158,   158,   157,   157,   157,   157,
       157,   157,   157,   157,   157,    -1,    -1,    -1,    -1,   157,
        -1,   157,   157,   157,   157,   157,   157,   157,   157,   157,
       157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
       157,   157,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    -1,    -1,    -1,    -1,    53,    -1,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,   130,   103,
        -1,    -1,    -1,    -1,   103,   130,   130,   130,   130,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       130,   130,   130,   130,   130,   130,    -1,    -1,    -1,    -1,
       103,    -1,    -1,    -1,    -1,    -1,   103,    -1,    -1,    -1,
       103,    -1,    -1,    -1,    -1,    -1,   103,    -1,    -1,   103,
        -1,   103,   104,    -1,   104,
]; 
var jjlexdisnext1 = [ 
       923,  1059,  1054,  1051,  1100,   -66,   858,  5046,  1099,  1103,
       660,   -66,   -66,   999,  1096,   -66,  1035,  1102,   987,   978,
       -66,   -66,  1092,  1061,  1059,  1096,  4938,  4895,  4852,  4809,
       -66,   -66,  1094,  4766,   -66,  4723,  4680,  4637,  4594,  4551,
      4508,  4465,  4422,  4379,  4336,  4293,   -66,  1048,   -66,   -66,
      1001,  1093,   792,  4250,   -66,   -66,   -66,   594,   -66,  5104,
      1064,   -66,   -66,   -66,   -66,   -66,   -66,   982,   528,   726,
       -66,   980,   977,  1047,   -66,  1049,   -66,   -66,  1042,   -66,
      4207,  4164,  4121,  4078,   -66,  4035,  3992,  3949,  3906,  3863,
      3820,  3777,  3734,  3691,  3648,  3605,  3562,  3519,  3476,   -66,
       -66,   -66,  3433,   462,  5089,   -66,   396,   330,   976,   979,
       973,   940,   859,   -66,   -66,   -66,  3390,  3347,  3304,  3261,
      3218,  3175,  3132,  3089,  3046,  3003,  2960,  2917,  2874,  2831,
       264,   198,   132,   -66,    66,  1108,  2788,  2745,  2702,  2659,
      2616,  2573,  2530,  2487,  2444,  2401,     0,  5010,  4974,  1047,
      2358,  2315,  2272,  2229,  2186,  2143,  2100,  1326,  1269,   -66,
       792,   987,  2057,  2014,  1971,  1928,  1065,  1217,  1061,  1160,
       -66,  1885,  1842,  1799,   -66,   726,  1756,  1713,  1670,   -66,
      1627,  1584,  1541,  1498,  1455,  1412,  1369,
]; 
var jjlexchecknext1 = [ 
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
       146,   146,   146,   146,   146,   146,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
       134,   134,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
       132,   132,   132,   132,   132,   132,   132,   132,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
       131,   131,   131,   131,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
       106,   106,   103,   103,   103,   103,   103,   103,   103,   103,
       103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
       103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
       103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
       103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
       103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
       103,   103,   103,   103,   103,   103,   103,   103,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    69,    69,   175,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    52,    52,   160,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,     6,     6,
       112,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   161,
       161,    72,   110,    72,   108,    19,    72,    19,   109,    71,
        18,    67,    50,    50,    50,    18,   161,    19,   109,    71,
        18,    67,    13,   161,   161,   161,   161,   161,   161,   161,
       161,   161,    13,    19,   109,    71,   161,    67,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
       161,   161,   161,   161,   161,   161,   161,   161,   161,   149,
       149,    16,     3,     3,     3,     2,     2,     2,    16,    16,
         1,     1,     1,   168,   168,    78,   149,   166,   166,    73,
        73,    47,    75,   149,   149,   149,   149,   149,   149,   149,
       149,   149,    24,    24,    23,    23,   149,    60,   149,   149,
       149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
       149,   149,   149,   149,   149,   149,   149,   149,   149,   135,
        14,    47,     9,   135,    22,    22,    51,    32,   135,    14,
        25,    17,     8,     4,    -1,    -1,     9,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,   135,   135,   135,   135,   135,   135,
       135,   135,   135,    -1,    -1,    -1,    -1,   135,    -1,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
       169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   169,
        -1,    -1,    -1,    -1,    -1,    -1,   169,   169,   169,   169,
       169,   169,   169,   169,   169,    -1,    -1,    -1,    -1,   169,
        -1,   169,   169,   169,   169,   169,   169,   169,   169,   169,
       169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
       169,   169,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
        -1,    -1,    -1,   167,   167,   167,   167,   167,   167,   167,
       167,   167,    -1,    -1,    -1,    -1,   167,    -1,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
       167,   167,   167,   167,   167,   167,   167,   167,   167,   158,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,    -1,
        -1,    -1,    -1,    -1,    -1,   158,   158,   158,   158,   158,
       158,   158,   158,   158,    -1,    -1,    -1,    -1,   158,    -1,
       158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
       158,   157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,
        -1,    -1,   157,   157,   157,   157,   157,   157,   157,   157,
       157,    -1,    -1,    -1,    -1,   157,    -1,   157,   157,   157,
       157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
       157,   157,   157,   157,   157,   157,   157,   157,   186,    -1,
        -1,    -1,    -1,    -1,    -1,   186,   186,   186,   186,   186,
       186,   186,   186,   186,    -1,    -1,    -1,    -1,   186,    -1,
       186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
       186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
       186,   185,    -1,    -1,    -1,    -1,    -1,    -1,   185,   185,
       185,   185,   185,   185,   185,   185,   185,    -1,    -1,    -1,
        -1,   185,    -1,   185,   185,   185,   185,   185,   185,   185,
       185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
       185,   185,   185,   185,   184,    -1,    -1,    -1,    -1,    -1,
        -1,   184,   184,   184,   184,   184,   184,   184,   184,   184,
        -1,    -1,    -1,    -1,   184,    -1,   184,   184,   184,   184,
       184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
       184,   184,   184,   184,   184,   184,   184,   183,    -1,    -1,
        -1,    -1,    -1,    -1,   183,   183,   183,   183,   183,   183,
       183,   183,   183,    -1,    -1,    -1,    -1,   183,    -1,   183,
       183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
       183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
       182,    -1,    -1,    -1,    -1,    -1,    -1,   182,   182,   182,
       182,   182,   182,   182,   182,   182,    -1,    -1,    -1,    -1,
       182,    -1,   182,   182,   182,   182,   182,   182,   182,   182,
       182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
       182,   182,   182,   181,    -1,    -1,    -1,    -1,    -1,    -1,
       181,   181,   181,   181,   181,   181,   181,   181,   181,    -1,
        -1,    -1,    -1,   181,    -1,   181,   181,   181,   181,   181,
       181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
       181,   181,   181,   181,   181,   181,   180,    -1,    -1,    -1,
        -1,    -1,    -1,   180,   180,   180,   180,   180,   180,   180,
       180,   180,    -1,    -1,    -1,    -1,   180,    -1,   180,   180,
       180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
       180,   180,   180,   180,   180,   180,   180,   180,   180,   178,
        -1,    -1,    -1,    -1,    -1,    -1,   178,   178,   178,   178,
       178,   178,   178,   178,   178,    -1,    -1,    -1,    -1,   178,
        -1,   178,   178,   178,   178,   178,   178,   178,   178,   178,
       178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
       178,   178,   177,    -1,    -1,    -1,    -1,    -1,    -1,   177,
       177,   177,   177,   177,   177,   177,   177,   177,    -1,    -1,
        -1,    -1,   177,    -1,   177,   177,   177,   177,   177,   177,
       177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
       177,   177,   177,   177,   177,   176,    -1,    -1,    -1,    -1,
        -1,    -1,   176,   176,   176,   176,   176,   176,   176,   176,
       176,    -1,    -1,    -1,    -1,   176,    -1,   176,   176,   176,
       176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
       176,   176,   176,   176,   176,   176,   176,   176,   173,    -1,
        -1,    -1,    -1,    -1,    -1,   173,   173,   173,   173,   173,
       173,   173,   173,   173,    -1,    -1,    -1,    -1,   173,    -1,
       173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
       173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
       173,   172,    -1,    -1,    -1,    -1,    -1,    -1,   172,   172,
       172,   172,   172,   172,   172,   172,   172,    -1,    -1,    -1,
        -1,   172,    -1,   172,   172,   172,   172,   172,   172,   172,
       172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
       172,   172,   172,   172,   171,    -1,    -1,    -1,    -1,    -1,
        -1,   171,   171,   171,   171,   171,   171,   171,   171,   171,
        -1,    -1,    -1,    -1,   171,    -1,   171,   171,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
       171,   171,   171,   171,   171,   171,   171,   165,    -1,    -1,
        -1,    -1,    -1,    -1,   165,   165,   165,   165,   165,   165,
       165,   165,   165,    -1,    -1,    -1,    -1,   165,    -1,   165,
       165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
       165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
       164,    -1,    -1,    -1,    -1,    -1,    -1,   164,   164,   164,
       164,   164,   164,   164,   164,   164,    -1,    -1,    -1,    -1,
       164,    -1,   164,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
       164,   164,   164,   163,    -1,    -1,    -1,    -1,    -1,    -1,
       163,   163,   163,   163,   163,   163,   163,   163,   163,    -1,
        -1,    -1,    -1,   163,    -1,   163,   163,   163,   163,   163,
       163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
       163,   163,   163,   163,   163,   163,   162,    -1,    -1,    -1,
        -1,    -1,    -1,   162,   162,   162,   162,   162,   162,   162,
       162,   162,    -1,    -1,    -1,    -1,   162,    -1,   162,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
       162,   162,   162,   162,   162,   162,   162,   162,   162,   156,
        -1,    -1,    -1,    -1,    -1,    -1,   156,   156,   156,   156,
       156,   156,   156,   156,   156,    -1,    -1,    -1,    -1,   156,
        -1,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
       156,   156,   155,    -1,    -1,    -1,    -1,    -1,    -1,   155,
       155,   155,   155,   155,   155,   155,   155,   155,    -1,    -1,
        -1,    -1,   155,    -1,   155,   155,   155,   155,   155,   155,
       155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
       155,   155,   155,   155,   155,   154,    -1,    -1,    -1,    -1,
        -1,    -1,   154,   154,   154,   154,   154,   154,   154,   154,
       154,    -1,    -1,    -1,    -1,   154,    -1,   154,   154,   154,
       154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
       154,   154,   154,   154,   154,   154,   154,   154,   153,    -1,
        -1,    -1,    -1,    -1,    -1,   153,   153,   153,   153,   153,
       153,   153,   153,   153,    -1,    -1,    -1,    -1,   153,    -1,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
       153,   152,    -1,    -1,    -1,    -1,    -1,    -1,   152,   152,
       152,   152,   152,   152,   152,   152,   152,    -1,    -1,    -1,
        -1,   152,    -1,   152,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
       152,   152,   152,   152,   151,    -1,    -1,    -1,    -1,    -1,
        -1,   151,   151,   151,   151,   151,   151,   151,   151,   151,
        -1,    -1,    -1,    -1,   151,    -1,   151,   151,   151,   151,
       151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
       151,   151,   151,   151,   151,   151,   151,   150,    -1,    -1,
        -1,    -1,    -1,    -1,   150,   150,   150,   150,   150,   150,
       150,   150,   150,    -1,    -1,    -1,    -1,   150,    -1,   150,
       150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
       150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
       145,    -1,    -1,    -1,    -1,    -1,    -1,   145,   145,   145,
       145,   145,   145,   145,   145,   145,    -1,    -1,    -1,    -1,
       145,    -1,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
       145,   145,   145,   144,    -1,    -1,    -1,    -1,    -1,    -1,
       144,   144,   144,   144,   144,   144,   144,   144,   144,    -1,
        -1,    -1,    -1,   144,    -1,   144,   144,   144,   144,   144,
       144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
       144,   144,   144,   144,   144,   144,   143,    -1,    -1,    -1,
        -1,    -1,    -1,   143,   143,   143,   143,   143,   143,   143,
       143,   143,    -1,    -1,    -1,    -1,   143,    -1,   143,   143,
       143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
       143,   143,   143,   143,   143,   143,   143,   143,   143,   142,
        -1,    -1,    -1,    -1,    -1,    -1,   142,   142,   142,   142,
       142,   142,   142,   142,   142,    -1,    -1,    -1,    -1,   142,
        -1,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
       142,   142,   141,    -1,    -1,    -1,    -1,    -1,    -1,   141,
       141,   141,   141,   141,   141,   141,   141,   141,    -1,    -1,
        -1,    -1,   141,    -1,   141,   141,   141,   141,   141,   141,
       141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
       141,   141,   141,   141,   141,   140,    -1,    -1,    -1,    -1,
        -1,    -1,   140,   140,   140,   140,   140,   140,   140,   140,
       140,    -1,    -1,    -1,    -1,   140,    -1,   140,   140,   140,
       140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
       140,   140,   140,   140,   140,   140,   140,   140,   139,    -1,
        -1,    -1,    -1,    -1,    -1,   139,   139,   139,   139,   139,
       139,   139,   139,   139,    -1,    -1,    -1,    -1,   139,    -1,
       139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
       139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
       139,   138,    -1,    -1,    -1,    -1,    -1,    -1,   138,   138,
       138,   138,   138,   138,   138,   138,   138,    -1,    -1,    -1,
        -1,   138,    -1,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
       138,   138,   138,   138,   137,    -1,    -1,    -1,    -1,    -1,
        -1,   137,   137,   137,   137,   137,   137,   137,   137,   137,
        -1,    -1,    -1,    -1,   137,    -1,   137,   137,   137,   137,
       137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
       137,   137,   137,   137,   137,   137,   137,   136,    -1,    -1,
        -1,    -1,    -1,    -1,   136,   136,   136,   136,   136,   136,
       136,   136,   136,    -1,    -1,    -1,    -1,   136,    -1,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
       129,    -1,    -1,    -1,    -1,    -1,    -1,   129,   129,   129,
       129,   129,   129,   129,   129,   129,    -1,    -1,    -1,    -1,
       129,    -1,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
       129,   129,   129,   128,    -1,    -1,    -1,    -1,    -1,    -1,
       128,   128,   128,   128,   128,   128,   128,   128,   128,    -1,
        -1,    -1,    -1,   128,    -1,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
       128,   128,   128,   128,   128,   128,   127,    -1,    -1,    -1,
        -1,    -1,    -1,   127,   127,   127,   127,   127,   127,   127,
       127,   127,    -1,    -1,    -1,    -1,   127,    -1,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
       127,   127,   127,   127,   127,   127,   127,   127,   127,   126,
        -1,    -1,    -1,    -1,    -1,    -1,   126,   126,   126,   126,
       126,   126,   126,   126,   126,    -1,    -1,    -1,    -1,   126,
        -1,   126,   126,   126,   126,   126,   126,   126,   126,   126,
       126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
       126,   126,   125,    -1,    -1,    -1,    -1,    -1,    -1,   125,
       125,   125,   125,   125,   125,   125,   125,   125,    -1,    -1,
        -1,    -1,   125,    -1,   125,   125,   125,   125,   125,   125,
       125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
       125,   125,   125,   125,   125,   124,    -1,    -1,    -1,    -1,
        -1,    -1,   124,   124,   124,   124,   124,   124,   124,   124,
       124,    -1,    -1,    -1,    -1,   124,    -1,   124,   124,   124,
       124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
       124,   124,   124,   124,   124,   124,   124,   124,   123,    -1,
        -1,    -1,    -1,    -1,    -1,   123,   123,   123,   123,   123,
       123,   123,   123,   123,    -1,    -1,    -1,    -1,   123,    -1,
       123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
       123,   122,    -1,    -1,    -1,    -1,    -1,    -1,   122,   122,
       122,   122,   122,   122,   122,   122,   122,    -1,    -1,    -1,
        -1,   122,    -1,   122,   122,   122,   122,   122,   122,   122,
       122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
       122,   122,   122,   122,   121,    -1,    -1,    -1,    -1,    -1,
        -1,   121,   121,   121,   121,   121,   121,   121,   121,   121,
        -1,    -1,    -1,    -1,   121,    -1,   121,   121,   121,   121,
       121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
       121,   121,   121,   121,   121,   121,   121,   120,    -1,    -1,
        -1,    -1,    -1,    -1,   120,   120,   120,   120,   120,   120,
       120,   120,   120,    -1,    -1,    -1,    -1,   120,    -1,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
       119,    -1,    -1,    -1,    -1,    -1,    -1,   119,   119,   119,
       119,   119,   119,   119,   119,   119,    -1,    -1,    -1,    -1,
       119,    -1,   119,   119,   119,   119,   119,   119,   119,   119,
       119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
       119,   119,   119,   118,    -1,    -1,    -1,    -1,    -1,    -1,
       118,   118,   118,   118,   118,   118,   118,   118,   118,    -1,
        -1,    -1,    -1,   118,    -1,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
       118,   118,   118,   118,   118,   118,   117,    -1,    -1,    -1,
        -1,    -1,    -1,   117,   117,   117,   117,   117,   117,   117,
       117,   117,    -1,    -1,    -1,    -1,   117,    -1,   117,   117,
       117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
       117,   117,   117,   117,   117,   117,   117,   117,   117,   116,
        -1,    -1,    -1,    -1,    -1,    -1,   116,   116,   116,   116,
       116,   116,   116,   116,   116,    -1,    -1,    -1,    -1,   116,
        -1,   116,   116,   116,   116,   116,   116,   116,   116,   116,
       116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
       116,   116,   102,    -1,    -1,    -1,    -1,    -1,    -1,   102,
       102,   102,   102,   102,   102,   102,   102,   102,    -1,    -1,
        -1,    -1,   102,    -1,   102,   102,   102,   102,   102,   102,
       102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
       102,   102,   102,   102,   102,    98,    -1,    -1,    -1,    -1,
        -1,    -1,    98,    98,    98,    98,    98,    98,    98,    98,
        98,    -1,    -1,    -1,    -1,    98,    -1,    98,    98,    98,
        98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
        98,    98,    98,    98,    98,    98,    98,    98,    97,    -1,
        -1,    -1,    -1,    -1,    -1,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    -1,    -1,    -1,    -1,    97,    -1,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
        97,    96,    -1,    -1,    -1,    -1,    -1,    -1,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    -1,    -1,    -1,
        -1,    96,    -1,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
        96,    96,    96,    96,    95,    -1,    -1,    -1,    -1,    -1,
        -1,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        -1,    -1,    -1,    -1,    95,    -1,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    94,    -1,    -1,
        -1,    -1,    -1,    -1,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    -1,    -1,    -1,    -1,    94,    -1,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        93,    -1,    -1,    -1,    -1,    -1,    -1,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    -1,    -1,    -1,    -1,
        93,    -1,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    92,    -1,    -1,    -1,    -1,    -1,    -1,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    -1,
        -1,    -1,    -1,    92,    -1,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    91,    -1,    -1,    -1,
        -1,    -1,    -1,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    -1,    -1,    -1,    -1,    91,    -1,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    90,
        -1,    -1,    -1,    -1,    -1,    -1,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    -1,    -1,    -1,    -1,    90,
        -1,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    89,    -1,    -1,    -1,    -1,    -1,    -1,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    -1,    -1,
        -1,    -1,    89,    -1,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    88,    -1,    -1,    -1,    -1,
        -1,    -1,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    -1,    -1,    -1,    -1,    88,    -1,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    87,    -1,
        -1,    -1,    -1,    -1,    -1,    87,    87,    87,    87,    87,
        87,    87,    87,    87,    -1,    -1,    -1,    -1,    87,    -1,
        87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
        87,    86,    -1,    -1,    -1,    -1,    -1,    -1,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    -1,    -1,    -1,
        -1,    86,    -1,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
        86,    86,    86,    86,    85,    -1,    -1,    -1,    -1,    -1,
        -1,    85,    85,    85,    85,    85,    85,    85,    85,    85,
        -1,    -1,    -1,    -1,    85,    -1,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
        85,    85,    85,    85,    85,    85,    85,    83,    -1,    -1,
        -1,    -1,    -1,    -1,    83,    83,    83,    83,    83,    83,
        83,    83,    83,    -1,    -1,    -1,    -1,    83,    -1,    83,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
        83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
        82,    -1,    -1,    -1,    -1,    -1,    -1,    82,    82,    82,
        82,    82,    82,    82,    82,    82,    -1,    -1,    -1,    -1,
        82,    -1,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
        82,    82,    82,    81,    -1,    -1,    -1,    -1,    -1,    -1,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    -1,
        -1,    -1,    -1,    81,    -1,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
        81,    81,    81,    81,    81,    81,    80,    -1,    -1,    -1,
        -1,    -1,    -1,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    -1,    -1,    -1,    -1,    80,    -1,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
        80,    80,    80,    80,    80,    80,    80,    80,    80,    53,
        -1,    -1,    -1,    -1,    -1,    -1,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    -1,    -1,    -1,    -1,    53,
        -1,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    45,    -1,    -1,    -1,    -1,    -1,    -1,    45,
        45,    45,    45,    45,    45,    45,    45,    45,    -1,    -1,
        -1,    -1,    45,    -1,    45,    45,    45,    45,    45,    45,
        45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
        45,    45,    45,    45,    45,    44,    -1,    -1,    -1,    -1,
        -1,    -1,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    -1,    -1,    -1,    -1,    44,    -1,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    43,    -1,
        -1,    -1,    -1,    -1,    -1,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    -1,    -1,    -1,    -1,    43,    -1,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        43,    42,    -1,    -1,    -1,    -1,    -1,    -1,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    -1,    -1,    -1,
        -1,    42,    -1,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    42,    41,    -1,    -1,    -1,    -1,    -1,
        -1,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        -1,    -1,    -1,    -1,    41,    -1,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    40,    -1,    -1,
        -1,    -1,    -1,    -1,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    -1,    -1,    -1,    -1,    40,    -1,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        39,    -1,    -1,    -1,    -1,    -1,    -1,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    -1,    -1,    -1,    -1,
        39,    -1,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    38,    -1,    -1,    -1,    -1,    -1,    -1,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    -1,
        -1,    -1,    -1,    38,    -1,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    37,    -1,    -1,    -1,
        -1,    -1,    -1,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    -1,    -1,    -1,    -1,    37,    -1,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    36,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    -1,    -1,    -1,    -1,    36,
        -1,    36,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
        36,    36,    35,    -1,    -1,    -1,    -1,    -1,    -1,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    -1,    -1,
        -1,    -1,    35,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    33,    -1,    -1,    -1,    -1,
        -1,    -1,    33,    33,    33,    33,    33,    33,    33,    33,
        33,    -1,    -1,    -1,    -1,    33,    -1,    33,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    33,    29,    -1,
        -1,    -1,    -1,    -1,    -1,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    -1,    -1,    -1,    -1,    29,    -1,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    28,    -1,    -1,    -1,    -1,    -1,    -1,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    -1,    -1,    -1,
        -1,    28,    -1,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    27,    -1,    -1,    -1,    -1,    -1,
        -1,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        -1,    -1,    -1,    -1,    27,    -1,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    26,    -1,    -1,
        -1,    -1,    -1,    -1,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    -1,    -1,    -1,    -1,    26,    -1,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
       148,   148,   148,   148,   148,   148,   148,   148,   148,    -1,
        -1,    -1,    -1,   148,    -1,   148,   148,   148,   148,   148,
       148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
       148,   148,   148,   148,   148,   148,   147,   147,   147,   147,
       147,   147,   147,   147,   147,    -1,    -1,    -1,    -1,   147,
        -1,   147,   147,   147,   147,   147,   147,   147,   147,   147,
       147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
       147,   147,     7,     7,     7,     7,     7,     7,     7,     7,
         7,    -1,    -1,    -1,    -1,     7,    -1,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,   104,    59,
        -1,    -1,    -1,    -1,    59,   104,   104,   104,   104,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       104,   104,   104,   104,   104,   104,    -1,    -1,    -1,    -1,
        59,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
        59,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    59,
        -1,    59,    59,    -1,    59,
]; 
var jjlexclassTable1 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     3,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     4,     5,     6,     7,     8,     9,    10,
        11,    12,    13,    14,    15,    16,    17,    18,    19,    19,
        19,    19,    19,    19,    19,    19,    19,    19,    20,    21,
        22,    23,    24,    25,     0,    26,    27,    27,    28,    29,
        27,    30,    30,    30,    30,    30,    30,    30,    31,    32,
        30,    30,    33,    30,    30,    30,    30,    30,    34,    30,
        30,    35,    36,    37,    38,    39,    40,    41,    42,    43,
        44,    45,    46,    30,    47,    48,    30,    49,    50,    51,
        52,    53,    54,    30,    55,    56,    57,    58,    30,    59,
        60,    61,    30,    62,    63,    64,    65,     0,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,
]; 
var jjlexunicodeClassTable1 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1 = [ 
    0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,
    1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
    1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,
    0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,
    1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,
    1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,
]; 
var jjlexhasArc1 = [ 
    1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,
    0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,
    0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,0,1,0,0,1,1,1,1,0,0,0,1,0,1,
    1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,
    1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,
    0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,
    1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,
    1,1,1,1,1,1,1,
]; 
var jjlextable1 = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2 = [ 
         1,     2,     3,     4,     8,     5,     6,     1,     2,     3,
         1,     7,     3,     1,     2,     3,     1,     2,     3,    10,
        10,     9,     9,    10,    10,     9,     9,
]; 
var jjlexdisnext2 = [ 
         0,    16,    13,    10,    -1,    21,    -7,     7,    19,    17,
        15,
]; 
var jjlexchecknext2 = [ 
         0,     0,     0,     0,     4,     0,     0,     7,     7,     7,
         3,     3,     3,     2,     2,     2,     1,     1,     1,    10,
        10,     9,     9,     8,     8,     5,     5,
]; 
var jjlexclassTable2 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,    -1,    -1,    -1,     3,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,    -1,    -1,    -1,    -1,     5,    -1,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     6,    -1,    -1,    -1,    -1,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,
]; 
var jjlexunicodeClassTable2 = [ 
    
]; 
var jjlexisEnd2 = [ 
    0,1,1,1,1,1,1,1,1,1,1,
]; 
var jjlexhasArc2 = [ 
    1,1,1,1,1,1,0,1,1,1,1,
]; 
var jjlextable2 = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
var jjlexpnext3 = [ 
         1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
         4,     1,     1,     1,     1,     1,     1,    15,     7,     1,
         1,     1,     1,     1,     1,     1,     8,     1,     1,     1,
         1,     1,     9,    10,    -1,    10,    10,    11,    -1,    10,
        10,    10,     9,    10,    -1,    10,    10,    11,    -1,    10,
        10,    10,    16,    -1,    16,    16,    -1,    -1,    16,    16,
        16,    16,    17,    16,    16,    -1,    -1,    16,    16,    16,
        20,    17,    20,    20,    -1,    -1,    20,    20,    20,    20,
        -1,    20,    20,    -1,    -1,    20,    20,    20,    13,    18,
        13,    18,    -1,    -1,    -1,    18,    -1,    13,    13,    13,
        14,     5,     5,    -1,    -1,     5,     5,     5,     6,    19,
        19,    -1,    -1,    19,    19,    19,    12,    12,    -1,    -1,
        12,    12,    12,    18,    -1,    18,    -1,    -1,    -1,    18,
    
]; 
var jjlexdisnext3 = [ 
         0,    16,   -16,    94,    16,    38,   109,   -16,    87,    11,
        28,   -16,    56,   -16,   118,   102,    47,   -16,    84,    74,
        65,
]; 
var jjlexchecknext3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,     9,     4,     1,
         1,     1,     1,     1,     1,     1,     4,     1,     1,     1,
         1,     1,    10,    10,    -1,    10,    10,    10,    -1,    10,
        10,    10,     5,     5,    -1,     5,     5,     5,    -1,     5,
         5,     5,    16,    -1,    16,    16,    -1,    -1,    16,    16,
        16,    12,    16,    12,    12,    -1,    -1,    12,    12,    12,
        20,    12,    20,    20,    -1,    -1,    20,    20,    20,    19,
        -1,    19,    19,    -1,    -1,    19,    19,    19,     8,    18,
         8,    18,    -1,    -1,    -1,    18,    -1,     8,     8,     8,
         8,     3,     3,    -1,    -1,     3,     3,     3,     3,    15,
        15,    -1,    -1,    15,    15,    15,     6,     6,    -1,    -1,
         6,     6,     6,    14,    -1,    14,    -1,    -1,    -1,    14,
    
]; 
var jjlexclassTable3 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     3,
         0,     0,     0,     0,     0,     4,     0,     0,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     0,     0,
         0,     0,     6,     0,     0,     7,     7,     7,     7,     7,
         7,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     9,    10,     0,     0,     8,     0,     7,    11,     7,
         7,     7,    11,     8,     8,     8,     8,     8,     8,     8,
        12,     8,     8,     8,    12,     8,    12,    13,     8,     8,
        13,     8,     8,    14,     0,    15,     0,     0,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,
]; 
var jjlexunicodeClassTable3 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd3 = [ 
    0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,
    0,0,1,1,1,1,
]; 
var jjlexhasArc3 = [ 
    1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,
    1,1,0,1,1,1,
]; 
var jjlextable3 = {
    pnext: jjlexpnext3,
    disnext: jjlexdisnext3,
    checknext: jjlexchecknext3,
    maxAsicii: 255,
    classTable: jjlexclassTable3,
    unicodeClassTable: jjlexunicodeClassTable3,
    isEnd: jjlexisEnd3,
    hasArc: jjlexhasArc3
};
var jjlexpnext4 = [ 
         1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
         4,     1,     1,     1,     1,     1,     1,     1,     7,     1,
         1,     1,     1,     1,     1,     8,    15,     1,     1,     1,
         1,     1,     9,    10,    -1,    10,    10,    11,    -1,    -1,
        10,    10,    10,     9,    10,    -1,    10,    10,    11,    -1,
        -1,    10,    10,    10,    16,    -1,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    16,    17,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    20,    17,    20,    20,    18,    -1,
        18,    20,    20,    20,    20,    18,    20,    20,    -1,     5,
         5,    20,    20,    20,     5,     5,     5,     6,    19,    19,
        13,    -1,    -1,    19,    19,    19,    -1,    -1,    13,    -1,
        13,    13,    14,    12,    12,    18,    -1,    18,    12,    12,
        12,    -1,    18,
]; 
var jjlexdisnext4 = [ 
         0,    16,    83,    16,   -16,    40,   107,   -16,    99,    21,
        29,   -16,    60,   -16,   111,    92,    50,   -16,    74,    80,
        70,
]; 
var jjlexchecknext4 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,     1,     3,     1,
         1,     1,     1,     1,     1,     3,     9,     1,     1,     1,
         1,     1,    10,    10,    -1,    10,    10,    10,    -1,    -1,
        10,    10,    10,     5,     5,    -1,     5,     5,     5,    -1,
        -1,     5,     5,     5,    16,    -1,    16,    16,    -1,    -1,
        -1,    16,    16,    16,    12,    16,    12,    12,    -1,    -1,
        -1,    12,    12,    12,    20,    12,    20,    20,    18,    -1,
        18,    20,    20,    20,    19,    18,    19,    19,    -1,     2,
         2,    19,    19,    19,     2,     2,     2,     2,    15,    15,
         8,    -1,    -1,    15,    15,    15,    -1,    -1,     8,    -1,
         8,     8,     8,     6,     6,    14,    -1,    14,     6,     6,
         6,    -1,    14,
]; 
var jjlexclassTable4 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     1,     0,     2,     0,     0,     1,
         0,     0,     0,     0,     0,     3,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     0,     0,
         0,     0,     5,     0,     0,     6,     6,     6,     6,     6,
         6,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     8,     9,     0,     0,     7,    10,     6,    11,     6,
         6,     6,    11,     7,     7,     7,     7,     7,     7,     7,
        12,     7,     7,     7,    12,     7,    12,    13,     7,     7,
        13,     7,     7,    14,     0,    15,     0,     0,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,
]; 
var jjlexunicodeClassTable4 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd4 = [ 
    0,1,0,0,1,1,1,1,0,0,1,1,0,1,0,
    0,0,1,1,1,1,
]; 
var jjlexhasArc4 = [ 
    1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,
    1,1,0,1,1,1,
]; 
var jjlextable4 = {
    pnext: jjlexpnext4,
    disnext: jjlexdisnext4,
    checknext: jjlexchecknext4,
    maxAsicii: 255,
    classTable: jjlexclassTable4,
    unicodeClassTable: jjlexunicodeClassTable4,
    isEnd: jjlexisEnd4,
    hasArc: jjlexhasArc4
};
var jjlexpnext5 = [ 
         1,     2,     3,     1,     4,     1,     1,     1,     1,     1,
         1,     5,     1,     1,     1,     1,     1,     1,    19,    -1,
         1,    10,     1,     1,     1,     1,     1,     1,    11,     1,
         1,     1,     1,     1,    13,    14,    -1,    14,    14,    15,
        -1,    14,    14,    14,    13,    14,    -1,    14,    14,    15,
        -1,    14,    14,    14,    20,    -1,    20,    20,    -1,    -1,
        20,    20,    20,    20,    21,    20,    20,    -1,    -1,    20,
        20,    20,    24,    21,    24,    24,    -1,    -1,    24,    24,
        24,    24,    -1,    24,    24,    -1,    -1,    24,    24,    24,
        12,    -1,    12,    12,    -1,    -1,    12,    12,    12,    12,
        -1,    12,    12,    -1,    -1,    12,    12,    12,     8,     8,
         7,    -1,     8,     8,     8,     9,    -1,     6,     6,    -1,
        -1,     6,     6,     6,    23,    23,    17,    -1,    23,    23,
        23,    -1,    -1,    -1,    17,    17,    17,    18,    16,    16,
        -1,    -1,    16,    16,    16,     6,     6,    -1,    -1,     6,
         6,     6,     6,     6,    -1,    -1,     6,     6,     6,    22,
        22,    22,    22,    -1,    -1,    22,    22,
]; 
var jjlexdisnext5 = [ 
         0,    17,   144,   109,   100,    17,    93,   137,    39,   130,
       -17,   123,    84,    11,    29,   -17,    57,   -17,   154,   116,
        48,   -17,   153,    75,    66,
]; 
var jjlexchecknext5 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     1,    13,    -1,
         1,     5,     1,     1,     1,     1,     1,     1,     5,     1,
         1,     1,     1,     1,    14,    14,    -1,    14,    14,    14,
        -1,    14,    14,    14,     8,     8,    -1,     8,     8,     8,
        -1,     8,     8,     8,    20,    -1,    20,    20,    -1,    -1,
        20,    20,    20,    16,    20,    16,    16,    -1,    -1,    16,
        16,    16,    24,    16,    24,    24,    -1,    -1,    24,    24,
        24,    23,    -1,    23,    23,    -1,    -1,    23,    23,    23,
        12,    -1,    12,    12,    -1,    -1,    12,    12,    12,     6,
        -1,     6,     6,    -1,    -1,     6,     6,     6,     4,     4,
         3,    -1,     4,     4,     4,     4,    -1,     3,     3,    -1,
        -1,     3,     3,     3,    19,    19,    11,    -1,    19,    19,
        19,    -1,    -1,    -1,    11,    11,    11,    11,     9,     9,
        -1,    -1,     9,     9,     9,     7,     7,    -1,    -1,     7,
         7,     7,     2,     2,    -1,    -1,     2,     2,     2,    22,
        18,    22,    18,    -1,    -1,    22,    18,
]; 
var jjlexclassTable5 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         1,     0,     0,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     3,     0,     4,     0,     0,     3,
         0,     0,     0,     0,     0,     5,     0,     0,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     0,     0,
         0,     0,     7,     0,     0,     8,     8,     8,     8,     8,
         8,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,    10,    11,     0,     0,     9,     0,     8,    12,     8,
         8,     8,    12,     9,     9,     9,     9,     9,     9,     9,
        13,     9,     9,     9,    13,     9,    13,    14,     9,     9,
        14,     9,     9,    15,     0,    16,     0,     0,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,
]; 
var jjlexunicodeClassTable5 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd5 = [ 
    0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,
    1,0,1,0,0,0,1,1,1,1,
]; 
var jjlexhasArc5 = [ 
    1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,
    0,1,0,1,1,1,0,1,1,1,
]; 
var jjlextable5 = {
    pnext: jjlexpnext5,
    disnext: jjlexdisnext5,
    checknext: jjlexchecknext5,
    maxAsicii: 255,
    classTable: jjlexclassTable5,
    unicodeClassTable: jjlexunicodeClassTable5,
    isEnd: jjlexisEnd5,
    hasArc: jjlexhasArc5
};
var jjlexpnext6 = [ 
         1,     2,     3,     1,     1,     1,     6,     6,     1,     1,
         6,     6,     5,     4,     4,     4,
]; 
var jjlexdisnext6 = [ 
         0,     5,    10,    11,     7,     9,     3,
]; 
var jjlexchecknext6 = [ 
         0,     0,     0,     0,     0,     1,     6,     6,     1,     1,
         4,     4,     3,     5,     2,     3,
]; 
var jjlexclassTable6 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         1,     0,     0,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     0,     0,
         0,     0,     0,     0,     0,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     0,    -1,     0,     0,     4,     0,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     0,     0,     0,     0,     0,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexunicodeClassTable6 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd6 = [ 
    0,1,1,1,1,1,1,
]; 
var jjlexhasArc6 = [ 
    1,1,1,1,1,1,1,
]; 
var jjlextable6 = {
    pnext: jjlexpnext6,
    disnext: jjlexdisnext6,
    checknext: jjlexchecknext6,
    maxAsicii: 255,
    classTable: jjlexclassTable6,
    unicodeClassTable: jjlexunicodeClassTable6,
    isEnd: jjlexisEnd6,
    hasArc: jjlexhasArc6
};
/*
    dfa tables
*/
var jjdfaTables = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
    jjlextable3,
    jjlextable4,
    jjlextable5,
    jjlextable6,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc, c){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,     1,     1,     1,     1,     2,     1,     1,     1,    -1,
        -1,    -1,
]; 
var jjlexTokens1 = [ 
        -1,    -1,    -1,    -1,    65,     7,    -1,     9,    19,    40,
        -1,    52,    53,    14,    12,    56,    13,    79,    15,     5,
        18,    59,    21,    28,    20,    17,     3,     3,     3,     3,
        54,    55,    42,     3,     8,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,    57,    41,    58,    43,
        -1,    26,    -1,    10,    39,    60,    34,    -1,     6,    -1,
        16,    31,    44,    29,    45,    30,    51,     4,    -1,    -1,
        33,     4,    -1,    46,    23,    24,    50,    22,    47,    -1,
         3,     3,    62,     3,    36,     3,     3,     3,     3,    70,
         3,     3,     3,     3,    66,     3,     3,     3,     3,    35,
        61,    27,    10,    -1,    -1,    32,    -1,    -1,    -1,     4,
        -1,     4,    -1,    38,    25,    37,    63,    64,     3,     3,
         3,     3,     3,     3,    71,     3,     3,     3,    75,     3,
        -1,    -1,    -1,    -1,    -1,    -1,     3,     3,     3,     3,
        68,    67,     3,    73,     3,     3,    -1,    -1,    -1,    -1,
         3,    74,    76,     3,     3,     3,    69,    -1,    -1,    48,
        48,    -1,     3,     3,     3,    78,    -1,    -1,    -1,    -1,
        48,     3,     3,     3,    49,    49,     3,    77,    72,    49,
         3,     3,     3,     3,     3,     3,    11,
]; 
var jjlexTokens2 = [ 
        -1,    -1,    -1,    -1,     9,     3,    57,    -1,    10,     3,
        10,
]; 
var jjlexTokens3 = [ 
        -1,    80,     7,    -1,    -1,    82,    85,    80,    -1,    -1,
        82,    84,    -1,    80,    -1,    -1,    -1,    82,    80,    83,
        83,
]; 
var jjlexTokens4 = [ 
        -1,    80,    -1,    -1,     8,    82,    85,    80,    -1,    -1,
        82,    84,    -1,    80,    -1,    -1,    -1,    82,    80,    83,
        83,
]; 
var jjlexTokens5 = [ 
        -1,    80,    80,    80,    -1,    -1,    81,    80,    82,    85,
        80,    -1,    81,    -1,    82,    84,    -1,    80,    -1,    -1,
        -1,    82,    80,    83,    83,
]; 
var jjlexTokens6 = [ 
        -1,    80,    80,    80,    81,    80,    81,
]; 

var jjstateCount = 314;
var jjtokenCount = 87;
var jjactERR = 315;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
       162,   153,    36,    35,    34,    44,    37,    29,    42,    41,
       313,    23,    24,   168,   166,   169,   170,   171,   172,   257,
       112,   113,   115,   310,   308,   114,   110,   111,   112,   113,
       115,   307,   298,   114,    92,    93,    94,    95,    96,    97,
        98,    99,    26,    27,    28,   296,   290,    38,    39,   -40,
       -38,    63,   -40,    62,   102,   289,   149,   309,   150,   286,
       104,   103,   287,    45,    25,   163,   265,   154,   156,   157,
       158,    64,    61,    43,   284,   160,   161,   159,   162,   153,
        36,    35,    34,    44,    37,    29,    42,    41,   -39,    23,
        24,   -39,   147,   116,   168,   166,   169,   170,   171,   172,
       256,   221,   279,   110,   111,   112,   113,   115,   276,   271,
       114,    92,    93,    94,    95,    96,    97,    98,    99,   270,
        26,    27,    28,    42,    41,    38,    39,   -39,   269,    63,
       -39,    62,   267,   248,   149,   285,   150,   104,   103,    42,
        41,   133,    25,   163,   132,   154,   156,   157,   158,    64,
        61,    43,    13,   160,   161,   159,   162,   153,    36,    35,
        34,    44,    37,    29,    42,    41,   -41,    23,    24,   -41,
       116,    79,   262,   253,   168,   252,   169,   170,   171,   172,
       251,   110,   111,   112,   113,   115,   246,   249,   114,    92,
        93,    94,    95,    96,    97,    98,    99,   115,    26,    27,
        28,   137,   115,    38,    39,   115,   115,    63,   240,    62,
        12,    12,   149,   263,   150,   104,   103,   236,   234,   219,
        25,   163,   231,   154,   156,   157,   158,    64,    61,    43,
       228,   160,   161,   159,   162,   153,    36,    35,    34,    44,
        37,    29,    42,    41,     8,    23,    24,   227,   116,   117,
       118,   119,   121,   120,   122,   123,   124,   125,   126,   127,
       128,   226,   224,   220,    49,   129,   130,   110,   111,   112,
       113,   115,   -39,   216,   114,   -39,    26,    27,    28,   212,
        49,    38,    39,   146,   137,    63,   134,    62,   -37,    90,
       149,   168,   150,   169,   170,   171,   172,    88,    25,   163,
        84,   154,   156,   157,   158,     9,    61,    43,    49,   160,
       161,   159,   162,   153,    36,    35,    34,    44,    37,    29,
        42,    41,    81,    23,    24,   112,   113,   115,    78,    74,
       114,   112,   113,   115,   116,    65,   114,   110,   111,   112,
       113,   115,    51,    46,   114,   110,   111,   112,   113,   115,
        21,    10,   114,     4,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,   149,     0,
       150,   104,   103,     0,     0,     0,    25,   163,     0,   154,
       156,   157,   158,    64,    61,    43,     0,   160,   161,   159,
       162,   153,    36,    35,    34,    44,    37,    29,    42,    41,
         0,    23,    24,     0,   116,     0,     0,     0,     0,     0,
         0,     0,   116,     0,     0,   110,   111,   112,   113,   115,
         0,     0,   114,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,   149,     0,   150,   104,
       103,     0,     0,     0,    25,   163,     0,   154,   156,   157,
       158,    64,    61,    43,     0,   160,   161,   159,   162,   153,
        36,    35,    34,    44,    37,    29,    42,    41,     0,    23,
        24,     0,   116,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   110,   111,   112,   113,   115,     0,     0,
       114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,   149,     0,   150,   104,   103,     0,
         0,     0,    25,   163,     0,   154,   156,   157,   158,    64,
        61,    43,     0,   160,   161,   159,   162,   153,    36,    35,
        34,    44,    37,    29,    42,    41,     0,    23,    24,     0,
       116,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   110,   111,   112,   113,   115,     0,     0,   114,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,   149,     0,   150,   104,   103,     0,     0,     0,
        25,   163,     0,   154,   156,   157,   158,    64,    61,    43,
         0,   160,   161,   159,   162,   153,    36,    35,    34,    44,
        37,    29,    42,    41,     0,    23,    24,     0,   116,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   110,   111,   112,   113,   115,     0,     0,   114,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
       149,     0,   150,     0,     0,   104,   103,     0,    25,   163,
         0,   154,   156,   157,   158,    64,    61,    43,     0,   160,
       161,   159,   110,   111,   112,   113,   115,    91,     0,   114,
        92,    93,    94,    95,    96,    97,    98,    99,   116,     0,
         0,   110,   111,   112,   113,   115,     0,     0,   114,     0,
       102,   101,   100,     0,     0,     0,   104,   103,     0,     0,
         0,     0,     0,   306,     0,     0,     0,     0,     0,     0,
       105,   106,   107,   109,   108,   104,   103,     0,     0,     0,
         0,     0,     0,   110,   111,   112,   113,   115,    91,   116,
       114,    92,    93,    94,    95,    96,    97,    98,    99,     0,
         0,     0,   110,   111,   112,   113,   115,     0,   116,   114,
         0,   102,   101,   100,     0,     0,     0,   104,   103,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   294,
         0,   105,   106,   107,   109,   108,   104,   103,     0,     0,
         0,     0,     0,     0,   110,   111,   112,   113,   115,    91,
       116,   114,    92,    93,    94,    95,    96,    97,    98,    99,
         0,     0,     0,   110,   111,   112,   113,   115,     0,   116,
       114,     0,   102,   101,   100,     0,     0,    44,   104,   103,
        42,    41,     0,    44,     0,     0,    42,    41,     0,     0,
       293,     0,   105,   106,   107,   109,   108,   104,   103,     0,
         0,     0,     0,     0,     0,   110,   111,   112,   113,   115,
        91,   116,   114,    92,    93,    94,    95,    96,    97,    98,
        99,     0,     0,    18,     0,    20,     0,     0,     0,    18,
       116,    20,     0,   102,   101,   100,     0,     0,     0,   104,
       103,     0,     0,     0,     0,    43,     0,     0,   292,     0,
         0,    43,     0,   105,   106,   107,   109,   108,     0,     0,
         0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
       115,    91,   116,   114,    92,    93,    94,    95,    96,    97,
        98,    99,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   102,   101,   100,     0,     0,     0,
       104,   103,     0,     0,     0,     0,     0,   291,     0,     0,
         0,     0,     0,     0,   105,   106,   107,   109,   108,     0,
         0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
       113,   115,    91,   116,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,   288,     0,
         0,     0,     0,     0,     0,   105,   106,   107,   109,   108,
         0,     0,     0,     0,   264,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   116,   110,   111,   112,   113,   115,
        91,     0,   114,    92,    93,    94,    95,    96,    97,    98,
        99,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   102,   101,   100,     0,     0,     0,   104,
       103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   105,   106,   107,   109,   108,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   116,   110,   111,   112,   113,   115,    91,   243,
       114,    92,    93,    94,    95,    96,    97,    98,    99,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   102,   101,   100,     0,     0,     0,   104,   103,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   105,   106,   107,   109,   108,     0,     0,     0,     0,
         0,     0,     0,     0,   110,   111,   112,   113,   115,    91,
       116,   114,    92,    93,    94,    95,    96,    97,    98,    99,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   102,   101,   100,     0,     0,     0,   104,   103,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   230,   105,   106,   107,   109,   108,     0,     0,     0,
         0,     0,     0,     0,     0,   110,   111,   112,   113,   115,
        91,   116,   114,    92,    93,    94,    95,    96,    97,    98,
        99,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   102,   101,   100,     0,     0,     0,   104,
       103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   225,     0,   105,   106,   107,   109,   108,     0,     0,
         0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
       115,    91,   116,   114,    92,    93,    94,    95,    96,    97,
        98,    99,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   102,   101,   100,     0,     0,     0,
       104,   103,     0,     0,     0,     0,     0,   217,     0,     0,
         0,     0,     0,     0,   105,   106,   107,   109,   108,     0,
         0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
       113,   115,    91,   116,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,    87,     0,
         0,     0,     0,     0,     0,   105,   106,   107,   109,   108,
         0,     0,     0,     0,     0,     0,     0,     0,   110,   111,
       112,   113,   115,    91,   116,   114,    92,    93,    94,    95,
        96,    97,    98,    99,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   102,   101,   100,     0,
         0,     0,   104,   103,     0,     0,    52,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   105,   106,   107,   109,
       108,     0,     0,     0,     0,     0,     0,     0,     0,   110,
       111,   112,   113,   115,    91,   116,   114,    92,    93,    94,
        95,    96,    97,    98,    99,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   102,   101,   100,
         0,     0,     0,   104,   103,     0,    36,    35,    34,    44,
        37,    29,    42,    41,     0,    23,    24,   105,   106,   107,
       109,   108,     0,     0,     0,     0,     0,     0,     0,     0,
       110,   111,   112,   113,   115,    91,   116,   114,    92,    93,
        94,    95,    96,    97,    98,    99,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,   102,   101,
       100,     0,     0,     0,   104,   103,     0,     0,    25,     0,
         0,     0,     0,     0,     0,    64,    61,    43,   105,   106,
       107,   109,   108,     0,     0,     0,     0,     0,     0,     0,
         0,   110,   111,   112,   113,   115,    91,   116,   114,    92,
        93,    94,    95,    96,    97,    98,    99,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   102,
       101,   100,     0,     0,     0,   104,   103,     0,    36,    35,
        34,    44,    37,    29,    42,    41,     0,    23,    24,   105,
       106,   107,   109,   108,     0,     0,     0,     0,     0,     0,
         0,     0,   110,   111,   112,   113,   115,    91,   116,   114,
        92,    93,    94,    95,    96,    97,    98,    99,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
       102,   101,   100,     0,     0,     0,   104,   103,     0,     0,
        25,     0,     0,     0,     0,     0,     0,    64,    61,    43,
       105,   106,   107,   109,   108,     0,     0,     0,     0,     0,
         0,     0,     0,   110,   111,   112,   113,   115,    91,   116,
       114,    92,    93,    94,    95,    96,    97,    98,    99,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   102,   101,   100,     0,     0,     0,   104,   103,     0,
        36,    35,    34,    44,    37,    29,    42,    41,     0,    23,
        24,   105,   106,   107,   109,   108,     0,     0,     0,     0,
         0,     0,     0,     0,   110,   111,   112,   113,   115,    91,
       116,   114,    92,    93,    94,    95,    96,    97,    98,    99,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,   102,   101,   100,     0,     0,     0,   104,   103,
         0,     0,    25,     0,     0,     0,     0,     0,     0,    64,
        61,    43,   105,   106,   107,   109,   108,     0,     0,     0,
         0,     0,     0,     0,     0,   110,   111,   112,   113,   115,
        91,   116,   114,    92,    93,    94,    95,    96,    97,    98,
        99,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   102,   101,   100,     0,     0,     0,   104,
       103,     0,    36,    35,    34,    44,    37,    29,    42,    41,
         0,    23,    24,   105,   106,   107,   109,   108,     0,     0,
         0,     0,     0,     0,     0,     0,   110,   111,   112,   113,
       115,    91,   116,   114,    92,    93,    94,    95,    96,    97,
        98,    99,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,   102,   101,   100,     0,     0,     0,
       104,   103,     0,     0,    25,     0,     0,     0,     0,     0,
         0,    64,    61,    43,   105,   106,   107,   109,   108,     0,
         0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
       113,   115,    91,   116,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   105,   106,   110,   111,   112,
       113,   115,    91,     0,   114,    92,    93,    94,    95,    96,
        97,    98,    99,     0,   116,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   102,   101,   100,     0,     0,
         0,   104,   103,     0,     0,     0,     0,     0,     0,     0,
       110,   111,   112,   113,   115,   105,   106,   114,    92,    93,
        94,    95,    96,    97,    98,    99,     0,     0,     0,     0,
         0,     0,     0,     0,   116,     0,     0,     0,   102,   101,
       100,     0,     0,     0,   104,   103,     0,     0,     0,     0,
         0,     0,     0,   110,   111,   112,   113,   115,   105,   106,
       114,    92,    93,    94,    95,    96,    97,    98,    99,     0,
         0,     0,     0,     0,     0,     0,     0,   116,     0,     0,
         0,   102,   101,   100,     0,     0,     0,   104,   103,    36,
        35,    34,    44,    37,    29,    42,    41,     0,    23,    24,
         0,   105,   106,     0,   174,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       116,     0,     0,     0,     0,     0,     0,     0,     0,    26,
        27,    28,     0,     0,    38,    39,     0,     0,    63,     0,
        62,     0,     0,    36,    35,    34,    44,    37,    29,    42,
        41,    25,    23,    24,     0,     0,     0,     0,    64,    61,
        43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    26,    27,    28,     0,     0,    38,    39,
         0,     0,    63,     0,    62,     0,     0,    36,    35,    34,
        44,    37,    29,    42,    41,    25,    23,    24,     0,     0,
         0,     0,    64,    61,    43,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
         0,     0,    38,    39,     0,     0,    63,     0,    62,     0,
         0,    36,    35,    34,    44,    37,    29,    42,    41,    25,
        23,    24,     0,     0,     0,     0,    64,    61,    43,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    26,    27,    28,     0,     0,    38,    39,     0,     0,
        63,     0,    62,     0,     0,    36,    35,    34,    44,    37,
        29,    42,    41,    25,    23,    24,     0,     0,     0,     0,
        64,    61,    43,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    26,    27,    28,     0,     0,
        38,    39,     0,     0,    63,     0,    62,     0,     0,    36,
        35,    34,    44,    37,    29,    42,    41,    25,    23,    24,
         0,     0,     0,     0,    64,    61,    43,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
        27,    28,     0,     0,    38,    39,     0,     0,    63,     0,
        62,     0,     0,    36,    35,    34,    44,    37,    29,    42,
        41,    25,    23,    24,     0,     0,     0,     0,    64,    61,
        43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    26,    27,    28,     0,     0,    38,    39,
         0,     0,    63,     0,    62,     0,     0,    36,    35,    34,
        44,    37,    29,    42,    41,    25,    23,    24,     0,     0,
         0,     0,    64,    61,    43,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
         0,     0,    38,    39,     0,     0,    63,     0,    62,     0,
         0,    36,    35,    34,    44,    37,    29,    42,    41,    25,
        23,    24,     0,     0,     0,     0,    64,    61,    43,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    26,    27,    28,     0,     0,    38,    39,     0,     0,
        63,     0,    62,     0,     0,    36,    35,    34,    44,    37,
        29,    42,    41,    25,    23,    24,     0,     0,     0,     0,
        64,    61,    43,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    26,    27,    28,     0,     0,
        38,    39,     0,     0,    63,     0,    62,     0,     0,    36,
        35,    34,    44,    37,    29,    42,    41,    25,    23,    24,
         0,     0,     0,     0,    64,    61,    43,     0,     0,     0,
         0,     0,     0,   110,   111,   112,   113,   115,     0,     0,
       114,    92,    93,    94,    95,    96,    97,    98,    99,    26,
        27,    28,     0,     0,    38,    39,     0,     0,    63,     0,
        62,   102,   101,   100,     0,     0,     0,   104,   103,     0,
         0,    25,     0,     0,     0,     0,     0,     0,    64,    61,
        43,   105,    36,    35,    34,    44,    37,    29,    42,    41,
         0,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       116,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,     0,     0,    36,    35,
        34,    44,    37,    29,    42,    41,    25,    23,    24,     0,
         0,     0,     0,    64,    61,    43,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
        28,     0,     0,    38,    39,     0,     0,    63,     0,    62,
         0,     0,    36,    35,    34,    44,    37,    29,    42,    41,
        25,    23,    24,     0,     0,     0,     0,    64,    61,    43,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    26,    27,    28,     0,     0,    38,    39,     0,
         0,    63,     0,    62,     0,     0,    36,    35,    34,    44,
        37,    29,    42,    41,    25,    23,    24,     0,     0,     0,
         0,    64,    61,    43,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    26,    27,    28,     0,
         0,    38,    39,     0,     0,    63,     0,    62,     0,     0,
        36,    35,    34,    44,    37,    29,    42,    41,    25,    23,
        24,     0,     0,     0,     0,    64,    61,    43,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        26,    27,    28,     0,     0,    38,    39,     0,     0,    63,
         0,    62,     0,     0,    36,    35,    34,    44,    37,    29,
        42,    41,    25,    23,    24,     0,     0,     0,     0,    64,
        61,    43,     0,     0,     0,     0,     0,     0,   110,   111,
       112,   113,   115,     0,     0,   114,    92,    93,    94,    95,
        96,    97,    98,    99,    26,    27,    28,     0,     0,    38,
        39,     0,     0,    63,     0,    62,   102,   101,   100,     0,
         0,     0,   104,   103,     0,     0,    25,     0,     0,     0,
         0,     0,     0,    64,    61,    43,   110,   111,   112,   113,
       115,     0,     0,   114,    92,    93,    94,    95,    96,    97,
        98,    99,     0,     0,     0,   116,     0,     0,     0,     0,
         0,     0,     0,     0,   102,   101,   100,     0,     0,     0,
       104,   103,   110,   111,   112,   113,   115,     0,     0,   114,
        92,    93,    94,    95,    96,    97,    98,    99,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       102,     0,   100,   116,     0,     0,   104,   103,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
    
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -87,   353,   233,   -87,   -87,   -87,   -87,   299,   149,   297,
      1924,   -87,   291,   286,   -87,   -87,  1436,  6661,   -87,  6607,
       276,   -87,  6553,  6499,  6445,  6391,   857,   851,   -87,   -87,
       -87,   -87,   115,   -87,   -87,   277,   -87,   -87,   -87,   276,
       -87,   114,   270,   -87,  6337,   298,   244,   -87,   -87,  1863,
      6283,  6229,  1375,   242,   233,  1802,   221,   -87,   236,    90,
       234,  6175,  6121,   232,   -87,   -87,   -87,  6724,   169,    76,
       -87,    37,   -87,  6067,   -87,   -87,   -87,  6013,  5959,   -87,
      5905,  1741,   230,   270,   -87,  1680,   -87,   -87,   -87,  5851,
      2916,  5797,  5743,  5689,  5635,  5581,  5527,  5473,  5419,  5365,
      5311,  5257,  5203,  5149,  5095,  5041,  4987,  4933,  4879,  4825,
      4771,  4717,  4663,  4609,  4555,  4501,  4447,  4393,  4339,  4285,
      4231,  4177,  4123,  4069,  4015,  3961,  3907,  3853,   -87,   -87,
       227,  3799,   -87,  3745,   218,  1314,   254,   211,   210,    94,
       -87,   -87,   209,  1253,   208,   190,   178,   -87,   -87,   -87,
      1192,   221,  3691,  3637,   -87,   166,   623,   165,  3583,   206,
       205,   -87,   156,  1619,   -87,   -87,   -87,   -87,   -87,   -87,
       -87,   -87,  1131,  3529,   831,   770,   709,   639,   559,   481,
       403,   325,    14,  6760,    91,   333,   255,  6676,  3471,  2785,
      2735,  2685,   317,   311,   190,   189,   186,   181,     6,  2635,
      2585,  2535,  2485,  2435,  2385,  2335,  2285,  2235,  2185,  2135,
      2085,  3456,   131,   130,   127,   147,    -2,   120,   -87,   -87,
       -87,    14,   -67,   -87,   -87,   -87,   -87,   162,   155,   -87,
       -87,  1063,     7,  3402,    63,  3348,    69,    60,    50,  3294,
      3240,  3186,  3132,  2871,    55,   -87,   -87,   -87,  3078,   -87,
        74,  3024,    17,   -87,   -87,   -87,   -87,    18,  1558,    77,
         6,   -87,   -87,   -87,   -87,   995,     3,   -13,   -87,   -87,
       -87,   934,   873,   812,  2828,   -87,   -87,   751,  2970,  2035,
       -12,   -87,   -87,  1909,   -87,   -87,    22,   545,  1787,  1665,
       467,   -87,   -87,   -87,  1985,   -87,  1497,   -87,   -87,   690,
       -28,   -43,   -87,   -87,    -1,   -36,  1543,   389,   -87,   -87,
       -43,   -87,   311,   -87,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
       304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
       310,   304,   304,   222,   222,   222,   222,   222,   222,   222,
       198,   198,   198,   305,   301,   198,   182,   182,   182,   182,
       182,   300,   286,   182,   182,   182,   182,   182,   182,   182,
       182,   182,   304,   304,   304,   280,   267,   304,   304,   216,
       216,   304,   216,   304,   182,   266,   304,   304,   304,   260,
       182,   182,   260,   232,   304,   304,   232,   304,   304,   304,
       304,   304,   304,   304,   257,   304,   304,   304,   259,   259,
       259,   259,   259,   259,   259,   259,   259,   259,    71,   259,
       259,    71,   252,   182,   221,   221,   221,   221,   221,   221,
       221,   139,   250,   184,   184,   184,   184,   184,   244,   238,
       184,   184,   184,   184,   184,   184,   184,   184,   184,   237,
       259,   259,   259,    41,    41,   259,   259,    69,   236,   259,
        69,   259,   234,   213,   259,   259,   259,   184,   184,   213,
       213,    59,   259,   259,    59,   259,   259,   259,   259,   259,
       259,   259,     8,   259,   259,   259,   228,   228,   228,   228,
       228,   228,   228,   228,   228,   228,    32,   228,   228,    32,
       184,    41,   227,   217,   139,   215,   139,   139,   139,   139,
       214,    68,    68,    68,    68,    68,   212,   213,    68,    68,
        68,    68,    68,    68,    68,    68,    68,   197,   228,   228,
       228,     8,   196,   228,   228,   195,   194,   228,   162,   228,
       160,   159,   228,   228,   228,    68,    68,   157,   155,   137,
       228,   228,   151,   228,   228,   228,   228,   228,   228,   228,
       146,   228,   228,   228,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,   145,    68,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,   144,   142,   138,   136,    56,    56,   186,   186,   186,
       186,   186,    56,   134,   186,    56,     2,     2,     2,   130,
        83,     2,     2,    82,    63,     2,    60,     2,    58,    54,
         2,   137,     2,   137,   137,   137,   137,    53,     2,     2,
        46,     2,     2,     2,     2,     2,     2,     2,    45,     2,
         2,     2,   312,   312,   312,   312,   312,   312,   312,   312,
       312,   312,    42,   312,   312,   193,   193,   193,    39,    35,
       193,   192,   192,   192,   186,    20,   192,   181,   181,   181,
       181,   181,    13,    12,   181,   185,   185,   185,   185,   185,
         9,     7,   185,     1,   312,   312,   312,     0,     0,   312,
       312,     0,     0,   312,     0,   312,     0,     0,   312,     0,
       312,   181,   181,     0,     0,     0,   312,   312,     0,   312,
       312,   312,   312,   312,   312,   312,     0,   312,   312,   312,
       307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
         0,   307,   307,     0,   181,     0,     0,     0,     0,     0,
         0,     0,   185,     0,     0,   180,   180,   180,   180,   180,
         0,     0,   180,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   307,   307,   307,     0,     0,   307,   307,     0,
         0,   307,     0,   307,     0,     0,   307,     0,   307,   180,
       180,     0,     0,     0,   307,   307,     0,   307,   307,   307,
       307,   307,   307,   307,     0,   307,   307,   307,   290,   290,
       290,   290,   290,   290,   290,   290,   290,   290,     0,   290,
       290,     0,   180,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   179,   179,   179,   179,   179,     0,     0,
       179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       290,   290,   290,     0,     0,   290,   290,     0,     0,   290,
         0,   290,     0,     0,   290,     0,   290,   179,   179,     0,
         0,     0,   290,   290,     0,   290,   290,   290,   290,   290,
       290,   290,     0,   290,   290,   290,   287,   287,   287,   287,
       287,   287,   287,   287,   287,   287,     0,   287,   287,     0,
       179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   178,   178,   178,   178,   178,     0,     0,   178,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   287,   287,
       287,     0,     0,   287,   287,     0,     0,   287,     0,   287,
         0,     0,   287,     0,   287,   178,   178,     0,     0,     0,
       287,   287,     0,   287,   287,   287,   287,   287,   287,   287,
         0,   287,   287,   287,   156,   156,   156,   156,   156,   156,
       156,   156,   156,   156,     0,   156,   156,     0,   178,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   177,   177,   177,   177,   177,     0,     0,   177,     0,
         0,     0,     0,     0,     0,     0,   156,   156,   156,     0,
         0,   156,   156,     0,     0,   156,     0,   156,     0,     0,
       156,     0,   156,     0,     0,   177,   177,     0,   156,   156,
         0,   156,   156,   156,   156,   156,   156,   156,     0,   156,
       156,   156,   299,   299,   299,   299,   299,   299,     0,   299,
       299,   299,   299,   299,   299,   299,   299,   299,   177,     0,
         0,   176,   176,   176,   176,   176,     0,     0,   176,     0,
       299,   299,   299,     0,     0,     0,   299,   299,     0,     0,
         0,     0,     0,   299,     0,     0,     0,     0,     0,     0,
       299,   299,   299,   299,   299,   176,   176,     0,     0,     0,
         0,     0,     0,   277,   277,   277,   277,   277,   277,   299,
       277,   277,   277,   277,   277,   277,   277,   277,   277,     0,
         0,     0,   175,   175,   175,   175,   175,     0,   176,   175,
         0,   277,   277,   277,     0,     0,     0,   277,   277,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
         0,   277,   277,   277,   277,   277,   175,   175,     0,     0,
         0,     0,     0,     0,   273,   273,   273,   273,   273,   273,
       277,   273,   273,   273,   273,   273,   273,   273,   273,   273,
         0,     0,     0,   174,   174,   174,   174,   174,     0,   175,
       174,     0,   273,   273,   273,     0,     0,    27,   273,   273,
        27,    27,     0,    26,     0,     0,    26,    26,     0,     0,
       273,     0,   273,   273,   273,   273,   273,   174,   174,     0,
         0,     0,     0,     0,     0,   272,   272,   272,   272,   272,
       272,   273,   272,   272,   272,   272,   272,   272,   272,   272,
       272,     0,     0,    27,     0,    27,     0,     0,     0,    26,
       174,    26,     0,   272,   272,   272,     0,     0,     0,   272,
       272,     0,     0,     0,     0,    27,     0,     0,   272,     0,
         0,    26,     0,   272,   272,   272,   272,   272,     0,     0,
         0,     0,     0,     0,     0,     0,   271,   271,   271,   271,
       271,   271,   272,   271,   271,   271,   271,   271,   271,   271,
       271,   271,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   271,   271,   271,     0,     0,     0,
       271,   271,     0,     0,     0,     0,     0,   271,     0,     0,
         0,     0,     0,     0,   271,   271,   271,   271,   271,     0,
         0,     0,     0,     0,     0,     0,     0,   265,   265,   265,
       265,   265,   265,   271,   265,   265,   265,   265,   265,   265,
       265,   265,   265,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   265,   265,   265,     0,     0,
         0,   265,   265,     0,     0,     0,     0,     0,   265,     0,
         0,     0,     0,     0,     0,   265,   265,   265,   265,   265,
         0,     0,     0,     0,   231,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   265,   231,   231,   231,   231,   231,
       231,     0,   231,   231,   231,   231,   231,   231,   231,   231,
       231,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   231,   231,   231,     0,     0,     0,   231,
       231,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   231,   231,   231,   231,   231,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   231,   172,   172,   172,   172,   172,   172,   172,
       172,   172,   172,   172,   172,   172,   172,   172,   172,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   172,   172,   172,     0,     0,     0,   172,   172,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   172,   172,   172,   172,   172,     0,     0,     0,     0,
         0,     0,     0,     0,   150,   150,   150,   150,   150,   150,
       172,   150,   150,   150,   150,   150,   150,   150,   150,   150,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   150,   150,   150,     0,     0,     0,   150,   150,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   150,   150,   150,   150,   150,   150,     0,     0,     0,
         0,     0,     0,     0,     0,   143,   143,   143,   143,   143,
       143,   150,   143,   143,   143,   143,   143,   143,   143,   143,
       143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   143,   143,   143,     0,     0,     0,   143,
       143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   143,     0,   143,   143,   143,   143,   143,     0,     0,
         0,     0,     0,     0,     0,     0,   135,   135,   135,   135,
       135,   135,   143,   135,   135,   135,   135,   135,   135,   135,
       135,   135,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   135,   135,   135,     0,     0,     0,
       135,   135,     0,     0,     0,     0,     0,   135,     0,     0,
         0,     0,     0,     0,   135,   135,   135,   135,   135,     0,
         0,     0,     0,     0,     0,     0,     0,    52,    52,    52,
        52,    52,    52,   135,    52,    52,    52,    52,    52,    52,
        52,    52,    52,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    52,    52,    52,     0,     0,
         0,    52,    52,     0,     0,     0,     0,     0,    52,     0,
         0,     0,     0,     0,     0,    52,    52,    52,    52,    52,
         0,     0,     0,     0,     0,     0,     0,     0,    16,    16,
        16,    16,    16,    16,    52,    16,    16,    16,    16,    16,
        16,    16,    16,    16,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    16,    16,    16,     0,
         0,     0,    16,    16,     0,     0,    16,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    16,    16,    16,    16,
        16,     0,     0,     0,     0,     0,     0,     0,     0,   296,
       296,   296,   296,   296,   296,    16,   296,   296,   296,   296,
       296,   296,   296,   296,   296,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   296,   296,   296,
         0,     0,     0,   296,   296,     0,   306,   306,   306,   306,
       306,   306,   306,   306,     0,   306,   306,   296,   296,   296,
       296,   296,     0,     0,     0,     0,     0,     0,     0,     0,
       258,   258,   258,   258,   258,   258,   296,   258,   258,   258,
       258,   258,   258,   258,   258,   258,   306,   306,   306,     0,
         0,   306,   306,     0,     0,   306,     0,   306,   258,   258,
       258,     0,     0,     0,   258,   258,     0,     0,   306,     0,
         0,     0,     0,     0,     0,   306,   306,   306,   258,   258,
       258,   258,   258,     0,     0,     0,     0,     0,     0,     0,
         0,   163,   163,   163,   163,   163,   163,   258,   163,   163,
       163,   163,   163,   163,   163,   163,   163,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       163,   163,     0,     0,     0,   163,   163,     0,   289,   289,
       289,   289,   289,   289,   289,   289,     0,   289,   289,   163,
       163,   163,   163,   163,     0,     0,     0,     0,     0,     0,
         0,     0,    85,    85,    85,    85,    85,    85,   163,    85,
        85,    85,    85,    85,    85,    85,    85,    85,   289,   289,
       289,     0,     0,   289,   289,     0,     0,   289,     0,   289,
        85,    85,    85,     0,     0,     0,    85,    85,     0,     0,
       289,     0,     0,     0,     0,     0,     0,   289,   289,   289,
        85,    85,    85,    85,    85,     0,     0,     0,     0,     0,
         0,     0,     0,    81,    81,    81,    81,    81,    81,    85,
        81,    81,    81,    81,    81,    81,    81,    81,    81,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    81,    81,    81,     0,     0,     0,    81,    81,     0,
       288,   288,   288,   288,   288,   288,   288,   288,     0,   288,
       288,    81,    81,    81,    81,    81,     0,     0,     0,     0,
         0,     0,     0,     0,    55,    55,    55,    55,    55,    55,
        81,    55,    55,    55,    55,    55,    55,    55,    55,    55,
       288,   288,   288,     0,     0,   288,   288,     0,     0,   288,
         0,   288,    55,    55,    55,     0,     0,     0,    55,    55,
         0,     0,   288,     0,     0,     0,     0,     0,     0,   288,
       288,   288,    55,    55,    55,    55,    55,     0,     0,     0,
         0,     0,     0,     0,     0,    49,    49,    49,    49,    49,
        49,    55,    49,    49,    49,    49,    49,    49,    49,    49,
        49,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    49,    49,    49,     0,     0,     0,    49,
        49,     0,   283,   283,   283,   283,   283,   283,   283,   283,
         0,   283,   283,    49,    49,    49,    49,    49,     0,     0,
         0,     0,     0,     0,     0,     0,    10,    10,    10,    10,
        10,    10,    49,    10,    10,    10,    10,    10,    10,    10,
        10,    10,   283,   283,   283,     0,     0,   283,   283,     0,
         0,   283,     0,   283,    10,    10,    10,     0,     0,     0,
        10,    10,     0,     0,   283,     0,     0,     0,     0,     0,
         0,   283,   283,   283,    10,    10,    10,    10,    10,     0,
         0,     0,     0,     0,     0,     0,     0,   294,   294,   294,
       294,   294,   294,    10,   294,   294,   294,   294,   294,   294,
       294,   294,   294,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   294,   294,   294,     0,     0,
         0,   294,   294,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   294,   294,   279,   279,   279,
       279,   279,   279,     0,   279,   279,   279,   279,   279,   279,
       279,   279,   279,     0,   294,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   279,   279,   279,     0,     0,
         0,   279,   279,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   279,   279,   210,   210,   210,
       210,   210,   210,     0,   210,   210,   210,   210,   210,   210,
       210,   210,   210,     0,   279,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   210,   210,   210,     0,     0,
         0,   210,   210,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   210,   210,   209,   209,   209,
       209,   209,   209,     0,   209,   209,   209,   209,   209,   209,
       209,   209,   209,     0,   210,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   209,   209,   209,     0,     0,
         0,   209,   209,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   209,   209,   208,   208,   208,
       208,   208,   208,     0,   208,   208,   208,   208,   208,   208,
       208,   208,   208,     0,   209,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   208,   208,   208,     0,     0,
         0,   208,   208,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   208,   208,   207,   207,   207,
       207,   207,   207,     0,   207,   207,   207,   207,   207,   207,
       207,   207,   207,     0,   208,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   207,   207,   207,     0,     0,
         0,   207,   207,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   207,   207,   206,   206,   206,
       206,   206,   206,     0,   206,   206,   206,   206,   206,   206,
       206,   206,   206,     0,   207,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   206,   206,   206,     0,     0,
         0,   206,   206,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   206,   206,   205,   205,   205,
       205,   205,   205,     0,   205,   205,   205,   205,   205,   205,
       205,   205,   205,     0,   206,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   205,   205,   205,     0,     0,
         0,   205,   205,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   205,   205,   204,   204,   204,
       204,   204,   204,     0,   204,   204,   204,   204,   204,   204,
       204,   204,   204,     0,   205,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   204,   204,   204,     0,     0,
         0,   204,   204,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   204,   204,   203,   203,   203,
       203,   203,   203,     0,   203,   203,   203,   203,   203,   203,
       203,   203,   203,     0,   204,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   203,   203,   203,     0,     0,
         0,   203,   203,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   203,   203,   202,   202,   202,
       202,   202,   202,     0,   202,   202,   202,   202,   202,   202,
       202,   202,   202,     0,   203,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   202,   202,   202,     0,     0,
         0,   202,   202,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   202,   202,   201,   201,   201,
       201,   201,   201,     0,   201,   201,   201,   201,   201,   201,
       201,   201,   201,     0,   202,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   201,   201,   201,     0,     0,
         0,   201,   201,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   201,   201,   200,   200,   200,
       200,   200,   200,     0,   200,   200,   200,   200,   200,   200,
       200,   200,   200,     0,   201,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   200,   200,   200,     0,     0,
         0,   200,   200,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   200,   200,   199,   199,   199,
       199,   199,   199,     0,   199,   199,   199,   199,   199,   199,
       199,   199,   199,     0,   200,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   199,   199,   199,     0,     0,
         0,   199,   199,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   199,   199,   191,   191,   191,
       191,   191,   191,     0,   191,   191,   191,   191,   191,   191,
       191,   191,   191,     0,   199,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   191,   191,   191,     0,     0,
         0,   191,   191,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   191,   191,   190,   190,   190,
       190,   190,   190,     0,   190,   190,   190,   190,   190,   190,
       190,   190,   190,     0,   191,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   190,   190,   190,     0,     0,
         0,   190,   190,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   190,   190,   189,   189,   189,
       189,   189,   189,     0,   189,   189,   189,   189,   189,   189,
       189,   189,   189,     0,   190,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   189,   189,   189,     0,     0,
         0,   189,   189,     0,     0,     0,     0,     0,     0,     0,
       274,   274,   274,   274,   274,   189,   189,   274,   274,   274,
       274,   274,   274,   274,   274,   274,     0,     0,     0,     0,
         0,     0,     0,     0,   189,     0,     0,     0,   274,   274,
       274,     0,     0,     0,   274,   274,     0,     0,     0,     0,
         0,     0,     0,   243,   243,   243,   243,   243,   274,   274,
       243,   243,   243,   243,   243,   243,   243,   243,   243,     0,
         0,     0,     0,     0,     0,     0,     0,   274,     0,     0,
         0,   243,   243,   243,     0,     0,     0,   243,   243,    90,
        90,    90,    90,    90,    90,    90,    90,     0,    90,    90,
         0,   243,   243,     0,    90,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       243,     0,     0,     0,     0,     0,     0,     0,     0,    90,
        90,    90,     0,     0,    90,    90,     0,     0,    90,     0,
        90,     0,     0,   278,   278,   278,   278,   278,   278,   278,
       278,    90,   278,   278,     0,     0,     0,     0,    90,    90,
        90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   278,   278,   278,     0,     0,   278,   278,
         0,     0,   278,     0,   278,     0,     0,   251,   251,   251,
       251,   251,   251,   251,   251,   278,   251,   251,     0,     0,
         0,     0,   278,   278,   278,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   251,   251,   251,
         0,     0,   251,   251,     0,     0,   251,     0,   251,     0,
         0,   248,   248,   248,   248,   248,   248,   248,   248,   251,
       248,   248,     0,     0,     0,     0,   251,   251,   251,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   248,   248,   248,     0,     0,   248,   248,     0,     0,
       248,     0,   248,     0,     0,   242,   242,   242,   242,   242,
       242,   242,   242,   248,   242,   242,     0,     0,     0,     0,
       248,   248,   248,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   242,   242,   242,     0,     0,
       242,   242,     0,     0,   242,     0,   242,     0,     0,   241,
       241,   241,   241,   241,   241,   241,   241,   242,   241,   241,
         0,     0,     0,     0,   242,   242,   242,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       241,   241,     0,     0,   241,   241,     0,     0,   241,     0,
       241,     0,     0,   240,   240,   240,   240,   240,   240,   240,
       240,   241,   240,   240,     0,     0,     0,     0,   241,   241,
       241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,   240,   240,   240,     0,     0,   240,   240,
         0,     0,   240,     0,   240,     0,     0,   239,   239,   239,
       239,   239,   239,   239,   239,   240,   239,   239,     0,     0,
         0,     0,   240,   240,   240,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   239,   239,   239,
         0,     0,   239,   239,     0,     0,   239,     0,   239,     0,
         0,   235,   235,   235,   235,   235,   235,   235,   235,   239,
       235,   235,     0,     0,     0,     0,   239,   239,   239,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,   235,   235,   235,     0,     0,   235,   235,     0,     0,
       235,     0,   235,     0,     0,   233,   233,   233,   233,   233,
       233,   233,   233,   235,   233,   233,     0,     0,     0,     0,
       235,   235,   235,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,   233,   233,   233,     0,     0,
       233,   233,     0,     0,   233,     0,   233,     0,     0,   211,
       211,   211,   211,   211,   211,   211,   211,   233,   211,   211,
         0,     0,     0,     0,   233,   233,   233,     0,     0,     0,
         0,     0,     0,   188,   188,   188,   188,   188,     0,     0,
       188,   188,   188,   188,   188,   188,   188,   188,   188,   211,
       211,   211,     0,     0,   211,   211,     0,     0,   211,     0,
       211,   188,   188,   188,     0,     0,     0,   188,   188,     0,
         0,   211,     0,     0,     0,     0,     0,     0,   211,   211,
       211,   188,   173,   173,   173,   173,   173,   173,   173,   173,
         0,   173,   173,     0,     0,     0,     0,     0,     0,     0,
       188,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   173,   173,   173,     0,     0,   173,   173,     0,
         0,   173,     0,   173,     0,     0,   158,   158,   158,   158,
       158,   158,   158,   158,   173,   158,   158,     0,     0,     0,
         0,   173,   173,   173,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   158,   158,   158,     0,
         0,   158,   158,     0,     0,   158,     0,   158,     0,     0,
       153,   153,   153,   153,   153,   153,   153,   153,   158,   153,
       153,     0,     0,     0,     0,   158,   158,   158,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       153,   153,   153,     0,     0,   153,   153,     0,     0,   153,
         0,   153,     0,     0,   152,   152,   152,   152,   152,   152,
       152,   152,   153,   152,   152,     0,     0,     0,     0,   153,
       153,   153,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   152,   152,   152,     0,     0,   152,
       152,     0,     0,   152,     0,   152,     0,     0,   133,   133,
       133,   133,   133,   133,   133,   133,   152,   133,   133,     0,
         0,     0,     0,   152,   152,   152,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   133,   133,
       133,     0,     0,   133,   133,     0,     0,   133,     0,   133,
         0,     0,   131,   131,   131,   131,   131,   131,   131,   131,
       133,   131,   131,     0,     0,     0,     0,   133,   133,   133,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   131,   131,   131,     0,     0,   131,   131,     0,
         0,   131,     0,   131,     0,     0,   127,   127,   127,   127,
       127,   127,   127,   127,   131,   127,   127,     0,     0,     0,
         0,   131,   131,   131,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   127,   127,   127,     0,
         0,   127,   127,     0,     0,   127,     0,   127,     0,     0,
       126,   126,   126,   126,   126,   126,   126,   126,   127,   126,
       126,     0,     0,     0,     0,   127,   127,   127,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       126,   126,   126,     0,     0,   126,   126,     0,     0,   126,
         0,   126,     0,     0,   125,   125,   125,   125,   125,   125,
       125,   125,   126,   125,   125,     0,     0,     0,     0,   126,
       126,   126,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   125,   125,   125,     0,     0,   125,
       125,     0,     0,   125,     0,   125,     0,     0,   124,   124,
       124,   124,   124,   124,   124,   124,   125,   124,   124,     0,
         0,     0,     0,   125,   125,   125,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   124,   124,
       124,     0,     0,   124,   124,     0,     0,   124,     0,   124,
         0,     0,   123,   123,   123,   123,   123,   123,   123,   123,
       124,   123,   123,     0,     0,     0,     0,   124,   124,   124,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   123,   123,   123,     0,     0,   123,   123,     0,
         0,   123,     0,   123,     0,     0,   122,   122,   122,   122,
       122,   122,   122,   122,   123,   122,   122,     0,     0,     0,
         0,   123,   123,   123,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   122,   122,   122,     0,
         0,   122,   122,     0,     0,   122,     0,   122,     0,     0,
       121,   121,   121,   121,   121,   121,   121,   121,   122,   121,
       121,     0,     0,     0,     0,   122,   122,   122,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       121,   121,   121,     0,     0,   121,   121,     0,     0,   121,
         0,   121,     0,     0,   120,   120,   120,   120,   120,   120,
       120,   120,   121,   120,   120,     0,     0,     0,     0,   121,
       121,   121,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   120,   120,   120,     0,     0,   120,
       120,     0,     0,   120,     0,   120,     0,     0,   119,   119,
       119,   119,   119,   119,   119,   119,   120,   119,   119,     0,
         0,     0,     0,   120,   120,   120,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   119,   119,
       119,     0,     0,   119,   119,     0,     0,   119,     0,   119,
         0,     0,   118,   118,   118,   118,   118,   118,   118,   118,
       119,   118,   118,     0,     0,     0,     0,   119,   119,   119,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   118,   118,   118,     0,     0,   118,   118,     0,
         0,   118,     0,   118,     0,     0,   117,   117,   117,   117,
       117,   117,   117,   117,   118,   117,   117,     0,     0,     0,
         0,   118,   118,   118,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   117,   117,   117,     0,
         0,   117,   117,     0,     0,   117,     0,   117,     0,     0,
       116,   116,   116,   116,   116,   116,   116,   116,   117,   116,
       116,     0,     0,     0,     0,   117,   117,   117,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       116,   116,   116,     0,     0,   116,   116,     0,     0,   116,
         0,   116,     0,     0,   115,   115,   115,   115,   115,   115,
       115,   115,   116,   115,   115,     0,     0,     0,     0,   116,
       116,   116,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   115,   115,   115,     0,     0,   115,
       115,     0,     0,   115,     0,   115,     0,     0,   114,   114,
       114,   114,   114,   114,   114,   114,   115,   114,   114,     0,
         0,     0,     0,   115,   115,   115,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   114,   114,
       114,     0,     0,   114,   114,     0,     0,   114,     0,   114,
         0,     0,   113,   113,   113,   113,   113,   113,   113,   113,
       114,   113,   113,     0,     0,     0,     0,   114,   114,   114,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   113,   113,   113,     0,     0,   113,   113,     0,
         0,   113,     0,   113,     0,     0,   112,   112,   112,   112,
       112,   112,   112,   112,   113,   112,   112,     0,     0,     0,
         0,   113,   113,   113,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   112,   112,   112,     0,
         0,   112,   112,     0,     0,   112,     0,   112,     0,     0,
       111,   111,   111,   111,   111,   111,   111,   111,   112,   111,
       111,     0,     0,     0,     0,   112,   112,   112,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       111,   111,   111,     0,     0,   111,   111,     0,     0,   111,
         0,   111,     0,     0,   110,   110,   110,   110,   110,   110,
       110,   110,   111,   110,   110,     0,     0,     0,     0,   111,
       111,   111,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   110,   110,   110,     0,     0,   110,
       110,     0,     0,   110,     0,   110,     0,     0,   109,   109,
       109,   109,   109,   109,   109,   109,   110,   109,   109,     0,
         0,     0,     0,   110,   110,   110,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   109,   109,
       109,     0,     0,   109,   109,     0,     0,   109,     0,   109,
         0,     0,   108,   108,   108,   108,   108,   108,   108,   108,
       109,   108,   108,     0,     0,     0,     0,   109,   109,   109,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   108,   108,   108,     0,     0,   108,   108,     0,
         0,   108,     0,   108,     0,     0,   107,   107,   107,   107,
       107,   107,   107,   107,   108,   107,   107,     0,     0,     0,
         0,   108,   108,   108,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   107,   107,   107,     0,
         0,   107,   107,     0,     0,   107,     0,   107,     0,     0,
       106,   106,   106,   106,   106,   106,   106,   106,   107,   106,
       106,     0,     0,     0,     0,   107,   107,   107,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       106,   106,   106,     0,     0,   106,   106,     0,     0,   106,
         0,   106,     0,     0,   105,   105,   105,   105,   105,   105,
       105,   105,   106,   105,   105,     0,     0,     0,     0,   106,
       106,   106,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   105,   105,   105,     0,     0,   105,
       105,     0,     0,   105,     0,   105,     0,     0,   104,   104,
       104,   104,   104,   104,   104,   104,   105,   104,   104,     0,
         0,     0,     0,   105,   105,   105,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   104,   104,
       104,     0,     0,   104,   104,     0,     0,   104,     0,   104,
         0,     0,   103,   103,   103,   103,   103,   103,   103,   103,
       104,   103,   103,     0,     0,     0,     0,   104,   104,   104,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,   103,   103,   103,     0,     0,   103,   103,     0,
         0,   103,     0,   103,     0,     0,   102,   102,   102,   102,
       102,   102,   102,   102,   103,   102,   102,     0,     0,     0,
         0,   103,   103,   103,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,   102,   102,   102,     0,
         0,   102,   102,     0,     0,   102,     0,   102,     0,     0,
       101,   101,   101,   101,   101,   101,   101,   101,   102,   101,
       101,     0,     0,     0,     0,   102,   102,   102,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       101,   101,   101,     0,     0,   101,   101,     0,     0,   101,
         0,   101,     0,     0,   100,   100,   100,   100,   100,   100,
       100,   100,   101,   100,   100,     0,     0,     0,     0,   101,
       101,   101,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,   100,   100,   100,     0,     0,   100,
       100,     0,     0,   100,     0,   100,     0,     0,    99,    99,
        99,    99,    99,    99,    99,    99,   100,    99,    99,     0,
         0,     0,     0,   100,   100,   100,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    99,    99,
        99,     0,     0,    99,    99,     0,     0,    99,     0,    99,
         0,     0,    98,    98,    98,    98,    98,    98,    98,    98,
        99,    98,    98,     0,     0,     0,     0,    99,    99,    99,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    98,    98,    98,     0,     0,    98,    98,     0,
         0,    98,     0,    98,     0,     0,    97,    97,    97,    97,
        97,    97,    97,    97,    98,    97,    97,     0,     0,     0,
         0,    98,    98,    98,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    97,    97,    97,     0,
         0,    97,    97,     0,     0,    97,     0,    97,     0,     0,
        96,    96,    96,    96,    96,    96,    96,    96,    97,    96,
        96,     0,     0,     0,     0,    97,    97,    97,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        96,    96,    96,     0,     0,    96,    96,     0,     0,    96,
         0,    96,     0,     0,    95,    95,    95,    95,    95,    95,
        95,    95,    96,    95,    95,     0,     0,     0,     0,    96,
        96,    96,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    95,    95,    95,     0,     0,    95,
        95,     0,     0,    95,     0,    95,     0,     0,    94,    94,
        94,    94,    94,    94,    94,    94,    95,    94,    94,     0,
         0,     0,     0,    95,    95,    95,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    94,    94,
        94,     0,     0,    94,    94,     0,     0,    94,     0,    94,
         0,     0,    93,    93,    93,    93,    93,    93,    93,    93,
        94,    93,    93,     0,     0,     0,     0,    94,    94,    94,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    93,    93,    93,     0,     0,    93,    93,     0,
         0,    93,     0,    93,     0,     0,    92,    92,    92,    92,
        92,    92,    92,    92,    93,    92,    92,     0,     0,     0,
         0,    93,    93,    93,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    92,    92,    92,     0,
         0,    92,    92,     0,     0,    92,     0,    92,     0,     0,
        91,    91,    91,    91,    91,    91,    91,    91,    92,    91,
        91,     0,     0,     0,     0,    92,    92,    92,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        91,    91,    91,     0,     0,    91,    91,     0,     0,    91,
         0,    91,     0,     0,    89,    89,    89,    89,    89,    89,
        89,    89,    91,    89,    89,     0,     0,     0,     0,    91,
        91,    91,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    89,    89,    89,     0,     0,    89,
        89,     0,     0,    89,     0,    89,     0,     0,    80,    80,
        80,    80,    80,    80,    80,    80,    89,    80,    80,     0,
         0,     0,     0,    89,    89,    89,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    80,    80,
        80,     0,     0,    80,    80,     0,     0,    80,     0,    80,
         0,     0,    78,    78,    78,    78,    78,    78,    78,    78,
        80,    78,    78,     0,     0,     0,     0,    80,    80,    80,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    78,    78,    78,     0,     0,    78,    78,     0,
         0,    78,     0,    78,     0,     0,    77,    77,    77,    77,
        77,    77,    77,    77,    78,    77,    77,     0,     0,     0,
         0,    78,    78,    78,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    77,    77,    77,     0,
         0,    77,    77,     0,     0,    77,     0,    77,     0,     0,
        73,    73,    73,    73,    73,    73,    73,    73,    77,    73,
        73,     0,     0,     0,     0,    77,    77,    77,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        73,    73,    73,     0,     0,    73,    73,     0,     0,    73,
         0,    73,     0,     0,    62,    62,    62,    62,    62,    62,
        62,    62,    73,    62,    62,     0,     0,     0,     0,    73,
        73,    73,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    62,    62,    62,     0,     0,    62,
        62,     0,     0,    62,     0,    62,     0,     0,    61,    61,
        61,    61,    61,    61,    61,    61,    62,    61,    61,     0,
         0,     0,     0,    62,    62,    62,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    61,    61,
        61,     0,     0,    61,    61,     0,     0,    61,     0,    61,
         0,     0,    51,    51,    51,    51,    51,    51,    51,    51,
        61,    51,    51,     0,     0,     0,     0,    61,    61,    61,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    51,    51,    51,     0,     0,    51,    51,     0,
         0,    51,     0,    51,     0,     0,    50,    50,    50,    50,
        50,    50,    50,    50,    51,    50,    50,     0,     0,     0,
         0,    51,    51,    51,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    50,    50,    50,     0,
         0,    50,    50,     0,     0,    50,     0,    50,     0,     0,
        44,    44,    44,    44,    44,    44,    44,    44,    50,    44,
        44,     0,     0,     0,     0,    50,    50,    50,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        44,    44,    44,     0,     0,    44,    44,     0,     0,    44,
         0,    44,     0,     0,    25,    25,    25,    25,    25,    25,
        25,    25,    44,    25,    25,     0,     0,     0,     0,    44,
        44,    44,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    25,    25,    25,     0,     0,    25,
        25,     0,     0,    25,     0,    25,     0,     0,    24,    24,
        24,    24,    24,    24,    24,    24,    25,    24,    24,     0,
         0,     0,     0,    25,    25,    25,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    24,    24,
        24,     0,     0,    24,    24,     0,     0,    24,     0,    24,
         0,     0,    23,    23,    23,    23,    23,    23,    23,    23,
        24,    23,    23,     0,     0,     0,     0,    24,    24,    24,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    23,    23,    23,     0,     0,    23,    23,     0,
         0,    23,     0,    23,     0,     0,    22,    22,    22,    22,
        22,    22,    22,    22,    23,    22,    22,     0,     0,     0,
         0,    23,    23,    23,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,    22,    22,    22,     0,
         0,    22,    22,     0,     0,    22,     0,    22,     0,     0,
        19,    19,    19,    19,    19,    19,    19,    19,    22,    19,
        19,     0,     0,     0,     0,    22,    22,    22,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        19,    19,    19,     0,     0,    19,    19,     0,     0,    19,
         0,    19,     0,     0,    17,    17,    17,    17,    17,    17,
        17,    17,    19,    17,    17,     0,     0,     0,     0,    19,
        19,    19,     0,     0,     0,     0,     0,     0,   187,   187,
       187,   187,   187,     0,     0,   187,   187,   187,   187,   187,
       187,   187,   187,   187,    17,    17,    17,     0,     0,    17,
        17,     0,     0,    17,     0,    17,   187,   187,   187,     0,
         0,     0,   187,   187,     0,     0,    17,     0,     0,     0,
         0,     0,     0,    17,    17,    17,    67,    67,    67,    67,
        67,     0,     0,    67,    67,    67,    67,    67,    67,    67,
        67,    67,     0,     0,     0,   187,     0,     0,     0,     0,
         0,     0,     0,     0,    67,    67,    67,     0,     0,     0,
        67,    67,   183,   183,   183,   183,   183,     0,     0,   183,
       183,   183,   183,   183,   183,   183,   183,   183,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       183,     0,   183,    67,     0,     0,   183,   183,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   183,
    
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         3,    -1,     1,     0,     2,     4,     5,    -1,    -1,    -1,
        25,    26,    -1,   162,   165,   166,   168,    -1,    40,   167,
        -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,   116,   119,
       121,    46,   146,   132,   133,   134,   135,   138,   142,    -1,
        49,    -1,    -1,    43,    -1,   123,   124,   126,   127,    59,
       164,    -1,    -1,    -1,    63,    65,    34,    35,    44,    -1,
        -1,   167,    -1,    -1,     6,   108,   109,   110,   111,   112,
        44,   113,   152,    62,   152,   139,   143,    62,    -1,    51,
       167,    24,    -1,    -1,   163,   169,    39,    41,   151,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,
        45,    58,    52,   167,    -1,    -1,   123,    -1,    -1,    -1,
       148,   148,    -1,    -1,    -1,    -1,    -1,   125,     8,    10,
        -1,    12,    -1,    -1,    15,    -1,    -1,    -1,    58,    27,
        27,    23,    -1,    64,   147,   149,   150,   153,   154,   155,
       156,   159,    -1,    -1,    82,    83,    84,    85,    86,    87,
        88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
        98,    99,   100,   101,   102,   103,   104,   105,   106,    68,
        69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
        79,    62,    -1,    -1,    -1,    41,   107,    -1,   117,    60,
       136,    -1,    -1,    61,    50,    42,     8,    -1,    -1,    11,
        22,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    81,    -1,    47,    53,    55,    -1,    57,
        -1,    -1,   128,   118,   137,   140,   144,    31,    33,    -1,
        -1,   131,     9,    13,    14,    -1,    -1,    -1,    19,    20,
        21,    -1,    -1,    -1,    80,    48,    54,    -1,    -1,    67,
        -1,   141,   145,    -1,   122,   129,    -1,    -1,    -1,    30,
        -1,   157,   160,    56,    66,     8,    32,   130,    16,    -1,
        -1,    28,   158,   161,    -1,    -1,    30,    -1,   120,    17,
        -1,    29,    -1,    18,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         4,   249,     5,   151,   130,   246,   154,    79,   260,   150,
        39,    59,    32,    56,    58,    31,    59,    18,    71,    70,
        31,    30,   238,   237,    57,    88,    88,     6,   313,   151,
       147,   304,   154,    29,   303,   150,    39,    59,    32,    56,
        58,    31,   302,   282,   311,   151,   281,    30,   154,   280,
        57,   150,    39,    59,    32,    56,    58,    31,   276,    29,
        21,   151,   259,    30,   154,   254,    57,   150,    39,    59,
        32,    56,    58,    31,   253,    29,   301,   151,   241,    30,
       154,   240,    57,   150,    39,    59,    32,    56,    58,    31,
       228,    29,   298,   151,   222,    30,   154,   221,    57,   150,
        39,    59,    32,    56,    58,    31,   213,    29,    21,   151,
       141,    30,   154,   140,    57,   150,    39,    59,    32,    56,
        58,    31,   139,    29,    21,   151,   137,    30,   154,    76,
        57,   150,    39,    59,    32,    56,    58,    31,    75,    29,
       234,   151,    74,    30,   154,    72,    57,   150,    39,    59,
        32,    56,    58,    31,    -1,    29,   217,    46,    47,    30,
         1,     2,    57,   172,    39,    59,    32,    56,    58,    31,
        -1,    29,    82,    46,    47,    30,    -1,    -1,    57,    59,
        18,    69,    70,    31,   164,    -1,   166,    29,   310,   257,
       258,    39,    59,    32,    56,    58,    31,   164,    -1,   166,
        -1,    -1,    30,    -1,    -1,    57,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    29,   300,   257,   258,    39,    59,
        32,    56,    58,    31,    -1,    -1,    -1,    -1,    -1,    30,
        -1,    -1,    57,   299,    39,    59,    32,    56,    58,    31,
        -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,   296,
        39,    59,    32,    56,    58,    31,    -1,    29,    -1,    -1,
        -1,    30,    -1,    -1,    57,   294,    39,    59,    32,    56,
        58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,
        57,   279,    39,    59,    32,    56,    58,    31,    -1,    29,
        -1,    -1,    -1,    30,    -1,    -1,    57,   277,    39,    59,
        32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,
        -1,    -1,    57,   274,    39,    59,    32,    56,    58,    31,
        -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,   273,
        39,    59,    32,    56,    58,    31,    -1,    29,    -1,    -1,
        -1,    30,    -1,    -1,    57,   272,    39,    59,    32,    56,
        58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,
        57,   271,    39,    59,    32,    56,    58,    31,    -1,    29,
        -1,    -1,    -1,    30,    -1,    -1,    57,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    29,   267,   257,   258,    39,
        59,    32,    56,    58,    31,    -1,    -1,    -1,    -1,    -1,
        30,    -1,    -1,    57,   265,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
        55,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,   244,    54,    57,   243,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,    49,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,   236,    30,    -1,    -1,    57,    -1,    -1,
        -1,    -1,   232,    -1,    -1,    -1,    29,    10,    39,    59,
        32,    56,    58,    31,    -1,    -1,    -1,    -1,    -1,    30,
        -1,    -1,    57,   231,    39,    59,    32,    56,    58,    31,
        -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,    16,
        39,    59,    32,    56,    58,    31,    -1,    29,    -1,    -1,
        -1,    30,    -1,    -1,    57,    49,    39,    59,    32,    56,
        58,    31,    -1,    29,    -1,    -1,   212,    30,    -1,    -1,
        57,    -1,   210,    39,    59,    32,    56,    58,    31,    29,
       214,    13,    14,    15,    30,    -1,    -1,    57,   209,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   208,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       207,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   206,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   205,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   204,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   203,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       202,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   201,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   200,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   199,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   198,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       197,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   196,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   195,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   194,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   193,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       192,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   191,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   190,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   189,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   188,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       187,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   186,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   185,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   184,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   183,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       182,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   181,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   180,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   179,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   178,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
       177,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   176,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,   175,    39,    59,    32,    56,    58,    31,    -1,
        29,    -1,    -1,    -1,    30,    -1,    -1,    57,   174,    39,
        59,    32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,
        30,    -1,    -1,    57,   163,    39,    59,    32,    56,    58,
        31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,
        16,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,   143,    39,    59,    32,
        56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,
        -1,    57,    -1,    55,    39,    59,    32,    56,    58,    31,
        29,   144,    13,    14,    15,    30,   142,    54,    57,    55,
        39,    59,    32,    56,    58,    31,    -1,    29,    -1,    -1,
        -1,    30,   138,    54,    57,   135,    39,    59,    32,    56,
        58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,
        57,    16,    39,    59,    32,    56,    58,    31,    -1,    29,
        -1,    -1,    -1,    30,    -1,    -1,    57,    85,    39,    59,
        32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,
        -1,    -1,    57,    -1,    16,    39,    59,    32,    56,    58,
        31,    29,   134,    13,    14,    15,    30,    -1,    -1,    57,
        81,    39,    59,    32,    56,    58,    31,    -1,    29,    -1,
        -1,    -1,    30,    -1,    -1,    57,    -1,    68,    39,    59,
        32,    56,    58,    31,    29,    -1,    -1,    -1,    84,    30,
        -1,    -1,    57,    67,    39,    59,    32,    56,    58,    31,
        -1,    29,    -1,    -1,    -1,    30,    -1,    -1,    57,    66,
        39,    59,    32,    56,    58,    31,    -1,    29,    -1,    -1,
        -1,    30,    -1,    -1,    57,    65,    39,    59,    32,    56,
        58,    31,    -1,    29,    -1,    -1,    -1,    30,    -1,    -1,
        57,    16,    39,    59,    32,    56,    58,    31,    -1,    29,
        -1,    -1,    -1,    30,    -1,    -1,    57,    52,    39,    59,
        32,    56,    58,    31,    -1,    29,    -1,    -1,    -1,    30,
        -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    29,    53,    13,    14,    15,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
       159,   -57,    -3,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   -57,   -57,   -57,   -57,   -57,   -57,  1365,   -57,  1349,
       -57,   -57,  1333,  1317,  1301,  1285,   165,     2,   117,   -57,
       -57,   -57,   -57,   -57,   -57,   -57,   105,    99,    87,   -57,
       -57,   -11,   -57,   -57,  1268,   141,   -57,   -57,   -57,   -57,
      1252,  1235,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -15,
       -57,  1219,  1203,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   -57,    79,  1187,    75,    73,    67,  1171,  1154,   -57,
      1138,   -57,   -57,    -3,   -57,   -57,   -57,   -57,   -57,  1122,
       151,  1106,  1090,  1074,  1058,  1042,  1026,  1010,   994,   978,
       962,   946,   930,   914,   898,   882,   866,   850,   834,   818,
       802,   786,   770,   754,   738,   722,   706,   690,   674,   658,
       642,   626,   610,   594,   578,   562,   546,   530,   -57,   -57,
       -57,   513,    86,   497,   -57,   -57,   125,   -22,   -57,   -23,
        52,    49,   -57,   -57,   -57,   -57,   -57,   -57,    86,   -57,
       -57,   -57,   481,   465,   -57,   -57,   135,   -57,   440,    15,
        14,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
        32,    27,   -57,   424,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   408,   -57,   -17,   -57,   -57,   -57,   -57,    45,   -57,
        27,   151,   138,   -57,   -57,   -57,    58,   -27,   119,   -57,
       -57,   -57,   -57,   392,   -57,   376,   -57,   -57,   -57,   349,
       333,   317,   301,   -57,   -57,   -57,    37,   -57,   285,   -57,
       -57,   269,    15,   -57,   -57,     5,    -1,   -57,   -57,   103,
       -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
       -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   253,   -57,
       -57,   -57,   -57,   237,   -57,   -57,   -57,    87,   221,   205,
        71,    -8,   -18,   -57,   -57,    27,   -57,   -57,   -57,   -57,
       -57,   -57,   -57,   -57,    55,   -57,   178,    39,   -57,   -57,
       -57,   -57,    23,   -57,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     1,     2,     0,     1,     1,     4,     2,     0,     3,
         1,     2,     1,     3,     3,     1,     5,     7,     9,     3,
         3,     3,     2,     1,     3,     1,     1,     0,     5,     7,
         0,     1,     3,     1,     1,     1,     1,     3,     1,     3,
         1,     3,     4,     1,     1,     2,     1,     4,     5,     1,
         4,     2,     0,     0,     4,     1,     3,     1,     0,     1,
         4,     4,     0,     1,     3,     1,     6,     5,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         5,     4,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
         2,     2,     2,     2,     2,     2,     0,     0,     5,     1,
         8,     1,     8,     0,     1,     3,     1,     1,     0,     4,
         3,     1,     1,     1,     1,     0,     0,     5,     0,     0,
         0,     6,     0,     0,     0,     6,     1,     2,     0,     1,
         1,     2,     0,     1,     1,     1,     0,     0,     5,     0,
         0,     5,     1,     3,     2,     1,     1,     0,     1,     3,
    
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     4,     4,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     6,     6,     7,     7,     8,     8,     9,     9,
        10,    10,    11,    11,    12,    12,    13,    13,    14,    14,
        14,    15,    15,    15,    16,    16,    17,    17,    17,    18,
        18,    18,    20,    21,    19,    22,    22,    22,    23,    23,
        24,    24,    25,    25,    26,    26,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    28,    29,    27,    27,
        27,    27,    30,    31,    31,    32,    32,    33,    34,    34,
        35,    35,    36,    36,    36,    37,    38,    36,    39,    40,
        41,    36,    42,    43,    44,    36,    36,    45,    45,    46,
        46,    47,    47,    48,    48,    48,    49,    50,    48,    51,
        52,    48,    53,    54,    54,    54,    55,    55,    56,    56,
    
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",       "INLINE_HTML",          "ECHO_TAG",
                  "NAME",           "DECIMAL",               "INT",
                "STRING",      "DOUBLE_QUOTE",        "BACK_QUOTE",
                "DOLLAR",          "VARIABLE",     "HALT_COMPILER",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "POW",          "QUESTION",
                 "COLON",           "PERCENT",                "GT",
                    "LT",              "GTOE",              "LTOE",
                   "EQU",         "IDENTICAL",               "NEQ",
            "NIDENTICAL",            "ASSIGN",       "PLUS_ASSIGN",
          "MINUS_ASSIGN",      "TIMES_ASSIGN",        "POW_ASSIGN",
         "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",     "BIT_OR_ASSIGN",
        "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN", "LEFT_SHIFT_ASSIGN",
            "MOD_ASSIGN",           "BIT_AND",            "BIT_OR",
               "BIT_XOR",           "BIT_NOT",               "INC",
                   "DEC",        "LEFT_SHIFT",       "RIGHT_SHIFT",
        "HEREDOC_HEADER",     "NOWDOC_HEADER",             "ARROW",
        "PROPERTY_ARROW",               "BRA",               "KET",
                  "CBRA",              "CKET",             "COMMA",
                  "BBRA",              "BKET",               "EOL",
                   "AND",                "OR",        "LOGICAL_OR",
           "LOGICAL_AND",       "LOGICAL_XOR",               "NOT",
                    "IF",              "ELSE",              "ECHO",
                 "WHILE",                "DO",               "FOR",
              "FUNCTION",              "LIST",             "ARRAY",
                   "USE",             "BREAK",          "CONTINUE",
                "RETURN",               "DOT",       "ANY_CONTENT",
     "HEREDOC_END_LABEL","VARIABLE_IN_STRING","PROPERTY_IN_STRING",
      "OFFSET_IN_STRING",  "OPEN_CURLY_BRACE",    "END_OF_HEREDOC",
    
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,               "<?=",
                    null,                null,                null,
                    null,                "\"",                 "`",
                     "$",                null,   "__halt_compiler",
                     "+",                 "-",                 "*",
                     "/",                "**",                 "?",
                     ":",                 "%",                 ">",
                     "<",                ">=",                "<=",
                    "==",               "===",                "!=",
                   "!==",                 "=",                "+=",
                    "-=",                "*=",               "**=",
                    "/=",                "&=",                "|=",
                    "^=",               ">>=",               "<<=",
                    "%=",                 "&",                 "|",
                     "^",                 "~",                "++",
                    "--",                "<<",                ">>",
                    null,                null,                "=>",
                    "->",                 "(",                 ")",
                     "[",                 "]",                 ",",
                     "{",                 "}",                 ";",
                    "&&",                "||",                "OR",
                   "AND",               "XOR",                 "!",
                    "if",              "else",              "echo",
                 "while",                "do",               "for",
              "function",              "list",             "array",
                   "use",             "break",          "continue",
                "return",                 ".",                null,
                    null,                null,                null,
                    null,                "${",                null,
    
]; 


function tokenToString(tk){
    return jjtokenAlias[tk] === null ? "<" + jjtokenNames[tk] + ">" : '"' + jjtokenAlias[tk] + '"';
}
function Token(id, val, startLine, startColumn, endLine, endColumn){
    this.id = id;
    this.val = val;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
}
Token.prototype.clone = function(){
    return new Token(
        this.id,
        this.val,
        this.startLine,
        this.startColumn,
        this.endLine,
        this.endColumn
    );
}
Token.prototype.toString = function(){
    return (jjtokenAlias[this.id] === null ? 
        '<' + jjtokenNames[this.id] + '>' :
        '"' + jjtokenAlias[this.id] + '"') + "(" + this.val + ")";
}
function createParser() {
    // members for lexer
    var jjlexState;
    var jjstate;
    var jjmatched;
    var jjtoken;
    
    var jjmarker = { state: -1, line: 0, column: 0 };
    var jjbackupCount;

    var jjline;
    var jjcolumn;
    var jjtline;
    var jjtcolumn;

    // members for parser
    var jjlrState;
    var jjsematicS;
    var jjsematicVal;
    var jjtokenQueue;

    var jjstop;

    var jjhandlers = {};

    // extra members, defined by %extra_arg
    
    var outputs;
    var heredocStart;
    var propertyName;


    return {
        init: init,
        on: on,
        accept: accept,
        end: end,
        halt: halt
    };
    function init(outputs1){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjtokenQueue = [];

        jjstop = false;
        
    outputs = outputs1;
    heredocStart = [];


        jjtryReduce();
    }
    /**
     *  set 
     */
    function jjsetImg(s){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjtokenQueue.push(jjtoken);

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjemit(name, a1, a2, a3){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name, cb){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                jjlexState.push(1); 
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 9:
                jjlexState.push(1); 
                break;
            case 10:
                jjlexState.push(1); 
                break;
            case 11:
                jjlexState.push(1); 
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten){
        var jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 6:
                jjsetImg(""); 
                break;
            case 15:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 19:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 26:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 27:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 28:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 29:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 33:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 35:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 36:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 37:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 38:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 39:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 40:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 41:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 42:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 43:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 44:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 45:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 50:
                jjsetImg(""); 
                break;
            case 52:
                jjsetImg(""); 
                break;
            case 53:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 58:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 67:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 69:
                jjsetImg(""); 
                break;
            case 71:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 79:
                jjsetImg(""); jjlexState.pop(); 
                break;
            case 80:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 81:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 83:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 85:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 86:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 87:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 88:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 90:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 91:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 92:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 93:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 95:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 96:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 97:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 98:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 102:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 109:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 111:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = Number(jjsematicVal.val); }
                break;
            case 118:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 119:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 120:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 121:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 122:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 123:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 125:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 126:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 127:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 129:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 133:
                jjsetImg(""); 
                break;
            case 136:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 137:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 138:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 139:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 142:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 144:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 145:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 150:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 152:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 153:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 154:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 155:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 159:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 160:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 162:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 163:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 164:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 170:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 171:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 172:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 173:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 174:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 175:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 176:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 177:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 178:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 179:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = extractHeredocStart(jjsematicVal.val); }
                break;
            case 180:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 181:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 182:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 183:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 184:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 185:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten){
        var jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                jjsetImg(""); 
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 9:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            default:;
        }
    }
    function jjdoLexAction3(jjstaten){
        var jjtk = jjlexTokens3[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 11:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 13:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 19:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 20:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction4(jjstaten){
        var jjtk = jjlexTokens4[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 11:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 13:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 19:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 20:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction5(jjstaten){
        var jjtk = jjlexTokens5[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 8:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = '$'; }
                break;
            case 12:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 14:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1); }
                break;
            case 15:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(1, jjsematicVal.val.length - 2); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 21:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(2, jjsematicVal.val.length - 3); }
                break;
            case 22:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val); }
                break;
            case 23:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            case 24:
                {
        jjsematicVal = nodeFromToken(jjtoken);
        var parts = jjsematicVal.val.substr(1, jjsematicVal.val.length - 1).split('->');
        jjsematicVal.val = parts[0];
        propertyName = parts[1];
    }
                break;
            default:;
        }
    }
    function jjdoLexAction6(jjstaten){
        var jjtk = jjlexTokens6[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 3:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 6:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate, state){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            case 3:
                jjdoLexAction3(state);
                break;
            case 4:
                jjdoLexAction4(state);
                break;
            case 5:
                jjdoLexAction5(state);
                break;
            case 6:
                jjdoLexAction6(state);
                break;
            default:;
        }
        jjtokenQueue.length > 0 && jjacceptToken(null);
    }
    function jjrollback(){
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjacceptToken(null);
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: start => top_statement_list */
                var l = jjsematicS[jjsp - 1];
                { outputs.astRoot = l; } 
                break;
            case 2:
                /* 2: top_statement_list => top_statement_list top_statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 3:
                /* 3: top_statement_list => */
                { jjtop = new ZNode(AST_TOPLIST); } 
                break;
            case 6:
                /* 6: top_statement => "__halt_compiler" "(" ")" ";" */
                { halt(); } 
                break;
            case 7:
                /* 7: statement_list => statement_list statement */
                var st = jjsematicS[jjsp - 1];
                { st !== null && jjtop.add(st); } 
                break;
            case 8:
                /* 8: statement_list => */
                { jjtop = new ZNode(AST_STATEMENTLIST); } 
                break;
            case 9:
                /* 9: statement => "{" statement_list "}" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 10:
                /* 10: statement => ";" */
                { jjtop = null; } 
                break;
            case 11:
                /* 11: statement => expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 12:
                /* 12: statement => inline_html_list */
                var l = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ECHO, l); } 
                break;
            case 13:
                /* 13: statement => "<?=" expr <INLINE_HTML> */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 14:
                /* 14: statement => "echo" echo_expr_list ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 16:
                /* 16: statement => "while" "(" expr ")" statement */
                var cond = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_WHILE, [cond, s]); } 
                break;
            case 17:
                /* 17: statement => "do" statement "while" "(" expr ")" ";" */
                var s = jjsematicS[jjsp - 6];
                var cond = jjsematicS[jjsp - 3];
                { jjtop = new ZNode(AST_DO_WHILE, [cond, s]); } 
                break;
            case 18:
                /* 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement */
                var e1 = jjsematicS[jjsp - 7];
                var e2 = jjsematicS[jjsp - 5];
                var e3 = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_FOR, [e1, e2, e3, s]); } 
                break;
            case 19:
                /* 19: statement => "return" optional_expr ";" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_RETURN, e); } 
                break;
            case 20:
                /* 20: statement => "break" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                { jjtop.type = AST_BREAK; jjtop.add(n); } 
                break;
            case 21:
                /* 21: statement => "continue" optional_num ";" */
                var n = jjsematicS[jjsp - 2];
                { jjtop.type = AST_CONTINUE; jjtop.add(n); } 
                break;
            case 22:
                /* 22: inline_html_list => inline_html_list <INLINE_HTML> */
                var h = jjsematicS[jjsp - 1];
                { jjtop = nodeBetween(jjtop, h, jjtop.val + h.val); jjtop.type = AST_STRING; } 
                break;
            case 23:
                /* 23: inline_html_list => <INLINE_HTML> */
                { jjtop.type = AST_STRING; } 
                break;
            case 24:
                /* 24: echo_expr_list => echo_expr_list "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 25:
                /* 25: echo_expr_list => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ECHO, e); } 
                break;
            case 27:
                /* 27: optional_num => */
                { jjtop = ZNode.NONE; } 
                break;
            case 28:
                /* 28: if_statement => "if" "(" expr ")" statement */
                var c = jjsematicS[jjsp - 3];
                var s = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, ZNode.NONE]); } 
                break;
            case 29:
                /* 29: if_statement => "if" "(" expr ")" statement "else" statement */
                var c = jjsematicS[jjsp - 5];
                var s = jjsematicS[jjsp - 3];
                var el = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_IF, [c, s, el]); } 
                break;
            case 30:
                /* 30: for_exprs => */
                { jjtop = new ZNode(AST_EXPR_LIST); } 
                break;
            case 32:
                /* 32: non_empty_for_exprs => non_empty_for_exprs "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 33:
                /* 33: non_empty_for_exprs => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_EXPR_LIST, e); } 
                break;
            case 37:
                /* 37: callable_expr => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 39:
                /* 39: dereferencable => "(" expr ")" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 41:
                /* 41: dereferencable_primitive => "[" array_pair_list "]" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 42:
                /* 42: dereferencable_primitive => "array" "(" array_pair_list ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 43:
                /* 43: dereferencable_primitive => <STRING> */
                { jjtop.type = AST_STRING; } 
                break;
            case 45:
                /* 45: var => dereferencable arrow_and_property */
                var v = jjsematicS[jjsp - 2];
                var pn = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PROPERTY, [v, pn]); } 
                break;
            case 47:
                /* 47: callable_variable => dereferencable "[" optional_expr "]" */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_OFFSET, [v, e]); } 
                break;
            case 48:
                /* 48: callable_variable => dereferencable arrow_and_property "(" argument_list ")" */
                var v = jjsematicS[jjsp - 5];
                var pn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_METHODCALL, [v, pn, l]); } 
                break;
            case 49:
                /* 49: simple_var => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 50:
                /* 50: simple_var => "$" "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_VARIABLE, e); } 
                break;
            case 51:
                /* 51: simple_var => "$" simple_var */
                var v = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 52:
                /* 52: @0 => */
                jjlexState.push(2); 
                break;
            case 53:
                /* 53: @1 => */
                var pn = jjsematicS[jjsp - 1];
                jjlexState.pop(); 
                break;
            case 54:
                /* 54: arrow_and_property => "->" @0 property_name @1 */
                var pn = jjsematicS[jjsp - 2];
                { jjtop = pn; } 
                break;
            case 55:
                /* 55: property_name => <NAME> */
                var n = jjsematicS[jjsp - 1];
                { jjtop.type = AST_STRING; } 
                break;
            case 56:
                /* 56: property_name => "{" expr "}" */
                var e = jjsematicS[jjsp - 2];
                { jjtop = e; } 
                break;
            case 58:
                /* 58: optional_expr => */
                { jjtop = ZNode.NONE; } 
                break;
            case 60:
                /* 60: function_call => <NAME> "(" argument_list ")" */
                var fn = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { fn.type = AST_STRING; jjtop = new ZNode(AST_FUNCTIONCALL, [fn, l]); } 
                break;
            case 61:
                /* 61: function_call => callable_expr "(" argument_list ")" */
                var f = jjsematicS[jjsp - 4];
                var l = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_FUNCTIONCALL, [f, l]); } 
                break;
            case 62:
                /* 62: argument_list => */
                { jjtop = new ZNode(AST_ARGLIST); } 
                break;
            case 64:
                /* 64: non_empty_argument_list => non_empty_argument_list "," expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 65:
                /* 65: non_empty_argument_list => expr */
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARGLIST, e); } 
                break;
            case 66:
                /* 66: expr_without_var => "list" "(" array_pair_list ")" "=" expr */
                var l = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [l, e]); } 
                break;
            case 67:
                /* 67: expr_without_var => "[" array_pair_list "]" "=" expr */
                var l = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [l, e]); } 
                break;
            case 68:
                /* 68: expr_without_var => var "=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b]); } 
                break;
            case 69:
                /* 69: expr_without_var => var "+=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_PLUS); } 
                break;
            case 70:
                /* 70: expr_without_var => var "-=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MINUS); } 
                break;
            case 71:
                /* 71: expr_without_var => var "**=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_POW); } 
                break;
            case 72:
                /* 72: expr_without_var => var "*=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_TIMES); } 
                break;
            case 73:
                /* 73: expr_without_var => var "/=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_DIVIDE); } 
                break;
            case 74:
                /* 74: expr_without_var => var "&=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITAND); } 
                break;
            case 75:
                /* 75: expr_without_var => var "|=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITOR); } 
                break;
            case 76:
                /* 76: expr_without_var => var "^=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_BITXOR); } 
                break;
            case 77:
                /* 77: expr_without_var => var ">>=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 78:
                /* 78: expr_without_var => var "<<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_LEFTSHIFT); } 
                break;
            case 79:
                /* 79: expr_without_var => var "%=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ASSIGN, [a, b], OP_MOD); } 
                break;
            case 80:
                /* 80: expr_without_var => expr "?" expr ":" expr */
                var a = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 3];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, b, c]); } 
                break;
            case 81:
                /* 81: expr_without_var => expr "?" ":" expr */
                var a = jjsematicS[jjsp - 4];
                var c = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_CONDITIONALEXPR, [a, ZNode.NONE, c]); } 
                break;
            case 82:
                /* 82: expr_without_var => expr ">" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHAN);        } 
                break;
            case 83:
                /* 83: expr_without_var => expr "<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHAN);           } 
                break;
            case 84:
                /* 84: expr_without_var => expr ">=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_GREATERTHANOREQUAL); } 
                break;
            case 85:
                /* 85: expr_without_var => expr "<=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LESSTHANOREQUAL);    } 
                break;
            case 86:
                /* 86: expr_without_var => expr "==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_EQUAL);              } 
                break;
            case 87:
                /* 87: expr_without_var => expr "===" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_IDENTICAL);          } 
                break;
            case 88:
                /* 88: expr_without_var => expr "!=" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTEQUAL);           } 
                break;
            case 89:
                /* 89: expr_without_var => expr "!==" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_NOTIDENTICAL);       } 
                break;
            case 90:
                /* 90: expr_without_var => expr "^" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITXOR);      } 
                break;
            case 91:
                /* 91: expr_without_var => expr "|" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITOR);       } 
                break;
            case 92:
                /* 92: expr_without_var => expr "&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_BITAND);      } 
                break;
            case 93:
                /* 93: expr_without_var => expr ">>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_RIGHTSHIFT); } 
                break;
            case 94:
                /* 94: expr_without_var => expr "<<" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_LEFTSHIFT);  } 
                break;
            case 95:
                /* 95: expr_without_var => expr "&&" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_AND); } 
                break;
            case 96:
                /* 96: expr_without_var => expr "||" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_OR);  } 
                break;
            case 97:
                /* 97: expr_without_var => expr "OR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALOR, [a, b]);         } 
                break;
            case 98:
                /* 98: expr_without_var => expr "XOR" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_XOR); } 
                break;
            case 99:
                /* 99: expr_without_var => expr "AND" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_LOGICALAND, [a, b]);       } 
                break;
            case 100:
                /* 100: expr_without_var => expr "+" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_PLUS);   } 
                break;
            case 101:
                /* 101: expr_without_var => expr "-" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MINUS);  } 
                break;
            case 102:
                /* 102: expr_without_var => expr "*" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_TIMES);  } 
                break;
            case 103:
                /* 103: expr_without_var => expr "/" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_DIVIDE); } 
                break;
            case 104:
                /* 104: expr_without_var => expr "%" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_MOD);    } 
                break;
            case 105:
                /* 105: expr_without_var => expr "**" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_POW);   } 
                break;
            case 106:
                /* 106: expr_without_var => expr "." expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_BINARYOP, [a, b], OP_CONCAT); } 
                break;
            case 107:
                /* 107: expr_without_var => "(" expr ")" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = a; } 
                break;
            case 108:
                /* 108: expr_without_var => "+" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_POSITIVE); } 
                break;
            case 109:
                /* 109: expr_without_var => "-" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NEGATIVE); } 
                break;
            case 110:
                /* 110: expr_without_var => "!" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_NOT);    } 
                break;
            case 111:
                /* 111: expr_without_var => "~" expr */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_UNARYOP, a, OP_BITNOT); } 
                break;
            case 112:
                /* 112: expr_without_var => "++" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTINC, a);   } 
                break;
            case 113:
                /* 113: expr_without_var => "--" var */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_POSTDEC, a);  } 
                break;
            case 114:
                /* 114: expr_without_var => var "++" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXINC, a); } 
                break;
            case 115:
                /* 115: expr_without_var => var "--" */
                var a = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_SUFFIXDEC, a); } 
                break;
            case 116:
                /* 116: @2 => */
                jjlexState.push(4); 
                break;
            case 117:
                /* 117: @3 => */
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 118:
                /* 118: expr_without_var => "`" @2 quote_list "`" @3 */
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 120:
                /* 120: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" */
                var l = jjsematicS[jjsp - 6];
                var ll = jjsematicS[jjsp - 4];
                var b = jjsematicS[jjsp - 2];
                { jjtop = new ZNode(AST_ANONYFUNCTION, [l, ll, b]); } 
                break;
            case 122:
                /* 122: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" */
                var n = jjsematicS[jjsp - 7];
                var l = jjsematicS[jjsp - 5];
                var b = jjsematicS[jjsp - 2];
                { n.type = AST_STRING; jjtop = new ZNode(AST_FUNCTION, [n, l, b]); } 
                break;
            case 123:
                /* 123: parameter_list => */
                { jjtop = new ZNode(AST_PARAMLIST); } 
                break;
            case 125:
                /* 125: non_empty_parameter_list => non_empty_parameter_list "," parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop.add(p); } 
                break;
            case 126:
                /* 126: non_empty_parameter_list => parameter */
                var p = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_PARAMLIST, p); } 
                break;
            case 127:
                /* 127: parameter => <VARIABLE> */
                { jjtop.type = AST_STRING; } 
                break;
            case 128:
                /* 128: lexical_vars => */
                { jjtop = new ZNode(AST_LEXICALVARLIST); } 
                break;
            case 129:
                /* 129: lexical_vars => "use" "(" lexical_var_list ")" */
                var l = jjsematicS[jjsp - 2];
                { jjtop = l; } 
                break;
            case 130:
                /* 130: lexical_var_list => lexical_var_list "," <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop.add(v); } 
                break;
            case 131:
                /* 131: lexical_var_list => <VARIABLE> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_LEXICALVARLIST, v); } 
                break;
            case 132:
                /* 132: primitive => <INT> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_INTEGER; jjtop = s; } 
                break;
            case 133:
                /* 133: primitive => <DECIMAL> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_FLOAT; jjtop = s; } 
                break;
            case 134:
                /* 134: primitive => <NAME> */
                var s = jjsematicS[jjsp - 1];
                { s.type = AST_CONST; jjtop = s; } 
                break;
            case 135:
                /* 135: @4 => */
                jjlexState.push(3); 
                break;
            case 136:
                /* 136: @5 => */
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 137:
                /* 137: primitive => """ @4 quote_list """ @5 */
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 138:
                /* 138: @6 => */
                var h = jjsematicS[jjsp - 1];
                jjlexState.push(5); 
                break;
            case 139:
                /* 139: @7 => */
                var h = jjsematicS[jjsp - 2];
                { heredocStart.push(h.val); } 
                break;
            case 140:
                /* 140: @8 => */
                var h = jjsematicS[jjsp - 5];
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 141:
                /* 141: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 */
                var h = jjsematicS[jjsp - 6];
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 142:
                /* 142: @9 => */
                var h = jjsematicS[jjsp - 1];
                jjlexState.push(6); 
                break;
            case 143:
                /* 143: @10 => */
                var h = jjsematicS[jjsp - 2];
                { heredocStart.push(h.val); } 
                break;
            case 144:
                /* 144: @11 => */
                var h = jjsematicS[jjsp - 5];
                var l = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 145:
                /* 145: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 */
                var h = jjsematicS[jjsp - 6];
                var l = jjsematicS[jjsp - 3];
                { jjtop = l; } 
                break;
            case 147:
                /* 147: heredoc_list => heredoc_list heredoc_item */
                var i = jjsematicS[jjsp - 1];
                { i !== null && jjtop.add(i); } 
                break;
            case 148:
                /* 148: heredoc_list => */
                { jjtop = new ZNode(AST_STRING_LIST); } 
                break;
            case 149:
                /* 149: heredoc_item => <HEREDOC_END_LABEL> */
                var n = jjsematicS[jjsp - 1];
                { 
        if(n.val.trim() === heredocStart[heredocStart.length - 1]){ 
            jjtokenQueue.push(new Token(86, null, -1, 0, 0, 0)); 
            heredocStart.pop(); 
            jjtop = null; 
        }
        else {
            jjtop.type = AST_STRING;
        }
    } 
                break;
            case 151:
                /* 151: quote_list => quote_list encaps */
                var e = jjsematicS[jjsp - 1];
                { jjtop.add(e); } 
                break;
            case 152:
                /* 152: quote_list => */
                { jjtop = new ZNode(AST_STRING_LIST); } 
                break;
            case 153:
                /* 153: encaps => <ANY_CONTENT> */
                { jjtop.type = AST_STRING; } 
                break;
            case 154:
                /* 154: encaps => <VARIABLE_IN_STRING> */
                var v = jjsematicS[jjsp - 1];
                { v.type = AST_STRING; jjtop = new ZNode(AST_VARIABLE, v); } 
                break;
            case 155:
                /* 155: encaps => <PROPERTY_IN_STRING> */
                var pn = jjsematicS[jjsp - 1];
                { 
        pn.type = AST_STRING; 
        jjtop = new ZNode(AST_PROPERTY, [new ZNode(AST_VARIABLE, pn), new ZNode(AST_STRING, null, propertyName, pn)]); 
    } 
                break;
            case 156:
                /* 156: @12 => */
                var v = jjsematicS[jjsp - 1];
                jjlexState.push(1); 
                break;
            case 157:
                /* 157: @13 => */
                var v = jjsematicS[jjsp - 4];
                var e = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 158:
                /* 158: encaps => <OFFSET_IN_STRING> @12 expr "]" @13 */
                var v = jjsematicS[jjsp - 5];
                var e = jjsematicS[jjsp - 3];
                {
        v.type = AST_STRING;
        jjtop = new ZNode(AST_OFFSET, [new ZNode(AST_VARIABLE, v), e]); 
    } 
                break;
            case 159:
                /* 159: @14 => */
                jjlexState.push(1); 
                break;
            case 160:
                /* 160: @15 => */
                var e = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 161:
                /* 161: encaps => "${" @14 expr "}" @15 */
                var e = jjsematicS[jjsp - 3];
                { jjtop = e; } 
                break;
            case 163:
                /* 163: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop.add(a); } 
                break;
            case 164:
                /* 164: non_empty_array_pair_list => non_empty_array_pair_list "," */
                var a = jjsematicS[jjsp - 1];
                { a.type = AST_NONE; jjtop.add(a); } 
                break;
            case 165:
                /* 165: non_empty_array_pair_list => possible_array_pair */
                var a = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAY, a); } 
                break;
            case 167:
                /* 167: possible_array_pair => */
                { jjtop = ZNode.NONE; } 
                break;
            case 169:
                /* 169: array_pair => expr "=>" expr */
                var a = jjsematicS[jjsp - 3];
                var b = jjsematicS[jjsp - 1];
                { jjtop = new ZNode(AST_ARRAYPAIR, [a, b]); } 
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjacceptToken(tk){
        // look up action table
        var shifted = false;
        tk !== null && jjtokenQueue.push(tk);
        while(!jjstop && jjtokenQueue.length > 0){
            var t = jjtokenQueue[0];
            var cstate = jjlrState[jjlrState.length - 1];
            var ind = jjdisact[cstate] + t.id;
            var act = 0;
            if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
                act = -jjdefred[cstate] - 1;
            }
            else {
                act = jjpact[ind];
            }
            if(act === jjactERR){
                // explicit error
                jjsyntaxError(t);
                jjtokenQueue.shift();
            }
            else if(act > 0){
                // shift
                if(t.id === 0){
                    // end of file
                    jjstop = true;
                    jjemit('accept');
                    jjtokenQueue.shift();
                }
                else {
                    jjlrState.push(act - 1);
                    jjsematicS.push(jjsematicVal);
                    jjsematicVal = null;
                    jjtryReduce();
                    // token consumed
                    jjtokenQueue.shift();
                }
            }
            else if(act < 0){
                jjdoReduction(-act - 1);
                jjtryReduce();
            }
            else {
                // error
                jjsyntaxError(t);
                // force consume
                jjtokenQueue.shift();
            }
        }
    }
    function jjtryReduce(){
        var cstate = jjlrState[jjlrState.length - 1];
        var act;
        while(jjdisact[cstate] === -jjtokenCount && (act = jjdefred[cstate]) !== -1){
            jjdoReduction(act);
            cstate = jjlrState[jjlrState.length - 1];
        }
    }
    function jjsyntaxError(t){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}


function OpArray(){
    this.opcode = [];
    this.opCount = 0;
    this.functions = [];
}
OpArray.prototype.dump = function(){
    function rightAlign(s, al){
        function repeat(s, t){
            let ret = '';
            while(t --> 0) ret += s;
            return ret;
        }
        return s + (s.length < al ? repeat(' ', al - s.length) : '');
    }
    var ret = [];
    var labels = [];
    var labelMaxLen = 0;
    var labelCount = 0;
    var labelOps = [];
    for(var i = 0, _a = this.opcode; i < this.opCount; i++){
        var op = _a[2 * i];
        var line = op.name;
        var arg = _a[2 * i + 1];
        if(op === OP_JMP || op === OP_JZ || op === OP_JNZ || op === OP_ENTRY){
            var l = labels[arg] = 'label' + labelCount++;
            l.length > labelMaxLen && (labelMaxLen = l.length);
            labelOps.push({ op: op, loc: i, target: arg });
            ret.push(null);
        }
        else {
            if(arg !== null){
                if(isArray(arg)){
                    for(var j = 0; j < arg.length; j++){
                        line += ' ' + arg[j];
                    }
                }
                else {
                    if(typeof arg === 'string'){
                        arg = '"' + arg.replace(/\n/g, '\\n') + '"';
                    }
                    line += ' ' + String(arg);
                }
            }
            ret.push(line);
        }
    }
    for(var i = 0, _a = labelOps; i < _a.length; i++){
        ret[_a[i].loc] = _a[i].op.name + ' ' + labels[_a[i].target];
    }
    for(var i = 0; i < ret.length; i++){
        var l = labels[i];
        if(l !== undefined){
            ret[i] = rightAlign(l + ':', labelMaxLen + 2) + ret[i];
        }
        else {
            ret[i] = rightAlign('', labelMaxLen + 2) + ret[i];
        }
    }
    return ret;
}

function createCompiler(fname){
    var opa = new OpArray();
    var registers = [];
    var scope = [];
    var onErr = [];
    var funcQueue = [];

    var localNode = new ZNode(AST_LOCAL);
    
    function LoopInfo(allowBreak, allowContinue){
        this.allowBreak = allowBreak;
        this.allowContinue = allowContinue;
        this.breaks = [];
        this.continues = [];
    }
    LoopInfo.prototype.done = function(bl, cl){
        for(var i = 0, _a = this.breaks; i < _a.length; i++){
            setArg(_a[i], bl);
        }
        for(var i = 0, _a = this.continues; i < _a.length; i++){
            setArg(_a[i], cl);
        }
    }

    return {
        compile: compile,
        addErrHandler: addErrHandler
    };

    function addErrHandler(cb){
        onErr.push(cb);
    }
    function err(msg){
        for(var i = 0; i < onErr.length; i++){
            onErr[i](msg);
        }
    }
    function singlePosErr(msg, pos){
        var p = pos.getPos();
        err(msg + ' (at line ' + (p.startLine + 1) + ')');
    }
    function allocateRegister(){
        var i = 0;
        while(registers[i] !== undefined){ i++; };
        registers[i] = true;
        return i;
    }
    function releaseRegister(i){
        if(i === registers.length - 1){
            registers.pop();
        }
        else {
            registers[i] = undefined;
        }
    }
    function pushScope(){
        scope.push(registers);
        registers = [];
    }
    function popScope(){
        registers = scope.pop();
    }
    function emit(s, args){
        opa.opcode.push(s);
        opa.opcode.push(typeof args !== 'undefined' ? args : null);
        return opa.opCount++;
    }
    function setArg(op, arg){
        opa.opcode[op * 2 + 1] = arg;
    }
    function breakTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowBreak){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }
    function continueTarget(ast, level){
        level = level || 1;
        var p = ast;
        while(level --> 0 && p !== null){
            while(p !== null){
                if(p.val instanceof LoopInfo && p.val.allowContinue){
                    break;
                }
                p = p.parent;
            }
        }
        return p;
    }

    function compile(astRoot){
        compileBlock(astRoot);
        return opa;
    }
    function compileBlock(ast){
        for(var i = 0, _a = ast.child; i < _a.length; i++){
            var func = _a[i];
            if(func.type === AST_FUNCTION){
                emit(OP_DEFINEFUNCTION, func.child[0].val);
                var entry = emit(OP_ENTRY);
                var params = [];
                for(var j = 0, _b = func.child[1].child; i < _b.length; i++){
                    params.push(_b[j].val);
                }
                emit(OP_PARAM, params);
                emit(OP_ENDFUNCTION);
                funcQueue.push({ body: func.child[2], entryOp: entry });   
            }
        }
        for(var i = 0, _a = ast.child; i < _a.length; i++){
            compileStatement(_a[i]);
        }
        emit(OP_RETURNNULL);
    }
    function compileStatement(ast){
        switch(ast.type){
            case AST_NONE: break;
            case AST_STATEMENTLIST:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileStatement(_a[i]);
                }
                break;
            case AST_ECHO:
                for(var i = 0, _a = ast.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    emit(OP_ECHO);
                }
                break;
            case AST_EXPR_LIST:
                compileExpression(ast.child[0]);
                emit(OP_POP);
                break;
            case AST_BREAK:
                var leveln = ast.child[0];
                var target = breakTarget(ast, leveln.type === AST_NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid break statement', ast.pos);
                }
                else {
                    target.val.breaks.push(emit(OP_JMP));
                }
                break;
            case AST_CONTINUE:
                var leveln = ast.child[0];
                var target = continueTarget(ast, leveln.type === AST_NONE ? 1 : leveln.val);
                if(target === null){
                    singlePosErr('invalid continue statement', ast.pos);
                }
                else {
                    target.val.continues.push(emit(OP_JMP));
                }
                break;
            case AST_RETURN:
                if(ast.child[0].type === AST_NONE){
                    emit(OP_RETURNNULL);
                }
                else {
                    compileExpression(ast.child[0]);
                    emit(OP_RETURN);
                }
                break;
            case AST_IF:
                compileExpression(ast.child[0]);
                var line1 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                var line2 = emit(OP_JMP);
                setArg(line1, opa.opCount);
                ast.child[2].type !== AST_NONE && compileStatement(ast.child[2]);
                setArg(line2, opa.opCount);
                break;
            case AST_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileExpression(ast.child[0]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[1]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line1);
                break;
            case AST_DO_WHILE:
                ast.val = new LoopInfo(true, true);
                var line1 = opa.opCount;
                compileStatement(ast.child[1]);
                var line2 = opa.opCount;
                compileExpression(ast.child[0]);
                emit(OP_JNZ, line1);
                ast.val.done(opa.opCount, line2);
                break;
            case AST_FOR:
                ast.val = new LoopInfo(true, true);
                compileExpression(ast.child[0]);
                var line1 = opa.opCount;
                compileExpression(ast.child[1]);
                var line2 = emit(OP_JZ);
                compileStatement(ast.child[3]);
                var line3 = opa.opCount;
                compileExpression(ast.child[2]);
                emit(OP_JMP, line1);
                setArg(line2, opa.opCount);
                ast.val.done(opa.opCount, line3);
                break;
        }
    }
    function compileExpression(root){
        switch(root.type){
            case AST_NONE: break;
            case AST_EXPR_LIST:
                for(var i = 0, _a = root.child; i < _a.length; i++){
                    compileExpression(_a[i]);
                    i < _a.length - 1 && emit(OP_POP);
                }
                break;
            case AST_BINARYOP:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(root.val);
                break;
            case AST_UNARYOP:
                compileExpression(root.child[0]);
                emit(root.val);
                break;
            case AST_POSTINC:
                compileExpression(root.child[0]);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                break;
            case AST_POSTDEC:
                compileExpression(root.child[0]);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                break;
            case AST_SUFFIXINC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_INC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_SUFFIXDEC:
                compileExpression(root.child[0]);
                emit(OP_DUP);
                emit(OP_DEC);
                compileAssignTop(root.child[0]);
                emit(OP_POP);
                break;
            case AST_CONDITIONALEXPR:
                compileExpression(root.child[0]);
                var line1 = emit(OP_JZ);
                root.child[1].type === AST_NONE ? emit(OP_PUSH, true) : compileExpression(root.child[1]);
                var line2 = emit(OP_JMP);
                setArg(line1, opa.opCount);
                compileExpression(root.child[2]);
                setArg(line2, opa.opCount);
                break;
            case AST_LOGICALOR:
                compileExpression(root.child[0]);
                emit(OP_BOOLCAST);
                var line1 = emit(OP_JNZ);
                compileExpression(root.child[1]);
                emit(OP_BOOLCAST);
                setArg(line1, opa.opCount);
                break;
            case AST_LOGICALAND:
                compileExpression(root.child[0]);
                emit(OP_BOOLCAST);
                var line1 = emit(OP_JZ);
                compileExpression(root.child[1]);
                emit(OP_BOOLCAST);
                setArg(line1, opa.opCount);
                break;
            case AST_ASSIGN:
                if(root.val === null){
                    compileAssign(root.child[0], root.child[1]);
                }
                else {
                    compileExpression(root.child[0]);
                    compileExpression(root.child[1]);
                    emit(root.val);
                    compileAssignTop(root.child[0]);
                }
                break;
            case AST_VARIABLE:
                compileExpression(root.child[0]);
                emit(OP_GETVAR);
                break;
            case AST_PROPERTY:
                compileExpression(root.child[0]);
                compileExpression(root.child[1]);
                emit(OP_GETPROP);
                break;
            case AST_OFFSET:
                compileExpression(root.child[0]);
                if(root.child[1].type === AST_NONE){
                    emit(OP_GETMAXOFFSET);
                }
                else {
                    compileExpression(root.child[1]);
                    emit(OP_GETOFFSET);
                }
                break;
            case AST_FUNCTIONCALL:
                if(root.child[0].type === AST_STRING){
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKENAME, [root.child[0].val, root.child[1].child.length]);
                }
                else {
                    compileExpression(root.child[0]);
                    for(var i = 0, _a = root.child[1].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKE, root.child[1].child.length);
                }
                break;
            case AST_METHODCALL:
                compileExpression(root.child[0]);
                if(root.child[1].type === AST_STRING){
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHODNAME, [root.child[1].val, root.child[2].length]);
                }
                else {
                    compileExpression(root.child[1]);
                    for(var i = 0, _a = root.child[2].child; i < _a.length; i++){
                        compileExpression(_a[i]);
                    }
                    emit(OP_INVOKEMETHOD, root.child[2].length);
                }
                break;
            case AST_LOCAL:
                emit(OP_GETLOCAL, root.val);
                break;
            case AST_ARRAY:
                emit(OP_ARRAY);
                for(var i = 0, _a = root.child; i < _a.length; i++){
                    var item = _a[i];
                    if(item.type === AST_NONE){
                        emit(OP_PUSH, 0);
                        emit(OP_ADDARRAYITEM);
                    }
                    else if(item.type === AST_ARRAYPAIR){
                        compileExpression(item.child[0]);
                        compileExpression(item.child[1]);
                        emit(OP_ADDARRAYPAIR);
                    }
                    else {
                        compileExpression(item);
                        emit(OP_ADDARRAYITEM);
                    }
                }
                break;
            case AST_INTEGER:
            case AST_FLOAT:
            case AST_STRING:
                emit(OP_PUSH, root.val);
                break;
            case AST_STRING_LIST:
                compileStringList(root);
                break;
            case AST_CONST:
                emit(OP_GETCONST, root.val);
                break;
            case AST_ANONYFUNCTION:
                
                break;
        }
    }
    function compileStringList(list){
        var s = '', sc = 0;
        for(var i = 0, _a = list.child; i < _a.length; i++){
            if(_a[i].type === AST_STRING){
                s += _a[i].val;
            }
            else {
                sc++;
                emit(OP_PUSH, s);
                s = '';
                compileExpression(_a[i]);
            }
        }
        if(s !== ''){
            sc++;
            emit(OP_PUSH, s);
        }
        emit(OP_CONCAT, sc);
    }
    function compileAssign(dest, src){
        switch(dest.type){
            case AST_LOCAL:
                compileExpression(src);
                emit(OP_SETLOCAL, dest.val);
                break;
            case AST_VARIABLE:
                compileExpression(dest.child[0]);
                compileExpression(src);
                emit(OP_SETVAR);
                break;
            case AST_PROPERTY:
            case AST_ARRAYPAIR: // array assignment
                compileExpression(dest.child[0]);
                compileExpression(dest.child[1]);
                compileExpression(src);
                emit(OP_SETPROP);
                break;
            case AST_OFFSET:
                compileExpression(dest.child[0]);
                if(dest.child[1].type === AST_NONE){
                    compileExpression(src);
                    emit(OP_SETMAXOFFSET);
                }
                else {
                    compileExpression(dest.child[1]);
                    compileExpression(src);
                    emit(OP_SETOFFSET);
                }
                break;
            case AST_ARRAY:
                compileListAssign(dest, src);
                break;
            default:
                singlePosErr('invalid left hand side value in assignment', dest);
        }
    }
    function compileAssignTop(dest){
        localNode.val = allocateRegister();
        emit(OP_SETLOCAL, localNode.val);
        emit(OP_POP);
        compileAssign(dest, localNode);
        releaseRegister(localNode.val);
    }
    function compileListAssign(list, src){
        if(list.child.length === 0){
            singlePosErr('cannot use empty arrays in assignment', list);
            return;
        }
        compileExpression(src);
        var reg = allocateRegister();
        emit(OP_SETLOCAL, reg);
        emit(OP_POP);
        var keyed = list.child[0].type === AST_ARRAYPAIR;
        for(var i = 0, _a = list.child; i < _a.length; i++){
            var n = _a[i];
            if(n.type === AST_NONE && keyed){
                singlePosErr("cannot use empty array entries in key'd array assignment", n);
                continue;
            }
            if(keyed && n.type !== AST_ARRAYPAIR || !keyed && n.type === AST_ARRAYPAIR){
                singlePosErr("cannot mix key'd and unkey'd elements in array assigment", n);
                continue;
            }
            if(keyed){
                var key = n.child[0];
                var val = n.child[1];
                emit(OP_GETLOCAL, reg);
                compileExpression(key);
                emit(OP_GETOFFSET);
                compileAssignTop(val);
                emit(OP_POP);
            }
            else if(n.type !== AST_NONE){
                emit(OP_GETLOCAL, reg);
                emit(OP_PUSH, i);
                emit(OP_GETOFFSET);
                compileAssignTop(n);
                emit(OP_POP);
            }
        }
        emit(OP_GETLOCAL, reg);
        releaseRegister(reg);
    }
}

exports.compile = function compile(fname, source, errs){
    var parser = createParser();
    var outputs = { astRoot: null };
    var err = false;
    parser.init(outputs);
    parser.on('lexicalerror', function(c, line, column){
        line++;
        column++;
        errs.push('lexical error: (line ' + line + ', column ' + column + '): unexpected character "' + c + '"');
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', function(msg, token){
        errs.push('syntax error: (line ' + token.startLine + ', column ' + token.startColumn + '):' + msg);
        parser.halt();
        err = true;
    });
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        var cp = createCompiler(fname);
        cp.addErrHandler(function(msg){
            errs.push(msg);
        });
        return cp.compile(outputs.astRoot);
    }
}

})));