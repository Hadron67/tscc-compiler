\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c1, \xa -> c2, 
\xb -> c0, \xc -> c0, \xd -> c3, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c1, 
'!' -> c0, '"' -> c0, '#' -> c0, '$' -> c0, '%' -> c0, '&' -> c0, ''' -> c0, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, 
',' -> c0, '-' -> c0, '.' -> c0, '/' -> c0, '0' -> c0, '1' -> c0, '2' -> c0, '3' -> c0, '4' -> c0, '5' -> c0, '6' -> c0, 
'7' -> c0, '8' -> c0, '9' -> c0, ':' -> c0, ';' -> c0, '<' -> c4, '=' -> c5, '>' -> c0, '?' -> c6, '@' -> c0, 'A' -> c0, 
'B' -> c0, 'C' -> c0, 'D' -> c0, 'E' -> c0, 'F' -> c0, 'G' -> c0, 'H' -> c0, 'I' -> c0, 'J' -> c0, 'K' -> c0, 'L' -> c0, 
'M' -> c0, 'N' -> c0, 'O' -> c0, 'P' -> c0, 'Q' -> c0, 'R' -> c0, 'S' -> c0, 'T' -> c0, 'U' -> c0, 'V' -> c0, 'W' -> c0, 
'X' -> c0, 'Y' -> c0, 'Z' -> c0, '[' -> c0, '\' -> c0, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c0, 'a' -> c0, 'b' -> c0, 
'c' -> c0, 'd' -> c0, 'e' -> c0, 'f' -> c0, 'g' -> c0, 'h' -> c7, 'i' -> c0, 'j' -> c0, 'k' -> c0, 'l' -> c0, 'm' -> c0, 
'n' -> c0, 'o' -> c0, 'p' -> c8, 'q' -> c0, 'r' -> c0, 's' -> c0, 't' -> c0, 'u' -> c0, 'v' -> c0, 'w' -> c0, 'x' -> c0, 
'y' -> c0, 'z' -> c0, '{' -> c0, '|' -> c0, '}' -> c0, '~' -> c0, \x7f -> c0, \x80 -> c0, \x81 -> c0, \x82 -> c0, \x83 -> c0, 
\x84 -> c0, \x85 -> c0, \x86 -> c0, \x87 -> c0, \x88 -> c0, \x89 -> c0, \x8a -> c0, \x8b -> c0, \x8c -> c0, \x8d -> c0, \x8e -> c0, 
\x8f -> c0, \x90 -> c0, \x91 -> c0, \x92 -> c0, \x93 -> c0, \x94 -> c0, \x95 -> c0, \x96 -> c0, \x97 -> c0, \x98 -> c0, \x99 -> c0, 
\x9a -> c0, \x9b -> c0, \x9c -> c0, \x9d -> c0, \x9e -> c0, \x9f -> c0, \xa0 -> c0, \xa1 -> c0, \xa2 -> c0, \xa3 -> c0, \xa4 -> c0, 
\xa5 -> c0, \xa6 -> c0, \xa7 -> c0, \xa8 -> c0, \xa9 -> c0, \xaa -> c0, \xab -> c0, \xac -> c0, \xad -> c0, \xae -> c0, \xaf -> c0, 
\xb0 -> c0, \xb1 -> c0, \xb2 -> c0, \xb3 -> c0, \xb4 -> c0, \xb5 -> c0, \xb6 -> c0, \xb7 -> c0, \xb8 -> c0, \xb9 -> c0, \xba -> c0, 
\xbb -> c0, \xbc -> c0, \xbd -> c0, \xbe -> c0, \xbf -> c0, \xc0 -> c0, \xc1 -> c0, \xc2 -> c0, \xc3 -> c0, \xc4 -> c0, \xc5 -> c0, 
\xc6 -> c0, \xc7 -> c0, \xc8 -> c0, \xc9 -> c0, \xca -> c0, \xcb -> c0, \xcc -> c0, \xcd -> c0, \xce -> c0, \xcf -> c0, \xd0 -> c0, 
\xd1 -> c0, \xd2 -> c0, \xd3 -> c0, \xd4 -> c0, \xd5 -> c0, \xd6 -> c0, \xd7 -> c0, \xd8 -> c0, \xd9 -> c0, \xda -> c0, \xdb -> c0, 
\xdc -> c0, \xdd -> c0, \xde -> c0, \xdf -> c0, \xe0 -> c0, \xe1 -> c0, \xe2 -> c0, \xe3 -> c0, \xe4 -> c0, \xe5 -> c0, \xe6 -> c0, 
\xe7 -> c0, \xe8 -> c0, \xe9 -> c0, \xea -> c0, \xeb -> c0, \xec -> c0, \xed -> c0, \xee -> c0, \xef -> c0, \xf0 -> c0, \xf1 -> c0, 
\xf2 -> c0, \xf3 -> c0, \xf4 -> c0, \xf5 -> c0, \xf6 -> c0, \xf7 -> c0, \xf8 -> c0, \xf9 -> c0, \xfa -> c0, \xfb -> c0, \xfc -> c0, 
\xfd -> c0, \xfe -> c0, \xff -> c0, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 1
    c2: state 1
    c3: state 1
    c4: state 2
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
state 1:
    end = 0
    c0: state 1
    c1: state 1
    c2: state 1
    c3: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
state 2:
    end = 0
    c0: state 3
    c1: state 3
    c2: state 3
    c3: state 3
    c5: state 3
    c6: state 4
    c7: state 3
    c8: state 3
state 3:
    end = 0
    c0: state 3
    c1: state 3
    c2: state 3
    c3: state 3
    c5: state 3
    c6: state 3
    c7: state 3
    c8: state 3
state 4:
    end = 0
    c0: state 3
    c1: state 3
    c2: state 3
    c3: state 3
    c5: state 5
    c6: state 3
    c7: state 3
    c8: state 6
state 5:
    end = 2
state 6:
    end = 0
    c0: state 3
    c1: state 3
    c2: state 3
    c3: state 3
    c5: state 3
    c6: state 3
    c7: state 7
    c8: state 3
state 7:
    end = 0
    c0: state 3
    c1: state 3
    c2: state 3
    c3: state 3
    c5: state 3
    c6: state 3
    c7: state 3
    c8: state 8
state 8:
    end = 0
    c0: state 3
    c1: state 9
    c2: state 10
    c3: state 11
    c5: state 3
    c6: state 3
    c7: state 3
    c8: state 3
state 9:
    end = 1
state 10:
    end = 1
state 11:
    end = 1


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c1, \xa -> c2, 
\xb -> c0, \xc -> c0, \xd -> c3, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c1, 
'!' -> c4, '"' -> c5, '#' -> c6, '$' -> c7, '%' -> c8, '&' -> c9, ''' -> c10, '(' -> c11, ')' -> c12, '*' -> c13, '+' -> c14, 
',' -> c15, '-' -> c16, '.' -> c17, '/' -> c18, '0' -> c19, '1' -> c19, '2' -> c19, '3' -> c19, '4' -> c19, '5' -> c19, '6' -> c19, 
'7' -> c19, '8' -> c19, '9' -> c19, ':' -> c20, ';' -> c21, '<' -> c22, '=' -> c23, '>' -> c24, '?' -> c25, '@' -> c0, 'A' -> c26, 
'B' -> c27, 'C' -> c27, 'D' -> c28, 'E' -> c29, 'F' -> c27, 'G' -> c30, 'H' -> c30, 'I' -> c30, 'J' -> c30, 'K' -> c30, 'L' -> c30, 
'M' -> c30, 'N' -> c31, 'O' -> c32, 'P' -> c30, 'Q' -> c30, 'R' -> c33, 'S' -> c30, 'T' -> c30, 'U' -> c30, 'V' -> c30, 'W' -> c30, 
'X' -> c34, 'Y' -> c30, 'Z' -> c30, '[' -> c35, '\' -> c36, ']' -> c37, '^' -> c38, '_' -> c39, '`' -> c40, 'a' -> c41, 'b' -> c42, 
'c' -> c43, 'd' -> c44, 'e' -> c45, 'f' -> c46, 'g' -> c30, 'h' -> c47, 'i' -> c48, 'j' -> c30, 'k' -> c49, 'l' -> c50, 'm' -> c51, 
'n' -> c52, 'o' -> c53, 'p' -> c54, 'q' -> c30, 'r' -> c55, 's' -> c56, 't' -> c57, 'u' -> c58, 'v' -> c30, 'w' -> c59, 'x' -> c60, 
'y' -> c30, 'z' -> c30, '{' -> c61, '|' -> c62, '}' -> c63, '~' -> c64, \x7f -> c0, \x80 -> c30, \x81 -> c30, \x82 -> c30, \x83 -> c30, 
\x84 -> c30, \x85 -> c30, \x86 -> c30, \x87 -> c30, \x88 -> c30, \x89 -> c30, \x8a -> c30, \x8b -> c30, \x8c -> c30, \x8d -> c30, \x8e -> c30, 
\x8f -> c30, \x90 -> c30, \x91 -> c30, \x92 -> c30, \x93 -> c30, \x94 -> c30, \x95 -> c30, \x96 -> c30, \x97 -> c30, \x98 -> c30, \x99 -> c30, 
\x9a -> c30, \x9b -> c30, \x9c -> c30, \x9d -> c30, \x9e -> c30, \x9f -> c30, \xa0 -> c30, \xa1 -> c30, \xa2 -> c30, \xa3 -> c30, \xa4 -> c30, 
\xa5 -> c30, \xa6 -> c30, \xa7 -> c30, \xa8 -> c30, \xa9 -> c30, \xaa -> c30, \xab -> c30, \xac -> c30, \xad -> c30, \xae -> c30, \xaf -> c30, 
\xb0 -> c30, \xb1 -> c30, \xb2 -> c30, \xb3 -> c30, \xb4 -> c30, \xb5 -> c30, \xb6 -> c30, \xb7 -> c30, \xb8 -> c30, \xb9 -> c30, \xba -> c30, 
\xbb -> c30, \xbc -> c30, \xbd -> c30, \xbe -> c30, \xbf -> c30, \xc0 -> c30, \xc1 -> c30, \xc2 -> c30, \xc3 -> c30, \xc4 -> c30, \xc5 -> c30, 
\xc6 -> c30, \xc7 -> c30, \xc8 -> c30, \xc9 -> c30, \xca -> c30, \xcb -> c30, \xcc -> c30, \xcd -> c30, \xce -> c30, \xcf -> c30, \xd0 -> c30, 
\xd1 -> c30, \xd2 -> c30, \xd3 -> c30, \xd4 -> c30, \xd5 -> c30, \xd6 -> c30, \xd7 -> c30, \xd8 -> c30, \xd9 -> c30, \xda -> c30, \xdb -> c30, 
\xdc -> c30, \xdd -> c30, \xde -> c30, \xdf -> c30, \xe0 -> c30, \xe1 -> c30, \xe2 -> c30, \xe3 -> c30, \xe4 -> c30, \xe5 -> c30, \xe6 -> c30, 
\xe7 -> c30, \xe8 -> c30, \xe9 -> c30, \xea -> c30, \xeb -> c30, \xec -> c30, \xed -> c30, \xee -> c30, \xef -> c30, \xf0 -> c30, \xf1 -> c30, 
\xf2 -> c30, \xf3 -> c30, \xf4 -> c30, \xf5 -> c30, \xf6 -> c30, \xf7 -> c30, \xf8 -> c30, \xf9 -> c30, \xfa -> c30, \xfb -> c30, \xfc -> c30, 
\xfd -> c30, \xfe -> c30, \xff -> c30, 
\x256-\xInfinity -> c0, 
state 0:
    c1: state 1
    c2: state 2
    c3: state 3
    c4: state 4
    c5: state 5
    c6: state 6
    c7: state 7
    c8: state 8
    c9: state 9
    c10: state 10
    c11: state 11
    c12: state 12
    c13: state 13
    c14: state 14
    c15: state 15
    c16: state 16
    c17: state 17
    c18: state 18
    c19: state 19
    c20: state 20
    c21: state 21
    c22: state 22
    c23: state 23
    c24: state 24
    c25: state 25
    c26: state 26
    c27: state 27
    c28: state 27
    c29: state 27
    c30: state 27
    c31: state 27
    c32: state 28
    c33: state 27
    c34: state 29
    c35: state 30
    c37: state 31
    c38: state 32
    c39: state 33
    c40: state 34
    c41: state 27
    c42: state 35
    c43: state 36
    c44: state 37
    c45: state 38
    c46: state 39
    c47: state 27
    c48: state 40
    c49: state 27
    c50: state 41
    c51: state 27
    c52: state 27
    c53: state 27
    c54: state 27
    c55: state 42
    c56: state 27
    c57: state 27
    c58: state 43
    c59: state 44
    c60: state 27
    c61: state 45
    c62: state 46
    c63: state 47
    c64: state 48
state 1:
    end = 3
    c1: state 1
    c2: state 2
    c3: state 3
state 2:
    end = 3
    c1: state 1
    c2: state 2
    c3: state 3
state 3:
    end = 3
    c1: state 1
    c2: state 49
    c3: state 3
state 4:
    end = 69
    c23: state 50
state 5:
    end = 11
state 6:
    end = 4
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 51
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 51
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 51
    c26: state 51
    c27: state 51
    c28: state 51
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 51
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 51
    c41: state 51
    c42: state 51
    c43: state 51
    c44: state 51
    c45: state 51
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
    c63: state 51
    c64: state 51
state 7:
    end = 13
    c26: state 52
    c27: state 52
    c28: state 52
    c29: state 52
    c30: state 52
    c31: state 52
    c32: state 52
    c33: state 52
    c34: state 52
    c41: state 52
    c42: state 52
    c43: state 52
    c44: state 52
    c45: state 52
    c46: state 52
    c47: state 52
    c48: state 52
    c49: state 52
    c50: state 52
    c51: state 52
    c52: state 52
    c53: state 52
    c54: state 52
    c55: state 52
    c56: state 52
    c57: state 52
    c58: state 52
    c59: state 52
    c60: state 52
state 8:
    end = 23
    c23: state 53
state 9:
    end = 44
    c9: state 54
    c23: state 55
state 10:
    c0: state 56
    c1: state 56
    c3: state 56
    c4: state 56
    c5: state 56
    c6: state 56
    c7: state 56
    c8: state 56
    c9: state 56
    c10: state 57
    c11: state 56
    c12: state 56
    c13: state 56
    c14: state 56
    c15: state 56
    c16: state 56
    c17: state 56
    c18: state 56
    c19: state 56
    c20: state 56
    c21: state 56
    c22: state 56
    c23: state 56
    c24: state 56
    c25: state 56
    c26: state 56
    c27: state 56
    c28: state 56
    c29: state 56
    c30: state 56
    c31: state 56
    c32: state 56
    c33: state 56
    c34: state 56
    c35: state 56
    c36: state 58
    c37: state 56
    c38: state 56
    c39: state 56
    c40: state 56
    c41: state 56
    c42: state 56
    c43: state 56
    c44: state 56
    c45: state 56
    c46: state 56
    c47: state 56
    c48: state 56
    c49: state 56
    c50: state 56
    c51: state 56
    c52: state 56
    c53: state 56
    c54: state 56
    c55: state 56
    c56: state 56
    c57: state 56
    c58: state 56
    c59: state 56
    c60: state 56
    c61: state 56
    c62: state 56
    c63: state 56
    c64: state 56
state 11:
    end = 56
state 12:
    end = 57
state 13:
    end = 18
    c13: state 59
    c23: state 60
state 14:
    end = 16
    c14: state 61
    c23: state 62
state 15:
    end = 60
state 16:
    end = 17
    c16: state 63
    c23: state 64
    c24: state 65
state 17:
    end = 82
    c19: state 66
state 18:
    end = 19
    c13: state 67
    c18: state 68
    c23: state 69
state 19:
    end = 9
    c17: state 70
    c19: state 19
    c29: state 71
    c45: state 71
state 20:
    end = 22
state 21:
    end = 63
state 22:
    end = 25
    c22: state 72
    c23: state 73
state 23:
    end = 32
    c23: state 74
    c24: state 75
state 24:
    end = 24
    c23: state 76
    c24: state 77
state 25:
    end = 21
    c24: state 78
state 26:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 80
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 27:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 28:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 81
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 29:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 82
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 30:
    end = 58
state 31:
    end = 59
state 32:
    end = 46
    c23: state 83
state 33:
    c39: state 84
state 34:
    end = 12
state 35:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 85
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 36:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 86
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 37:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 87
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 38:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 88
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 89
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 39:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 90
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 91
    c59: state 79
    c60: state 79
state 40:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 92
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 41:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 93
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 42:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 94
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 43:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 95
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 44:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 96
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 45:
    end = 61
state 46:
    end = 45
    c23: state 97
    c62: state 98
state 47:
    end = 62
state 48:
    end = 47
state 49:
    end = 3
    c1: state 1
    c2: state 2
    c3: state 3
state 50:
    end = 30
    c23: state 99
state 51:
    end = 4
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 51
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 51
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 51
    c26: state 51
    c27: state 51
    c28: state 51
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 51
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 51
    c41: state 51
    c42: state 51
    c43: state 51
    c44: state 51
    c45: state 51
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
    c63: state 51
    c64: state 51
state 52:
    end = 14
    c19: state 100
    c26: state 100
    c27: state 100
    c28: state 100
    c29: state 100
    c30: state 100
    c31: state 100
    c32: state 100
    c33: state 100
    c34: state 100
    c41: state 100
    c42: state 100
    c43: state 100
    c44: state 100
    c45: state 100
    c46: state 100
    c47: state 100
    c48: state 100
    c49: state 100
    c50: state 100
    c51: state 100
    c52: state 100
    c53: state 100
    c54: state 100
    c55: state 100
    c56: state 100
    c57: state 100
    c58: state 100
    c59: state 100
    c60: state 100
state 53:
    end = 43
state 54:
    end = 64
state 55:
    end = 38
state 56:
    c0: state 56
    c1: state 56
    c3: state 56
    c4: state 56
    c5: state 56
    c6: state 56
    c7: state 56
    c8: state 56
    c9: state 56
    c10: state 57
    c11: state 56
    c12: state 56
    c13: state 56
    c14: state 56
    c15: state 56
    c16: state 56
    c17: state 56
    c18: state 56
    c19: state 56
    c20: state 56
    c21: state 56
    c22: state 56
    c23: state 56
    c24: state 56
    c25: state 56
    c26: state 56
    c27: state 56
    c28: state 56
    c29: state 56
    c30: state 56
    c31: state 56
    c32: state 56
    c33: state 56
    c34: state 56
    c35: state 56
    c36: state 58
    c37: state 56
    c38: state 56
    c39: state 56
    c40: state 56
    c41: state 56
    c42: state 56
    c43: state 56
    c44: state 56
    c45: state 56
    c46: state 56
    c47: state 56
    c48: state 56
    c49: state 56
    c50: state 56
    c51: state 56
    c52: state 56
    c53: state 56
    c54: state 56
    c55: state 56
    c56: state 56
    c57: state 56
    c58: state 56
    c59: state 56
    c60: state 56
    c61: state 56
    c62: state 56
    c63: state 56
    c64: state 56
state 57:
    end = 10
state 58:
    c5: state 101
    c10: state 101
    c36: state 101
    c42: state 101
    c46: state 101
    c52: state 101
    c55: state 101
    c57: state 101
    c58: state 102
    c60: state 102
state 59:
    end = 20
    c23: state 103
state 60:
    end = 35
state 61:
    end = 48
state 62:
    end = 33
state 63:
    end = 49
state 64:
    end = 34
state 65:
    end = 55
state 66:
    end = 8
    c19: state 66
    c29: state 71
    c45: state 71
state 67:
    c0: state 104
    c1: state 104
    c2: state 104
    c3: state 104
    c4: state 104
    c5: state 104
    c6: state 104
    c7: state 104
    c8: state 104
    c9: state 104
    c10: state 104
    c11: state 104
    c12: state 104
    c13: state 105
    c14: state 104
    c15: state 104
    c16: state 104
    c17: state 104
    c18: state 106
    c19: state 104
    c20: state 104
    c21: state 104
    c22: state 104
    c23: state 104
    c24: state 104
    c25: state 104
    c26: state 104
    c27: state 104
    c28: state 104
    c29: state 104
    c30: state 104
    c31: state 104
    c32: state 104
    c33: state 104
    c34: state 104
    c35: state 104
    c36: state 104
    c37: state 104
    c38: state 104
    c39: state 104
    c40: state 104
    c41: state 104
    c42: state 104
    c43: state 104
    c44: state 104
    c45: state 104
    c46: state 104
    c47: state 104
    c48: state 104
    c49: state 104
    c50: state 104
    c51: state 104
    c52: state 104
    c53: state 104
    c54: state 104
    c55: state 104
    c56: state 104
    c57: state 104
    c58: state 104
    c59: state 104
    c60: state 104
    c61: state 104
    c62: state 104
    c63: state 104
    c64: state 104
state 68:
    end = 4
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 51
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 51
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 51
    c26: state 51
    c27: state 51
    c28: state 51
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 51
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 51
    c41: state 51
    c42: state 51
    c43: state 51
    c44: state 51
    c45: state 51
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
    c63: state 51
    c64: state 51
state 69:
    end = 37
state 70:
    end = 8
    c19: state 107
    c29: state 71
    c45: state 71
state 71:
    c14: state 108
    c16: state 108
    c19: state 109
state 72:
    end = 50
    c22: state 110
    c23: state 111
state 73:
    end = 27
state 74:
    end = 28
    c23: state 112
state 75:
    end = 54
state 76:
    end = 26
state 77:
    end = 51
    c23: state 113
state 78:
    end = 6
state 79:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 80:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 114
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 81:
    end = 66
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 82:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 115
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 83:
    end = 40
state 84:
    c47: state 116
state 85:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 117
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 86:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 118
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 87:
    end = 74
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 88:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 119
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 89:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 120
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 90:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 121
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 91:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 122
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 92:
    end = 70
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 93:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 123
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 94:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 124
    c58: state 79
    c59: state 79
    c60: state 79
state 95:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 125
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 96:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 126
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 97:
    end = 39
state 98:
    end = 65
state 99:
    end = 31
state 100:
    end = 14
    c19: state 100
    c26: state 100
    c27: state 100
    c28: state 100
    c29: state 100
    c30: state 100
    c31: state 100
    c32: state 100
    c33: state 100
    c34: state 100
    c41: state 100
    c42: state 100
    c43: state 100
    c44: state 100
    c45: state 100
    c46: state 100
    c47: state 100
    c48: state 100
    c49: state 100
    c50: state 100
    c51: state 100
    c52: state 100
    c53: state 100
    c54: state 100
    c55: state 100
    c56: state 100
    c57: state 100
    c58: state 100
    c59: state 100
    c60: state 100
state 101:
    c0: state 56
    c1: state 56
    c3: state 56
    c4: state 56
    c5: state 56
    c6: state 56
    c7: state 56
    c8: state 56
    c9: state 56
    c10: state 57
    c11: state 56
    c12: state 56
    c13: state 56
    c14: state 56
    c15: state 56
    c16: state 56
    c17: state 56
    c18: state 56
    c19: state 56
    c20: state 56
    c21: state 56
    c22: state 56
    c23: state 56
    c24: state 56
    c25: state 56
    c26: state 56
    c27: state 56
    c28: state 56
    c29: state 56
    c30: state 56
    c31: state 56
    c32: state 56
    c33: state 56
    c34: state 56
    c35: state 56
    c36: state 58
    c37: state 56
    c38: state 56
    c39: state 56
    c40: state 56
    c41: state 56
    c42: state 56
    c43: state 56
    c44: state 56
    c45: state 56
    c46: state 56
    c47: state 56
    c48: state 56
    c49: state 56
    c50: state 56
    c51: state 56
    c52: state 56
    c53: state 56
    c54: state 56
    c55: state 56
    c56: state 56
    c57: state 56
    c58: state 56
    c59: state 56
    c60: state 56
    c61: state 56
    c62: state 56
    c63: state 56
    c64: state 56
state 102:
    c19: state 127
    c26: state 127
    c27: state 127
    c28: state 127
    c29: state 127
    c41: state 127
    c42: state 127
    c43: state 127
    c44: state 127
    c45: state 127
    c46: state 127
state 103:
    end = 36
state 104:
    c0: state 104
    c1: state 104
    c2: state 104
    c3: state 104
    c4: state 104
    c5: state 104
    c6: state 104
    c7: state 104
    c8: state 104
    c9: state 104
    c10: state 104
    c11: state 104
    c12: state 104
    c13: state 105
    c14: state 104
    c15: state 104
    c16: state 104
    c17: state 104
    c18: state 128
    c19: state 104
    c20: state 104
    c21: state 104
    c22: state 104
    c23: state 104
    c24: state 104
    c25: state 104
    c26: state 104
    c27: state 104
    c28: state 104
    c29: state 104
    c30: state 104
    c31: state 104
    c32: state 104
    c33: state 104
    c34: state 104
    c35: state 104
    c36: state 104
    c37: state 104
    c38: state 104
    c39: state 104
    c40: state 104
    c41: state 104
    c42: state 104
    c43: state 104
    c44: state 104
    c45: state 104
    c46: state 104
    c47: state 104
    c48: state 104
    c49: state 104
    c50: state 104
    c51: state 104
    c52: state 104
    c53: state 104
    c54: state 104
    c55: state 104
    c56: state 104
    c57: state 104
    c58: state 104
    c59: state 104
    c60: state 104
    c61: state 104
    c62: state 104
    c63: state 104
    c64: state 104
state 105:
    c0: state 129
    c1: state 129
    c2: state 129
    c3: state 129
    c4: state 129
    c5: state 129
    c6: state 129
    c7: state 129
    c8: state 129
    c9: state 129
    c10: state 129
    c11: state 129
    c12: state 129
    c13: state 129
    c14: state 129
    c15: state 129
    c16: state 129
    c17: state 129
    c18: state 130
    c19: state 129
    c20: state 129
    c21: state 129
    c22: state 129
    c23: state 129
    c24: state 129
    c25: state 129
    c26: state 129
    c27: state 129
    c28: state 129
    c29: state 129
    c30: state 129
    c31: state 129
    c32: state 129
    c33: state 129
    c34: state 129
    c35: state 129
    c36: state 129
    c37: state 129
    c38: state 129
    c39: state 129
    c40: state 129
    c41: state 129
    c42: state 129
    c43: state 129
    c44: state 129
    c45: state 129
    c46: state 129
    c47: state 129
    c48: state 129
    c49: state 129
    c50: state 129
    c51: state 129
    c52: state 129
    c53: state 129
    c54: state 129
    c55: state 129
    c56: state 129
    c57: state 129
    c58: state 129
    c59: state 129
    c60: state 129
    c61: state 129
    c62: state 129
    c63: state 129
    c64: state 129
state 106:
    c18: state 131
state 107:
    end = 8
    c19: state 107
    c29: state 71
    c45: state 71
state 108:
    c19: state 109
state 109:
    end = 8
    c19: state 109
state 110:
    c1: state 132
state 111:
    end = 42
state 112:
    end = 29
state 113:
    end = 41
state 114:
    end = 67
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 115:
    end = 68
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 116:
    c41: state 133
state 117:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 134
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 118:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 135
    c58: state 79
    c59: state 79
    c60: state 79
state 119:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 136
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 120:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 137
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 121:
    end = 75
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 122:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 138
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 123:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 139
    c58: state 79
    c59: state 79
    c60: state 79
state 124:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 140
    c59: state 79
    c60: state 79
state 125:
    end = 78
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 126:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 141
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 127:
    c0: state 56
    c1: state 56
    c3: state 56
    c4: state 56
    c5: state 56
    c6: state 56
    c7: state 56
    c8: state 56
    c9: state 56
    c10: state 57
    c11: state 56
    c12: state 56
    c13: state 56
    c14: state 56
    c15: state 56
    c16: state 56
    c17: state 56
    c18: state 56
    c19: state 142
    c20: state 56
    c21: state 56
    c22: state 56
    c23: state 56
    c24: state 56
    c25: state 56
    c26: state 142
    c27: state 142
    c28: state 142
    c29: state 142
    c30: state 56
    c31: state 56
    c32: state 56
    c33: state 56
    c34: state 56
    c35: state 56
    c36: state 58
    c37: state 56
    c38: state 56
    c39: state 56
    c40: state 56
    c41: state 142
    c42: state 142
    c43: state 142
    c44: state 142
    c45: state 142
    c46: state 142
    c47: state 56
    c48: state 56
    c49: state 56
    c50: state 56
    c51: state 56
    c52: state 56
    c53: state 56
    c54: state 56
    c55: state 56
    c56: state 56
    c57: state 56
    c58: state 56
    c59: state 56
    c60: state 56
    c61: state 56
    c62: state 56
    c63: state 56
    c64: state 56
state 128:
    c0: state 104
    c1: state 104
    c2: state 104
    c3: state 104
    c4: state 104
    c5: state 104
    c6: state 104
    c7: state 104
    c8: state 104
    c9: state 104
    c10: state 104
    c11: state 104
    c12: state 104
    c13: state 105
    c14: state 104
    c15: state 104
    c16: state 104
    c17: state 104
    c18: state 128
    c19: state 104
    c20: state 104
    c21: state 104
    c22: state 104
    c23: state 104
    c24: state 104
    c25: state 104
    c26: state 104
    c27: state 104
    c28: state 104
    c29: state 104
    c30: state 104
    c31: state 104
    c32: state 104
    c33: state 104
    c34: state 104
    c35: state 104
    c36: state 104
    c37: state 104
    c38: state 104
    c39: state 104
    c40: state 104
    c41: state 104
    c42: state 104
    c43: state 104
    c44: state 104
    c45: state 104
    c46: state 104
    c47: state 104
    c48: state 104
    c49: state 104
    c50: state 104
    c51: state 104
    c52: state 104
    c53: state 104
    c54: state 104
    c55: state 104
    c56: state 104
    c57: state 104
    c58: state 104
    c59: state 104
    c60: state 104
    c61: state 104
    c62: state 104
    c63: state 104
    c64: state 104
state 129:
    c0: state 104
    c1: state 104
    c2: state 104
    c3: state 104
    c4: state 104
    c5: state 104
    c6: state 104
    c7: state 104
    c8: state 104
    c9: state 104
    c10: state 104
    c11: state 104
    c12: state 104
    c13: state 105
    c14: state 104
    c15: state 104
    c16: state 104
    c17: state 104
    c18: state 106
    c19: state 104
    c20: state 104
    c21: state 104
    c22: state 104
    c23: state 104
    c24: state 104
    c25: state 104
    c26: state 104
    c27: state 104
    c28: state 104
    c29: state 104
    c30: state 104
    c31: state 104
    c32: state 104
    c33: state 104
    c34: state 104
    c35: state 104
    c36: state 104
    c37: state 104
    c38: state 104
    c39: state 104
    c40: state 104
    c41: state 104
    c42: state 104
    c43: state 104
    c44: state 104
    c45: state 104
    c46: state 104
    c47: state 104
    c48: state 104
    c49: state 104
    c50: state 104
    c51: state 104
    c52: state 104
    c53: state 104
    c54: state 104
    c55: state 104
    c56: state 104
    c57: state 104
    c58: state 104
    c59: state 104
    c60: state 104
    c61: state 104
    c62: state 104
    c63: state 104
    c64: state 104
state 130:
    end = 5
state 131:
    c0: state 104
    c1: state 104
    c2: state 104
    c3: state 104
    c4: state 104
    c5: state 104
    c6: state 104
    c7: state 104
    c8: state 104
    c9: state 104
    c10: state 104
    c11: state 104
    c12: state 104
    c13: state 105
    c14: state 104
    c15: state 104
    c16: state 104
    c17: state 104
    c18: state 106
    c19: state 104
    c20: state 104
    c21: state 104
    c22: state 104
    c23: state 104
    c24: state 104
    c25: state 104
    c26: state 104
    c27: state 104
    c28: state 104
    c29: state 104
    c30: state 104
    c31: state 104
    c32: state 104
    c33: state 104
    c34: state 104
    c35: state 104
    c36: state 104
    c37: state 104
    c38: state 104
    c39: state 104
    c40: state 104
    c41: state 104
    c42: state 104
    c43: state 104
    c44: state 104
    c45: state 104
    c46: state 104
    c47: state 104
    c48: state 104
    c49: state 104
    c50: state 104
    c51: state 104
    c52: state 104
    c53: state 104
    c54: state 104
    c55: state 104
    c56: state 104
    c57: state 104
    c58: state 104
    c59: state 104
    c60: state 104
    c61: state 104
    c62: state 104
    c63: state 104
    c64: state 104
state 132:
    c1: state 132
    c5: state 143
    c10: state 144
    c26: state 145
    c27: state 145
    c28: state 145
    c29: state 145
    c30: state 145
    c31: state 145
    c32: state 145
    c33: state 145
    c34: state 145
    c41: state 145
    c42: state 145
    c43: state 145
    c44: state 145
    c45: state 145
    c46: state 145
    c47: state 145
    c48: state 145
    c49: state 145
    c50: state 145
    c51: state 145
    c52: state 145
    c53: state 145
    c54: state 145
    c55: state 145
    c56: state 145
    c57: state 145
    c58: state 145
    c59: state 145
    c60: state 145
state 133:
    c50: state 146
state 134:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 147
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 135:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 148
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 136:
    end = 72
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 137:
    end = 71
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 138:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 149
    c58: state 79
    c59: state 79
    c60: state 79
state 139:
    end = 77
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 140:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 150
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 141:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 151
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 142:
    c0: state 56
    c1: state 56
    c3: state 56
    c4: state 56
    c5: state 56
    c6: state 56
    c7: state 56
    c8: state 56
    c9: state 56
    c10: state 57
    c11: state 56
    c12: state 56
    c13: state 56
    c14: state 56
    c15: state 56
    c16: state 56
    c17: state 56
    c18: state 56
    c19: state 142
    c20: state 56
    c21: state 56
    c22: state 56
    c23: state 56
    c24: state 56
    c25: state 56
    c26: state 142
    c27: state 142
    c28: state 142
    c29: state 142
    c30: state 56
    c31: state 56
    c32: state 56
    c33: state 56
    c34: state 56
    c35: state 56
    c36: state 58
    c37: state 56
    c38: state 56
    c39: state 56
    c40: state 56
    c41: state 142
    c42: state 142
    c43: state 142
    c44: state 142
    c45: state 142
    c46: state 142
    c47: state 56
    c48: state 56
    c49: state 56
    c50: state 56
    c51: state 56
    c52: state 56
    c53: state 56
    c54: state 56
    c55: state 56
    c56: state 56
    c57: state 56
    c58: state 56
    c59: state 56
    c60: state 56
    c61: state 56
    c62: state 56
    c63: state 56
    c64: state 56
state 143:
    c26: state 152
    c27: state 152
    c28: state 152
    c29: state 152
    c30: state 152
    c31: state 152
    c32: state 152
    c33: state 152
    c34: state 152
    c41: state 152
    c42: state 152
    c43: state 152
    c44: state 152
    c45: state 152
    c46: state 152
    c47: state 152
    c48: state 152
    c49: state 152
    c50: state 152
    c51: state 152
    c52: state 152
    c53: state 152
    c54: state 152
    c55: state 152
    c56: state 152
    c57: state 152
    c58: state 152
    c59: state 152
    c60: state 152
state 144:
    c26: state 153
    c27: state 153
    c28: state 153
    c29: state 153
    c30: state 153
    c31: state 153
    c32: state 153
    c33: state 153
    c34: state 153
    c41: state 153
    c42: state 153
    c43: state 153
    c44: state 153
    c45: state 153
    c46: state 153
    c47: state 153
    c48: state 153
    c49: state 153
    c50: state 153
    c51: state 153
    c52: state 153
    c53: state 153
    c54: state 153
    c55: state 153
    c56: state 153
    c57: state 153
    c58: state 153
    c59: state 153
    c60: state 153
state 145:
    c2: state 154
    c3: state 155
    c19: state 156
    c26: state 156
    c27: state 156
    c28: state 156
    c29: state 156
    c30: state 156
    c31: state 156
    c32: state 156
    c33: state 156
    c34: state 156
    c41: state 156
    c42: state 156
    c43: state 156
    c44: state 156
    c45: state 156
    c46: state 156
    c47: state 156
    c48: state 156
    c49: state 156
    c50: state 156
    c51: state 156
    c52: state 156
    c53: state 156
    c54: state 156
    c55: state 156
    c56: state 156
    c57: state 156
    c58: state 156
    c59: state 156
    c60: state 156
state 146:
    c57: state 157
state 147:
    end = 79
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 148:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 158
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 149:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 159
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 150:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 160
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 151:
    end = 73
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 152:
    c5: state 161
    c19: state 162
    c26: state 162
    c27: state 162
    c28: state 162
    c29: state 162
    c30: state 162
    c31: state 162
    c32: state 162
    c33: state 162
    c34: state 162
    c41: state 162
    c42: state 162
    c43: state 162
    c44: state 162
    c45: state 162
    c46: state 162
    c47: state 162
    c48: state 162
    c49: state 162
    c50: state 162
    c51: state 162
    c52: state 162
    c53: state 162
    c54: state 162
    c55: state 162
    c56: state 162
    c57: state 162
    c58: state 162
    c59: state 162
    c60: state 162
state 153:
    c10: state 163
    c19: state 164
    c26: state 164
    c27: state 164
    c28: state 164
    c29: state 164
    c30: state 164
    c31: state 164
    c32: state 164
    c33: state 164
    c34: state 164
    c41: state 164
    c42: state 164
    c43: state 164
    c44: state 164
    c45: state 164
    c46: state 164
    c47: state 164
    c48: state 164
    c49: state 164
    c50: state 164
    c51: state 164
    c52: state 164
    c53: state 164
    c54: state 164
    c55: state 164
    c56: state 164
    c57: state 164
    c58: state 164
    c59: state 164
    c60: state 164
state 154:
    end = 52
state 155:
    end = 52
    c2: state 165
state 156:
    c2: state 154
    c3: state 155
    c19: state 156
    c26: state 156
    c27: state 156
    c28: state 156
    c29: state 156
    c30: state 156
    c31: state 156
    c32: state 156
    c33: state 156
    c34: state 156
    c41: state 156
    c42: state 156
    c43: state 156
    c44: state 156
    c45: state 156
    c46: state 156
    c47: state 156
    c48: state 156
    c49: state 156
    c50: state 156
    c51: state 156
    c52: state 156
    c53: state 156
    c54: state 156
    c55: state 156
    c56: state 156
    c57: state 156
    c58: state 156
    c59: state 156
    c60: state 156
state 157:
    c39: state 166
state 158:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 167
    c59: state 79
    c60: state 79
state 159:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 168
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 160:
    end = 81
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 161:
    c2: state 154
    c3: state 155
state 162:
    c5: state 161
    c19: state 162
    c26: state 162
    c27: state 162
    c28: state 162
    c29: state 162
    c30: state 162
    c31: state 162
    c32: state 162
    c33: state 162
    c34: state 162
    c41: state 162
    c42: state 162
    c43: state 162
    c44: state 162
    c45: state 162
    c46: state 162
    c47: state 162
    c48: state 162
    c49: state 162
    c50: state 162
    c51: state 162
    c52: state 162
    c53: state 162
    c54: state 162
    c55: state 162
    c56: state 162
    c57: state 162
    c58: state 162
    c59: state 162
    c60: state 162
state 163:
    c2: state 169
    c3: state 170
state 164:
    c10: state 163
    c19: state 164
    c26: state 164
    c27: state 164
    c28: state 164
    c29: state 164
    c30: state 164
    c31: state 164
    c32: state 164
    c33: state 164
    c34: state 164
    c41: state 164
    c42: state 164
    c43: state 164
    c44: state 164
    c45: state 164
    c46: state 164
    c47: state 164
    c48: state 164
    c49: state 164
    c50: state 164
    c51: state 164
    c52: state 164
    c53: state 164
    c54: state 164
    c55: state 164
    c56: state 164
    c57: state 164
    c58: state 164
    c59: state 164
    c60: state 164
state 165:
    end = 52
state 166:
    c43: state 171
state 167:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 172
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 168:
    end = 7
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 173
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 169:
    end = 53
state 170:
    end = 53
    c2: state 174
state 171:
    c53: state 175
state 172:
    end = 80
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 173:
    end = 76
    c19: state 79
    c26: state 79
    c27: state 79
    c28: state 79
    c29: state 79
    c30: state 79
    c31: state 79
    c32: state 79
    c33: state 79
    c34: state 79
    c41: state 79
    c42: state 79
    c43: state 79
    c44: state 79
    c45: state 79
    c46: state 79
    c47: state 79
    c48: state 79
    c49: state 79
    c50: state 79
    c51: state 79
    c52: state 79
    c53: state 79
    c54: state 79
    c55: state 79
    c56: state 79
    c57: state 79
    c58: state 79
    c59: state 79
    c60: state 79
state 174:
    end = 53
state 175:
    c51: state 176
state 176:
    c54: state 177
state 177:
    c48: state 178
state 178:
    c50: state 179
state 179:
    c45: state 180
state 180:
    c55: state 181
state 181:
    end = 15


\x9 -> c0, \xa -> c1, \xd -> c2, ' ' -> c0, '$' -> c3, '0' -> c4, '1' -> c4, '2' -> c4, '3' -> c4, '4' -> c4, '5' -> c4, 
'6' -> c4, '7' -> c4, '8' -> c4, '9' -> c4, 'A' -> c5, 'B' -> c5, 'C' -> c5, 'D' -> c5, 'E' -> c5, 'F' -> c5, 'G' -> c5, 
'H' -> c5, 'I' -> c5, 'J' -> c5, 'K' -> c5, 'L' -> c5, 'M' -> c5, 'N' -> c5, 'O' -> c5, 'P' -> c5, 'Q' -> c5, 'R' -> c5, 
'S' -> c5, 'T' -> c5, 'U' -> c5, 'V' -> c5, 'W' -> c5, 'X' -> c5, 'Y' -> c5, 'Z' -> c5, 'a' -> c5, 'b' -> c5, 'c' -> c5, 
'd' -> c5, 'e' -> c5, 'f' -> c5, 'g' -> c5, 'h' -> c5, 'i' -> c5, 'j' -> c5, 'k' -> c5, 'l' -> c5, 'm' -> c5, 'n' -> c5, 
'o' -> c5, 'p' -> c5, 'q' -> c5, 'r' -> c5, 's' -> c5, 't' -> c5, 'u' -> c5, 'v' -> c5, 'w' -> c5, 'x' -> c5, 'y' -> c5, 
'z' -> c5, '{' -> c6, \x80 -> c5, \x81 -> c5, \x82 -> c5, \x83 -> c5, \x84 -> c5, \x85 -> c5, \x86 -> c5, \x87 -> c5, \x88 -> c5, 
\x89 -> c5, \x8a -> c5, \x8b -> c5, \x8c -> c5, \x8d -> c5, \x8e -> c5, \x8f -> c5, \x90 -> c5, \x91 -> c5, \x92 -> c5, \x93 -> c5, 
\x94 -> c5, \x95 -> c5, \x96 -> c5, \x97 -> c5, \x98 -> c5, \x99 -> c5, \x9a -> c5, \x9b -> c5, \x9c -> c5, \x9d -> c5, \x9e -> c5, 
\x9f -> c5, \xa0 -> c5, \xa1 -> c5, \xa2 -> c5, \xa3 -> c5, \xa4 -> c5, \xa5 -> c5, \xa6 -> c5, \xa7 -> c5, \xa8 -> c5, \xa9 -> c5, 
\xaa -> c5, \xab -> c5, \xac -> c5, \xad -> c5, \xae -> c5, \xaf -> c5, \xb0 -> c5, \xb1 -> c5, \xb2 -> c5, \xb3 -> c5, \xb4 -> c5, 
\xb5 -> c5, \xb6 -> c5, \xb7 -> c5, \xb8 -> c5, \xb9 -> c5, \xba -> c5, \xbb -> c5, \xbc -> c5, \xbd -> c5, \xbe -> c5, \xbf -> c5, 
\xc0 -> c5, \xc1 -> c5, \xc2 -> c5, \xc3 -> c5, \xc4 -> c5, \xc5 -> c5, \xc6 -> c5, \xc7 -> c5, \xc8 -> c5, \xc9 -> c5, \xca -> c5, 
\xcb -> c5, \xcc -> c5, \xcd -> c5, \xce -> c5, \xcf -> c5, \xd0 -> c5, \xd1 -> c5, \xd2 -> c5, \xd3 -> c5, \xd4 -> c5, \xd5 -> c5, 
\xd6 -> c5, \xd7 -> c5, \xd8 -> c5, \xd9 -> c5, \xda -> c5, \xdb -> c5, \xdc -> c5, \xdd -> c5, \xde -> c5, \xdf -> c5, \xe0 -> c5, 
\xe1 -> c5, \xe2 -> c5, \xe3 -> c5, \xe4 -> c5, \xe5 -> c5, \xe6 -> c5, \xe7 -> c5, \xe8 -> c5, \xe9 -> c5, \xea -> c5, \xeb -> c5, 
\xec -> c5, \xed -> c5, \xee -> c5, \xef -> c5, \xf0 -> c5, \xf1 -> c5, \xf2 -> c5, \xf3 -> c5, \xf4 -> c5, \xf5 -> c5, \xf6 -> c5, 
\xf7 -> c5, \xf8 -> c5, \xf9 -> c5, \xfa -> c5, \xfb -> c5, \xfc -> c5, \xfd -> c5, \xfe -> c5, \xff -> c5, 

state 0:
    c0: state 1
    c1: state 2
    c2: state 3
    c3: state 4
    c5: state 5
    c6: state 6
state 1:
    end = 83
    c0: state 1
    c1: state 2
    c2: state 3
state 2:
    end = 83
    c0: state 1
    c1: state 2
    c2: state 3
state 3:
    end = 83
    c0: state 1
    c1: state 7
    c2: state 3
state 4:
    end = 85
    c5: state 8
state 5:
    end = 84
    c4: state 9
    c5: state 9
state 6:
    end = 86
state 7:
    end = 83
    c0: state 1
    c1: state 2
    c2: state 3
state 8:
    end = 87
    c4: state 10
    c5: state 10
state 9:
    end = 84
    c4: state 9
    c5: state 9
state 10:
    end = 87
    c4: state 10
    c5: state 10


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c0, \xb -> c0, 
\xc -> c0, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, \x16 -> c0, \x17 -> c0, 
\x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c0, '!' -> c0, '"' -> c1, 
'#' -> c0, '$' -> c2, '%' -> c0, '&' -> c0, ''' -> c3, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, ',' -> c0, '-' -> c4, 
'.' -> c0, '/' -> c0, '0' -> c5, '1' -> c5, '2' -> c5, '3' -> c5, '4' -> c5, '5' -> c5, '6' -> c5, '7' -> c5, '8' -> c5, 
'9' -> c5, ':' -> c0, ';' -> c0, '<' -> c0, '=' -> c0, '>' -> c6, '?' -> c0, '@' -> c0, 'A' -> c7, 'B' -> c7, 'C' -> c7, 
'D' -> c7, 'E' -> c7, 'F' -> c7, 'G' -> c8, 'H' -> c8, 'I' -> c8, 'J' -> c8, 'K' -> c8, 'L' -> c8, 'M' -> c8, 'N' -> c8, 
'O' -> c8, 'P' -> c8, 'Q' -> c8, 'R' -> c8, 'S' -> c8, 'T' -> c8, 'U' -> c8, 'V' -> c8, 'W' -> c8, 'X' -> c8, 'Y' -> c8, 
'Z' -> c8, '[' -> c9, '\' -> c10, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c0, 'a' -> c7, 'b' -> c11, 'c' -> c7, 'd' -> c7, 
'e' -> c7, 'f' -> c11, 'g' -> c8, 'h' -> c8, 'i' -> c8, 'j' -> c8, 'k' -> c8, 'l' -> c8, 'm' -> c8, 'n' -> c12, 'o' -> c8, 
'p' -> c8, 'q' -> c8, 'r' -> c12, 's' -> c8, 't' -> c12, 'u' -> c13, 'v' -> c8, 'w' -> c8, 'x' -> c13, 'y' -> c8, 'z' -> c8, 
'{' -> c14, '|' -> c0, '}' -> c15, '~' -> c0, \x7f -> c0, \x80 -> c8, \x81 -> c8, \x82 -> c8, \x83 -> c8, \x84 -> c8, \x85 -> c8, 
\x86 -> c8, \x87 -> c8, \x88 -> c8, \x89 -> c8, \x8a -> c8, \x8b -> c8, \x8c -> c8, \x8d -> c8, \x8e -> c8, \x8f -> c8, \x90 -> c8, 
\x91 -> c8, \x92 -> c8, \x93 -> c8, \x94 -> c8, \x95 -> c8, \x96 -> c8, \x97 -> c8, \x98 -> c8, \x99 -> c8, \x9a -> c8, \x9b -> c8, 
\x9c -> c8, \x9d -> c8, \x9e -> c8, \x9f -> c8, \xa0 -> c8, \xa1 -> c8, \xa2 -> c8, \xa3 -> c8, \xa4 -> c8, \xa5 -> c8, \xa6 -> c8, 
\xa7 -> c8, \xa8 -> c8, \xa9 -> c8, \xaa -> c8, \xab -> c8, \xac -> c8, \xad -> c8, \xae -> c8, \xaf -> c8, \xb0 -> c8, \xb1 -> c8, 
\xb2 -> c8, \xb3 -> c8, \xb4 -> c8, \xb5 -> c8, \xb6 -> c8, \xb7 -> c8, \xb8 -> c8, \xb9 -> c8, \xba -> c8, \xbb -> c8, \xbc -> c8, 
\xbd -> c8, \xbe -> c8, \xbf -> c8, \xc0 -> c8, \xc1 -> c8, \xc2 -> c8, \xc3 -> c8, \xc4 -> c8, \xc5 -> c8, \xc6 -> c8, \xc7 -> c8, 
\xc8 -> c8, \xc9 -> c8, \xca -> c8, \xcb -> c8, \xcc -> c8, \xcd -> c8, \xce -> c8, \xcf -> c8, \xd0 -> c8, \xd1 -> c8, \xd2 -> c8, 
\xd3 -> c8, \xd4 -> c8, \xd5 -> c8, \xd6 -> c8, \xd7 -> c8, \xd8 -> c8, \xd9 -> c8, \xda -> c8, \xdb -> c8, \xdc -> c8, \xdd -> c8, 
\xde -> c8, \xdf -> c8, \xe0 -> c8, \xe1 -> c8, \xe2 -> c8, \xe3 -> c8, \xe4 -> c8, \xe5 -> c8, \xe6 -> c8, \xe7 -> c8, \xe8 -> c8, 
\xe9 -> c8, \xea -> c8, \xeb -> c8, \xec -> c8, \xed -> c8, \xee -> c8, \xef -> c8, \xf0 -> c8, \xf1 -> c8, \xf2 -> c8, \xf3 -> c8, 
\xf4 -> c8, \xf5 -> c8, \xf6 -> c8, \xf7 -> c8, \xf8 -> c8, \xf9 -> c8, \xfa -> c8, \xfb -> c8, \xfc -> c8, \xfd -> c8, \xfe -> c8, 
\xff -> c8, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 2
    c2: state 3
    c3: state 1
    c4: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
    c9: state 1
    c10: state 4
    c11: state 1
    c12: state 1
    c13: state 1
    c14: state 1
    c15: state 1
state 1:
    end = 88
    c0: state 1
    c3: state 1
    c4: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
    c9: state 1
    c11: state 1
    c12: state 1
    c13: state 1
    c14: state 1
    c15: state 1
state 2:
    end = 89
state 3:
    c7: state 5
    c8: state 5
    c11: state 5
    c12: state 5
    c13: state 5
    c14: state 6
state 4:
    c2: state 7
    c10: state 8
state 5:
    end = 92
    c4: state 9
    c5: state 10
    c7: state 10
    c8: state 10
    c9: state 11
    c11: state 10
    c12: state 10
    c13: state 10
state 6:
    end = 96
    c7: state 12
    c8: state 12
    c11: state 12
    c12: state 12
    c13: state 12
state 7:
    end = 91
state 8:
    c1: state 13
    c3: state 13
    c10: state 13
    c11: state 13
    c12: state 13
    c13: state 14
state 9:
    c6: state 15
state 10:
    end = 92
    c4: state 9
    c5: state 10
    c7: state 10
    c8: state 10
    c9: state 11
    c11: state 10
    c12: state 10
    c13: state 10
state 11:
    end = 95
state 12:
    c5: state 16
    c7: state 16
    c8: state 16
    c11: state 16
    c12: state 16
    c13: state 16
    c15: state 17
state 13:
    end = 90
state 14:
    c5: state 18
    c7: state 18
    c11: state 18
state 15:
    c7: state 19
    c8: state 19
    c11: state 19
    c12: state 19
    c13: state 19
state 16:
    c5: state 16
    c7: state 16
    c8: state 16
    c11: state 16
    c12: state 16
    c13: state 16
    c15: state 17
state 17:
    end = 93
state 18:
    end = 90
    c5: state 18
    c7: state 18
    c11: state 18
state 19:
    end = 94
    c5: state 20
    c7: state 20
    c8: state 20
    c11: state 20
    c12: state 20
    c13: state 20
state 20:
    end = 94
    c5: state 20
    c7: state 20
    c8: state 20
    c11: state 20
    c12: state 20
    c13: state 20


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c0, \xa -> c0, 
\xb -> c0, \xc -> c0, \xd -> c0, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c0, 
'!' -> c0, '"' -> c1, '#' -> c0, '$' -> c2, '%' -> c0, '&' -> c0, ''' -> c1, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, 
',' -> c0, '-' -> c3, '.' -> c0, '/' -> c0, '0' -> c4, '1' -> c4, '2' -> c4, '3' -> c4, '4' -> c4, '5' -> c4, '6' -> c4, 
'7' -> c4, '8' -> c4, '9' -> c4, ':' -> c0, ';' -> c0, '<' -> c0, '=' -> c0, '>' -> c5, '?' -> c0, '@' -> c0, 'A' -> c6, 
'B' -> c6, 'C' -> c6, 'D' -> c6, 'E' -> c6, 'F' -> c6, 'G' -> c7, 'H' -> c7, 'I' -> c7, 'J' -> c7, 'K' -> c7, 'L' -> c7, 
'M' -> c7, 'N' -> c7, 'O' -> c7, 'P' -> c7, 'Q' -> c7, 'R' -> c7, 'S' -> c7, 'T' -> c7, 'U' -> c7, 'V' -> c7, 'W' -> c7, 
'X' -> c7, 'Y' -> c7, 'Z' -> c7, '[' -> c8, '\' -> c9, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c10, 'a' -> c6, 'b' -> c11, 
'c' -> c6, 'd' -> c6, 'e' -> c6, 'f' -> c11, 'g' -> c7, 'h' -> c7, 'i' -> c7, 'j' -> c7, 'k' -> c7, 'l' -> c7, 'm' -> c7, 
'n' -> c12, 'o' -> c7, 'p' -> c7, 'q' -> c7, 'r' -> c12, 's' -> c7, 't' -> c12, 'u' -> c13, 'v' -> c7, 'w' -> c7, 'x' -> c13, 
'y' -> c7, 'z' -> c7, '{' -> c14, '|' -> c0, '}' -> c15, '~' -> c0, \x7f -> c0, \x80 -> c7, \x81 -> c7, \x82 -> c7, \x83 -> c7, 
\x84 -> c7, \x85 -> c7, \x86 -> c7, \x87 -> c7, \x88 -> c7, \x89 -> c7, \x8a -> c7, \x8b -> c7, \x8c -> c7, \x8d -> c7, \x8e -> c7, 
\x8f -> c7, \x90 -> c7, \x91 -> c7, \x92 -> c7, \x93 -> c7, \x94 -> c7, \x95 -> c7, \x96 -> c7, \x97 -> c7, \x98 -> c7, \x99 -> c7, 
\x9a -> c7, \x9b -> c7, \x9c -> c7, \x9d -> c7, \x9e -> c7, \x9f -> c7, \xa0 -> c7, \xa1 -> c7, \xa2 -> c7, \xa3 -> c7, \xa4 -> c7, 
\xa5 -> c7, \xa6 -> c7, \xa7 -> c7, \xa8 -> c7, \xa9 -> c7, \xaa -> c7, \xab -> c7, \xac -> c7, \xad -> c7, \xae -> c7, \xaf -> c7, 
\xb0 -> c7, \xb1 -> c7, \xb2 -> c7, \xb3 -> c7, \xb4 -> c7, \xb5 -> c7, \xb6 -> c7, \xb7 -> c7, \xb8 -> c7, \xb9 -> c7, \xba -> c7, 
\xbb -> c7, \xbc -> c7, \xbd -> c7, \xbe -> c7, \xbf -> c7, \xc0 -> c7, \xc1 -> c7, \xc2 -> c7, \xc3 -> c7, \xc4 -> c7, \xc5 -> c7, 
\xc6 -> c7, \xc7 -> c7, \xc8 -> c7, \xc9 -> c7, \xca -> c7, \xcb -> c7, \xcc -> c7, \xcd -> c7, \xce -> c7, \xcf -> c7, \xd0 -> c7, 
\xd1 -> c7, \xd2 -> c7, \xd3 -> c7, \xd4 -> c7, \xd5 -> c7, \xd6 -> c7, \xd7 -> c7, \xd8 -> c7, \xd9 -> c7, \xda -> c7, \xdb -> c7, 
\xdc -> c7, \xdd -> c7, \xde -> c7, \xdf -> c7, \xe0 -> c7, \xe1 -> c7, \xe2 -> c7, \xe3 -> c7, \xe4 -> c7, \xe5 -> c7, \xe6 -> c7, 
\xe7 -> c7, \xe8 -> c7, \xe9 -> c7, \xea -> c7, \xeb -> c7, \xec -> c7, \xed -> c7, \xee -> c7, \xef -> c7, \xf0 -> c7, \xf1 -> c7, 
\xf2 -> c7, \xf3 -> c7, \xf4 -> c7, \xf5 -> c7, \xf6 -> c7, \xf7 -> c7, \xf8 -> c7, \xf9 -> c7, \xfa -> c7, \xfb -> c7, \xfc -> c7, 
\xfd -> c7, \xfe -> c7, \xff -> c7, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 1
    c2: state 2
    c3: state 1
    c4: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
    c9: state 3
    c10: state 4
    c11: state 1
    c12: state 1
    c13: state 1
    c14: state 1
    c15: state 1
state 1:
    end = 97
    c0: state 1
    c1: state 1
    c3: state 1
    c4: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
    c11: state 1
    c12: state 1
    c13: state 1
    c14: state 1
    c15: state 1
state 2:
    c6: state 5
    c7: state 5
    c11: state 5
    c12: state 5
    c13: state 5
    c14: state 6
state 3:
    c2: state 7
    c9: state 8
state 4:
    end = 98
state 5:
    end = 101
    c3: state 9
    c4: state 10
    c6: state 10
    c7: state 10
    c8: state 11
    c11: state 10
    c12: state 10
    c13: state 10
state 6:
    end = 105
    c6: state 12
    c7: state 12
    c11: state 12
    c12: state 12
    c13: state 12
state 7:
    end = 100
state 8:
    c1: state 13
    c9: state 13
    c11: state 13
    c12: state 13
    c13: state 14
state 9:
    c5: state 15
state 10:
    end = 101
    c3: state 9
    c4: state 10
    c6: state 10
    c7: state 10
    c8: state 11
    c11: state 10
    c12: state 10
    c13: state 10
state 11:
    end = 104
state 12:
    c4: state 16
    c6: state 16
    c7: state 16
    c11: state 16
    c12: state 16
    c13: state 16
    c15: state 17
state 13:
    end = 99
state 14:
    c4: state 18
    c6: state 18
    c11: state 18
state 15:
    c6: state 19
    c7: state 19
    c11: state 19
    c12: state 19
    c13: state 19
state 16:
    c4: state 16
    c6: state 16
    c7: state 16
    c11: state 16
    c12: state 16
    c13: state 16
    c15: state 17
state 17:
    end = 102
state 18:
    end = 99
    c4: state 18
    c6: state 18
    c11: state 18
state 19:
    end = 103
    c4: state 20
    c6: state 20
    c7: state 20
    c11: state 20
    c12: state 20
    c13: state 20
state 20:
    end = 103
    c4: state 20
    c6: state 20
    c7: state 20
    c11: state 20
    c12: state 20
    c13: state 20


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c0, \xa -> c1, 
\xb -> c0, \xc -> c0, \xd -> c2, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c0, 
'!' -> c0, '"' -> c3, '#' -> c0, '$' -> c4, '%' -> c0, '&' -> c0, ''' -> c3, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, 
',' -> c0, '-' -> c5, '.' -> c0, '/' -> c0, '0' -> c6, '1' -> c6, '2' -> c6, '3' -> c6, '4' -> c6, '5' -> c6, '6' -> c6, 
'7' -> c6, '8' -> c6, '9' -> c6, ':' -> c0, ';' -> c0, '<' -> c0, '=' -> c0, '>' -> c7, '?' -> c0, '@' -> c0, 'A' -> c8, 
'B' -> c8, 'C' -> c8, 'D' -> c8, 'E' -> c8, 'F' -> c8, 'G' -> c9, 'H' -> c9, 'I' -> c9, 'J' -> c9, 'K' -> c9, 'L' -> c9, 
'M' -> c9, 'N' -> c9, 'O' -> c9, 'P' -> c9, 'Q' -> c9, 'R' -> c9, 'S' -> c9, 'T' -> c9, 'U' -> c9, 'V' -> c9, 'W' -> c9, 
'X' -> c9, 'Y' -> c9, 'Z' -> c9, '[' -> c10, '\' -> c11, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c0, 'a' -> c8, 'b' -> c12, 
'c' -> c8, 'd' -> c8, 'e' -> c8, 'f' -> c12, 'g' -> c9, 'h' -> c9, 'i' -> c9, 'j' -> c9, 'k' -> c9, 'l' -> c9, 'm' -> c9, 
'n' -> c13, 'o' -> c9, 'p' -> c9, 'q' -> c9, 'r' -> c13, 's' -> c9, 't' -> c13, 'u' -> c14, 'v' -> c9, 'w' -> c9, 'x' -> c14, 
'y' -> c9, 'z' -> c9, '{' -> c15, '|' -> c0, '}' -> c16, '~' -> c0, \x7f -> c0, \x80 -> c9, \x81 -> c9, \x82 -> c9, \x83 -> c9, 
\x84 -> c9, \x85 -> c9, \x86 -> c9, \x87 -> c9, \x88 -> c9, \x89 -> c9, \x8a -> c9, \x8b -> c9, \x8c -> c9, \x8d -> c9, \x8e -> c9, 
\x8f -> c9, \x90 -> c9, \x91 -> c9, \x92 -> c9, \x93 -> c9, \x94 -> c9, \x95 -> c9, \x96 -> c9, \x97 -> c9, \x98 -> c9, \x99 -> c9, 
\x9a -> c9, \x9b -> c9, \x9c -> c9, \x9d -> c9, \x9e -> c9, \x9f -> c9, \xa0 -> c9, \xa1 -> c9, \xa2 -> c9, \xa3 -> c9, \xa4 -> c9, 
\xa5 -> c9, \xa6 -> c9, \xa7 -> c9, \xa8 -> c9, \xa9 -> c9, \xaa -> c9, \xab -> c9, \xac -> c9, \xad -> c9, \xae -> c9, \xaf -> c9, 
\xb0 -> c9, \xb1 -> c9, \xb2 -> c9, \xb3 -> c9, \xb4 -> c9, \xb5 -> c9, \xb6 -> c9, \xb7 -> c9, \xb8 -> c9, \xb9 -> c9, \xba -> c9, 
\xbb -> c9, \xbc -> c9, \xbd -> c9, \xbe -> c9, \xbf -> c9, \xc0 -> c9, \xc1 -> c9, \xc2 -> c9, \xc3 -> c9, \xc4 -> c9, \xc5 -> c9, 
\xc6 -> c9, \xc7 -> c9, \xc8 -> c9, \xc9 -> c9, \xca -> c9, \xcb -> c9, \xcc -> c9, \xcd -> c9, \xce -> c9, \xcf -> c9, \xd0 -> c9, 
\xd1 -> c9, \xd2 -> c9, \xd3 -> c9, \xd4 -> c9, \xd5 -> c9, \xd6 -> c9, \xd7 -> c9, \xd8 -> c9, \xd9 -> c9, \xda -> c9, \xdb -> c9, 
\xdc -> c9, \xdd -> c9, \xde -> c9, \xdf -> c9, \xe0 -> c9, \xe1 -> c9, \xe2 -> c9, \xe3 -> c9, \xe4 -> c9, \xe5 -> c9, \xe6 -> c9, 
\xe7 -> c9, \xe8 -> c9, \xe9 -> c9, \xea -> c9, \xeb -> c9, \xec -> c9, \xed -> c9, \xee -> c9, \xef -> c9, \xf0 -> c9, \xf1 -> c9, 
\xf2 -> c9, \xf3 -> c9, \xf4 -> c9, \xf5 -> c9, \xf6 -> c9, \xf7 -> c9, \xf8 -> c9, \xf9 -> c9, \xfa -> c9, \xfb -> c9, \xfc -> c9, 
\xfd -> c9, \xfe -> c9, \xff -> c9, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 2
    c2: state 3
    c3: state 1
    c4: state 4
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
    c9: state 1
    c10: state 1
    c11: state 5
    c12: state 1
    c13: state 1
    c14: state 1
    c15: state 1
    c16: state 1
state 1:
    end = 106
    c0: state 1
    c3: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
    c9: state 1
    c10: state 1
    c12: state 1
    c13: state 1
    c14: state 1
    c15: state 1
    c16: state 1
state 2:
    end = 106
    c8: state 6
    c9: state 6
    c12: state 6
    c13: state 6
    c14: state 6
state 3:
    end = 106
    c1: state 7
    c8: state 6
    c9: state 6
    c12: state 6
    c13: state 6
    c14: state 6
state 4:
    c8: state 8
    c9: state 8
    c12: state 8
    c13: state 8
    c14: state 8
    c15: state 9
state 5:
    c4: state 10
    c11: state 11
state 6:
    end = 107
    c6: state 12
    c8: state 12
    c9: state 12
    c12: state 12
    c13: state 12
    c14: state 12
state 7:
    end = 106
    c8: state 6
    c9: state 6
    c12: state 6
    c13: state 6
    c14: state 6
state 8:
    end = 110
    c5: state 13
    c6: state 14
    c8: state 14
    c9: state 14
    c10: state 15
    c12: state 14
    c13: state 14
    c14: state 14
state 9:
    end = 114
    c8: state 16
    c9: state 16
    c12: state 16
    c13: state 16
    c14: state 16
state 10:
    end = 109
state 11:
    c3: state 17
    c11: state 17
    c12: state 17
    c13: state 17
    c14: state 18
state 12:
    end = 107
    c6: state 12
    c8: state 12
    c9: state 12
    c12: state 12
    c13: state 12
    c14: state 12
state 13:
    c7: state 19
state 14:
    end = 110
    c5: state 13
    c6: state 14
    c8: state 14
    c9: state 14
    c10: state 15
    c12: state 14
    c13: state 14
    c14: state 14
state 15:
    end = 113
state 16:
    c6: state 20
    c8: state 20
    c9: state 20
    c12: state 20
    c13: state 20
    c14: state 20
    c16: state 21
state 17:
    end = 108
state 18:
    c6: state 22
    c8: state 22
    c12: state 22
state 19:
    c8: state 23
    c9: state 23
    c12: state 23
    c13: state 23
    c14: state 23
state 20:
    c6: state 20
    c8: state 20
    c9: state 20
    c12: state 20
    c13: state 20
    c14: state 20
    c16: state 21
state 21:
    end = 111
state 22:
    end = 108
    c6: state 22
    c8: state 22
    c12: state 22
state 23:
    end = 112
    c6: state 24
    c8: state 24
    c9: state 24
    c12: state 24
    c13: state 24
    c14: state 24
state 24:
    end = 112
    c6: state 24
    c8: state 24
    c9: state 24
    c12: state 24
    c13: state 24
    c14: state 24


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c0, \xa -> c1, 
\xb -> c0, \xc -> c0, \xd -> c2, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c0, 
'!' -> c0, '"' -> c0, '#' -> c0, '$' -> c0, '%' -> c0, '&' -> c0, ''' -> c0, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, 
',' -> c0, '-' -> c0, '.' -> c0, '/' -> c0, '0' -> c3, '1' -> c3, '2' -> c3, '3' -> c3, '4' -> c3, '5' -> c3, '6' -> c3, 
'7' -> c3, '8' -> c3, '9' -> c3, ':' -> c0, ';' -> c0, '<' -> c0, '=' -> c0, '>' -> c0, '?' -> c0, '@' -> c0, 'A' -> c4, 
'B' -> c4, 'C' -> c4, 'D' -> c4, 'E' -> c4, 'F' -> c4, 'G' -> c4, 'H' -> c4, 'I' -> c4, 'J' -> c4, 'K' -> c4, 'L' -> c4, 
'M' -> c4, 'N' -> c4, 'O' -> c4, 'P' -> c4, 'Q' -> c4, 'R' -> c4, 'S' -> c4, 'T' -> c4, 'U' -> c4, 'V' -> c4, 'W' -> c4, 
'X' -> c4, 'Y' -> c4, 'Z' -> c4, '[' -> c0, '\' -> c0, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c0, 'a' -> c4, 'b' -> c4, 
'c' -> c4, 'd' -> c4, 'e' -> c4, 'f' -> c4, 'g' -> c4, 'h' -> c4, 'i' -> c4, 'j' -> c4, 'k' -> c4, 'l' -> c4, 'm' -> c4, 
'n' -> c4, 'o' -> c4, 'p' -> c4, 'q' -> c4, 'r' -> c4, 's' -> c4, 't' -> c4, 'u' -> c4, 'v' -> c4, 'w' -> c4, 'x' -> c4, 
'y' -> c4, 'z' -> c4, '{' -> c0, '|' -> c0, '}' -> c0, '~' -> c0, \x7f -> c0, \x80 -> c4, \x81 -> c4, \x82 -> c4, \x83 -> c4, 
\x84 -> c4, \x85 -> c4, \x86 -> c4, \x87 -> c4, \x88 -> c4, \x89 -> c4, \x8a -> c4, \x8b -> c4, \x8c -> c4, \x8d -> c4, \x8e -> c4, 
\x8f -> c4, \x90 -> c4, \x91 -> c4, \x92 -> c4, \x93 -> c4, \x94 -> c4, \x95 -> c4, \x96 -> c4, \x97 -> c4, \x98 -> c4, \x99 -> c4, 
\x9a -> c4, \x9b -> c4, \x9c -> c4, \x9d -> c4, \x9e -> c4, \x9f -> c4, \xa0 -> c4, \xa1 -> c4, \xa2 -> c4, \xa3 -> c4, \xa4 -> c4, 
\xa5 -> c4, \xa6 -> c4, \xa7 -> c4, \xa8 -> c4, \xa9 -> c4, \xaa -> c4, \xab -> c4, \xac -> c4, \xad -> c4, \xae -> c4, \xaf -> c4, 
\xb0 -> c4, \xb1 -> c4, \xb2 -> c4, \xb3 -> c4, \xb4 -> c4, \xb5 -> c4, \xb6 -> c4, \xb7 -> c4, \xb8 -> c4, \xb9 -> c4, \xba -> c4, 
\xbb -> c4, \xbc -> c4, \xbd -> c4, \xbe -> c4, \xbf -> c4, \xc0 -> c4, \xc1 -> c4, \xc2 -> c4, \xc3 -> c4, \xc4 -> c4, \xc5 -> c4, 
\xc6 -> c4, \xc7 -> c4, \xc8 -> c4, \xc9 -> c4, \xca -> c4, \xcb -> c4, \xcc -> c4, \xcd -> c4, \xce -> c4, \xcf -> c4, \xd0 -> c4, 
\xd1 -> c4, \xd2 -> c4, \xd3 -> c4, \xd4 -> c4, \xd5 -> c4, \xd6 -> c4, \xd7 -> c4, \xd8 -> c4, \xd9 -> c4, \xda -> c4, \xdb -> c4, 
\xdc -> c4, \xdd -> c4, \xde -> c4, \xdf -> c4, \xe0 -> c4, \xe1 -> c4, \xe2 -> c4, \xe3 -> c4, \xe4 -> c4, \xe5 -> c4, \xe6 -> c4, 
\xe7 -> c4, \xe8 -> c4, \xe9 -> c4, \xea -> c4, \xeb -> c4, \xec -> c4, \xed -> c4, \xee -> c4, \xef -> c4, \xf0 -> c4, \xf1 -> c4, 
\xf2 -> c4, \xf3 -> c4, \xf4 -> c4, \xf5 -> c4, \xf6 -> c4, \xf7 -> c4, \xf8 -> c4, \xf9 -> c4, \xfa -> c4, \xfb -> c4, \xfc -> c4, 
\xfd -> c4, \xfe -> c4, \xff -> c4, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 2
    c2: state 3
    c3: state 1
    c4: state 1
state 1:
    end = 115
    c0: state 1
    c3: state 1
    c4: state 1
state 2:
    end = 115
    c4: state 4
state 3:
    end = 115
    c1: state 5
    c4: state 4
state 4:
    end = 116
    c3: state 6
    c4: state 6
state 5:
    end = 115
    c4: state 4
state 6:
    end = 116
    c3: state 6
    c4: state 6


state 0
    [ 0: (accept) => . start <EOF> ]*
    [ 1: start => . top_statement_list ]
    [ 2: top_statement_list => . top_statement_list top_statement ]
    [ 3: top_statement_list => . ]
    default action: reduce with rule 3
    start : go to state 1
    top_statement_list : go to state 2


state 1
    [ 0: (accept) => start . <EOF> ]*
    no default action
    <EOF> : shift, and go to state 3


state 2
    [ 1: start => top_statement_list . ]*
    [ 2: top_statement_list => top_statement_list . top_statement ]*
    [ 4: top_statement => . statement ]
    [ 5: top_statement => . function_declaration_statement ]
    [ 6: top_statement => . "__halt_compiler" "(" ")" ";" ]
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 113: function_declaration_statement => . "function" <NAME> "(" parameter_list ")" "{" statement_list "}" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 1
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "__halt_compiler" : shift, and go to state 7
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 8
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    top_statement : go to state 4
    statement : go to state 5
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    function_declaration_statement : go to state 6
    primitive : go to state 47


state 3
    [ 0: (accept) => start <EOF> . ]*
    default action: reduce with rule 0


state 4
    [ 2: top_statement_list => top_statement_list top_statement . ]*
    default action: reduce with rule 2


state 5
    [ 4: top_statement => statement . ]*
    default action: reduce with rule 4


state 6
    [ 5: top_statement => function_declaration_statement . ]*
    default action: reduce with rule 5


state 7
    [ 6: top_statement => "__halt_compiler" . "(" ")" ";" ]*
    no default action
    "(" : shift, and go to state 9


state 8
    [ 113: function_declaration_statement => "function" . <NAME> "(" parameter_list ")" "{" statement_list "}" ]*
    [ 111: expr_without_var => "function" . "(" parameter_list ")" lexical_vars "{" statement_list "}" ]*
    no default action
    <NAME> : shift, and go to state 12
    "(" : shift, and go to state 124


state 9
    [ 6: top_statement => "__halt_compiler" "(" . ")" ";" ]*
    no default action
    ")" : shift, and go to state 14


state 10
    [ 25: echo_expr_list => expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 25
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 11
    [ 26: optional_num => <INT> . ]*
    default action: reduce with rule 26


state 12
    [ 113: function_declaration_statement => "function" <NAME> . "(" parameter_list ")" "{" statement_list "}" ]*
    no default action
    "(" : shift, and go to state 25


state 13
    [ 39: dereferencable => "(" . expr ")" ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 30
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 14
    [ 6: top_statement => "__halt_compiler" "(" ")" . ";" ]*
    no default action
    ";" : shift, and go to state 56


state 15
    [ 7: statement_list => statement_list statement . ]*
    default action: reduce with rule 7


state 16
    [ 128: primitive => "list" . "(" array_pair_list ")" ]*
    no default action
    "(" : shift, and go to state 57


state 17
    [ 131: primitive => """ . @2 quote_list """ @3 ]*
    [ 129: @2 => . ]
    default action: reduce with rule 129
    @2 : go to state 58


state 18
    [ 134: primitive => "`" . @4 quote_list "`" @5 ]*
    [ 132: @4 => . ]
    default action: reduce with rule 132
    @4 : go to state 59


state 19
    [ 138: primitive => <HEREDOC_HEADER> . @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]*
    [ 135: @6 => . ]
    default action: reduce with rule 135
    @6 : go to state 60


state 20
    [ 142: primitive => <NOWDOC_HEADER> . @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]*
    [ 139: @9 => . ]
    default action: reduce with rule 139
    @9 : go to state 61


state 21
    [ 57: function_call => callable_expr . "(" argument_list ")" ]*
    no default action
    "(" : shift, and go to state 62


state 22
    [ 45: simple_var => <VARIABLE> . ]*
    default action: reduce with rule 45


state 23
    [ 46: simple_var => "$" . "{" expr "}" ]*
    [ 47: simple_var => "$" . simple_var ]*
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    no default action
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "{" : shift, and go to state 63
    simple_var : go to state 64


state 24
    [ 24: echo_expr_list => echo_expr_list "," . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 65
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 25
    [ 113: function_declaration_statement => "function" <NAME> "(" . parameter_list ")" "{" statement_list "}" ]*
    [ 114: parameter_list => . ]
    [ 115: parameter_list => . non_empty_parameter_list ]
    [ 116: non_empty_parameter_list => . non_empty_parameter_list "," parameter ]
    [ 117: non_empty_parameter_list => . parameter ]
    [ 118: parameter => . <VARIABLE> ]
    default action: reduce with rule 114
    <VARIABLE> : shift, and go to state 28
    parameter_list : go to state 66
    non_empty_parameter_list : go to state 26
    parameter : go to state 27


state 26
    [ 115: parameter_list => non_empty_parameter_list . ]*
    [ 116: non_empty_parameter_list => non_empty_parameter_list . "," parameter ]*
    default action: reduce with rule 115
    "," : shift, and go to state 67


state 27
    [ 117: non_empty_parameter_list => parameter . ]*
    default action: reduce with rule 117


state 28
    [ 118: parameter => <VARIABLE> . ]*
    default action: reduce with rule 118


state 29
    [ 55: optional_expr => expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 55
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 30
    [ 39: dereferencable => "(" expr . ")" ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    ")" : shift, and go to state 68
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 31
    [ 59: argument_list => non_empty_argument_list . ]*
    [ 60: non_empty_argument_list => non_empty_argument_list . "," expr ]*
    default action: reduce with rule 59
    "," : shift, and go to state 69


state 32
    [ 61: non_empty_argument_list => expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 61
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 33
    [ 158: array_pair_list => non_empty_array_pair_list . ]*
    [ 160: non_empty_array_pair_list => non_empty_array_pair_list . "," array_pair ]*
    default action: reduce with rule 158
    "," : shift, and go to state 70


state 34
    [ 161: non_empty_array_pair_list => array_pair . ]*
    default action: reduce with rule 161


state 35
    [ 162: array_pair => expr . ]*
    [ 163: array_pair => expr . "=>" expr ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 162
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "=>" : shift, and go to state 71
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 36
    [ 34: expr => var . ]*
    [ 62: expr_without_var => var . "=" expr ]*
    [ 63: expr_without_var => var . "+=" expr ]*
    [ 64: expr_without_var => var . "-=" expr ]*
    [ 65: expr_without_var => var . "**=" expr ]*
    [ 66: expr_without_var => var . "*=" expr ]*
    [ 67: expr_without_var => var . "/=" expr ]*
    [ 68: expr_without_var => var . "&=" expr ]*
    [ 69: expr_without_var => var . "|=" expr ]*
    [ 70: expr_without_var => var . "^=" expr ]*
    [ 71: expr_without_var => var . ">>=" expr ]*
    [ 72: expr_without_var => var . "<<=" expr ]*
    [ 73: expr_without_var => var . "%=" expr ]*
    [ 108: expr_without_var => var . "++" ]*
    [ 109: expr_without_var => var . "--" ]*
    [ 38: dereferencable => var . ]*
    default action: reduce with rule 34
    "=" : shift, and go to state 99
    "+=" : shift, and go to state 100
    "-=" : shift, and go to state 101
    "*=" : shift, and go to state 103
    "**=" : shift, and go to state 102
    "/=" : shift, and go to state 104
    "&=" : shift, and go to state 105
    "|=" : shift, and go to state 106
    "^=" : shift, and go to state 107
    ">>=" : shift, and go to state 108
    "<<=" : shift, and go to state 109
    "%=" : shift, and go to state 110
    "++" : shift, and go to state 111
    "--" : shift, and go to state 112
    "->" : reduce with rule 38
    "[" : reduce with rule 38


state 37
    [ 35: expr => expr_without_var . ]*
    default action: reduce with rule 35


state 38
    [ 40: var => callable_variable . ]*
    [ 36: callable_expr => callable_variable . ]*
    default action: reduce with rule 40
    "(" : reduce with rule 36


state 39
    [ 41: var => dereferencable . arrow_and_property ]*
    [ 43: callable_variable => dereferencable . "[" optional_expr "]" ]*
    [ 44: callable_variable => dereferencable . arrow_and_property "(" argument_list ")" ]*
    [ 50: arrow_and_property => . "->" @0 property_name @1 ]
    no default action
    "->" : shift, and go to state 115
    "[" : shift, and go to state 114
    arrow_and_property : go to state 113


state 40
    [ 101: expr_without_var => "(" . expr ")" ]*
    [ 39: dereferencable => "(" . expr ")" ]*
    [ 37: callable_expr => "(" . expr ")" ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 116
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 41
    [ 102: expr_without_var => "+" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 117
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 42
    [ 103: expr_without_var => "-" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 118
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 43
    [ 104: expr_without_var => "!" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 119
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 44
    [ 105: expr_without_var => "~" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 120
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 45
    [ 106: expr_without_var => "++" . var ]*
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    no default action
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "(" : shift, and go to state 13
    dereferencable : go to state 39
    var : go to state 121
    callable_variable : go to state 122
    simple_var : go to state 50


state 46
    [ 107: expr_without_var => "--" . var ]*
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    no default action
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "(" : shift, and go to state 13
    dereferencable : go to state 39
    var : go to state 123
    callable_variable : go to state 122
    simple_var : go to state 50


state 47
    [ 110: expr_without_var => primitive . ]*
    default action: reduce with rule 110


state 48
    [ 111: expr_without_var => "function" . "(" parameter_list ")" lexical_vars "{" statement_list "}" ]*
    no default action
    "(" : shift, and go to state 124


state 49
    [ 112: expr_without_var => function_call . ]*
    default action: reduce with rule 112


state 50
    [ 42: callable_variable => simple_var . ]*
    default action: reduce with rule 42


state 51
    [ 123: primitive => <INT> . ]*
    default action: reduce with rule 123


state 52
    [ 124: primitive => <DECIMAL> . ]*
    default action: reduce with rule 124


state 53
    [ 125: primitive => <STRING> . ]*
    default action: reduce with rule 125


state 54
    [ 126: primitive => <NAME> . ]*
    [ 56: function_call => <NAME> . "(" argument_list ")" ]*
    default action: reduce with rule 126
    "(" : shift, and go to state 125


state 55
    [ 127: primitive => "[" . array_pair_list "]" ]*
    [ 158: array_pair_list => . non_empty_array_pair_list ]
    [ 159: array_pair_list => . ]
    [ 160: non_empty_array_pair_list => . non_empty_array_pair_list "," array_pair ]
    [ 161: non_empty_array_pair_list => . array_pair ]
    [ 162: array_pair => . expr ]
    [ 163: array_pair => . expr "=>" expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 159
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 35
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47
    array_pair_list : go to state 126
    non_empty_array_pair_list : go to state 33
    array_pair : go to state 34


state 56
    [ 6: top_statement => "__halt_compiler" "(" ")" ";" . ]*
    default action: reduce with rule 6


state 57
    [ 128: primitive => "list" "(" . array_pair_list ")" ]*
    [ 158: array_pair_list => . non_empty_array_pair_list ]
    [ 159: array_pair_list => . ]
    [ 160: non_empty_array_pair_list => . non_empty_array_pair_list "," array_pair ]
    [ 161: non_empty_array_pair_list => . array_pair ]
    [ 162: array_pair => . expr ]
    [ 163: array_pair => . expr "=>" expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 159
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 35
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47
    array_pair_list : go to state 127
    non_empty_array_pair_list : go to state 33
    array_pair : go to state 34


state 58
    [ 131: primitive => """ @2 . quote_list """ @3 ]*
    [ 147: quote_list => . quote_list encaps ]
    [ 148: quote_list => . ]
    default action: reduce with rule 148
    quote_list : go to state 128


state 59
    [ 134: primitive => "`" @4 . quote_list "`" @5 ]*
    [ 147: quote_list => . quote_list encaps ]
    [ 148: quote_list => . ]
    default action: reduce with rule 148
    quote_list : go to state 129


state 60
    [ 138: primitive => <HEREDOC_HEADER> @6 . @7 heredoc_list <END_OF_HEREDOC> @8 ]*
    [ 136: @7 => . ]
    default action: reduce with rule 136
    @7 : go to state 130


state 61
    [ 142: primitive => <NOWDOC_HEADER> @9 . @10 heredoc_list <END_OF_HEREDOC> @11 ]*
    [ 140: @10 => . ]
    default action: reduce with rule 140
    @10 : go to state 131


state 62
    [ 57: function_call => callable_expr "(" . argument_list ")" ]*
    [ 58: argument_list => . ]
    [ 59: argument_list => . non_empty_argument_list ]
    [ 60: non_empty_argument_list => . non_empty_argument_list "," expr ]
    [ 61: non_empty_argument_list => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 58
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 32
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    argument_list : go to state 132
    non_empty_argument_list : go to state 31
    expr_without_var : go to state 37
    primitive : go to state 47


state 63
    [ 46: simple_var => "$" "{" . expr "}" ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 133
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 64
    [ 47: simple_var => "$" simple_var . ]*
    default action: reduce with rule 47


state 65
    [ 24: echo_expr_list => echo_expr_list "," expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 24
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 66
    [ 113: function_declaration_statement => "function" <NAME> "(" parameter_list . ")" "{" statement_list "}" ]*
    no default action
    ")" : shift, and go to state 134


state 67
    [ 116: non_empty_parameter_list => non_empty_parameter_list "," . parameter ]*
    [ 118: parameter => . <VARIABLE> ]
    no default action
    <VARIABLE> : shift, and go to state 28
    parameter : go to state 136


state 68
    [ 39: dereferencable => "(" expr ")" . ]*
    default action: reduce with rule 39


state 69
    [ 60: non_empty_argument_list => non_empty_argument_list "," . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 152
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 70
    [ 160: non_empty_array_pair_list => non_empty_array_pair_list "," . array_pair ]*
    [ 162: array_pair => . expr ]
    [ 163: array_pair => . expr "=>" expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 35
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47
    array_pair : go to state 153


state 71
    [ 163: array_pair => expr "=>" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 154
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 72
    [ 147: quote_list => quote_list encaps . ]*
    default action: reduce with rule 147


state 73
    [ 74: expr_without_var => expr "?" . expr ":" expr ]*
    [ 75: expr_without_var => expr "?" . ":" expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    ":" : shift, and go to state 164
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 163
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 74
    [ 76: expr_without_var => expr ">" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 165
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 75
    [ 77: expr_without_var => expr "<" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 166
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 76
    [ 78: expr_without_var => expr ">=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 167
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 77
    [ 79: expr_without_var => expr "<=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 168
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 78
    [ 80: expr_without_var => expr "==" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 169
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 79
    [ 81: expr_without_var => expr "===" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 170
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 80
    [ 82: expr_without_var => expr "!=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 171
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 81
    [ 83: expr_without_var => expr "!==" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 172
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 82
    [ 84: expr_without_var => expr "^" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 173
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 83
    [ 85: expr_without_var => expr "|" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 174
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 84
    [ 86: expr_without_var => expr "&" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 175
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 85
    [ 87: expr_without_var => expr ">>" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 176
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 86
    [ 88: expr_without_var => expr "<<" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 177
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 87
    [ 89: expr_without_var => expr "&&" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 178
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 88
    [ 90: expr_without_var => expr "||" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 179
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 89
    [ 91: expr_without_var => expr "OR" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 180
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 90
    [ 92: expr_without_var => expr "XOR" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 181
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 91
    [ 93: expr_without_var => expr "AND" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 182
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 92
    [ 94: expr_without_var => expr "+" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 183
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 93
    [ 95: expr_without_var => expr "-" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 184
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 94
    [ 96: expr_without_var => expr "*" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 185
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 95
    [ 97: expr_without_var => expr "/" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 186
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 96
    [ 98: expr_without_var => expr "%" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 187
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 97
    [ 99: expr_without_var => expr "**" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 188
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 98
    [ 100: expr_without_var => expr "." . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 189
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 99
    [ 62: expr_without_var => var "=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 190
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 100
    [ 63: expr_without_var => var "+=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 191
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 101
    [ 64: expr_without_var => var "-=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 192
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 102
    [ 65: expr_without_var => var "**=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 193
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 103
    [ 66: expr_without_var => var "*=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 194
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 104
    [ 67: expr_without_var => var "/=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 195
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 105
    [ 68: expr_without_var => var "&=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 196
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 106
    [ 69: expr_without_var => var "|=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 197
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 107
    [ 70: expr_without_var => var "^=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 198
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 108
    [ 71: expr_without_var => var ">>=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 199
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 109
    [ 72: expr_without_var => var "<<=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 200
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 110
    [ 73: expr_without_var => var "%=" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 201
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 111
    [ 108: expr_without_var => var "++" . ]*
    default action: reduce with rule 108


state 112
    [ 109: expr_without_var => var "--" . ]*
    default action: reduce with rule 109


state 113
    [ 41: var => dereferencable arrow_and_property . ]*
    [ 44: callable_variable => dereferencable arrow_and_property . "(" argument_list ")" ]*
    default action: reduce with rule 41
    "(" : shift, and go to state 202


state 114
    [ 43: callable_variable => dereferencable "[" . optional_expr "]" ]*
    [ 54: optional_expr => . ]
    [ 55: optional_expr => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 54
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 29
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    optional_expr : go to state 203
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 115
    [ 50: arrow_and_property => "->" . @0 property_name @1 ]*
    [ 48: @0 => . ]
    default action: reduce with rule 48
    @0 : go to state 204


state 116
    [ 101: expr_without_var => "(" expr . ")" ]*
    [ 39: dereferencable => "(" expr . ")" ]*
    [ 37: callable_expr => "(" expr . ")" ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    ")" : shift, and go to state 205
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 117
    [ 102: expr_without_var => "+" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 102


state 118
    [ 103: expr_without_var => "-" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 103


state 119
    [ 104: expr_without_var => "!" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 104
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 120
    [ 105: expr_without_var => "~" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 105
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 121
    [ 106: expr_without_var => "++" var . ]*
    [ 38: dereferencable => var . ]*
    default action: reduce with rule 106
    "->" : reduce with rule 38
    "[" : reduce with rule 38


state 122
    [ 40: var => callable_variable . ]*
    default action: reduce with rule 40


state 123
    [ 107: expr_without_var => "--" var . ]*
    [ 38: dereferencable => var . ]*
    default action: reduce with rule 107
    "->" : reduce with rule 38
    "[" : reduce with rule 38


state 124
    [ 111: expr_without_var => "function" "(" . parameter_list ")" lexical_vars "{" statement_list "}" ]*
    [ 114: parameter_list => . ]
    [ 115: parameter_list => . non_empty_parameter_list ]
    [ 116: non_empty_parameter_list => . non_empty_parameter_list "," parameter ]
    [ 117: non_empty_parameter_list => . parameter ]
    [ 118: parameter => . <VARIABLE> ]
    default action: reduce with rule 114
    <VARIABLE> : shift, and go to state 28
    parameter_list : go to state 206
    non_empty_parameter_list : go to state 26
    parameter : go to state 27


state 125
    [ 56: function_call => <NAME> "(" . argument_list ")" ]*
    [ 58: argument_list => . ]
    [ 59: argument_list => . non_empty_argument_list ]
    [ 60: non_empty_argument_list => . non_empty_argument_list "," expr ]
    [ 61: non_empty_argument_list => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 58
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 32
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    argument_list : go to state 207
    non_empty_argument_list : go to state 31
    expr_without_var : go to state 37
    primitive : go to state 47


state 126
    [ 127: primitive => "[" array_pair_list . "]" ]*
    no default action
    "]" : shift, and go to state 208


state 127
    [ 128: primitive => "list" "(" array_pair_list . ")" ]*
    no default action
    ")" : shift, and go to state 209


state 128
    [ 131: primitive => """ @2 quote_list . """ @3 ]*
    [ 147: quote_list => quote_list . encaps ]*
    [ 149: encaps => . <ANY_CONTENT> ]
    [ 150: encaps => . <VARIABLE_IN_STRING> ]
    [ 151: encaps => . <PROPERTY_IN_STRING> ]
    [ 154: encaps => . <OFFSET_IN_STRING> @12 expr "]" @13 ]
    [ 157: encaps => . "${" @14 expr "}" @15 ]
    no default action
    """ : shift, and go to state 210
    <ANY_CONTENT> : shift, and go to state 158
    <VARIABLE_IN_STRING> : shift, and go to state 159
    <PROPERTY_IN_STRING> : shift, and go to state 160
    <OFFSET_IN_STRING> : shift, and go to state 161
    "${" : shift, and go to state 162
    encaps : go to state 72


state 129
    [ 134: primitive => "`" @4 quote_list . "`" @5 ]*
    [ 147: quote_list => quote_list . encaps ]*
    [ 149: encaps => . <ANY_CONTENT> ]
    [ 150: encaps => . <VARIABLE_IN_STRING> ]
    [ 151: encaps => . <PROPERTY_IN_STRING> ]
    [ 154: encaps => . <OFFSET_IN_STRING> @12 expr "]" @13 ]
    [ 157: encaps => . "${" @14 expr "}" @15 ]
    no default action
    "`" : shift, and go to state 211
    <ANY_CONTENT> : shift, and go to state 158
    <VARIABLE_IN_STRING> : shift, and go to state 159
    <PROPERTY_IN_STRING> : shift, and go to state 160
    <OFFSET_IN_STRING> : shift, and go to state 161
    "${" : shift, and go to state 162
    encaps : go to state 72


state 130
    [ 138: primitive => <HEREDOC_HEADER> @6 @7 . heredoc_list <END_OF_HEREDOC> @8 ]*
    [ 143: heredoc_list => . heredoc_list heredoc_item ]
    [ 144: heredoc_list => . ]
    default action: reduce with rule 144
    heredoc_list : go to state 212


state 131
    [ 142: primitive => <NOWDOC_HEADER> @9 @10 . heredoc_list <END_OF_HEREDOC> @11 ]*
    [ 143: heredoc_list => . heredoc_list heredoc_item ]
    [ 144: heredoc_list => . ]
    default action: reduce with rule 144
    heredoc_list : go to state 213


state 132
    [ 57: function_call => callable_expr "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 214


state 133
    [ 46: simple_var => "$" "{" expr . "}" ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "}" : shift, and go to state 215
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 134
    [ 113: function_declaration_statement => "function" <NAME> "(" parameter_list ")" . "{" statement_list "}" ]*
    no default action
    "{" : shift, and go to state 216


state 135
    [ 120: lexical_vars => "use" . "(" lexical_var_list ")" ]*
    no default action
    "(" : shift, and go to state 217


state 136
    [ 116: non_empty_parameter_list => non_empty_parameter_list "," parameter . ]*
    default action: reduce with rule 116


state 137
    [ 9: statement => "{" . statement_list "}" ]*
    [ 7: statement_list => . statement_list statement ]
    [ 8: statement_list => . ]
    default action: reduce with rule 8
    statement_list : go to state 218


state 138
    [ 10: statement => ";" . ]*
    default action: reduce with rule 10


state 139
    [ 11: statement => expr . ";" ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    ";" : shift, and go to state 219
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 140
    [ 12: statement => inline_html_list . ]*
    [ 22: inline_html_list => inline_html_list . <INLINE_HTML> ]*
    default action: reduce with rule 12
    <INLINE_HTML> : shift, and go to state 220


state 141
    [ 13: statement => "<?=" . expr <INLINE_HTML> ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 221
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 142
    [ 14: statement => "echo" . echo_expr_list ";" ]*
    [ 24: echo_expr_list => . echo_expr_list "," expr ]
    [ 25: echo_expr_list => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    echo_expr_list : go to state 222
    expr : go to state 10
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 143
    [ 15: statement => if_statement . ]*
    default action: reduce with rule 15


state 144
    [ 16: statement => "while" . "(" expr ")" statement ]*
    no default action
    "(" : shift, and go to state 223


state 145
    [ 17: statement => "do" . statement "while" "(" expr ")" ";" ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 224
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 146
    [ 18: statement => "for" . "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]*
    no default action
    "(" : shift, and go to state 225


state 147
    [ 19: statement => "return" . optional_expr ";" ]*
    [ 54: optional_expr => . ]
    [ 55: optional_expr => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 54
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 29
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    optional_expr : go to state 226
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 148
    [ 20: statement => "break" . optional_num ";" ]*
    [ 26: optional_num => . <INT> ]
    [ 27: optional_num => . ]
    default action: reduce with rule 27
    <INT> : shift, and go to state 11
    optional_num : go to state 227


state 149
    [ 21: statement => "continue" . optional_num ";" ]*
    [ 26: optional_num => . <INT> ]
    [ 27: optional_num => . ]
    default action: reduce with rule 27
    <INT> : shift, and go to state 11
    optional_num : go to state 228


state 150
    [ 23: inline_html_list => <INLINE_HTML> . ]*
    default action: reduce with rule 23


state 151
    [ 28: if_statement => "if" . "(" expr ")" statement ]*
    [ 29: if_statement => "if" . "(" expr ")" statement "else" statement ]*
    no default action
    "(" : shift, and go to state 229


state 152
    [ 60: non_empty_argument_list => non_empty_argument_list "," expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 60
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 153
    [ 160: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair . ]*
    default action: reduce with rule 160


state 154
    [ 163: array_pair => expr "=>" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 163
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 155
    [ 143: heredoc_list => heredoc_list heredoc_item . ]*
    default action: reduce with rule 143


state 156
    [ 145: heredoc_item => <HEREDOC_END_LABEL> . ]*
    default action: reduce with rule 145


state 157
    [ 146: heredoc_item => encaps . ]*
    default action: reduce with rule 146


state 158
    [ 149: encaps => <ANY_CONTENT> . ]*
    default action: reduce with rule 149


state 159
    [ 150: encaps => <VARIABLE_IN_STRING> . ]*
    default action: reduce with rule 150


state 160
    [ 151: encaps => <PROPERTY_IN_STRING> . ]*
    default action: reduce with rule 151


state 161
    [ 154: encaps => <OFFSET_IN_STRING> . @12 expr "]" @13 ]*
    [ 152: @12 => . ]
    default action: reduce with rule 152
    @12 : go to state 230


state 162
    [ 157: encaps => "${" . @14 expr "}" @15 ]*
    [ 155: @14 => . ]
    default action: reduce with rule 155
    @14 : go to state 231


state 163
    [ 74: expr_without_var => expr "?" expr . ":" expr ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    ":" : shift, and go to state 232
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 164
    [ 75: expr_without_var => expr "?" ":" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 233
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 165
    [ 76: expr_without_var => expr ">" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 76
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 166
    [ 77: expr_without_var => expr "<" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 77
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 167
    [ 78: expr_without_var => expr ">=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 78
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 168
    [ 79: expr_without_var => expr "<=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 79
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 169
    [ 80: expr_without_var => expr "==" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 80
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 170
    [ 81: expr_without_var => expr "===" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 81
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 171
    [ 82: expr_without_var => expr "!=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 82
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 172
    [ 83: expr_without_var => expr "!==" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 83
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 173
    [ 84: expr_without_var => expr "^" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 84
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 174
    [ 85: expr_without_var => expr "|" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 85
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 175
    [ 86: expr_without_var => expr "&" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 86
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 176
    [ 87: expr_without_var => expr ">>" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 87
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "." : shift, and go to state 98


state 177
    [ 88: expr_without_var => expr "<<" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 88
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    "." : shift, and go to state 98


state 178
    [ 89: expr_without_var => expr "&&" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 89
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "." : shift, and go to state 98


state 179
    [ 90: expr_without_var => expr "||" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 90
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "." : shift, and go to state 98


state 180
    [ 91: expr_without_var => expr "OR" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 91
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 181
    [ 92: expr_without_var => expr "XOR" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 92
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 182
    [ 93: expr_without_var => expr "AND" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 93
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 183
    [ 94: expr_without_var => expr "+" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 94
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96


state 184
    [ 95: expr_without_var => expr "-" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 95
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96


state 185
    [ 96: expr_without_var => expr "*" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 96
    "**" : shift, and go to state 97


state 186
    [ 97: expr_without_var => expr "/" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 97
    "**" : shift, and go to state 97


state 187
    [ 98: expr_without_var => expr "%" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 98
    "**" : shift, and go to state 97


state 188
    [ 99: expr_without_var => expr "**" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 99
    "**" : shift, and go to state 97


state 189
    [ 100: expr_without_var => expr "." expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 100
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96


state 190
    [ 62: expr_without_var => var "=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 62
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 191
    [ 63: expr_without_var => var "+=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 63
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 192
    [ 64: expr_without_var => var "-=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 64
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 193
    [ 65: expr_without_var => var "**=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 65
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 194
    [ 66: expr_without_var => var "*=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 66
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 195
    [ 67: expr_without_var => var "/=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 67
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 196
    [ 68: expr_without_var => var "&=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 68
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 197
    [ 69: expr_without_var => var "|=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 69
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 198
    [ 70: expr_without_var => var "^=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 70
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 199
    [ 71: expr_without_var => var ">>=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 71
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 200
    [ 72: expr_without_var => var "<<=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 72
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 201
    [ 73: expr_without_var => var "%=" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 73
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 202
    [ 44: callable_variable => dereferencable arrow_and_property "(" . argument_list ")" ]*
    [ 58: argument_list => . ]
    [ 59: argument_list => . non_empty_argument_list ]
    [ 60: non_empty_argument_list => . non_empty_argument_list "," expr ]
    [ 61: non_empty_argument_list => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 58
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 32
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    argument_list : go to state 234
    non_empty_argument_list : go to state 31
    expr_without_var : go to state 37
    primitive : go to state 47


state 203
    [ 43: callable_variable => dereferencable "[" optional_expr . "]" ]*
    no default action
    "]" : shift, and go to state 235


state 204
    [ 50: arrow_and_property => "->" @0 . property_name @1 ]*
    [ 51: property_name => . <NAME> ]
    [ 52: property_name => . "{" expr "}" ]
    [ 53: property_name => . simple_var ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    no default action
    <NAME> : shift, and go to state 237
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "{" : shift, and go to state 238
    simple_var : go to state 239
    property_name : go to state 236


state 205
    [ 101: expr_without_var => "(" expr ")" . ]*
    [ 39: dereferencable => "(" expr ")" . ]*
    [ 37: callable_expr => "(" expr ")" . ]*
    default action: reduce with rule 101
    "->" : reduce with rule 39
    "(" : reduce with rule 37
    "[" : reduce with rule 39


state 206
    [ 111: expr_without_var => "function" "(" parameter_list . ")" lexical_vars "{" statement_list "}" ]*
    no default action
    ")" : shift, and go to state 240


state 207
    [ 56: function_call => <NAME> "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 241


state 208
    [ 127: primitive => "[" array_pair_list "]" . ]*
    default action: reduce with rule 127


state 209
    [ 128: primitive => "list" "(" array_pair_list ")" . ]*
    default action: reduce with rule 128


state 210
    [ 131: primitive => """ @2 quote_list """ . @3 ]*
    [ 130: @3 => . ]
    default action: reduce with rule 130
    @3 : go to state 242


state 211
    [ 134: primitive => "`" @4 quote_list "`" . @5 ]*
    [ 133: @5 => . ]
    default action: reduce with rule 133
    @5 : go to state 243


state 212
    [ 138: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list . <END_OF_HEREDOC> @8 ]*
    [ 143: heredoc_list => heredoc_list . heredoc_item ]*
    [ 145: heredoc_item => . <HEREDOC_END_LABEL> ]
    [ 146: heredoc_item => . encaps ]
    [ 149: encaps => . <ANY_CONTENT> ]
    [ 150: encaps => . <VARIABLE_IN_STRING> ]
    [ 151: encaps => . <PROPERTY_IN_STRING> ]
    [ 154: encaps => . <OFFSET_IN_STRING> @12 expr "]" @13 ]
    [ 157: encaps => . "${" @14 expr "}" @15 ]
    no default action
    <ANY_CONTENT> : shift, and go to state 158
    <HEREDOC_END_LABEL> : shift, and go to state 156
    <VARIABLE_IN_STRING> : shift, and go to state 159
    <PROPERTY_IN_STRING> : shift, and go to state 160
    <OFFSET_IN_STRING> : shift, and go to state 161
    "${" : shift, and go to state 162
    <END_OF_HEREDOC> : shift, and go to state 244
    heredoc_item : go to state 155
    encaps : go to state 157


state 213
    [ 142: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list . <END_OF_HEREDOC> @11 ]*
    [ 143: heredoc_list => heredoc_list . heredoc_item ]*
    [ 145: heredoc_item => . <HEREDOC_END_LABEL> ]
    [ 146: heredoc_item => . encaps ]
    [ 149: encaps => . <ANY_CONTENT> ]
    [ 150: encaps => . <VARIABLE_IN_STRING> ]
    [ 151: encaps => . <PROPERTY_IN_STRING> ]
    [ 154: encaps => . <OFFSET_IN_STRING> @12 expr "]" @13 ]
    [ 157: encaps => . "${" @14 expr "}" @15 ]
    no default action
    <ANY_CONTENT> : shift, and go to state 158
    <HEREDOC_END_LABEL> : shift, and go to state 156
    <VARIABLE_IN_STRING> : shift, and go to state 159
    <PROPERTY_IN_STRING> : shift, and go to state 160
    <OFFSET_IN_STRING> : shift, and go to state 161
    "${" : shift, and go to state 162
    <END_OF_HEREDOC> : shift, and go to state 245
    heredoc_item : go to state 155
    encaps : go to state 157


state 214
    [ 57: function_call => callable_expr "(" argument_list ")" . ]*
    default action: reduce with rule 57


state 215
    [ 46: simple_var => "$" "{" expr "}" . ]*
    default action: reduce with rule 46


state 216
    [ 113: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" . statement_list "}" ]*
    [ 7: statement_list => . statement_list statement ]
    [ 8: statement_list => . ]
    default action: reduce with rule 8
    statement_list : go to state 248


state 217
    [ 120: lexical_vars => "use" "(" . lexical_var_list ")" ]*
    [ 121: lexical_var_list => . lexical_var_list "," <VARIABLE> ]
    [ 122: lexical_var_list => . <VARIABLE> ]
    no default action
    <VARIABLE> : shift, and go to state 250
    lexical_var_list : go to state 249


state 218
    [ 9: statement => "{" statement_list . "}" ]*
    [ 7: statement_list => statement_list . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    "}" : shift, and go to state 251
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 15
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 219
    [ 11: statement => expr ";" . ]*
    default action: reduce with rule 11


state 220
    [ 22: inline_html_list => inline_html_list <INLINE_HTML> . ]*
    default action: reduce with rule 22


state 221
    [ 13: statement => "<?=" expr . <INLINE_HTML> ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    <INLINE_HTML> : shift, and go to state 252
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 222
    [ 14: statement => "echo" echo_expr_list . ";" ]*
    [ 24: echo_expr_list => echo_expr_list . "," expr ]*
    no default action
    "," : shift, and go to state 24
    ";" : shift, and go to state 253


state 223
    [ 16: statement => "while" "(" . expr ")" statement ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 254
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 224
    [ 17: statement => "do" statement . "while" "(" expr ")" ";" ]*
    no default action
    "while" : shift, and go to state 255


state 225
    [ 18: statement => "for" "(" . for_exprs ";" for_exprs ";" for_exprs ")" statement ]*
    [ 30: for_exprs => . ]
    [ 31: for_exprs => . non_empty_for_exprs ]
    [ 32: non_empty_for_exprs => . non_empty_for_exprs "," expr ]
    [ 33: non_empty_for_exprs => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 30
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    for_exprs : go to state 256
    non_empty_for_exprs : go to state 246
    expr : go to state 247
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 226
    [ 19: statement => "return" optional_expr . ";" ]*
    no default action
    ";" : shift, and go to state 257


state 227
    [ 20: statement => "break" optional_num . ";" ]*
    no default action
    ";" : shift, and go to state 258


state 228
    [ 21: statement => "continue" optional_num . ";" ]*
    no default action
    ";" : shift, and go to state 259


state 229
    [ 28: if_statement => "if" "(" . expr ")" statement ]*
    [ 29: if_statement => "if" "(" . expr ")" statement "else" statement ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 260
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 230
    [ 154: encaps => <OFFSET_IN_STRING> @12 . expr "]" @13 ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 261
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 231
    [ 157: encaps => "${" @14 . expr "}" @15 ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 262
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 232
    [ 74: expr_without_var => expr "?" expr ":" . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 263
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 233
    [ 75: expr_without_var => expr "?" ":" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 75
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 234
    [ 44: callable_variable => dereferencable arrow_and_property "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 264


state 235
    [ 43: callable_variable => dereferencable "[" optional_expr "]" . ]*
    default action: reduce with rule 43


state 236
    [ 50: arrow_and_property => "->" @0 property_name . @1 ]*
    [ 49: @1 => . ]
    default action: reduce with rule 49
    @1 : go to state 265


state 237
    [ 51: property_name => <NAME> . ]*
    default action: reduce with rule 51


state 238
    [ 52: property_name => "{" . expr "}" ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 266
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 239
    [ 53: property_name => simple_var . ]*
    default action: reduce with rule 53


state 240
    [ 111: expr_without_var => "function" "(" parameter_list ")" . lexical_vars "{" statement_list "}" ]*
    [ 119: lexical_vars => . ]
    [ 120: lexical_vars => . "use" "(" lexical_var_list ")" ]
    default action: reduce with rule 119
    "use" : shift, and go to state 135
    lexical_vars : go to state 267


state 241
    [ 56: function_call => <NAME> "(" argument_list ")" . ]*
    default action: reduce with rule 56


state 242
    [ 131: primitive => """ @2 quote_list """ @3 . ]*
    default action: reduce with rule 131


state 243
    [ 134: primitive => "`" @4 quote_list "`" @5 . ]*
    default action: reduce with rule 134


state 244
    [ 138: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> . @8 ]*
    [ 137: @8 => . ]
    default action: reduce with rule 137
    @8 : go to state 268


state 245
    [ 142: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> . @11 ]*
    [ 141: @11 => . ]
    default action: reduce with rule 141
    @11 : go to state 269


state 246
    [ 31: for_exprs => non_empty_for_exprs . ]*
    [ 32: non_empty_for_exprs => non_empty_for_exprs . "," expr ]*
    default action: reduce with rule 31
    "," : shift, and go to state 270


state 247
    [ 33: non_empty_for_exprs => expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 33
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 248
    [ 113: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list . "}" ]*
    [ 7: statement_list => statement_list . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    "}" : shift, and go to state 271
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 15
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 249
    [ 120: lexical_vars => "use" "(" lexical_var_list . ")" ]*
    [ 121: lexical_var_list => lexical_var_list . "," <VARIABLE> ]*
    no default action
    ")" : shift, and go to state 272
    "," : shift, and go to state 273


state 250
    [ 122: lexical_var_list => <VARIABLE> . ]*
    default action: reduce with rule 122


state 251
    [ 9: statement => "{" statement_list "}" . ]*
    default action: reduce with rule 9


state 252
    [ 13: statement => "<?=" expr <INLINE_HTML> . ]*
    default action: reduce with rule 13


state 253
    [ 14: statement => "echo" echo_expr_list ";" . ]*
    default action: reduce with rule 14


state 254
    [ 16: statement => "while" "(" expr . ")" statement ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    ")" : shift, and go to state 274
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 255
    [ 17: statement => "do" statement "while" . "(" expr ")" ";" ]*
    no default action
    "(" : shift, and go to state 275


state 256
    [ 18: statement => "for" "(" for_exprs . ";" for_exprs ";" for_exprs ")" statement ]*
    no default action
    ";" : shift, and go to state 276


state 257
    [ 19: statement => "return" optional_expr ";" . ]*
    default action: reduce with rule 19


state 258
    [ 20: statement => "break" optional_num ";" . ]*
    default action: reduce with rule 20


state 259
    [ 21: statement => "continue" optional_num ";" . ]*
    default action: reduce with rule 21


state 260
    [ 28: if_statement => "if" "(" expr . ")" statement ]*
    [ 29: if_statement => "if" "(" expr . ")" statement "else" statement ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    ")" : shift, and go to state 277
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 261
    [ 154: encaps => <OFFSET_IN_STRING> @12 expr . "]" @13 ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "]" : shift, and go to state 278
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 262
    [ 157: encaps => "${" @14 expr . "}" @15 ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "}" : shift, and go to state 279
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 263
    [ 74: expr_without_var => expr "?" expr ":" expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 74
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "." : shift, and go to state 98


state 264
    [ 44: callable_variable => dereferencable arrow_and_property "(" argument_list ")" . ]*
    default action: reduce with rule 44


state 265
    [ 50: arrow_and_property => "->" @0 property_name @1 . ]*
    default action: reduce with rule 50


state 266
    [ 52: property_name => "{" expr . "}" ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "}" : shift, and go to state 280
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 267
    [ 111: expr_without_var => "function" "(" parameter_list ")" lexical_vars . "{" statement_list "}" ]*
    no default action
    "{" : shift, and go to state 281


state 268
    [ 138: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 . ]*
    default action: reduce with rule 138


state 269
    [ 142: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 . ]*
    default action: reduce with rule 142


state 270
    [ 32: non_empty_for_exprs => non_empty_for_exprs "," . expr ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 282
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 271
    [ 113: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" . ]*
    default action: reduce with rule 113


state 272
    [ 120: lexical_vars => "use" "(" lexical_var_list ")" . ]*
    default action: reduce with rule 120


state 273
    [ 121: lexical_var_list => lexical_var_list "," . <VARIABLE> ]*
    no default action
    <VARIABLE> : shift, and go to state 283


state 274
    [ 16: statement => "while" "(" expr ")" . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 284
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 275
    [ 17: statement => "do" statement "while" "(" . expr ")" ";" ]*
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    expr : go to state 285
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 276
    [ 18: statement => "for" "(" for_exprs ";" . for_exprs ";" for_exprs ")" statement ]*
    [ 30: for_exprs => . ]
    [ 31: for_exprs => . non_empty_for_exprs ]
    [ 32: non_empty_for_exprs => . non_empty_for_exprs "," expr ]
    [ 33: non_empty_for_exprs => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 30
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    for_exprs : go to state 286
    non_empty_for_exprs : go to state 246
    expr : go to state 247
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 277
    [ 28: if_statement => "if" "(" expr ")" . statement ]*
    [ 29: if_statement => "if" "(" expr ")" . statement "else" statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 287
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 278
    [ 154: encaps => <OFFSET_IN_STRING> @12 expr "]" . @13 ]*
    [ 153: @13 => . ]
    default action: reduce with rule 153
    @13 : go to state 288


state 279
    [ 157: encaps => "${" @14 expr "}" . @15 ]*
    [ 156: @15 => . ]
    default action: reduce with rule 156
    @15 : go to state 289


state 280
    [ 52: property_name => "{" expr "}" . ]*
    default action: reduce with rule 52


state 281
    [ 111: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" . statement_list "}" ]*
    [ 7: statement_list => . statement_list statement ]
    [ 8: statement_list => . ]
    default action: reduce with rule 8
    statement_list : go to state 290


state 282
    [ 32: non_empty_for_exprs => non_empty_for_exprs "," expr . ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 32
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 283
    [ 121: lexical_var_list => lexical_var_list "," <VARIABLE> . ]*
    default action: reduce with rule 121


state 284
    [ 16: statement => "while" "(" expr ")" statement . ]*
    default action: reduce with rule 16


state 285
    [ 17: statement => "do" statement "while" "(" expr . ")" ";" ]*
    [ 74: expr_without_var => expr . "?" expr ":" expr ]*
    [ 75: expr_without_var => expr . "?" ":" expr ]*
    [ 76: expr_without_var => expr . ">" expr ]*
    [ 77: expr_without_var => expr . "<" expr ]*
    [ 78: expr_without_var => expr . ">=" expr ]*
    [ 79: expr_without_var => expr . "<=" expr ]*
    [ 80: expr_without_var => expr . "==" expr ]*
    [ 81: expr_without_var => expr . "===" expr ]*
    [ 82: expr_without_var => expr . "!=" expr ]*
    [ 83: expr_without_var => expr . "!==" expr ]*
    [ 84: expr_without_var => expr . "^" expr ]*
    [ 85: expr_without_var => expr . "|" expr ]*
    [ 86: expr_without_var => expr . "&" expr ]*
    [ 87: expr_without_var => expr . ">>" expr ]*
    [ 88: expr_without_var => expr . "<<" expr ]*
    [ 89: expr_without_var => expr . "&&" expr ]*
    [ 90: expr_without_var => expr . "||" expr ]*
    [ 91: expr_without_var => expr . "OR" expr ]*
    [ 92: expr_without_var => expr . "XOR" expr ]*
    [ 93: expr_without_var => expr . "AND" expr ]*
    [ 94: expr_without_var => expr . "+" expr ]*
    [ 95: expr_without_var => expr . "-" expr ]*
    [ 96: expr_without_var => expr . "*" expr ]*
    [ 97: expr_without_var => expr . "/" expr ]*
    [ 98: expr_without_var => expr . "%" expr ]*
    [ 99: expr_without_var => expr . "**" expr ]*
    [ 100: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 92
    "-" : shift, and go to state 93
    "*" : shift, and go to state 94
    "/" : shift, and go to state 95
    "**" : shift, and go to state 97
    "?" : shift, and go to state 73
    "%" : shift, and go to state 96
    ">" : shift, and go to state 74
    "<" : shift, and go to state 75
    ">=" : shift, and go to state 76
    "<=" : shift, and go to state 77
    "==" : shift, and go to state 78
    "===" : shift, and go to state 79
    "!=" : shift, and go to state 80
    "!==" : shift, and go to state 81
    "&" : shift, and go to state 84
    "|" : shift, and go to state 83
    "^" : shift, and go to state 82
    "<<" : shift, and go to state 86
    ">>" : shift, and go to state 85
    ")" : shift, and go to state 291
    "&&" : shift, and go to state 87
    "||" : shift, and go to state 88
    "OR" : shift, and go to state 89
    "AND" : shift, and go to state 91
    "XOR" : shift, and go to state 90
    "." : shift, and go to state 98


state 286
    [ 18: statement => "for" "(" for_exprs ";" for_exprs . ";" for_exprs ")" statement ]*
    no default action
    ";" : shift, and go to state 292


state 287
    [ 28: if_statement => "if" "(" expr ")" statement . ]*
    [ 29: if_statement => "if" "(" expr ")" statement . "else" statement ]*
    default action: reduce with rule 28
    "else" : shift, and go to state 293


state 288
    [ 154: encaps => <OFFSET_IN_STRING> @12 expr "]" @13 . ]*
    default action: reduce with rule 154


state 289
    [ 157: encaps => "${" @14 expr "}" @15 . ]*
    default action: reduce with rule 157


state 290
    [ 111: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list . "}" ]*
    [ 7: statement_list => statement_list . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    "}" : shift, and go to state 294
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 15
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 291
    [ 17: statement => "do" statement "while" "(" expr ")" . ";" ]*
    no default action
    ";" : shift, and go to state 295


state 292
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" . for_exprs ")" statement ]*
    [ 30: for_exprs => . ]
    [ 31: for_exprs => . non_empty_for_exprs ]
    [ 32: non_empty_for_exprs => . non_empty_for_exprs "," expr ]
    [ 33: non_empty_for_exprs => . expr ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 30
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "!" : shift, and go to state 43
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    for_exprs : go to state 296
    non_empty_for_exprs : go to state 246
    expr : go to state 247
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 293
    [ 29: if_statement => "if" "(" expr ")" statement "else" . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 297
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 294
    [ 111: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" . ]*
    default action: reduce with rule 111


state 295
    [ 17: statement => "do" statement "while" "(" expr ")" ";" . ]*
    default action: reduce with rule 17


state 296
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs . ")" statement ]*
    no default action
    ")" : shift, and go to state 298


state 297
    [ 29: if_statement => "if" "(" expr ")" statement "else" statement . ]*
    default action: reduce with rule 29


state 298
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . inline_html_list ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" echo_expr_list ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 19: statement => . "return" optional_expr ";" ]
    [ 20: statement => . "break" optional_num ";" ]
    [ 21: statement => . "continue" optional_num ";" ]
    [ 34: expr => . var ]
    [ 35: expr => . expr_without_var ]
    [ 22: inline_html_list => . inline_html_list <INLINE_HTML> ]
    [ 23: inline_html_list => . <INLINE_HTML> ]
    [ 28: if_statement => . "if" "(" expr ")" statement ]
    [ 29: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 40: var => . callable_variable ]
    [ 41: var => . dereferencable arrow_and_property ]
    [ 62: expr_without_var => . var "=" expr ]
    [ 63: expr_without_var => . var "+=" expr ]
    [ 64: expr_without_var => . var "-=" expr ]
    [ 65: expr_without_var => . var "**=" expr ]
    [ 66: expr_without_var => . var "*=" expr ]
    [ 67: expr_without_var => . var "/=" expr ]
    [ 68: expr_without_var => . var "&=" expr ]
    [ 69: expr_without_var => . var "|=" expr ]
    [ 70: expr_without_var => . var "^=" expr ]
    [ 71: expr_without_var => . var ">>=" expr ]
    [ 72: expr_without_var => . var "<<=" expr ]
    [ 73: expr_without_var => . var "%=" expr ]
    [ 74: expr_without_var => . expr "?" expr ":" expr ]
    [ 75: expr_without_var => . expr "?" ":" expr ]
    [ 76: expr_without_var => . expr ">" expr ]
    [ 77: expr_without_var => . expr "<" expr ]
    [ 78: expr_without_var => . expr ">=" expr ]
    [ 79: expr_without_var => . expr "<=" expr ]
    [ 80: expr_without_var => . expr "==" expr ]
    [ 81: expr_without_var => . expr "===" expr ]
    [ 82: expr_without_var => . expr "!=" expr ]
    [ 83: expr_without_var => . expr "!==" expr ]
    [ 84: expr_without_var => . expr "^" expr ]
    [ 85: expr_without_var => . expr "|" expr ]
    [ 86: expr_without_var => . expr "&" expr ]
    [ 87: expr_without_var => . expr ">>" expr ]
    [ 88: expr_without_var => . expr "<<" expr ]
    [ 89: expr_without_var => . expr "&&" expr ]
    [ 90: expr_without_var => . expr "||" expr ]
    [ 91: expr_without_var => . expr "OR" expr ]
    [ 92: expr_without_var => . expr "XOR" expr ]
    [ 93: expr_without_var => . expr "AND" expr ]
    [ 94: expr_without_var => . expr "+" expr ]
    [ 95: expr_without_var => . expr "-" expr ]
    [ 96: expr_without_var => . expr "*" expr ]
    [ 97: expr_without_var => . expr "/" expr ]
    [ 98: expr_without_var => . expr "%" expr ]
    [ 99: expr_without_var => . expr "**" expr ]
    [ 100: expr_without_var => . expr "." expr ]
    [ 101: expr_without_var => . "(" expr ")" ]
    [ 102: expr_without_var => . "+" expr ]
    [ 103: expr_without_var => . "-" expr ]
    [ 104: expr_without_var => . "!" expr ]
    [ 105: expr_without_var => . "~" expr ]
    [ 106: expr_without_var => . "++" var ]
    [ 107: expr_without_var => . "--" var ]
    [ 108: expr_without_var => . var "++" ]
    [ 109: expr_without_var => . var "--" ]
    [ 110: expr_without_var => . primitive ]
    [ 111: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 112: expr_without_var => . function_call ]
    [ 42: callable_variable => . simple_var ]
    [ 43: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 44: callable_variable => . dereferencable arrow_and_property "(" argument_list ")" ]
    [ 38: dereferencable => . var ]
    [ 39: dereferencable => . "(" expr ")" ]
    [ 123: primitive => . <INT> ]
    [ 124: primitive => . <DECIMAL> ]
    [ 125: primitive => . <STRING> ]
    [ 126: primitive => . <NAME> ]
    [ 127: primitive => . "[" array_pair_list "]" ]
    [ 128: primitive => . "list" "(" array_pair_list ")" ]
    [ 131: primitive => . """ @2 quote_list """ @3 ]
    [ 134: primitive => . "`" @4 quote_list "`" @5 ]
    [ 138: primitive => . <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]
    [ 142: primitive => . <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]
    [ 56: function_call => . <NAME> "(" argument_list ")" ]
    [ 57: function_call => . callable_expr "(" argument_list ")" ]
    [ 45: simple_var => . <VARIABLE> ]
    [ 46: simple_var => . "$" "{" expr "}" ]
    [ 47: simple_var => . "$" simple_var ]
    [ 36: callable_expr => . callable_variable ]
    [ 37: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 150
    "<?=" : shift, and go to state 141
    <NAME> : shift, and go to state 54
    <DECIMAL> : shift, and go to state 52
    <INT> : shift, and go to state 51
    <STRING> : shift, and go to state 53
    """ : shift, and go to state 17
    "`" : shift, and go to state 18
    "$" : shift, and go to state 23
    <VARIABLE> : shift, and go to state 22
    "+" : shift, and go to state 41
    "-" : shift, and go to state 42
    "~" : shift, and go to state 44
    "++" : shift, and go to state 45
    "--" : shift, and go to state 46
    <HEREDOC_HEADER> : shift, and go to state 19
    <NOWDOC_HEADER> : shift, and go to state 20
    "(" : shift, and go to state 40
    "[" : shift, and go to state 55
    "{" : shift, and go to state 137
    ";" : shift, and go to state 138
    "!" : shift, and go to state 43
    "if" : shift, and go to state 151
    "echo" : shift, and go to state 142
    "while" : shift, and go to state 144
    "do" : shift, and go to state 145
    "for" : shift, and go to state 146
    "function" : shift, and go to state 48
    "list" : shift, and go to state 16
    "break" : shift, and go to state 148
    "continue" : shift, and go to state 149
    "return" : shift, and go to state 147
    statement : go to state 299
    inline_html_list : go to state 140
    if_statement : go to state 143
    expr : go to state 139
    callable_expr : go to state 21
    dereferencable : go to state 39
    var : go to state 36
    callable_variable : go to state 38
    simple_var : go to state 50
    function_call : go to state 49
    expr_without_var : go to state 37
    primitive : go to state 47


state 299
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement . ]*
    default action: reduce with rule 18


