\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c1, \xa -> c2, 
\xb -> c0, \xc -> c0, \xd -> c3, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c1, 
'!' -> c0, '"' -> c0, '#' -> c0, '$' -> c0, '%' -> c0, '&' -> c0, ''' -> c0, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, 
',' -> c0, '-' -> c0, '.' -> c0, '/' -> c0, '0' -> c0, '1' -> c0, '2' -> c0, '3' -> c0, '4' -> c0, '5' -> c0, '6' -> c0, 
'7' -> c0, '8' -> c0, '9' -> c0, ':' -> c0, ';' -> c0, '<' -> c4, '=' -> c5, '>' -> c0, '?' -> c6, '@' -> c0, 'A' -> c0, 
'B' -> c0, 'C' -> c0, 'D' -> c0, 'E' -> c0, 'F' -> c0, 'G' -> c0, 'H' -> c0, 'I' -> c0, 'J' -> c0, 'K' -> c0, 'L' -> c0, 
'M' -> c0, 'N' -> c0, 'O' -> c0, 'P' -> c0, 'Q' -> c0, 'R' -> c0, 'S' -> c0, 'T' -> c0, 'U' -> c0, 'V' -> c0, 'W' -> c0, 
'X' -> c0, 'Y' -> c0, 'Z' -> c0, '[' -> c0, '\' -> c0, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c0, 'a' -> c0, 'b' -> c0, 
'c' -> c0, 'd' -> c0, 'e' -> c0, 'f' -> c0, 'g' -> c0, 'h' -> c7, 'i' -> c0, 'j' -> c0, 'k' -> c0, 'l' -> c0, 'm' -> c0, 
'n' -> c0, 'o' -> c0, 'p' -> c8, 'q' -> c0, 'r' -> c0, 's' -> c0, 't' -> c0, 'u' -> c0, 'v' -> c0, 'w' -> c0, 'x' -> c0, 
'y' -> c0, 'z' -> c0, '{' -> c0, '|' -> c0, '}' -> c0, '~' -> c0, \x7f -> c0, \x80 -> c0, \x81 -> c0, \x82 -> c0, \x83 -> c0, 
\x84 -> c0, \x85 -> c0, \x86 -> c0, \x87 -> c0, \x88 -> c0, \x89 -> c0, \x8a -> c0, \x8b -> c0, \x8c -> c0, \x8d -> c0, \x8e -> c0, 
\x8f -> c0, \x90 -> c0, \x91 -> c0, \x92 -> c0, \x93 -> c0, \x94 -> c0, \x95 -> c0, \x96 -> c0, \x97 -> c0, \x98 -> c0, \x99 -> c0, 
\x9a -> c0, \x9b -> c0, \x9c -> c0, \x9d -> c0, \x9e -> c0, \x9f -> c0, \xa0 -> c0, \xa1 -> c0, \xa2 -> c0, \xa3 -> c0, \xa4 -> c0, 
\xa5 -> c0, \xa6 -> c0, \xa7 -> c0, \xa8 -> c0, \xa9 -> c0, \xaa -> c0, \xab -> c0, \xac -> c0, \xad -> c0, \xae -> c0, \xaf -> c0, 
\xb0 -> c0, \xb1 -> c0, \xb2 -> c0, \xb3 -> c0, \xb4 -> c0, \xb5 -> c0, \xb6 -> c0, \xb7 -> c0, \xb8 -> c0, \xb9 -> c0, \xba -> c0, 
\xbb -> c0, \xbc -> c0, \xbd -> c0, \xbe -> c0, \xbf -> c0, \xc0 -> c0, \xc1 -> c0, \xc2 -> c0, \xc3 -> c0, \xc4 -> c0, \xc5 -> c0, 
\xc6 -> c0, \xc7 -> c0, \xc8 -> c0, \xc9 -> c0, \xca -> c0, \xcb -> c0, \xcc -> c0, \xcd -> c0, \xce -> c0, \xcf -> c0, \xd0 -> c0, 
\xd1 -> c0, \xd2 -> c0, \xd3 -> c0, \xd4 -> c0, \xd5 -> c0, \xd6 -> c0, \xd7 -> c0, \xd8 -> c0, \xd9 -> c0, \xda -> c0, \xdb -> c0, 
\xdc -> c0, \xdd -> c0, \xde -> c0, \xdf -> c0, \xe0 -> c0, \xe1 -> c0, \xe2 -> c0, \xe3 -> c0, \xe4 -> c0, \xe5 -> c0, \xe6 -> c0, 
\xe7 -> c0, \xe8 -> c0, \xe9 -> c0, \xea -> c0, \xeb -> c0, \xec -> c0, \xed -> c0, \xee -> c0, \xef -> c0, \xf0 -> c0, \xf1 -> c0, 
\xf2 -> c0, \xf3 -> c0, \xf4 -> c0, \xf5 -> c0, \xf6 -> c0, \xf7 -> c0, \xf8 -> c0, \xf9 -> c0, \xfa -> c0, \xfb -> c0, \xfc -> c0, 
\xfd -> c0, \xfe -> c0, \xff -> c0, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 1
    c2: state 1
    c3: state 1
    c4: state 2
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
state 1:
    end = 0
    c0: state 1
    c1: state 1
    c2: state 1
    c3: state 1
    c5: state 1
    c6: state 1
    c7: state 1
    c8: state 1
state 2:
    end = 0
    c6: state 3
state 3:
    c5: state 4
    c8: state 5
state 4:
    end = 2
state 5:
    c7: state 6
state 6:
    c8: state 7
state 7:
    c1: state 8
    c2: state 9
    c3: state 10
state 8:
    end = 1
state 9:
    end = 1
state 10:
    end = 1
    c2: state 11
state 11:
    end = 1


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c1, \xa -> c2, 
\xb -> c0, \xc -> c0, \xd -> c3, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c1, 
'!' -> c4, '"' -> c5, '#' -> c0, '$' -> c6, '%' -> c7, '&' -> c8, ''' -> c9, '(' -> c10, ')' -> c11, '*' -> c12, '+' -> c13, 
',' -> c14, '-' -> c15, '.' -> c16, '/' -> c17, '0' -> c18, '1' -> c18, '2' -> c18, '3' -> c18, '4' -> c18, '5' -> c18, '6' -> c18, 
'7' -> c18, '8' -> c18, '9' -> c18, ':' -> c19, ';' -> c20, '<' -> c21, '=' -> c22, '>' -> c23, '?' -> c24, '@' -> c0, 'A' -> c25, 
'B' -> c26, 'C' -> c26, 'D' -> c27, 'E' -> c28, 'F' -> c26, 'G' -> c29, 'H' -> c29, 'I' -> c29, 'J' -> c29, 'K' -> c29, 'L' -> c29, 
'M' -> c29, 'N' -> c30, 'O' -> c31, 'P' -> c29, 'Q' -> c29, 'R' -> c32, 'S' -> c29, 'T' -> c29, 'U' -> c29, 'V' -> c29, 'W' -> c29, 
'X' -> c33, 'Y' -> c29, 'Z' -> c29, '[' -> c34, '\' -> c35, ']' -> c36, '^' -> c37, '_' -> c38, '`' -> c39, 'a' -> c40, 'b' -> c41, 
'c' -> c42, 'd' -> c43, 'e' -> c44, 'f' -> c45, 'g' -> c29, 'h' -> c46, 'i' -> c47, 'j' -> c29, 'k' -> c29, 'l' -> c48, 'm' -> c49, 
'n' -> c50, 'o' -> c51, 'p' -> c52, 'q' -> c29, 'r' -> c53, 's' -> c54, 't' -> c55, 'u' -> c56, 'v' -> c29, 'w' -> c57, 'x' -> c58, 
'y' -> c29, 'z' -> c29, '{' -> c59, '|' -> c60, '}' -> c61, '~' -> c62, \x7f -> c0, \x80 -> c29, \x81 -> c29, \x82 -> c29, \x83 -> c29, 
\x84 -> c29, \x85 -> c29, \x86 -> c29, \x87 -> c29, \x88 -> c29, \x89 -> c29, \x8a -> c29, \x8b -> c29, \x8c -> c29, \x8d -> c29, \x8e -> c29, 
\x8f -> c29, \x90 -> c29, \x91 -> c29, \x92 -> c29, \x93 -> c29, \x94 -> c29, \x95 -> c29, \x96 -> c29, \x97 -> c29, \x98 -> c29, \x99 -> c29, 
\x9a -> c29, \x9b -> c29, \x9c -> c29, \x9d -> c29, \x9e -> c29, \x9f -> c29, \xa0 -> c29, \xa1 -> c29, \xa2 -> c29, \xa3 -> c29, \xa4 -> c29, 
\xa5 -> c29, \xa6 -> c29, \xa7 -> c29, \xa8 -> c29, \xa9 -> c29, \xaa -> c29, \xab -> c29, \xac -> c29, \xad -> c29, \xae -> c29, \xaf -> c29, 
\xb0 -> c29, \xb1 -> c29, \xb2 -> c29, \xb3 -> c29, \xb4 -> c29, \xb5 -> c29, \xb6 -> c29, \xb7 -> c29, \xb8 -> c29, \xb9 -> c29, \xba -> c29, 
\xbb -> c29, \xbc -> c29, \xbd -> c29, \xbe -> c29, \xbf -> c29, \xc0 -> c29, \xc1 -> c29, \xc2 -> c29, \xc3 -> c29, \xc4 -> c29, \xc5 -> c29, 
\xc6 -> c29, \xc7 -> c29, \xc8 -> c29, \xc9 -> c29, \xca -> c29, \xcb -> c29, \xcc -> c29, \xcd -> c29, \xce -> c29, \xcf -> c29, \xd0 -> c29, 
\xd1 -> c29, \xd2 -> c29, \xd3 -> c29, \xd4 -> c29, \xd5 -> c29, \xd6 -> c29, \xd7 -> c29, \xd8 -> c29, \xd9 -> c29, \xda -> c29, \xdb -> c29, 
\xdc -> c29, \xdd -> c29, \xde -> c29, \xdf -> c29, \xe0 -> c29, \xe1 -> c29, \xe2 -> c29, \xe3 -> c29, \xe4 -> c29, \xe5 -> c29, \xe6 -> c29, 
\xe7 -> c29, \xe8 -> c29, \xe9 -> c29, \xea -> c29, \xeb -> c29, \xec -> c29, \xed -> c29, \xee -> c29, \xef -> c29, \xf0 -> c29, \xf1 -> c29, 
\xf2 -> c29, \xf3 -> c29, \xf4 -> c29, \xf5 -> c29, \xf6 -> c29, \xf7 -> c29, \xf8 -> c29, \xf9 -> c29, \xfa -> c29, \xfb -> c29, \xfc -> c29, 
\xfd -> c29, \xfe -> c29, \xff -> c29, 
\x256-\xInfinity -> c0, 
state 0:
    c1: state 1
    c2: state 2
    c3: state 3
    c4: state 4
    c5: state 5
    c6: state 6
    c7: state 7
    c8: state 8
    c9: state 9
    c10: state 10
    c11: state 11
    c12: state 12
    c13: state 13
    c14: state 14
    c15: state 15
    c16: state 16
    c17: state 17
    c18: state 18
    c19: state 19
    c20: state 20
    c21: state 21
    c22: state 22
    c23: state 23
    c24: state 24
    c25: state 25
    c26: state 26
    c27: state 26
    c28: state 26
    c29: state 26
    c30: state 26
    c31: state 27
    c32: state 26
    c33: state 28
    c34: state 29
    c36: state 30
    c37: state 31
    c38: state 32
    c39: state 33
    c40: state 26
    c41: state 26
    c42: state 26
    c43: state 34
    c44: state 35
    c45: state 36
    c46: state 26
    c47: state 37
    c48: state 38
    c49: state 26
    c50: state 26
    c51: state 26
    c52: state 26
    c53: state 26
    c54: state 26
    c55: state 26
    c56: state 39
    c57: state 40
    c58: state 26
    c59: state 41
    c60: state 42
    c61: state 43
    c62: state 44
state 1:
    end = 3
    c1: state 1
    c2: state 2
    c3: state 3
state 2:
    end = 3
    c1: state 1
    c2: state 2
    c3: state 3
state 3:
    end = 3
    c1: state 1
    c2: state 45
    c3: state 3
state 4:
    end = 66
    c22: state 46
state 5:
    end = 9
state 6:
    end = 11
    c25: state 47
    c26: state 47
    c27: state 47
    c28: state 47
    c29: state 47
    c30: state 47
    c31: state 47
    c32: state 47
    c33: state 47
    c40: state 47
    c41: state 47
    c42: state 47
    c43: state 47
    c44: state 47
    c45: state 47
    c46: state 47
    c47: state 47
    c48: state 47
    c49: state 47
    c50: state 47
    c51: state 47
    c52: state 47
    c53: state 47
    c54: state 47
    c55: state 47
    c56: state 47
    c57: state 47
    c58: state 47
state 7:
    end = 21
    c22: state 48
state 8:
    end = 42
    c8: state 49
    c22: state 50
state 9:
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 52
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 51
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 51
    c26: state 51
    c27: state 51
    c28: state 51
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 53
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 51
    c41: state 51
    c42: state 51
    c43: state 51
    c44: state 51
    c45: state 51
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
state 10:
    end = 53
state 11:
    end = 54
state 12:
    end = 16
    c12: state 54
    c22: state 55
state 13:
    end = 14
    c13: state 56
    c22: state 57
state 14:
    end = 57
state 15:
    end = 15
    c15: state 58
    c22: state 59
    c23: state 60
state 16:
    c18: state 61
state 17:
    end = 17
    c22: state 62
state 18:
    end = 7
    c16: state 63
    c18: state 18
    c28: state 64
    c44: state 64
state 19:
    end = 20
state 20:
    end = 60
state 21:
    end = 23
    c21: state 65
    c22: state 66
state 22:
    end = 30
    c22: state 67
    c23: state 68
state 23:
    end = 22
    c22: state 69
    c23: state 70
state 24:
    end = 19
    c23: state 71
state 25:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 73
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 26:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 27:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 74
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 28:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 75
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 29:
    end = 55
state 30:
    end = 56
state 31:
    end = 44
    c22: state 76
state 32:
    c38: state 77
state 33:
    end = 10
state 34:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 78
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 35:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 79
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 80
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 36:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 81
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 82
    c57: state 72
    c58: state 72
state 37:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 83
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 38:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 84
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 39:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 85
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 40:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 86
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 41:
    end = 58
state 42:
    end = 43
    c22: state 87
    c60: state 88
state 43:
    end = 59
state 44:
    end = 45
state 45:
    end = 3
    c1: state 1
    c2: state 2
    c3: state 3
state 46:
    end = 28
    c22: state 89
state 47:
    end = 12
    c18: state 90
    c25: state 90
    c26: state 90
    c27: state 90
    c28: state 90
    c29: state 90
    c30: state 90
    c31: state 90
    c32: state 90
    c33: state 90
    c40: state 90
    c41: state 90
    c42: state 90
    c43: state 90
    c44: state 90
    c45: state 90
    c46: state 90
    c47: state 90
    c48: state 90
    c49: state 90
    c50: state 90
    c51: state 90
    c52: state 90
    c53: state 90
    c54: state 90
    c55: state 90
    c56: state 90
    c57: state 90
    c58: state 90
state 48:
    end = 41
state 49:
    end = 61
state 50:
    end = 36
state 51:
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 52
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 51
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 51
    c26: state 51
    c27: state 51
    c28: state 51
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 53
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 51
    c41: state 51
    c42: state 51
    c43: state 51
    c44: state 51
    c45: state 51
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
state 52:
    end = 8
state 53:
    c5: state 91
    c9: state 91
    c35: state 91
    c41: state 91
    c45: state 91
    c50: state 91
    c53: state 91
    c55: state 91
    c56: state 92
    c58: state 92
state 54:
    end = 18
    c22: state 93
state 55:
    end = 33
state 56:
    end = 46
state 57:
    end = 31
state 58:
    end = 47
state 59:
    end = 32
state 60:
    end = 52
state 61:
    end = 6
    c18: state 61
    c28: state 64
    c44: state 64
state 62:
    end = 35
state 63:
    end = 6
    c18: state 94
    c28: state 64
    c44: state 64
state 64:
    c13: state 95
    c15: state 95
    c18: state 96
state 65:
    end = 48
    c21: state 97
    c22: state 98
state 66:
    end = 25
state 67:
    end = 26
    c22: state 99
state 68:
    end = 51
state 69:
    end = 24
state 70:
    end = 49
    c22: state 100
state 71:
    end = 4
state 72:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 73:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 101
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 74:
    end = 63
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 75:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 102
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 76:
    end = 38
state 77:
    c46: state 103
state 78:
    end = 71
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 79:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 104
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 80:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 105
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 81:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 106
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 82:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 107
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 83:
    end = 67
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 84:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 108
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 85:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 109
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 86:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 110
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 87:
    end = 37
state 88:
    end = 62
state 89:
    end = 29
state 90:
    end = 12
    c18: state 90
    c25: state 90
    c26: state 90
    c27: state 90
    c28: state 90
    c29: state 90
    c30: state 90
    c31: state 90
    c32: state 90
    c33: state 90
    c40: state 90
    c41: state 90
    c42: state 90
    c43: state 90
    c44: state 90
    c45: state 90
    c46: state 90
    c47: state 90
    c48: state 90
    c49: state 90
    c50: state 90
    c51: state 90
    c52: state 90
    c53: state 90
    c54: state 90
    c55: state 90
    c56: state 90
    c57: state 90
    c58: state 90
state 91:
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 52
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 51
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 51
    c26: state 51
    c27: state 51
    c28: state 51
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 53
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 51
    c41: state 51
    c42: state 51
    c43: state 51
    c44: state 51
    c45: state 51
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
state 92:
    c18: state 111
    c25: state 111
    c26: state 111
    c27: state 111
    c28: state 111
    c40: state 111
    c41: state 111
    c42: state 111
    c43: state 111
    c44: state 111
    c45: state 111
state 93:
    end = 34
state 94:
    end = 6
    c18: state 94
    c28: state 64
    c44: state 64
state 95:
    c18: state 96
state 96:
    end = 6
    c18: state 96
state 97:
    end = 50
state 98:
    end = 40
state 99:
    end = 27
state 100:
    end = 39
state 101:
    end = 64
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 102:
    end = 65
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 103:
    c40: state 112
state 104:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 113
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 105:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 114
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 106:
    end = 72
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 107:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 115
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 108:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 116
    c56: state 72
    c57: state 72
    c58: state 72
state 109:
    end = 75
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 110:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 117
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 111:
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 52
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 118
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 118
    c26: state 118
    c27: state 118
    c28: state 118
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 53
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 118
    c41: state 118
    c42: state 118
    c43: state 118
    c44: state 118
    c45: state 118
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
state 112:
    c48: state 119
state 113:
    end = 69
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 114:
    end = 68
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 115:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 120
    c56: state 72
    c57: state 72
    c58: state 72
state 116:
    end = 74
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 117:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 121
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 118:
    c0: state 51
    c1: state 51
    c3: state 51
    c4: state 51
    c5: state 51
    c6: state 51
    c7: state 51
    c8: state 51
    c9: state 52
    c10: state 51
    c11: state 51
    c12: state 51
    c13: state 51
    c14: state 51
    c15: state 51
    c16: state 51
    c17: state 51
    c18: state 118
    c19: state 51
    c20: state 51
    c21: state 51
    c22: state 51
    c23: state 51
    c24: state 51
    c25: state 118
    c26: state 118
    c27: state 118
    c28: state 118
    c29: state 51
    c30: state 51
    c31: state 51
    c32: state 51
    c33: state 51
    c34: state 51
    c35: state 53
    c36: state 51
    c37: state 51
    c38: state 51
    c39: state 51
    c40: state 118
    c41: state 118
    c42: state 118
    c43: state 118
    c44: state 118
    c45: state 118
    c46: state 51
    c47: state 51
    c48: state 51
    c49: state 51
    c50: state 51
    c51: state 51
    c52: state 51
    c53: state 51
    c54: state 51
    c55: state 51
    c56: state 51
    c57: state 51
    c58: state 51
    c59: state 51
    c60: state 51
    c61: state 51
    c62: state 51
state 119:
    c55: state 122
state 120:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 123
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 121:
    end = 70
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 122:
    c38: state 124
state 123:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 125
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 124:
    c42: state 126
state 125:
    end = 5
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 127
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 126:
    c51: state 128
state 127:
    end = 73
    c18: state 72
    c25: state 72
    c26: state 72
    c27: state 72
    c28: state 72
    c29: state 72
    c30: state 72
    c31: state 72
    c32: state 72
    c33: state 72
    c40: state 72
    c41: state 72
    c42: state 72
    c43: state 72
    c44: state 72
    c45: state 72
    c46: state 72
    c47: state 72
    c48: state 72
    c49: state 72
    c50: state 72
    c51: state 72
    c52: state 72
    c53: state 72
    c54: state 72
    c55: state 72
    c56: state 72
    c57: state 72
    c58: state 72
state 128:
    c49: state 129
state 129:
    c52: state 130
state 130:
    c47: state 131
state 131:
    c48: state 132
state 132:
    c44: state 133
state 133:
    c53: state 134
state 134:
    end = 13


\x9 -> c0, \xa -> c1, \xd -> c2, ' ' -> c0, '$' -> c3, '0' -> c4, '1' -> c4, '2' -> c4, '3' -> c4, '4' -> c4, '5' -> c4, 
'6' -> c4, '7' -> c4, '8' -> c4, '9' -> c4, 'A' -> c5, 'B' -> c5, 'C' -> c5, 'D' -> c5, 'E' -> c5, 'F' -> c5, 'G' -> c5, 
'H' -> c5, 'I' -> c5, 'J' -> c5, 'K' -> c5, 'L' -> c5, 'M' -> c5, 'N' -> c5, 'O' -> c5, 'P' -> c5, 'Q' -> c5, 'R' -> c5, 
'S' -> c5, 'T' -> c5, 'U' -> c5, 'V' -> c5, 'W' -> c5, 'X' -> c5, 'Y' -> c5, 'Z' -> c5, 'a' -> c5, 'b' -> c5, 'c' -> c5, 
'd' -> c5, 'e' -> c5, 'f' -> c5, 'g' -> c5, 'h' -> c5, 'i' -> c5, 'j' -> c5, 'k' -> c5, 'l' -> c5, 'm' -> c5, 'n' -> c5, 
'o' -> c5, 'p' -> c5, 'q' -> c5, 'r' -> c5, 's' -> c5, 't' -> c5, 'u' -> c5, 'v' -> c5, 'w' -> c5, 'x' -> c5, 'y' -> c5, 
'z' -> c5, '{' -> c6, \x80 -> c5, \x81 -> c5, \x82 -> c5, \x83 -> c5, \x84 -> c5, \x85 -> c5, \x86 -> c5, \x87 -> c5, \x88 -> c5, 
\x89 -> c5, \x8a -> c5, \x8b -> c5, \x8c -> c5, \x8d -> c5, \x8e -> c5, \x8f -> c5, \x90 -> c5, \x91 -> c5, \x92 -> c5, \x93 -> c5, 
\x94 -> c5, \x95 -> c5, \x96 -> c5, \x97 -> c5, \x98 -> c5, \x99 -> c5, \x9a -> c5, \x9b -> c5, \x9c -> c5, \x9d -> c5, \x9e -> c5, 
\x9f -> c5, \xa0 -> c5, \xa1 -> c5, \xa2 -> c5, \xa3 -> c5, \xa4 -> c5, \xa5 -> c5, \xa6 -> c5, \xa7 -> c5, \xa8 -> c5, \xa9 -> c5, 
\xaa -> c5, \xab -> c5, \xac -> c5, \xad -> c5, \xae -> c5, \xaf -> c5, \xb0 -> c5, \xb1 -> c5, \xb2 -> c5, \xb3 -> c5, \xb4 -> c5, 
\xb5 -> c5, \xb6 -> c5, \xb7 -> c5, \xb8 -> c5, \xb9 -> c5, \xba -> c5, \xbb -> c5, \xbc -> c5, \xbd -> c5, \xbe -> c5, \xbf -> c5, 
\xc0 -> c5, \xc1 -> c5, \xc2 -> c5, \xc3 -> c5, \xc4 -> c5, \xc5 -> c5, \xc6 -> c5, \xc7 -> c5, \xc8 -> c5, \xc9 -> c5, \xca -> c5, 
\xcb -> c5, \xcc -> c5, \xcd -> c5, \xce -> c5, \xcf -> c5, \xd0 -> c5, \xd1 -> c5, \xd2 -> c5, \xd3 -> c5, \xd4 -> c5, \xd5 -> c5, 
\xd6 -> c5, \xd7 -> c5, \xd8 -> c5, \xd9 -> c5, \xda -> c5, \xdb -> c5, \xdc -> c5, \xdd -> c5, \xde -> c5, \xdf -> c5, \xe0 -> c5, 
\xe1 -> c5, \xe2 -> c5, \xe3 -> c5, \xe4 -> c5, \xe5 -> c5, \xe6 -> c5, \xe7 -> c5, \xe8 -> c5, \xe9 -> c5, \xea -> c5, \xeb -> c5, 
\xec -> c5, \xed -> c5, \xee -> c5, \xef -> c5, \xf0 -> c5, \xf1 -> c5, \xf2 -> c5, \xf3 -> c5, \xf4 -> c5, \xf5 -> c5, \xf6 -> c5, 
\xf7 -> c5, \xf8 -> c5, \xf9 -> c5, \xfa -> c5, \xfb -> c5, \xfc -> c5, \xfd -> c5, \xfe -> c5, \xff -> c5, 

state 0:
    c0: state 1
    c1: state 2
    c2: state 3
    c3: state 4
    c5: state 5
    c6: state 6
state 1:
    end = 76
    c0: state 1
    c1: state 2
    c2: state 3
state 2:
    end = 76
    c0: state 1
    c1: state 2
    c2: state 3
state 3:
    end = 76
    c0: state 1
    c1: state 7
    c2: state 3
state 4:
    end = 78
    c5: state 8
state 5:
    end = 77
    c4: state 9
    c5: state 9
state 6:
    end = 79
state 7:
    end = 76
    c0: state 1
    c1: state 2
    c2: state 3
state 8:
    end = 80
    c4: state 10
    c5: state 10
state 9:
    end = 77
    c4: state 9
    c5: state 9
state 10:
    end = 80
    c4: state 10
    c5: state 10


\x0 -> c0, \x1 -> c0, \x2 -> c0, \x3 -> c0, \x4 -> c0, \x5 -> c0, \x6 -> c0, \x7 -> c0, \x8 -> c0, \x9 -> c0, \xa -> c0, 
\xb -> c0, \xc -> c0, \xd -> c0, \xe -> c0, \xf -> c0, \x10 -> c0, \x11 -> c0, \x12 -> c0, \x13 -> c0, \x14 -> c0, \x15 -> c0, 
\x16 -> c0, \x17 -> c0, \x18 -> c0, \x19 -> c0, \x1a -> c0, \x1b -> c0, \x1c -> c0, \x1d -> c0, \x1e -> c0, \x1f -> c0, ' ' -> c0, 
'!' -> c0, '"' -> c1, '#' -> c0, '$' -> c2, '%' -> c0, '&' -> c0, ''' -> c0, '(' -> c0, ')' -> c0, '*' -> c0, '+' -> c0, 
',' -> c0, '-' -> c3, '.' -> c0, '/' -> c0, '0' -> c4, '1' -> c4, '2' -> c4, '3' -> c4, '4' -> c4, '5' -> c4, '6' -> c4, 
'7' -> c4, '8' -> c4, '9' -> c4, ':' -> c0, ';' -> c0, '<' -> c0, '=' -> c0, '>' -> c5, '?' -> c0, '@' -> c0, 'A' -> c6, 
'B' -> c6, 'C' -> c6, 'D' -> c6, 'E' -> c6, 'F' -> c6, 'G' -> c6, 'H' -> c6, 'I' -> c6, 'J' -> c6, 'K' -> c6, 'L' -> c6, 
'M' -> c6, 'N' -> c6, 'O' -> c6, 'P' -> c6, 'Q' -> c6, 'R' -> c6, 'S' -> c6, 'T' -> c6, 'U' -> c6, 'V' -> c6, 'W' -> c6, 
'X' -> c6, 'Y' -> c6, 'Z' -> c6, '[' -> c7, '\' -> c0, ']' -> c0, '^' -> c0, '_' -> c0, '`' -> c0, 'a' -> c6, 'b' -> c6, 
'c' -> c6, 'd' -> c6, 'e' -> c6, 'f' -> c6, 'g' -> c6, 'h' -> c6, 'i' -> c6, 'j' -> c6, 'k' -> c6, 'l' -> c6, 'm' -> c6, 
'n' -> c6, 'o' -> c6, 'p' -> c6, 'q' -> c6, 'r' -> c6, 's' -> c6, 't' -> c6, 'u' -> c6, 'v' -> c6, 'w' -> c6, 'x' -> c6, 
'y' -> c6, 'z' -> c6, '{' -> c0, '|' -> c0, '}' -> c0, '~' -> c0, \x7f -> c0, \x80 -> c6, \x81 -> c6, \x82 -> c6, \x83 -> c6, 
\x84 -> c6, \x85 -> c6, \x86 -> c6, \x87 -> c6, \x88 -> c6, \x89 -> c6, \x8a -> c6, \x8b -> c6, \x8c -> c6, \x8d -> c6, \x8e -> c6, 
\x8f -> c6, \x90 -> c6, \x91 -> c6, \x92 -> c6, \x93 -> c6, \x94 -> c6, \x95 -> c6, \x96 -> c6, \x97 -> c6, \x98 -> c6, \x99 -> c6, 
\x9a -> c6, \x9b -> c6, \x9c -> c6, \x9d -> c6, \x9e -> c6, \x9f -> c6, \xa0 -> c6, \xa1 -> c6, \xa2 -> c6, \xa3 -> c6, \xa4 -> c6, 
\xa5 -> c6, \xa6 -> c6, \xa7 -> c6, \xa8 -> c6, \xa9 -> c6, \xaa -> c6, \xab -> c6, \xac -> c6, \xad -> c6, \xae -> c6, \xaf -> c6, 
\xb0 -> c6, \xb1 -> c6, \xb2 -> c6, \xb3 -> c6, \xb4 -> c6, \xb5 -> c6, \xb6 -> c6, \xb7 -> c6, \xb8 -> c6, \xb9 -> c6, \xba -> c6, 
\xbb -> c6, \xbc -> c6, \xbd -> c6, \xbe -> c6, \xbf -> c6, \xc0 -> c6, \xc1 -> c6, \xc2 -> c6, \xc3 -> c6, \xc4 -> c6, \xc5 -> c6, 
\xc6 -> c6, \xc7 -> c6, \xc8 -> c6, \xc9 -> c6, \xca -> c6, \xcb -> c6, \xcc -> c6, \xcd -> c6, \xce -> c6, \xcf -> c6, \xd0 -> c6, 
\xd1 -> c6, \xd2 -> c6, \xd3 -> c6, \xd4 -> c6, \xd5 -> c6, \xd6 -> c6, \xd7 -> c6, \xd8 -> c6, \xd9 -> c6, \xda -> c6, \xdb -> c6, 
\xdc -> c6, \xdd -> c6, \xde -> c6, \xdf -> c6, \xe0 -> c6, \xe1 -> c6, \xe2 -> c6, \xe3 -> c6, \xe4 -> c6, \xe5 -> c6, \xe6 -> c6, 
\xe7 -> c6, \xe8 -> c6, \xe9 -> c6, \xea -> c6, \xeb -> c6, \xec -> c6, \xed -> c6, \xee -> c6, \xef -> c6, \xf0 -> c6, \xf1 -> c6, 
\xf2 -> c6, \xf3 -> c6, \xf4 -> c6, \xf5 -> c6, \xf6 -> c6, \xf7 -> c6, \xf8 -> c6, \xf9 -> c6, \xfa -> c6, \xfb -> c6, \xfc -> c6, 
\xfd -> c6, \xfe -> c6, \xff -> c6, 
\x256-\xInfinity -> c0, 
state 0:
    c0: state 1
    c1: state 2
    c2: state 3
    c3: state 1
    c4: state 1
    c5: state 1
    c6: state 1
    c7: state 1
state 1:
    end = 81
    c0: state 1
    c3: state 1
    c4: state 1
    c5: state 1
    c6: state 1
    c7: state 1
state 2:
    end = 82
state 3:
    end = 81
    c0: state 4
    c3: state 4
    c4: state 4
    c5: state 4
    c6: state 5
    c7: state 4
state 4:
    end = 81
    c0: state 4
    c3: state 4
    c4: state 4
    c5: state 4
    c6: state 4
    c7: state 4
state 5:
    end = 83
    c0: state 4
    c3: state 6
    c4: state 7
    c5: state 4
    c6: state 7
    c7: state 8
state 6:
    end = 81
    c0: state 4
    c3: state 4
    c4: state 4
    c5: state 9
    c6: state 4
    c7: state 4
state 7:
    end = 83
    c0: state 4
    c3: state 6
    c4: state 7
    c5: state 4
    c6: state 7
    c7: state 8
state 8:
    end = 85
    c0: state 4
    c3: state 4
    c4: state 4
    c5: state 4
    c6: state 4
    c7: state 4
state 9:
    end = 81
    c0: state 4
    c3: state 4
    c4: state 4
    c5: state 4
    c6: state 10
    c7: state 4
state 10:
    end = 84
    c0: state 4
    c3: state 4
    c4: state 11
    c5: state 4
    c6: state 11
    c7: state 4
state 11:
    end = 84
    c0: state 4
    c3: state 4
    c4: state 11
    c5: state 4
    c6: state 11
    c7: state 4


'$' -> c0, '-' -> c1, '0' -> c2, '1' -> c2, '2' -> c2, '3' -> c2, '4' -> c2, '5' -> c2, '6' -> c2, '7' -> c2, '8' -> c2, 
'9' -> c2, '>' -> c3, 'A' -> c4, 'B' -> c4, 'C' -> c4, 'D' -> c4, 'E' -> c4, 'F' -> c4, 'G' -> c4, 'H' -> c4, 'I' -> c4, 
'J' -> c4, 'K' -> c4, 'L' -> c4, 'M' -> c4, 'N' -> c4, 'O' -> c4, 'P' -> c4, 'Q' -> c4, 'R' -> c4, 'S' -> c4, 'T' -> c4, 
'U' -> c4, 'V' -> c4, 'W' -> c4, 'X' -> c4, 'Y' -> c4, 'Z' -> c4, '[' -> c5, 'a' -> c4, 'b' -> c4, 'c' -> c4, 'd' -> c4, 
'e' -> c4, 'f' -> c4, 'g' -> c4, 'h' -> c4, 'i' -> c4, 'j' -> c4, 'k' -> c4, 'l' -> c4, 'm' -> c4, 'n' -> c4, 'o' -> c4, 
'p' -> c4, 'q' -> c4, 'r' -> c4, 's' -> c4, 't' -> c4, 'u' -> c4, 'v' -> c4, 'w' -> c4, 'x' -> c4, 'y' -> c4, 'z' -> c4, 
\x80 -> c4, \x81 -> c4, \x82 -> c4, \x83 -> c4, \x84 -> c4, \x85 -> c4, \x86 -> c4, \x87 -> c4, \x88 -> c4, \x89 -> c4, \x8a -> c4, 
\x8b -> c4, \x8c -> c4, \x8d -> c4, \x8e -> c4, \x8f -> c4, \x90 -> c4, \x91 -> c4, \x92 -> c4, \x93 -> c4, \x94 -> c4, \x95 -> c4, 
\x96 -> c4, \x97 -> c4, \x98 -> c4, \x99 -> c4, \x9a -> c4, \x9b -> c4, \x9c -> c4, \x9d -> c4, \x9e -> c4, \x9f -> c4, \xa0 -> c4, 
\xa1 -> c4, \xa2 -> c4, \xa3 -> c4, \xa4 -> c4, \xa5 -> c4, \xa6 -> c4, \xa7 -> c4, \xa8 -> c4, \xa9 -> c4, \xaa -> c4, \xab -> c4, 
\xac -> c4, \xad -> c4, \xae -> c4, \xaf -> c4, \xb0 -> c4, \xb1 -> c4, \xb2 -> c4, \xb3 -> c4, \xb4 -> c4, \xb5 -> c4, \xb6 -> c4, 
\xb7 -> c4, \xb8 -> c4, \xb9 -> c4, \xba -> c4, \xbb -> c4, \xbc -> c4, \xbd -> c4, \xbe -> c4, \xbf -> c4, \xc0 -> c4, \xc1 -> c4, 
\xc2 -> c4, \xc3 -> c4, \xc4 -> c4, \xc5 -> c4, \xc6 -> c4, \xc7 -> c4, \xc8 -> c4, \xc9 -> c4, \xca -> c4, \xcb -> c4, \xcc -> c4, 
\xcd -> c4, \xce -> c4, \xcf -> c4, \xd0 -> c4, \xd1 -> c4, \xd2 -> c4, \xd3 -> c4, \xd4 -> c4, \xd5 -> c4, \xd6 -> c4, \xd7 -> c4, 
\xd8 -> c4, \xd9 -> c4, \xda -> c4, \xdb -> c4, \xdc -> c4, \xdd -> c4, \xde -> c4, \xdf -> c4, \xe0 -> c4, \xe1 -> c4, \xe2 -> c4, 
\xe3 -> c4, \xe4 -> c4, \xe5 -> c4, \xe6 -> c4, \xe7 -> c4, \xe8 -> c4, \xe9 -> c4, \xea -> c4, \xeb -> c4, \xec -> c4, \xed -> c4, 
\xee -> c4, \xef -> c4, \xf0 -> c4, \xf1 -> c4, \xf2 -> c4, \xf3 -> c4, \xf4 -> c4, \xf5 -> c4, \xf6 -> c4, \xf7 -> c4, \xf8 -> c4, 
\xf9 -> c4, \xfa -> c4, \xfb -> c4, \xfc -> c4, \xfd -> c4, \xfe -> c4, \xff -> c4, 

state 0:
    c0: state 1
state 1:
    c4: state 2
state 2:
    end = 86
    c1: state 3
    c2: state 4
    c4: state 4
    c5: state 5
state 3:
    c3: state 6
state 4:
    end = 86
    c1: state 3
    c2: state 4
    c4: state 4
    c5: state 5
state 5:
    end = 88
state 6:
    c4: state 7
state 7:
    end = 87
    c2: state 8
    c4: state 8
state 8:
    end = 87
    c2: state 8
    c4: state 8


state 0
    [ 0: (accept) => . start <EOF> ]*
    [ 1: start => . top_statement_list ]
    [ 2: top_statement_list => . top_statement_list top_statement ]
    [ 3: top_statement_list => . ]
    default action: reduce with rule 3
    start : go to state 1
    top_statement_list : go to state 2


state 1
    [ 0: (accept) => start . <EOF> ]*
    no default action
    <EOF> : shift, and go to state 3


state 2
    [ 1: start => top_statement_list . ]*
    [ 2: top_statement_list => top_statement_list . top_statement ]*
    [ 4: top_statement => . statement ]
    [ 5: top_statement => . function_declaration_statement ]
    [ 6: top_statement => . "__halt_compiler" "(" ")" ";" ]
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 101: function_declaration_statement => . "function" <NAME> "(" parameter_list ")" "{" statement_list "}" ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 1
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "__halt_compiler" : shift, and go to state 7
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 8
    "list" : shift, and go to state 14
    top_statement : go to state 4
    statement : go to state 5
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    function_declaration_statement : go to state 6
    primitive : go to state 40


state 3
    [ 0: (accept) => start <EOF> . ]*
    default action: reduce with rule 0


state 4
    [ 2: top_statement_list => top_statement_list top_statement . ]*
    default action: reduce with rule 2


state 5
    [ 4: top_statement => statement . ]*
    default action: reduce with rule 4


state 6
    [ 5: top_statement => function_declaration_statement . ]*
    default action: reduce with rule 5


state 7
    [ 6: top_statement => "__halt_compiler" . "(" ")" ";" ]*
    no default action
    "(" : shift, and go to state 9


state 8
    [ 101: function_declaration_statement => "function" . <NAME> "(" parameter_list ")" "{" statement_list "}" ]*
    [ 99: expr_without_var => "function" . "(" parameter_list ")" lexical_vars "{" statement_list "}" ]*
    no default action
    <NAME> : shift, and go to state 10
    "(" : shift, and go to state 109


state 9
    [ 6: top_statement => "__halt_compiler" "(" . ")" ";" ]*
    no default action
    ")" : shift, and go to state 12


state 10
    [ 101: function_declaration_statement => "function" <NAME> . "(" parameter_list ")" "{" statement_list "}" ]*
    no default action
    "(" : shift, and go to state 18


state 11
    [ 30: dereferencable => "(" . expr ")" ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 23
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 12
    [ 6: top_statement => "__halt_compiler" "(" ")" . ";" ]*
    no default action
    ";" : shift, and go to state 49


state 13
    [ 7: statement_list => statement_list statement . ]*
    default action: reduce with rule 7


state 14
    [ 116: primitive => "list" . "(" array_pair_list ")" ]*
    no default action
    "(" : shift, and go to state 50


state 15
    [ 46: function_call => callable_expr . "(" argument_list ")" ]*
    no default action
    "(" : shift, and go to state 51


state 16
    [ 37: simple_var => <VARIABLE> . ]*
    default action: reduce with rule 37


state 17
    [ 38: simple_var => "$" . "{" expr "}" ]*
    [ 39: simple_var => "$" . simple_var ]*
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    no default action
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "{" : shift, and go to state 52
    simple_var : go to state 53


state 18
    [ 101: function_declaration_statement => "function" <NAME> "(" . parameter_list ")" "{" statement_list "}" ]*
    [ 102: parameter_list => . ]
    [ 103: parameter_list => . non_empty_parameter_list ]
    [ 104: non_empty_parameter_list => . non_empty_parameter_list "," parameter ]
    [ 105: non_empty_parameter_list => . parameter ]
    [ 106: parameter => . <NAME> ]
    default action: reduce with rule 102
    <NAME> : shift, and go to state 21
    parameter_list : go to state 54
    non_empty_parameter_list : go to state 19
    parameter : go to state 20


state 19
    [ 103: parameter_list => non_empty_parameter_list . ]*
    [ 104: non_empty_parameter_list => non_empty_parameter_list . "," parameter ]*
    default action: reduce with rule 103
    "," : shift, and go to state 55


state 20
    [ 105: non_empty_parameter_list => parameter . ]*
    default action: reduce with rule 105


state 21
    [ 106: parameter => <NAME> . ]*
    default action: reduce with rule 106


state 22
    [ 44: optional_expr => expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 44
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 23
    [ 30: dereferencable => "(" expr . ")" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ")" : shift, and go to state 56
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 24
    [ 48: argument_list => non_empty_argument_list . ]*
    [ 49: non_empty_argument_list => non_empty_argument_list . "," expr ]*
    default action: reduce with rule 48
    "," : shift, and go to state 57


state 25
    [ 50: non_empty_argument_list => expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 50
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 26
    [ 117: array_pair_list => non_empty_array_pair_list . ]*
    [ 119: non_empty_array_pair_list => non_empty_array_pair_list . "," array_pair ]*
    default action: reduce with rule 117
    "," : shift, and go to state 58


state 27
    [ 120: non_empty_array_pair_list => array_pair . ]*
    default action: reduce with rule 120


state 28
    [ 121: array_pair => expr . ]*
    [ 122: array_pair => expr . "=>" expr ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 121
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "=>" : shift, and go to state 59
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 29
    [ 25: expr => var . ]*
    [ 51: expr_without_var => var . "=" expr ]*
    [ 52: expr_without_var => var . "+=" expr ]*
    [ 53: expr_without_var => var . "-=" expr ]*
    [ 54: expr_without_var => var . "**=" expr ]*
    [ 55: expr_without_var => var . "*=" expr ]*
    [ 56: expr_without_var => var . "/=" expr ]*
    [ 57: expr_without_var => var . "&=" expr ]*
    [ 58: expr_without_var => var . "|=" expr ]*
    [ 59: expr_without_var => var . "^=" expr ]*
    [ 60: expr_without_var => var . ">>=" expr ]*
    [ 61: expr_without_var => var . "<<=" expr ]*
    [ 62: expr_without_var => var . "%=" expr ]*
    [ 96: expr_without_var => var . "++" ]*
    [ 97: expr_without_var => var . "--" ]*
    [ 29: dereferencable => var . ]*
    default action: reduce with rule 25
    "=" : shift, and go to state 85
    "+=" : shift, and go to state 86
    "-=" : shift, and go to state 87
    "*=" : shift, and go to state 89
    "**=" : shift, and go to state 88
    "/=" : shift, and go to state 90
    "&=" : shift, and go to state 91
    "|=" : shift, and go to state 92
    "^=" : shift, and go to state 93
    ">>=" : shift, and go to state 94
    "<<=" : shift, and go to state 95
    "%=" : shift, and go to state 96
    "++" : shift, and go to state 97
    "--" : shift, and go to state 98
    "->" : reduce with rule 29
    "[" : reduce with rule 29


state 30
    [ 26: expr => expr_without_var . ]*
    default action: reduce with rule 26


state 31
    [ 31: var => callable_variable . ]*
    [ 27: callable_expr => callable_variable . ]*
    default action: reduce with rule 31
    "(" : reduce with rule 27


state 32
    [ 34: var => dereferencable . @0 "->" @1 property_name ]*
    [ 36: callable_variable => dereferencable . "[" optional_expr "]" ]*
    [ 32: @0 => . ]
    default action: reduce with rule 32
    "[" : shift, and go to state 100
    @0 : go to state 99


state 33
    [ 89: expr_without_var => "(" . expr ")" ]*
    [ 30: dereferencable => "(" . expr ")" ]*
    [ 28: callable_expr => "(" . expr ")" ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 101
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 34
    [ 90: expr_without_var => "+" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 102
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 35
    [ 91: expr_without_var => "-" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 103
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 36
    [ 92: expr_without_var => "!" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 104
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 37
    [ 93: expr_without_var => "~" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 105
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 38
    [ 94: expr_without_var => "++" . var ]*
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    no default action
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "(" : shift, and go to state 11
    dereferencable : go to state 32
    var : go to state 106
    callable_variable : go to state 107
    simple_var : go to state 43


state 39
    [ 95: expr_without_var => "--" . var ]*
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    no default action
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "(" : shift, and go to state 11
    dereferencable : go to state 32
    var : go to state 108
    callable_variable : go to state 107
    simple_var : go to state 43


state 40
    [ 98: expr_without_var => primitive . ]*
    default action: reduce with rule 98


state 41
    [ 99: expr_without_var => "function" . "(" parameter_list ")" lexical_vars "{" statement_list "}" ]*
    no default action
    "(" : shift, and go to state 109


state 42
    [ 100: expr_without_var => function_call . ]*
    default action: reduce with rule 100


state 43
    [ 35: callable_variable => simple_var . ]*
    default action: reduce with rule 35


state 44
    [ 111: primitive => <INT> . ]*
    default action: reduce with rule 111


state 45
    [ 112: primitive => <DECIMAL> . ]*
    default action: reduce with rule 112


state 46
    [ 113: primitive => <STRING> . ]*
    default action: reduce with rule 113


state 47
    [ 114: primitive => <NAME> . ]*
    [ 45: function_call => <NAME> . "(" argument_list ")" ]*
    default action: reduce with rule 114
    "(" : shift, and go to state 110


state 48
    [ 115: primitive => "[" . array_pair_list "]" ]*
    [ 117: array_pair_list => . non_empty_array_pair_list ]
    [ 118: array_pair_list => . ]
    [ 119: non_empty_array_pair_list => . non_empty_array_pair_list "," array_pair ]
    [ 120: non_empty_array_pair_list => . array_pair ]
    [ 121: array_pair => . expr ]
    [ 122: array_pair => . expr "=>" expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 118
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 28
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40
    array_pair_list : go to state 111
    non_empty_array_pair_list : go to state 26
    array_pair : go to state 27


state 49
    [ 6: top_statement => "__halt_compiler" "(" ")" ";" . ]*
    default action: reduce with rule 6


state 50
    [ 116: primitive => "list" "(" . array_pair_list ")" ]*
    [ 117: array_pair_list => . non_empty_array_pair_list ]
    [ 118: array_pair_list => . ]
    [ 119: non_empty_array_pair_list => . non_empty_array_pair_list "," array_pair ]
    [ 120: non_empty_array_pair_list => . array_pair ]
    [ 121: array_pair => . expr ]
    [ 122: array_pair => . expr "=>" expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 118
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 28
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40
    array_pair_list : go to state 112
    non_empty_array_pair_list : go to state 26
    array_pair : go to state 27


state 51
    [ 46: function_call => callable_expr "(" . argument_list ")" ]*
    [ 47: argument_list => . ]
    [ 48: argument_list => . non_empty_argument_list ]
    [ 49: non_empty_argument_list => . non_empty_argument_list "," expr ]
    [ 50: non_empty_argument_list => . expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 47
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 25
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    argument_list : go to state 113
    non_empty_argument_list : go to state 24
    expr_without_var : go to state 30
    primitive : go to state 40


state 52
    [ 38: simple_var => "$" "{" . expr "}" ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 114
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 53
    [ 39: simple_var => "$" simple_var . ]*
    default action: reduce with rule 39


state 54
    [ 101: function_declaration_statement => "function" <NAME> "(" parameter_list . ")" "{" statement_list "}" ]*
    no default action
    ")" : shift, and go to state 115


state 55
    [ 104: non_empty_parameter_list => non_empty_parameter_list "," . parameter ]*
    [ 106: parameter => . <NAME> ]
    no default action
    <NAME> : shift, and go to state 21
    parameter : go to state 117


state 56
    [ 30: dereferencable => "(" expr ")" . ]*
    default action: reduce with rule 30


state 57
    [ 49: non_empty_argument_list => non_empty_argument_list "," . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 129
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 58
    [ 119: non_empty_array_pair_list => non_empty_array_pair_list "," . array_pair ]*
    [ 121: array_pair => . expr ]
    [ 122: array_pair => . expr "=>" expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 28
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40
    array_pair : go to state 130


state 59
    [ 122: array_pair => expr "=>" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 131
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 60
    [ 63: expr_without_var => expr "?" . expr ":" expr ]*
    [ 64: expr_without_var => expr "?" . ":" expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    ":" : shift, and go to state 133
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 132
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 61
    [ 65: expr_without_var => expr ">" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 134
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 62
    [ 66: expr_without_var => expr "<" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 135
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 63
    [ 67: expr_without_var => expr ">=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 136
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 64
    [ 68: expr_without_var => expr "<=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 137
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 65
    [ 69: expr_without_var => expr "==" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 138
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 66
    [ 70: expr_without_var => expr "===" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 139
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 67
    [ 71: expr_without_var => expr "!=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 140
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 68
    [ 72: expr_without_var => expr "!==" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 141
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 69
    [ 73: expr_without_var => expr "^" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 142
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 70
    [ 74: expr_without_var => expr "|" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 143
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 71
    [ 75: expr_without_var => expr "&" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 144
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 72
    [ 76: expr_without_var => expr ">>" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 145
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 73
    [ 77: expr_without_var => expr "<<" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 146
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 74
    [ 78: expr_without_var => expr "&&" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 147
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 75
    [ 79: expr_without_var => expr "||" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 148
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 76
    [ 80: expr_without_var => expr "OR" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 149
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 77
    [ 81: expr_without_var => expr "XOR" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 150
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 78
    [ 82: expr_without_var => expr "AND" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 151
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 79
    [ 83: expr_without_var => expr "+" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 152
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 80
    [ 84: expr_without_var => expr "-" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 153
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 81
    [ 85: expr_without_var => expr "*" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 154
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 82
    [ 86: expr_without_var => expr "/" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 155
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 83
    [ 87: expr_without_var => expr "%" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 156
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 84
    [ 88: expr_without_var => expr "**" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 157
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 85
    [ 51: expr_without_var => var "=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 158
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 86
    [ 52: expr_without_var => var "+=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 159
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 87
    [ 53: expr_without_var => var "-=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 160
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 88
    [ 54: expr_without_var => var "**=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 161
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 89
    [ 55: expr_without_var => var "*=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 162
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 90
    [ 56: expr_without_var => var "/=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 163
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 91
    [ 57: expr_without_var => var "&=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 164
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 92
    [ 58: expr_without_var => var "|=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 165
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 93
    [ 59: expr_without_var => var "^=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 166
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 94
    [ 60: expr_without_var => var ">>=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 167
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 95
    [ 61: expr_without_var => var "<<=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 168
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 96
    [ 62: expr_without_var => var "%=" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 169
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 97
    [ 96: expr_without_var => var "++" . ]*
    default action: reduce with rule 96


state 98
    [ 97: expr_without_var => var "--" . ]*
    default action: reduce with rule 97


state 99
    [ 34: var => dereferencable @0 . "->" @1 property_name ]*
    no default action
    "->" : shift, and go to state 170


state 100
    [ 36: callable_variable => dereferencable "[" . optional_expr "]" ]*
    [ 43: optional_expr => . ]
    [ 44: optional_expr => . expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 43
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 22
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    optional_expr : go to state 171
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 101
    [ 89: expr_without_var => "(" expr . ")" ]*
    [ 30: dereferencable => "(" expr . ")" ]*
    [ 28: callable_expr => "(" expr . ")" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ")" : shift, and go to state 172
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 102
    [ 90: expr_without_var => "+" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 90


state 103
    [ 91: expr_without_var => "-" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 91


state 104
    [ 92: expr_without_var => "!" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 92
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 105
    [ 93: expr_without_var => "~" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 93
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 106
    [ 94: expr_without_var => "++" var . ]*
    [ 29: dereferencable => var . ]*
    default action: reduce with rule 94
    "->" : reduce with rule 29
    "[" : reduce with rule 29


state 107
    [ 31: var => callable_variable . ]*
    default action: reduce with rule 31


state 108
    [ 95: expr_without_var => "--" var . ]*
    [ 29: dereferencable => var . ]*
    default action: reduce with rule 95
    "->" : reduce with rule 29
    "[" : reduce with rule 29


state 109
    [ 99: expr_without_var => "function" "(" . parameter_list ")" lexical_vars "{" statement_list "}" ]*
    [ 102: parameter_list => . ]
    [ 103: parameter_list => . non_empty_parameter_list ]
    [ 104: non_empty_parameter_list => . non_empty_parameter_list "," parameter ]
    [ 105: non_empty_parameter_list => . parameter ]
    [ 106: parameter => . <NAME> ]
    default action: reduce with rule 102
    <NAME> : shift, and go to state 21
    parameter_list : go to state 173
    non_empty_parameter_list : go to state 19
    parameter : go to state 20


state 110
    [ 45: function_call => <NAME> "(" . argument_list ")" ]*
    [ 47: argument_list => . ]
    [ 48: argument_list => . non_empty_argument_list ]
    [ 49: non_empty_argument_list => . non_empty_argument_list "," expr ]
    [ 50: non_empty_argument_list => . expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 47
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 25
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    argument_list : go to state 174
    non_empty_argument_list : go to state 24
    expr_without_var : go to state 30
    primitive : go to state 40


state 111
    [ 115: primitive => "[" array_pair_list . "]" ]*
    no default action
    "]" : shift, and go to state 175


state 112
    [ 116: primitive => "list" "(" array_pair_list . ")" ]*
    no default action
    ")" : shift, and go to state 176


state 113
    [ 46: function_call => callable_expr "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 177


state 114
    [ 38: simple_var => "$" "{" expr . "}" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "}" : shift, and go to state 178
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 115
    [ 101: function_declaration_statement => "function" <NAME> "(" parameter_list ")" . "{" statement_list "}" ]*
    no default action
    "{" : shift, and go to state 179


state 116
    [ 108: lexical_vars => "use" . "(" lexical_var_list ")" ]*
    no default action
    "(" : shift, and go to state 180


state 117
    [ 104: non_empty_parameter_list => non_empty_parameter_list "," parameter . ]*
    default action: reduce with rule 104


state 118
    [ 9: statement => "{" . statement_list "}" ]*
    [ 7: statement_list => . statement_list statement ]
    [ 8: statement_list => . ]
    default action: reduce with rule 8
    statement_list : go to state 181


state 119
    [ 10: statement => ";" . ]*
    default action: reduce with rule 10


state 120
    [ 11: statement => expr . ";" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ";" : shift, and go to state 182
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 121
    [ 12: statement => <INLINE_HTML> . ]*
    default action: reduce with rule 12


state 122
    [ 13: statement => "<?=" . expr <INLINE_HTML> ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 183
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 123
    [ 14: statement => "echo" . expr ";" ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 184
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 124
    [ 15: statement => if_statement . ]*
    default action: reduce with rule 15


state 125
    [ 16: statement => "while" . "(" expr ")" statement ]*
    no default action
    "(" : shift, and go to state 185


state 126
    [ 17: statement => "do" . statement "while" "(" expr ")" ";" ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 186
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 127
    [ 18: statement => "for" . "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]*
    no default action
    "(" : shift, and go to state 187


state 128
    [ 19: if_statement => "if" . "(" expr ")" statement ]*
    [ 20: if_statement => "if" . "(" expr ")" statement "else" statement ]*
    no default action
    "(" : shift, and go to state 188


state 129
    [ 49: non_empty_argument_list => non_empty_argument_list "," expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 49
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 130
    [ 119: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair . ]*
    default action: reduce with rule 119


state 131
    [ 122: array_pair => expr "=>" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 122
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 132
    [ 63: expr_without_var => expr "?" expr . ":" expr ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    ":" : shift, and go to state 189
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 133
    [ 64: expr_without_var => expr "?" ":" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 190
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 134
    [ 65: expr_without_var => expr ">" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 65
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 135
    [ 66: expr_without_var => expr "<" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 66
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 136
    [ 67: expr_without_var => expr ">=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 67
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 137
    [ 68: expr_without_var => expr "<=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 68
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 138
    [ 69: expr_without_var => expr "==" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 69
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 139
    [ 70: expr_without_var => expr "===" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 70
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 140
    [ 71: expr_without_var => expr "!=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 71
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 141
    [ 72: expr_without_var => expr "!==" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 72
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 142
    [ 73: expr_without_var => expr "^" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 73
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 143
    [ 74: expr_without_var => expr "|" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 74
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 144
    [ 75: expr_without_var => expr "&" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 75
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 145
    [ 76: expr_without_var => expr ">>" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 76
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83


state 146
    [ 77: expr_without_var => expr "<<" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 77
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83


state 147
    [ 78: expr_without_var => expr "&&" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 78
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72


state 148
    [ 79: expr_without_var => expr "||" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 79
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74


state 149
    [ 80: expr_without_var => expr "OR" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 80
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 150
    [ 81: expr_without_var => expr "XOR" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 81
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 151
    [ 82: expr_without_var => expr "AND" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 82
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 152
    [ 83: expr_without_var => expr "+" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 83
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83


state 153
    [ 84: expr_without_var => expr "-" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 84
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83


state 154
    [ 85: expr_without_var => expr "*" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 85
    "**" : shift, and go to state 84


state 155
    [ 86: expr_without_var => expr "/" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 86
    "**" : shift, and go to state 84


state 156
    [ 87: expr_without_var => expr "%" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 87
    "**" : shift, and go to state 84


state 157
    [ 88: expr_without_var => expr "**" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 88
    "**" : shift, and go to state 84


state 158
    [ 51: expr_without_var => var "=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 51
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 159
    [ 52: expr_without_var => var "+=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 52
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 160
    [ 53: expr_without_var => var "-=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 53
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 161
    [ 54: expr_without_var => var "**=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 54
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 162
    [ 55: expr_without_var => var "*=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 55
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 163
    [ 56: expr_without_var => var "/=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 56
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 164
    [ 57: expr_without_var => var "&=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 57
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 165
    [ 58: expr_without_var => var "|=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 58
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 166
    [ 59: expr_without_var => var "^=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 59
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 167
    [ 60: expr_without_var => var ">>=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 60
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 168
    [ 61: expr_without_var => var "<<=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 61
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 169
    [ 62: expr_without_var => var "%=" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 62
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 170
    [ 34: var => dereferencable @0 "->" . @1 property_name ]*
    [ 33: @1 => . ]
    default action: reduce with rule 33
    @1 : go to state 191


state 171
    [ 36: callable_variable => dereferencable "[" optional_expr . "]" ]*
    no default action
    "]" : shift, and go to state 192


state 172
    [ 89: expr_without_var => "(" expr ")" . ]*
    [ 30: dereferencable => "(" expr ")" . ]*
    [ 28: callable_expr => "(" expr ")" . ]*
    default action: reduce with rule 89
    "->" : reduce with rule 30
    "(" : reduce with rule 28
    "[" : reduce with rule 30


state 173
    [ 99: expr_without_var => "function" "(" parameter_list . ")" lexical_vars "{" statement_list "}" ]*
    no default action
    ")" : shift, and go to state 193


state 174
    [ 45: function_call => <NAME> "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 194


state 175
    [ 115: primitive => "[" array_pair_list "]" . ]*
    default action: reduce with rule 115


state 176
    [ 116: primitive => "list" "(" array_pair_list ")" . ]*
    default action: reduce with rule 116


state 177
    [ 46: function_call => callable_expr "(" argument_list ")" . ]*
    default action: reduce with rule 46


state 178
    [ 38: simple_var => "$" "{" expr "}" . ]*
    default action: reduce with rule 38


state 179
    [ 101: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" . statement_list "}" ]*
    [ 7: statement_list => . statement_list statement ]
    [ 8: statement_list => . ]
    default action: reduce with rule 8
    statement_list : go to state 197


state 180
    [ 108: lexical_vars => "use" "(" . lexical_var_list ")" ]*
    [ 109: lexical_var_list => . lexical_var_list "," <VARIABLE> ]
    [ 110: lexical_var_list => . <VARIABLE> ]
    no default action
    <VARIABLE> : shift, and go to state 199
    lexical_var_list : go to state 198


state 181
    [ 9: statement => "{" statement_list . "}" ]*
    [ 7: statement_list => statement_list . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    "}" : shift, and go to state 200
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 13
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 182
    [ 11: statement => expr ";" . ]*
    default action: reduce with rule 11


state 183
    [ 13: statement => "<?=" expr . <INLINE_HTML> ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    <INLINE_HTML> : shift, and go to state 201
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 184
    [ 14: statement => "echo" expr . ";" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ";" : shift, and go to state 202
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 185
    [ 16: statement => "while" "(" . expr ")" statement ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 203
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 186
    [ 17: statement => "do" statement . "while" "(" expr ")" ";" ]*
    no default action
    "while" : shift, and go to state 204


state 187
    [ 18: statement => "for" "(" . for_exprs ";" for_exprs ";" for_exprs ")" statement ]*
    [ 21: for_exprs => . ]
    [ 22: for_exprs => . non_empty_for_exprs ]
    [ 23: non_empty_for_exprs => . non_empty_for_exprs "," expr ]
    [ 24: non_empty_for_exprs => . expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 21
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    for_exprs : go to state 205
    non_empty_for_exprs : go to state 195
    expr : go to state 196
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 188
    [ 19: if_statement => "if" "(" . expr ")" statement ]*
    [ 20: if_statement => "if" "(" . expr ")" statement "else" statement ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 206
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 189
    [ 63: expr_without_var => expr "?" expr ":" . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 207
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 190
    [ 64: expr_without_var => expr "?" ":" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 64
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 191
    [ 34: var => dereferencable @0 "->" @1 . property_name ]*
    [ 40: property_name => . <NAME> ]
    [ 41: property_name => . "{" expr "}" ]
    [ 42: property_name => . simple_var ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    no default action
    <NAME> : shift, and go to state 209
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "{" : shift, and go to state 210
    simple_var : go to state 211
    property_name : go to state 208


state 192
    [ 36: callable_variable => dereferencable "[" optional_expr "]" . ]*
    default action: reduce with rule 36


state 193
    [ 99: expr_without_var => "function" "(" parameter_list ")" . lexical_vars "{" statement_list "}" ]*
    [ 107: lexical_vars => . ]
    [ 108: lexical_vars => . "use" "(" lexical_var_list ")" ]
    default action: reduce with rule 107
    "use" : shift, and go to state 116
    lexical_vars : go to state 212


state 194
    [ 45: function_call => <NAME> "(" argument_list ")" . ]*
    default action: reduce with rule 45


state 195
    [ 22: for_exprs => non_empty_for_exprs . ]*
    [ 23: non_empty_for_exprs => non_empty_for_exprs . "," expr ]*
    default action: reduce with rule 22
    "," : shift, and go to state 213


state 196
    [ 24: non_empty_for_exprs => expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 24
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 197
    [ 101: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list . "}" ]*
    [ 7: statement_list => statement_list . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    "}" : shift, and go to state 214
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 13
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 198
    [ 108: lexical_vars => "use" "(" lexical_var_list . ")" ]*
    [ 109: lexical_var_list => lexical_var_list . "," <VARIABLE> ]*
    no default action
    ")" : shift, and go to state 215
    "," : shift, and go to state 216


state 199
    [ 110: lexical_var_list => <VARIABLE> . ]*
    default action: reduce with rule 110


state 200
    [ 9: statement => "{" statement_list "}" . ]*
    default action: reduce with rule 9


state 201
    [ 13: statement => "<?=" expr <INLINE_HTML> . ]*
    default action: reduce with rule 13


state 202
    [ 14: statement => "echo" expr ";" . ]*
    default action: reduce with rule 14


state 203
    [ 16: statement => "while" "(" expr . ")" statement ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ")" : shift, and go to state 217
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 204
    [ 17: statement => "do" statement "while" . "(" expr ")" ";" ]*
    no default action
    "(" : shift, and go to state 218


state 205
    [ 18: statement => "for" "(" for_exprs . ";" for_exprs ";" for_exprs ")" statement ]*
    no default action
    ";" : shift, and go to state 219


state 206
    [ 19: if_statement => "if" "(" expr . ")" statement ]*
    [ 20: if_statement => "if" "(" expr . ")" statement "else" statement ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ")" : shift, and go to state 220
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 207
    [ 63: expr_without_var => expr "?" expr ":" expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 63
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75


state 208
    [ 34: var => dereferencable @0 "->" @1 property_name . ]*
    default action: reduce with rule 34


state 209
    [ 40: property_name => <NAME> . ]*
    default action: reduce with rule 40


state 210
    [ 41: property_name => "{" . expr "}" ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 221
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 211
    [ 42: property_name => simple_var . ]*
    default action: reduce with rule 42


state 212
    [ 99: expr_without_var => "function" "(" parameter_list ")" lexical_vars . "{" statement_list "}" ]*
    no default action
    "{" : shift, and go to state 222


state 213
    [ 23: non_empty_for_exprs => non_empty_for_exprs "," . expr ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 223
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 214
    [ 101: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" . ]*
    default action: reduce with rule 101


state 215
    [ 108: lexical_vars => "use" "(" lexical_var_list ")" . ]*
    default action: reduce with rule 108


state 216
    [ 109: lexical_var_list => lexical_var_list "," . <VARIABLE> ]*
    no default action
    <VARIABLE> : shift, and go to state 224


state 217
    [ 16: statement => "while" "(" expr ")" . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 225
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 218
    [ 17: statement => "do" statement "while" "(" . expr ")" ";" ]*
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    expr : go to state 226
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 219
    [ 18: statement => "for" "(" for_exprs ";" . for_exprs ";" for_exprs ")" statement ]*
    [ 21: for_exprs => . ]
    [ 22: for_exprs => . non_empty_for_exprs ]
    [ 23: non_empty_for_exprs => . non_empty_for_exprs "," expr ]
    [ 24: non_empty_for_exprs => . expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 21
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    for_exprs : go to state 227
    non_empty_for_exprs : go to state 195
    expr : go to state 196
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 220
    [ 19: if_statement => "if" "(" expr ")" . statement ]*
    [ 20: if_statement => "if" "(" expr ")" . statement "else" statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 228
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 221
    [ 41: property_name => "{" expr . "}" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "}" : shift, and go to state 229
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 222
    [ 99: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" . statement_list "}" ]*
    [ 7: statement_list => . statement_list statement ]
    [ 8: statement_list => . ]
    default action: reduce with rule 8
    statement_list : go to state 230


state 223
    [ 23: non_empty_for_exprs => non_empty_for_exprs "," expr . ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    default action: reduce with rule 23
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 224
    [ 109: lexical_var_list => lexical_var_list "," <VARIABLE> . ]*
    default action: reduce with rule 109


state 225
    [ 16: statement => "while" "(" expr ")" statement . ]*
    default action: reduce with rule 16


state 226
    [ 17: statement => "do" statement "while" "(" expr . ")" ";" ]*
    [ 63: expr_without_var => expr . "?" expr ":" expr ]*
    [ 64: expr_without_var => expr . "?" ":" expr ]*
    [ 65: expr_without_var => expr . ">" expr ]*
    [ 66: expr_without_var => expr . "<" expr ]*
    [ 67: expr_without_var => expr . ">=" expr ]*
    [ 68: expr_without_var => expr . "<=" expr ]*
    [ 69: expr_without_var => expr . "==" expr ]*
    [ 70: expr_without_var => expr . "===" expr ]*
    [ 71: expr_without_var => expr . "!=" expr ]*
    [ 72: expr_without_var => expr . "!==" expr ]*
    [ 73: expr_without_var => expr . "^" expr ]*
    [ 74: expr_without_var => expr . "|" expr ]*
    [ 75: expr_without_var => expr . "&" expr ]*
    [ 76: expr_without_var => expr . ">>" expr ]*
    [ 77: expr_without_var => expr . "<<" expr ]*
    [ 78: expr_without_var => expr . "&&" expr ]*
    [ 79: expr_without_var => expr . "||" expr ]*
    [ 80: expr_without_var => expr . "OR" expr ]*
    [ 81: expr_without_var => expr . "XOR" expr ]*
    [ 82: expr_without_var => expr . "AND" expr ]*
    [ 83: expr_without_var => expr . "+" expr ]*
    [ 84: expr_without_var => expr . "-" expr ]*
    [ 85: expr_without_var => expr . "*" expr ]*
    [ 86: expr_without_var => expr . "/" expr ]*
    [ 87: expr_without_var => expr . "%" expr ]*
    [ 88: expr_without_var => expr . "**" expr ]*
    no default action
    "+" : shift, and go to state 79
    "-" : shift, and go to state 80
    "*" : shift, and go to state 81
    "/" : shift, and go to state 82
    "**" : shift, and go to state 84
    "?" : shift, and go to state 60
    "%" : shift, and go to state 83
    ">" : shift, and go to state 61
    "<" : shift, and go to state 62
    ">=" : shift, and go to state 63
    "<=" : shift, and go to state 64
    "==" : shift, and go to state 65
    "===" : shift, and go to state 66
    "!=" : shift, and go to state 67
    "!==" : shift, and go to state 68
    "&" : shift, and go to state 71
    "|" : shift, and go to state 70
    "^" : shift, and go to state 69
    "<<" : shift, and go to state 73
    ">>" : shift, and go to state 72
    ")" : shift, and go to state 231
    "&&" : shift, and go to state 74
    "||" : shift, and go to state 75
    "OR" : shift, and go to state 76
    "AND" : shift, and go to state 78
    "XOR" : shift, and go to state 77


state 227
    [ 18: statement => "for" "(" for_exprs ";" for_exprs . ";" for_exprs ")" statement ]*
    no default action
    ";" : shift, and go to state 232


state 228
    [ 19: if_statement => "if" "(" expr ")" statement . ]*
    [ 20: if_statement => "if" "(" expr ")" statement . "else" statement ]*
    default action: reduce with rule 19
    "else" : shift, and go to state 233


state 229
    [ 41: property_name => "{" expr "}" . ]*
    default action: reduce with rule 41


state 230
    [ 99: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list . "}" ]*
    [ 7: statement_list => statement_list . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    "}" : shift, and go to state 234
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 13
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 231
    [ 17: statement => "do" statement "while" "(" expr ")" . ";" ]*
    no default action
    ";" : shift, and go to state 235


state 232
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" . for_exprs ")" statement ]*
    [ 21: for_exprs => . ]
    [ 22: for_exprs => . non_empty_for_exprs ]
    [ 23: non_empty_for_exprs => . non_empty_for_exprs "," expr ]
    [ 24: non_empty_for_exprs => . expr ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    default action: reduce with rule 21
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "!" : shift, and go to state 36
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    for_exprs : go to state 236
    non_empty_for_exprs : go to state 195
    expr : go to state 196
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 233
    [ 20: if_statement => "if" "(" expr ")" statement "else" . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 237
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 234
    [ 99: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" . ]*
    default action: reduce with rule 99


state 235
    [ 17: statement => "do" statement "while" "(" expr ")" ";" . ]*
    default action: reduce with rule 17


state 236
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs . ")" statement ]*
    no default action
    ")" : shift, and go to state 238


state 237
    [ 20: if_statement => "if" "(" expr ")" statement "else" statement . ]*
    default action: reduce with rule 20


state 238
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" . statement ]*
    [ 9: statement => . "{" statement_list "}" ]
    [ 10: statement => . ";" ]
    [ 11: statement => . expr ";" ]
    [ 12: statement => . <INLINE_HTML> ]
    [ 13: statement => . "<?=" expr <INLINE_HTML> ]
    [ 14: statement => . "echo" expr ";" ]
    [ 15: statement => . if_statement ]
    [ 16: statement => . "while" "(" expr ")" statement ]
    [ 17: statement => . "do" statement "while" "(" expr ")" ";" ]
    [ 18: statement => . "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]
    [ 25: expr => . var ]
    [ 26: expr => . expr_without_var ]
    [ 19: if_statement => . "if" "(" expr ")" statement ]
    [ 20: if_statement => . "if" "(" expr ")" statement "else" statement ]
    [ 31: var => . callable_variable ]
    [ 34: var => . dereferencable @0 "->" @1 property_name ]
    [ 51: expr_without_var => . var "=" expr ]
    [ 52: expr_without_var => . var "+=" expr ]
    [ 53: expr_without_var => . var "-=" expr ]
    [ 54: expr_without_var => . var "**=" expr ]
    [ 55: expr_without_var => . var "*=" expr ]
    [ 56: expr_without_var => . var "/=" expr ]
    [ 57: expr_without_var => . var "&=" expr ]
    [ 58: expr_without_var => . var "|=" expr ]
    [ 59: expr_without_var => . var "^=" expr ]
    [ 60: expr_without_var => . var ">>=" expr ]
    [ 61: expr_without_var => . var "<<=" expr ]
    [ 62: expr_without_var => . var "%=" expr ]
    [ 63: expr_without_var => . expr "?" expr ":" expr ]
    [ 64: expr_without_var => . expr "?" ":" expr ]
    [ 65: expr_without_var => . expr ">" expr ]
    [ 66: expr_without_var => . expr "<" expr ]
    [ 67: expr_without_var => . expr ">=" expr ]
    [ 68: expr_without_var => . expr "<=" expr ]
    [ 69: expr_without_var => . expr "==" expr ]
    [ 70: expr_without_var => . expr "===" expr ]
    [ 71: expr_without_var => . expr "!=" expr ]
    [ 72: expr_without_var => . expr "!==" expr ]
    [ 73: expr_without_var => . expr "^" expr ]
    [ 74: expr_without_var => . expr "|" expr ]
    [ 75: expr_without_var => . expr "&" expr ]
    [ 76: expr_without_var => . expr ">>" expr ]
    [ 77: expr_without_var => . expr "<<" expr ]
    [ 78: expr_without_var => . expr "&&" expr ]
    [ 79: expr_without_var => . expr "||" expr ]
    [ 80: expr_without_var => . expr "OR" expr ]
    [ 81: expr_without_var => . expr "XOR" expr ]
    [ 82: expr_without_var => . expr "AND" expr ]
    [ 83: expr_without_var => . expr "+" expr ]
    [ 84: expr_without_var => . expr "-" expr ]
    [ 85: expr_without_var => . expr "*" expr ]
    [ 86: expr_without_var => . expr "/" expr ]
    [ 87: expr_without_var => . expr "%" expr ]
    [ 88: expr_without_var => . expr "**" expr ]
    [ 89: expr_without_var => . "(" expr ")" ]
    [ 90: expr_without_var => . "+" expr ]
    [ 91: expr_without_var => . "-" expr ]
    [ 92: expr_without_var => . "!" expr ]
    [ 93: expr_without_var => . "~" expr ]
    [ 94: expr_without_var => . "++" var ]
    [ 95: expr_without_var => . "--" var ]
    [ 96: expr_without_var => . var "++" ]
    [ 97: expr_without_var => . var "--" ]
    [ 98: expr_without_var => . primitive ]
    [ 99: expr_without_var => . "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" ]
    [ 100: expr_without_var => . function_call ]
    [ 35: callable_variable => . simple_var ]
    [ 36: callable_variable => . dereferencable "[" optional_expr "]" ]
    [ 29: dereferencable => . var ]
    [ 30: dereferencable => . "(" expr ")" ]
    [ 111: primitive => . <INT> ]
    [ 112: primitive => . <DECIMAL> ]
    [ 113: primitive => . <STRING> ]
    [ 114: primitive => . <NAME> ]
    [ 115: primitive => . "[" array_pair_list "]" ]
    [ 116: primitive => . "list" "(" array_pair_list ")" ]
    [ 45: function_call => . <NAME> "(" argument_list ")" ]
    [ 46: function_call => . callable_expr "(" argument_list ")" ]
    [ 37: simple_var => . <VARIABLE> ]
    [ 38: simple_var => . "$" "{" expr "}" ]
    [ 39: simple_var => . "$" simple_var ]
    [ 27: callable_expr => . callable_variable ]
    [ 28: callable_expr => . "(" expr ")" ]
    no default action
    <INLINE_HTML> : shift, and go to state 121
    "<?=" : shift, and go to state 122
    <NAME> : shift, and go to state 47
    <DECIMAL> : shift, and go to state 45
    <INT> : shift, and go to state 44
    <STRING> : shift, and go to state 46
    "$" : shift, and go to state 17
    <VARIABLE> : shift, and go to state 16
    "+" : shift, and go to state 34
    "-" : shift, and go to state 35
    "~" : shift, and go to state 37
    "++" : shift, and go to state 38
    "--" : shift, and go to state 39
    "(" : shift, and go to state 33
    "[" : shift, and go to state 48
    "{" : shift, and go to state 118
    ";" : shift, and go to state 119
    "!" : shift, and go to state 36
    "if" : shift, and go to state 128
    "echo" : shift, and go to state 123
    "while" : shift, and go to state 125
    "do" : shift, and go to state 126
    "for" : shift, and go to state 127
    "function" : shift, and go to state 41
    "list" : shift, and go to state 14
    statement : go to state 239
    if_statement : go to state 124
    expr : go to state 120
    callable_expr : go to state 15
    dereferencable : go to state 32
    var : go to state 29
    callable_variable : go to state 31
    simple_var : go to state 43
    function_call : go to state 42
    expr_without_var : go to state 30
    primitive : go to state 40


state 239
    [ 18: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement . ]*
    default action: reduce with rule 18


