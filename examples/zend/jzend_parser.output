state 0
    [ 0: (accept) => . start <EOF> ]*
    default action: reduce with rule 3 (top_statement_list)
    start : go to state 1
    top_statement_list : go to state 2


state 1
    [ 0: (accept) => start . <EOF> ]*
    no default action
    <EOF> : shift, and go to state 3


state 2
    [ 1: start => top_statement_list . ]*
    [ 2: top_statement_list => top_statement_list . top_statement ]*
    default action: reduce with rule 1 (start)
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "__halt_compiler" : shift, and go to state 8
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "const" : shift, and go to state 7
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 9
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    top_statement : go to state 4
    statement : go to state 5
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    function_declaration_statement : go to state 6
    primitive : go to state 37


state 3
    [ 0: (accept) => start <EOF> . ]*
    default action: reduce with rule 0 ((accept))


state 4
    [ 2: top_statement_list => top_statement_list top_statement . ]*
    default action: reduce with rule 2 (top_statement_list)


state 5
    [ 4: top_statement => statement . ]*
    default action: reduce with rule 4 (top_statement)


state 6
    [ 5: top_statement => function_declaration_statement . ]*
    default action: reduce with rule 5 (top_statement)


state 7
    [ 6: top_statement => "const" . const_list ";" ]*
    no default action
    <NAME> : shift, and go to state 12
    const_list : go to state 10
    const_decl : go to state 11


state 8
    [ 7: top_statement => "__halt_compiler" . "(" ")" ";" ]*
    no default action
    "(" : shift, and go to state 13


state 9
    [ 133: function_declaration_statement => "function" . <NAME> "(" parameter_list ")" "{" statement_list "}" ]*
    [ 131: expr_without_var => "function" . "(" parameter_list ")" lexical_vars "{" statement_list "}" ]*
    no default action
    <NAME> : shift, and go to state 16
    "(" : shift, and go to state 119


state 10
    [ 6: top_statement => "const" const_list . ";" ]*
    [ 8: const_list => const_list . "," const_decl ]*
    no default action
    "," : shift, and go to state 25
    ";" : shift, and go to state 24


state 11
    [ 9: const_list => const_decl . ]*
    default action: reduce with rule 9 (const_list)


state 12
    [ 10: const_decl => <NAME> . "=" expr ]*
    no default action
    "=" : shift, and go to state 26


state 13
    [ 7: top_statement => "__halt_compiler" "(" . ")" ";" ]*
    no default action
    ")" : shift, and go to state 27


state 14
    [ 35: echo_expr_list => expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 35 (echo_expr_list)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 15
    [ 36: optional_num => <INT> . ]*
    default action: reduce with rule 36 (optional_num)


state 16
    [ 133: function_declaration_statement => "function" <NAME> . "(" parameter_list ")" "{" statement_list "}" ]*
    no default action
    "(" : shift, and go to state 54


state 17
    [ 173: array_pair_list => non_empty_array_pair_list . ]*
    [ 174: non_empty_array_pair_list => non_empty_array_pair_list . "," array_pair ]*
    [ 175: non_empty_array_pair_list => non_empty_array_pair_list . "," ]*
    default action: reduce with rule 173 (array_pair_list)
    "," : shift, and go to state 59


state 18
    [ 176: non_empty_array_pair_list => possible_array_pair . ]*
    default action: reduce with rule 176 (non_empty_array_pair_list)


state 19
    [ 177: possible_array_pair => array_pair . ]*
    default action: reduce with rule 177 (possible_array_pair)


state 20
    [ 179: array_pair => expr . ]*
    [ 180: array_pair => expr . "=>" expr ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 179 (array_pair)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "=>" : shift, and go to state 60
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 21
    [ 49: dereferencable => "(" . expr ")" ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 61
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 22
    [ 50: dereferencable => dereferencable_primitive . ]*
    default action: reduce with rule 50 (dereferencable)


state 23
    [ 51: dereferencable_primitive => "[" . array_pair_list "]" ]*
    default action: reduce with rule 178 (possible_array_pair)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair_list : go to state 62
    non_empty_array_pair_list : go to state 17
    possible_array_pair : go to state 18
    array_pair : go to state 19


state 24
    [ 6: top_statement => "const" const_list ";" . ]*
    default action: reduce with rule 6 (top_statement)


state 25
    [ 8: const_list => const_list "," . const_decl ]*
    no default action
    <NAME> : shift, and go to state 12
    const_decl : go to state 72


state 26
    [ 10: const_decl => <NAME> "=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 73
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 27
    [ 7: top_statement => "__halt_compiler" "(" ")" . ";" ]*
    no default action
    ";" : shift, and go to state 74


state 28
    [ 11: statement_list => statement_list statement . ]*
    default action: reduce with rule 11 (statement_list)


state 29
    [ 118: expr_without_var => "+" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 75
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 30
    [ 119: expr_without_var => "-" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 76
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 31
    [ 120: expr_without_var => "!" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 77
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 32
    [ 121: expr_without_var => "~" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 78
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 33
    [ 122: expr_without_var => "print" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 79
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 34
    [ 123: expr_without_var => "++" . var ]*
    no default action
    <STRING> : shift, and go to state 51
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "(" : shift, and go to state 21
    "[" : shift, and go to state 23
    "array" : shift, and go to state 50
    dereferencable : go to state 68
    dereferencable_primitive : go to state 22
    var : go to state 80
    callable_variable : go to state 81
    simple_var : go to state 39


state 35
    [ 124: expr_without_var => "--" . var ]*
    no default action
    <STRING> : shift, and go to state 51
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "(" : shift, and go to state 21
    "[" : shift, and go to state 23
    "array" : shift, and go to state 50
    dereferencable : go to state 68
    dereferencable_primitive : go to state 22
    var : go to state 82
    callable_variable : go to state 81
    simple_var : go to state 39


state 36
    [ 129: expr_without_var => "`" . @2 quote_list "`" @3 ]*
    default action: reduce with rule 127 (@2)
    @2 : go to state 83


state 37
    [ 130: expr_without_var => primitive . ]*
    default action: reduce with rule 130 (expr_without_var)


state 38
    [ 132: expr_without_var => function_call . ]*
    default action: reduce with rule 132 (expr_without_var)


state 39
    [ 56: callable_variable => simple_var . ]*
    default action: reduce with rule 56 (callable_variable)


state 40
    [ 50: dereferencable => dereferencable_primitive . ]*
    [ 157: primitive => dereferencable_primitive . ]*
    default action: reduce with rule 157 (primitive)
    "->" : reduce with rule 50 (dereferencable)
    "[" : reduce with rule 50 (dereferencable)


state 41
    [ 143: primitive => <INT> . ]*
    default action: reduce with rule 143 (primitive)


state 42
    [ 144: primitive => <DECIMAL> . ]*
    default action: reduce with rule 144 (primitive)


state 43
    [ 145: primitive => <NAME> . ]*
    [ 70: function_call => <NAME> . "(" argument_list ")" ]*
    default action: reduce with rule 145 (primitive)
    "(" : shift, and go to state 84


state 44
    [ 148: primitive => """ . @4 quote_list """ @5 ]*
    default action: reduce with rule 146 (@4)
    @4 : go to state 85


state 45
    [ 152: primitive => <HEREDOC_HEADER> . @6 @7 heredoc_list <END_OF_HEREDOC> @8 ]*
    default action: reduce with rule 149 (@6)
    @6 : go to state 86


state 46
    [ 156: primitive => <NOWDOC_HEADER> . @9 @10 heredoc_list <END_OF_HEREDOC> @11 ]*
    default action: reduce with rule 153 (@9)
    @9 : go to state 87


state 47
    [ 71: function_call => callable_expr . "(" argument_list ")" ]*
    no default action
    "(" : shift, and go to state 88


state 48
    [ 59: simple_var => <VARIABLE> . ]*
    default action: reduce with rule 59 (simple_var)


state 49
    [ 60: simple_var => "$" . "{" expr "}" ]*
    [ 61: simple_var => "$" . simple_var ]*
    no default action
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "{" : shift, and go to state 89
    simple_var : go to state 90


state 50
    [ 52: dereferencable_primitive => "array" . "(" array_pair_list ")" ]*
    no default action
    "(" : shift, and go to state 91


state 51
    [ 53: dereferencable_primitive => <STRING> . ]*
    default action: reduce with rule 53 (dereferencable_primitive)


state 52
    [ 34: echo_expr_list => echo_expr_list "," . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 92
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 53
    [ 131: expr_without_var => "function" . "(" parameter_list ")" lexical_vars "{" statement_list "}" ]*
    no default action
    "(" : shift, and go to state 119


state 54
    [ 133: function_declaration_statement => "function" <NAME> "(" . parameter_list ")" "{" statement_list "}" ]*
    default action: reduce with rule 134 (parameter_list)
    <VARIABLE> : shift, and go to state 57
    parameter_list : go to state 120
    non_empty_parameter_list : go to state 55
    parameter : go to state 56


state 55
    [ 135: parameter_list => non_empty_parameter_list . ]*
    [ 136: non_empty_parameter_list => non_empty_parameter_list . "," parameter ]*
    default action: reduce with rule 135 (parameter_list)
    "," : shift, and go to state 121


state 56
    [ 137: non_empty_parameter_list => parameter . ]*
    default action: reduce with rule 137 (non_empty_parameter_list)


state 57
    [ 138: parameter => <VARIABLE> . ]*
    default action: reduce with rule 138 (parameter)


state 58
    [ 69: optional_expr => expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 69 (optional_expr)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 59
    [ 174: non_empty_array_pair_list => non_empty_array_pair_list "," . array_pair ]*
    [ 175: non_empty_array_pair_list => non_empty_array_pair_list "," . ]*
    default action: reduce with rule 175 (non_empty_array_pair_list)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair : go to state 122


state 60
    [ 180: array_pair => expr "=>" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 123
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 61
    [ 49: dereferencable => "(" expr . ")" ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    ")" : shift, and go to state 124
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 62
    [ 51: dereferencable_primitive => "[" array_pair_list . "]" ]*
    no default action
    "]" : shift, and go to state 125


state 63
    [ 73: argument_list => non_empty_argument_list . ]*
    [ 74: non_empty_argument_list => non_empty_argument_list . "," expr ]*
    default action: reduce with rule 73 (argument_list)
    "," : shift, and go to state 127


state 64
    [ 75: non_empty_argument_list => expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 75 (non_empty_argument_list)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 65
    [ 44: expr => var . ]*
    [ 78: expr_without_var => var . "=" expr ]*
    [ 79: expr_without_var => var . "+=" expr ]*
    [ 80: expr_without_var => var . "-=" expr ]*
    [ 81: expr_without_var => var . "**=" expr ]*
    [ 82: expr_without_var => var . "*=" expr ]*
    [ 83: expr_without_var => var . "/=" expr ]*
    [ 84: expr_without_var => var . "&=" expr ]*
    [ 85: expr_without_var => var . "|=" expr ]*
    [ 86: expr_without_var => var . "^=" expr ]*
    [ 87: expr_without_var => var . ">>=" expr ]*
    [ 88: expr_without_var => var . "<<=" expr ]*
    [ 89: expr_without_var => var . "%=" expr ]*
    [ 125: expr_without_var => var . "++" ]*
    [ 126: expr_without_var => var . "--" ]*
    [ 48: dereferencable => var . ]*
    default action: reduce with rule 44 (expr)
    "=" : shift, and go to state 128
    "+=" : shift, and go to state 129
    "-=" : shift, and go to state 130
    "*=" : shift, and go to state 132
    "**=" : shift, and go to state 131
    "/=" : shift, and go to state 133
    "&=" : shift, and go to state 134
    "|=" : shift, and go to state 135
    "^=" : shift, and go to state 136
    ">>=" : shift, and go to state 137
    "<<=" : shift, and go to state 138
    "%=" : shift, and go to state 139
    "++" : shift, and go to state 140
    "--" : shift, and go to state 141
    "->" : reduce with rule 48 (dereferencable)
    "[" : reduce with rule 48 (dereferencable)


state 66
    [ 45: expr => expr_without_var . ]*
    default action: reduce with rule 45 (expr)


state 67
    [ 54: var => callable_variable . ]*
    [ 46: callable_expr => callable_variable . ]*
    default action: reduce with rule 54 (var)
    "(" : reduce with rule 46 (callable_expr)


state 68
    [ 55: var => dereferencable . arrow_and_property ]*
    [ 57: callable_variable => dereferencable . "[" optional_expr "]" ]*
    [ 58: callable_variable => dereferencable . arrow_and_property "(" argument_list ")" ]*
    no default action
    "->" : shift, and go to state 144
    "[" : shift, and go to state 143
    arrow_and_property : go to state 142


state 69
    [ 76: expr_without_var => "list" . "(" array_pair_list ")" "=" expr ]*
    no default action
    "(" : shift, and go to state 145


state 70
    [ 77: expr_without_var => "[" . array_pair_list "]" "=" expr ]*
    [ 51: dereferencable_primitive => "[" . array_pair_list "]" ]*
    default action: reduce with rule 178 (possible_array_pair)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair_list : go to state 146
    non_empty_array_pair_list : go to state 17
    possible_array_pair : go to state 18
    array_pair : go to state 19


state 71
    [ 117: expr_without_var => "(" . expr ")" ]*
    [ 49: dereferencable => "(" . expr ")" ]*
    [ 47: callable_expr => "(" . expr ")" ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 147
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 72
    [ 8: const_list => const_list "," const_decl . ]*
    default action: reduce with rule 8 (const_list)


state 73
    [ 10: const_decl => <NAME> "=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 10 (const_decl)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 74
    [ 7: top_statement => "__halt_compiler" "(" ")" ";" . ]*
    default action: reduce with rule 7 (top_statement)


state 75
    [ 118: expr_without_var => "+" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 118 (expr_without_var)


state 76
    [ 119: expr_without_var => "-" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 119 (expr_without_var)


state 77
    [ 120: expr_without_var => "!" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 120 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 78
    [ 121: expr_without_var => "~" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 121 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 79
    [ 122: expr_without_var => "print" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 122 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 80
    [ 123: expr_without_var => "++" var . ]*
    [ 48: dereferencable => var . ]*
    default action: reduce with rule 123 (expr_without_var)
    "->" : reduce with rule 48 (dereferencable)
    "[" : reduce with rule 48 (dereferencable)


state 81
    [ 54: var => callable_variable . ]*
    default action: reduce with rule 54 (var)


state 82
    [ 124: expr_without_var => "--" var . ]*
    [ 48: dereferencable => var . ]*
    default action: reduce with rule 124 (expr_without_var)
    "->" : reduce with rule 48 (dereferencable)
    "[" : reduce with rule 48 (dereferencable)


state 83
    [ 129: expr_without_var => "`" @2 . quote_list "`" @3 ]*
    default action: reduce with rule 163 (quote_list)
    quote_list : go to state 148


state 84
    [ 70: function_call => <NAME> "(" . argument_list ")" ]*
    default action: reduce with rule 72 (argument_list)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 64
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    argument_list : go to state 149
    non_empty_argument_list : go to state 63
    expr_without_var : go to state 66
    primitive : go to state 37


state 85
    [ 148: primitive => """ @4 . quote_list """ @5 ]*
    default action: reduce with rule 163 (quote_list)
    quote_list : go to state 150


state 86
    [ 152: primitive => <HEREDOC_HEADER> @6 . @7 heredoc_list <END_OF_HEREDOC> @8 ]*
    default action: reduce with rule 150 (@7)
    @7 : go to state 151


state 87
    [ 156: primitive => <NOWDOC_HEADER> @9 . @10 heredoc_list <END_OF_HEREDOC> @11 ]*
    default action: reduce with rule 154 (@10)
    @10 : go to state 152


state 88
    [ 71: function_call => callable_expr "(" . argument_list ")" ]*
    default action: reduce with rule 72 (argument_list)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 64
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    argument_list : go to state 153
    non_empty_argument_list : go to state 63
    expr_without_var : go to state 66
    primitive : go to state 37


state 89
    [ 60: simple_var => "$" "{" . expr "}" ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 154
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 90
    [ 61: simple_var => "$" simple_var . ]*
    default action: reduce with rule 61 (simple_var)


state 91
    [ 52: dereferencable_primitive => "array" "(" . array_pair_list ")" ]*
    default action: reduce with rule 178 (possible_array_pair)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair_list : go to state 155
    non_empty_array_pair_list : go to state 17
    possible_array_pair : go to state 18
    array_pair : go to state 19


state 92
    [ 34: echo_expr_list => echo_expr_list "," expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 34 (echo_expr_list)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 93
    [ 90: expr_without_var => expr "?" . expr ":" expr ]*
    [ 91: expr_without_var => expr "?" . ":" expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    ":" : shift, and go to state 161
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 160
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 94
    [ 92: expr_without_var => expr ">" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 162
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 95
    [ 93: expr_without_var => expr "<" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 163
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 96
    [ 94: expr_without_var => expr ">=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 164
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 97
    [ 95: expr_without_var => expr "<=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 165
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 98
    [ 96: expr_without_var => expr "==" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 166
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 99
    [ 97: expr_without_var => expr "===" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 167
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 100
    [ 98: expr_without_var => expr "!=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 168
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 101
    [ 99: expr_without_var => expr "!==" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 169
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 102
    [ 100: expr_without_var => expr "^" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 170
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 103
    [ 101: expr_without_var => expr "|" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 171
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 104
    [ 102: expr_without_var => expr "&" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 172
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 105
    [ 103: expr_without_var => expr ">>" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 173
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 106
    [ 104: expr_without_var => expr "<<" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 174
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 107
    [ 105: expr_without_var => expr "&&" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 175
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 108
    [ 106: expr_without_var => expr "||" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 176
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 109
    [ 107: expr_without_var => expr "OR" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 177
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 110
    [ 108: expr_without_var => expr "XOR" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 178
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 111
    [ 109: expr_without_var => expr "AND" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 179
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 112
    [ 110: expr_without_var => expr "+" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 180
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 113
    [ 111: expr_without_var => expr "-" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 181
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 114
    [ 112: expr_without_var => expr "*" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 182
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 115
    [ 113: expr_without_var => expr "/" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 183
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 116
    [ 114: expr_without_var => expr "%" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 184
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 117
    [ 115: expr_without_var => expr "**" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 185
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 118
    [ 116: expr_without_var => expr "." . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 186
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 119
    [ 131: expr_without_var => "function" "(" . parameter_list ")" lexical_vars "{" statement_list "}" ]*
    default action: reduce with rule 134 (parameter_list)
    <VARIABLE> : shift, and go to state 57
    parameter_list : go to state 187
    non_empty_parameter_list : go to state 55
    parameter : go to state 56


state 120
    [ 133: function_declaration_statement => "function" <NAME> "(" parameter_list . ")" "{" statement_list "}" ]*
    no default action
    ")" : shift, and go to state 188


state 121
    [ 136: non_empty_parameter_list => non_empty_parameter_list "," . parameter ]*
    no default action
    <VARIABLE> : shift, and go to state 57
    parameter : go to state 190


state 122
    [ 174: non_empty_array_pair_list => non_empty_array_pair_list "," array_pair . ]*
    default action: reduce with rule 174 (non_empty_array_pair_list)


state 123
    [ 180: array_pair => expr "=>" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 180 (array_pair)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 124
    [ 49: dereferencable => "(" expr ")" . ]*
    default action: reduce with rule 49 (dereferencable)


state 125
    [ 51: dereferencable_primitive => "[" array_pair_list "]" . ]*
    default action: reduce with rule 51 (dereferencable_primitive)


state 126
    [ 162: quote_list => quote_list encaps . ]*
    default action: reduce with rule 162 (quote_list)


state 127
    [ 74: non_empty_argument_list => non_empty_argument_list "," . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 207
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 128
    [ 78: expr_without_var => var "=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 216
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 129
    [ 79: expr_without_var => var "+=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 217
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 130
    [ 80: expr_without_var => var "-=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 218
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 131
    [ 81: expr_without_var => var "**=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 219
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 132
    [ 82: expr_without_var => var "*=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 220
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 133
    [ 83: expr_without_var => var "/=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 221
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 134
    [ 84: expr_without_var => var "&=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 222
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 135
    [ 85: expr_without_var => var "|=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 223
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 136
    [ 86: expr_without_var => var "^=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 224
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 137
    [ 87: expr_without_var => var ">>=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 225
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 138
    [ 88: expr_without_var => var "<<=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 226
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 139
    [ 89: expr_without_var => var "%=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 227
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 140
    [ 125: expr_without_var => var "++" . ]*
    default action: reduce with rule 125 (expr_without_var)


state 141
    [ 126: expr_without_var => var "--" . ]*
    default action: reduce with rule 126 (expr_without_var)


state 142
    [ 55: var => dereferencable arrow_and_property . ]*
    [ 58: callable_variable => dereferencable arrow_and_property . "(" argument_list ")" ]*
    default action: reduce with rule 55 (var)
    "(" : shift, and go to state 228


state 143
    [ 57: callable_variable => dereferencable "[" . optional_expr "]" ]*
    default action: reduce with rule 68 (optional_expr)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 58
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    optional_expr : go to state 229
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 144
    [ 64: arrow_and_property => "->" . @0 property_name @1 ]*
    default action: reduce with rule 62 (@0)
    @0 : go to state 230


state 145
    [ 76: expr_without_var => "list" "(" . array_pair_list ")" "=" expr ]*
    default action: reduce with rule 178 (possible_array_pair)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair_list : go to state 231
    non_empty_array_pair_list : go to state 17
    possible_array_pair : go to state 18
    array_pair : go to state 19


state 146
    [ 77: expr_without_var => "[" array_pair_list . "]" "=" expr ]*
    [ 51: dereferencable_primitive => "[" array_pair_list . "]" ]*
    no default action
    "]" : shift, and go to state 232


state 147
    [ 117: expr_without_var => "(" expr . ")" ]*
    [ 49: dereferencable => "(" expr . ")" ]*
    [ 47: callable_expr => "(" expr . ")" ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    ")" : shift, and go to state 233
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 148
    [ 129: expr_without_var => "`" @2 quote_list . "`" @3 ]*
    [ 162: quote_list => quote_list . encaps ]*
    no default action
    "`" : shift, and go to state 234
    <ANY_CONTENT> : shift, and go to state 211
    <VARIABLE_IN_STRING> : shift, and go to state 212
    <PROPERTY_IN_STRING> : shift, and go to state 213
    <OFFSET_IN_STRING> : shift, and go to state 214
    "${" : shift, and go to state 215
    encaps : go to state 126


state 149
    [ 70: function_call => <NAME> "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 235


state 150
    [ 148: primitive => """ @4 quote_list . """ @5 ]*
    [ 162: quote_list => quote_list . encaps ]*
    no default action
    """ : shift, and go to state 236
    <ANY_CONTENT> : shift, and go to state 211
    <VARIABLE_IN_STRING> : shift, and go to state 212
    <PROPERTY_IN_STRING> : shift, and go to state 213
    <OFFSET_IN_STRING> : shift, and go to state 214
    "${" : shift, and go to state 215
    encaps : go to state 126


state 151
    [ 152: primitive => <HEREDOC_HEADER> @6 @7 . heredoc_list <END_OF_HEREDOC> @8 ]*
    default action: reduce with rule 159 (heredoc_list)
    heredoc_list : go to state 237


state 152
    [ 156: primitive => <NOWDOC_HEADER> @9 @10 . heredoc_list <END_OF_HEREDOC> @11 ]*
    default action: reduce with rule 159 (heredoc_list)
    heredoc_list : go to state 238


state 153
    [ 71: function_call => callable_expr "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 239


state 154
    [ 60: simple_var => "$" "{" expr . "}" ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "}" : shift, and go to state 240
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 155
    [ 52: dereferencable_primitive => "array" "(" array_pair_list . ")" ]*
    no default action
    ")" : shift, and go to state 241


state 156
    [ 27: foreach_as => foreach_variable . ]*
    [ 28: foreach_as => foreach_variable . "=>" foreach_variable ]*
    default action: reduce with rule 27 (foreach_as)
    "=>" : shift, and go to state 242


state 157
    [ 29: foreach_variable => var . ]*
    [ 48: dereferencable => var . ]*
    default action: reduce with rule 29 (foreach_variable)
    "->" : reduce with rule 48 (dereferencable)
    "[" : reduce with rule 48 (dereferencable)


state 158
    [ 30: foreach_variable => "list" . "(" array_pair_list ")" ]*
    no default action
    "(" : shift, and go to state 243


state 159
    [ 31: foreach_variable => "[" . array_pair_list "]" ]*
    [ 51: dereferencable_primitive => "[" . array_pair_list "]" ]*
    default action: reduce with rule 178 (possible_array_pair)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair_list : go to state 244
    non_empty_array_pair_list : go to state 17
    possible_array_pair : go to state 18
    array_pair : go to state 19


state 160
    [ 90: expr_without_var => expr "?" expr . ":" expr ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    ":" : shift, and go to state 245
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 161
    [ 91: expr_without_var => expr "?" ":" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 246
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 162
    [ 92: expr_without_var => expr ">" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 92 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 163
    [ 93: expr_without_var => expr "<" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 93 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 164
    [ 94: expr_without_var => expr ">=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 94 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 165
    [ 95: expr_without_var => expr "<=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 95 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 166
    [ 96: expr_without_var => expr "==" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 96 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 167
    [ 97: expr_without_var => expr "===" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 97 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 168
    [ 98: expr_without_var => expr "!=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 98 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 169
    [ 99: expr_without_var => expr "!==" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 99 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 170
    [ 100: expr_without_var => expr "^" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 100 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 171
    [ 101: expr_without_var => expr "|" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 101 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 172
    [ 102: expr_without_var => expr "&" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 102 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 173
    [ 103: expr_without_var => expr ">>" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 103 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "." : shift, and go to state 118


state 174
    [ 104: expr_without_var => expr "<<" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 104 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    "." : shift, and go to state 118


state 175
    [ 105: expr_without_var => expr "&&" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 105 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "." : shift, and go to state 118


state 176
    [ 106: expr_without_var => expr "||" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 106 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "." : shift, and go to state 118


state 177
    [ 107: expr_without_var => expr "OR" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 107 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 178
    [ 108: expr_without_var => expr "XOR" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 108 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "AND" : shift, and go to state 111
    "." : shift, and go to state 118


state 179
    [ 109: expr_without_var => expr "AND" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 109 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 180
    [ 110: expr_without_var => expr "+" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 110 (expr_without_var)
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116


state 181
    [ 111: expr_without_var => expr "-" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 111 (expr_without_var)
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116


state 182
    [ 112: expr_without_var => expr "*" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 112 (expr_without_var)
    "**" : shift, and go to state 117


state 183
    [ 113: expr_without_var => expr "/" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 113 (expr_without_var)
    "**" : shift, and go to state 117


state 184
    [ 114: expr_without_var => expr "%" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 114 (expr_without_var)
    "**" : shift, and go to state 117


state 185
    [ 115: expr_without_var => expr "**" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 115 (expr_without_var)
    "**" : shift, and go to state 117


state 186
    [ 116: expr_without_var => expr "." expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 116 (expr_without_var)
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116


state 187
    [ 131: expr_without_var => "function" "(" parameter_list . ")" lexical_vars "{" statement_list "}" ]*
    no default action
    ")" : shift, and go to state 247


state 188
    [ 133: function_declaration_statement => "function" <NAME> "(" parameter_list ")" . "{" statement_list "}" ]*
    no default action
    "{" : shift, and go to state 248


state 189
    [ 140: lexical_vars => "use" . "(" lexical_var_list ")" ]*
    no default action
    "(" : shift, and go to state 249


state 190
    [ 136: non_empty_parameter_list => non_empty_parameter_list "," parameter . ]*
    default action: reduce with rule 136 (non_empty_parameter_list)


state 191
    [ 13: statement => "{" . statement_list "}" ]*
    default action: reduce with rule 12 (statement_list)
    statement_list : go to state 250


state 192
    [ 14: statement => ";" . ]*
    default action: reduce with rule 14 (statement)


state 193
    [ 15: statement => expr . ";" ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    ";" : shift, and go to state 251
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 194
    [ 16: statement => inline_html_list . ]*
    [ 32: inline_html_list => inline_html_list . <INLINE_HTML> ]*
    default action: reduce with rule 16 (statement)
    <INLINE_HTML> : shift, and go to state 252


state 195
    [ 17: statement => "<?=" . expr inline_html_list ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 253
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 196
    [ 18: statement => "echo" . echo_expr_list ";" ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    echo_expr_list : go to state 254
    expr : go to state 14
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 197
    [ 19: statement => if_statement . ]*
    default action: reduce with rule 19 (statement)


state 198
    [ 20: statement => "while" . "(" expr ")" statement ]*
    no default action
    "(" : shift, and go to state 255


state 199
    [ 21: statement => "do" . statement "while" "(" expr ")" ";" ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 256
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 200
    [ 22: statement => "for" . "(" for_exprs ";" for_exprs ";" for_exprs ")" statement ]*
    no default action
    "(" : shift, and go to state 257


state 201
    [ 23: statement => "foreach" . "(" expr "as" foreach_as ")" statement ]*
    no default action
    "(" : shift, and go to state 258


state 202
    [ 24: statement => "return" . optional_expr ";" ]*
    default action: reduce with rule 68 (optional_expr)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 58
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    optional_expr : go to state 259
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 203
    [ 25: statement => "break" . optional_num ";" ]*
    default action: reduce with rule 37 (optional_num)
    <INT> : shift, and go to state 15
    optional_num : go to state 260


state 204
    [ 26: statement => "continue" . optional_num ";" ]*
    default action: reduce with rule 37 (optional_num)
    <INT> : shift, and go to state 15
    optional_num : go to state 261


state 205
    [ 33: inline_html_list => <INLINE_HTML> . ]*
    default action: reduce with rule 33 (inline_html_list)


state 206
    [ 38: if_statement => "if" . "(" expr ")" statement ]*
    [ 39: if_statement => "if" . "(" expr ")" statement "else" statement ]*
    no default action
    "(" : shift, and go to state 262


state 207
    [ 74: non_empty_argument_list => non_empty_argument_list "," expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 74 (non_empty_argument_list)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 208
    [ 158: heredoc_list => heredoc_list heredoc_item . ]*
    default action: reduce with rule 158 (heredoc_list)


state 209
    [ 160: heredoc_item => <HEREDOC_END_LABEL> . ]*
    default action: reduce with rule 160 (heredoc_item)


state 210
    [ 161: heredoc_item => encaps . ]*
    default action: reduce with rule 161 (heredoc_item)


state 211
    [ 164: encaps => <ANY_CONTENT> . ]*
    default action: reduce with rule 164 (encaps)


state 212
    [ 165: encaps => <VARIABLE_IN_STRING> . ]*
    default action: reduce with rule 165 (encaps)


state 213
    [ 166: encaps => <PROPERTY_IN_STRING> . ]*
    default action: reduce with rule 166 (encaps)


state 214
    [ 169: encaps => <OFFSET_IN_STRING> . @12 expr "]" @13 ]*
    default action: reduce with rule 167 (@12)
    @12 : go to state 263


state 215
    [ 172: encaps => "${" . @14 expr "}" @15 ]*
    default action: reduce with rule 170 (@14)
    @14 : go to state 264


state 216
    [ 78: expr_without_var => var "=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 78 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 217
    [ 79: expr_without_var => var "+=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 79 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 218
    [ 80: expr_without_var => var "-=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 80 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 219
    [ 81: expr_without_var => var "**=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 81 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 220
    [ 82: expr_without_var => var "*=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 82 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 221
    [ 83: expr_without_var => var "/=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 83 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 222
    [ 84: expr_without_var => var "&=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 84 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 223
    [ 85: expr_without_var => var "|=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 85 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 224
    [ 86: expr_without_var => var "^=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 86 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 225
    [ 87: expr_without_var => var ">>=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 87 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 226
    [ 88: expr_without_var => var "<<=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 88 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 227
    [ 89: expr_without_var => var "%=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 89 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 228
    [ 58: callable_variable => dereferencable arrow_and_property "(" . argument_list ")" ]*
    default action: reduce with rule 72 (argument_list)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 64
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    argument_list : go to state 265
    non_empty_argument_list : go to state 63
    expr_without_var : go to state 66
    primitive : go to state 37


state 229
    [ 57: callable_variable => dereferencable "[" optional_expr . "]" ]*
    no default action
    "]" : shift, and go to state 266


state 230
    [ 64: arrow_and_property => "->" @0 . property_name @1 ]*
    no default action
    <NAME> : shift, and go to state 268
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "{" : shift, and go to state 269
    simple_var : go to state 270
    property_name : go to state 267


state 231
    [ 76: expr_without_var => "list" "(" array_pair_list . ")" "=" expr ]*
    no default action
    ")" : shift, and go to state 271


state 232
    [ 77: expr_without_var => "[" array_pair_list "]" . "=" expr ]*
    [ 51: dereferencable_primitive => "[" array_pair_list "]" . ]*
    default action: reduce with rule 51 (dereferencable_primitive)
    "=" : shift, and go to state 272


state 233
    [ 117: expr_without_var => "(" expr ")" . ]*
    [ 49: dereferencable => "(" expr ")" . ]*
    [ 47: callable_expr => "(" expr ")" . ]*
    default action: reduce with rule 117 (expr_without_var)
    "->" : reduce with rule 49 (dereferencable)
    "(" : reduce with rule 47 (callable_expr)
    "[" : reduce with rule 49 (dereferencable)


state 234
    [ 129: expr_without_var => "`" @2 quote_list "`" . @3 ]*
    default action: reduce with rule 128 (@3)
    @3 : go to state 273


state 235
    [ 70: function_call => <NAME> "(" argument_list ")" . ]*
    default action: reduce with rule 70 (function_call)


state 236
    [ 148: primitive => """ @4 quote_list """ . @5 ]*
    default action: reduce with rule 147 (@5)
    @5 : go to state 274


state 237
    [ 152: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list . <END_OF_HEREDOC> @8 ]*
    [ 158: heredoc_list => heredoc_list . heredoc_item ]*
    no default action
    <ANY_CONTENT> : shift, and go to state 211
    <HEREDOC_END_LABEL> : shift, and go to state 209
    <VARIABLE_IN_STRING> : shift, and go to state 212
    <PROPERTY_IN_STRING> : shift, and go to state 213
    <OFFSET_IN_STRING> : shift, and go to state 214
    "${" : shift, and go to state 215
    <END_OF_HEREDOC> : shift, and go to state 275
    heredoc_item : go to state 208
    encaps : go to state 210


state 238
    [ 156: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list . <END_OF_HEREDOC> @11 ]*
    [ 158: heredoc_list => heredoc_list . heredoc_item ]*
    no default action
    <ANY_CONTENT> : shift, and go to state 211
    <HEREDOC_END_LABEL> : shift, and go to state 209
    <VARIABLE_IN_STRING> : shift, and go to state 212
    <PROPERTY_IN_STRING> : shift, and go to state 213
    <OFFSET_IN_STRING> : shift, and go to state 214
    "${" : shift, and go to state 215
    <END_OF_HEREDOC> : shift, and go to state 276
    heredoc_item : go to state 208
    encaps : go to state 210


state 239
    [ 71: function_call => callable_expr "(" argument_list ")" . ]*
    default action: reduce with rule 71 (function_call)


state 240
    [ 60: simple_var => "$" "{" expr "}" . ]*
    default action: reduce with rule 60 (simple_var)


state 241
    [ 52: dereferencable_primitive => "array" "(" array_pair_list ")" . ]*
    default action: reduce with rule 52 (dereferencable_primitive)


state 242
    [ 28: foreach_as => foreach_variable "=>" . foreach_variable ]*
    no default action
    <STRING> : shift, and go to state 51
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "(" : shift, and go to state 21
    "[" : shift, and go to state 159
    "list" : shift, and go to state 158
    "array" : shift, and go to state 50
    foreach_variable : go to state 279
    dereferencable : go to state 68
    dereferencable_primitive : go to state 22
    var : go to state 157
    callable_variable : go to state 81
    simple_var : go to state 39


state 243
    [ 30: foreach_variable => "list" "(" . array_pair_list ")" ]*
    default action: reduce with rule 178 (possible_array_pair)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 20
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37
    array_pair_list : go to state 280
    non_empty_array_pair_list : go to state 17
    possible_array_pair : go to state 18
    array_pair : go to state 19


state 244
    [ 31: foreach_variable => "[" array_pair_list . "]" ]*
    [ 51: dereferencable_primitive => "[" array_pair_list . "]" ]*
    no default action
    "]" : shift, and go to state 281


state 245
    [ 90: expr_without_var => expr "?" expr ":" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 282
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 246
    [ 91: expr_without_var => expr "?" ":" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 91 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 247
    [ 131: expr_without_var => "function" "(" parameter_list ")" . lexical_vars "{" statement_list "}" ]*
    default action: reduce with rule 139 (lexical_vars)
    "use" : shift, and go to state 189
    lexical_vars : go to state 283


state 248
    [ 133: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" . statement_list "}" ]*
    default action: reduce with rule 12 (statement_list)
    statement_list : go to state 284


state 249
    [ 140: lexical_vars => "use" "(" . lexical_var_list ")" ]*
    no default action
    <VARIABLE> : shift, and go to state 286
    lexical_var_list : go to state 285


state 250
    [ 13: statement => "{" statement_list . "}" ]*
    [ 11: statement_list => statement_list . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    "}" : shift, and go to state 287
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 28
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 251
    [ 15: statement => expr ";" . ]*
    default action: reduce with rule 15 (statement)


state 252
    [ 32: inline_html_list => inline_html_list <INLINE_HTML> . ]*
    default action: reduce with rule 32 (inline_html_list)


state 253
    [ 17: statement => "<?=" expr . inline_html_list ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118
    inline_html_list : go to state 288


state 254
    [ 18: statement => "echo" echo_expr_list . ";" ]*
    [ 34: echo_expr_list => echo_expr_list . "," expr ]*
    no default action
    "," : shift, and go to state 52
    ";" : shift, and go to state 289


state 255
    [ 20: statement => "while" "(" . expr ")" statement ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 290
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 256
    [ 21: statement => "do" statement . "while" "(" expr ")" ";" ]*
    no default action
    "while" : shift, and go to state 291


state 257
    [ 22: statement => "for" "(" . for_exprs ";" for_exprs ";" for_exprs ")" statement ]*
    default action: reduce with rule 40 (for_exprs)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    for_exprs : go to state 292
    non_empty_for_exprs : go to state 277
    expr : go to state 278
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 258
    [ 23: statement => "foreach" "(" . expr "as" foreach_as ")" statement ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 293
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 259
    [ 24: statement => "return" optional_expr . ";" ]*
    no default action
    ";" : shift, and go to state 294


state 260
    [ 25: statement => "break" optional_num . ";" ]*
    no default action
    ";" : shift, and go to state 295


state 261
    [ 26: statement => "continue" optional_num . ";" ]*
    no default action
    ";" : shift, and go to state 296


state 262
    [ 38: if_statement => "if" "(" . expr ")" statement ]*
    [ 39: if_statement => "if" "(" . expr ")" statement "else" statement ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 297
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 263
    [ 169: encaps => <OFFSET_IN_STRING> @12 . expr "]" @13 ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 298
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 264
    [ 172: encaps => "${" @14 . expr "}" @15 ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 299
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 265
    [ 58: callable_variable => dereferencable arrow_and_property "(" argument_list . ")" ]*
    no default action
    ")" : shift, and go to state 300


state 266
    [ 57: callable_variable => dereferencable "[" optional_expr "]" . ]*
    default action: reduce with rule 57 (callable_variable)


state 267
    [ 64: arrow_and_property => "->" @0 property_name . @1 ]*
    default action: reduce with rule 63 (@1)
    @1 : go to state 301


state 268
    [ 65: property_name => <NAME> . ]*
    default action: reduce with rule 65 (property_name)


state 269
    [ 66: property_name => "{" . expr "}" ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 302
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 270
    [ 67: property_name => simple_var . ]*
    default action: reduce with rule 67 (property_name)


state 271
    [ 76: expr_without_var => "list" "(" array_pair_list ")" . "=" expr ]*
    no default action
    "=" : shift, and go to state 303


state 272
    [ 77: expr_without_var => "[" array_pair_list "]" "=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 304
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 273
    [ 129: expr_without_var => "`" @2 quote_list "`" @3 . ]*
    default action: reduce with rule 129 (expr_without_var)


state 274
    [ 148: primitive => """ @4 quote_list """ @5 . ]*
    default action: reduce with rule 148 (primitive)


state 275
    [ 152: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> . @8 ]*
    default action: reduce with rule 151 (@8)
    @8 : go to state 305


state 276
    [ 156: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> . @11 ]*
    default action: reduce with rule 155 (@11)
    @11 : go to state 306


state 277
    [ 41: for_exprs => non_empty_for_exprs . ]*
    [ 42: non_empty_for_exprs => non_empty_for_exprs . "," expr ]*
    default action: reduce with rule 41 (for_exprs)
    "," : shift, and go to state 307


state 278
    [ 43: non_empty_for_exprs => expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 43 (non_empty_for_exprs)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 279
    [ 28: foreach_as => foreach_variable "=>" foreach_variable . ]*
    default action: reduce with rule 28 (foreach_as)


state 280
    [ 30: foreach_variable => "list" "(" array_pair_list . ")" ]*
    no default action
    ")" : shift, and go to state 308


state 281
    [ 31: foreach_variable => "[" array_pair_list "]" . ]*
    [ 51: dereferencable_primitive => "[" array_pair_list "]" . ]*
    default action: reduce with rule 31 (foreach_variable)
    "->" : reduce with rule 51 (dereferencable_primitive)
    "[" : reduce with rule 51 (dereferencable_primitive)


state 282
    [ 90: expr_without_var => expr "?" expr ":" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 90 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 283
    [ 131: expr_without_var => "function" "(" parameter_list ")" lexical_vars . "{" statement_list "}" ]*
    no default action
    "{" : shift, and go to state 309


state 284
    [ 133: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list . "}" ]*
    [ 11: statement_list => statement_list . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    "}" : shift, and go to state 310
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 28
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 285
    [ 140: lexical_vars => "use" "(" lexical_var_list . ")" ]*
    [ 141: lexical_var_list => lexical_var_list . "," <VARIABLE> ]*
    no default action
    ")" : shift, and go to state 311
    "," : shift, and go to state 312


state 286
    [ 142: lexical_var_list => <VARIABLE> . ]*
    default action: reduce with rule 142 (lexical_var_list)


state 287
    [ 13: statement => "{" statement_list "}" . ]*
    default action: reduce with rule 13 (statement)


state 288
    [ 17: statement => "<?=" expr inline_html_list . ]*
    [ 32: inline_html_list => inline_html_list . <INLINE_HTML> ]*
    default action: reduce with rule 17 (statement)
    <INLINE_HTML> : shift, and go to state 252


state 289
    [ 18: statement => "echo" echo_expr_list ";" . ]*
    default action: reduce with rule 18 (statement)


state 290
    [ 20: statement => "while" "(" expr . ")" statement ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    ")" : shift, and go to state 313
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 291
    [ 21: statement => "do" statement "while" . "(" expr ")" ";" ]*
    no default action
    "(" : shift, and go to state 314


state 292
    [ 22: statement => "for" "(" for_exprs . ";" for_exprs ";" for_exprs ")" statement ]*
    no default action
    ";" : shift, and go to state 315


state 293
    [ 23: statement => "foreach" "(" expr . "as" foreach_as ")" statement ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "as" : shift, and go to state 316
    "." : shift, and go to state 118


state 294
    [ 24: statement => "return" optional_expr ";" . ]*
    default action: reduce with rule 24 (statement)


state 295
    [ 25: statement => "break" optional_num ";" . ]*
    default action: reduce with rule 25 (statement)


state 296
    [ 26: statement => "continue" optional_num ";" . ]*
    default action: reduce with rule 26 (statement)


state 297
    [ 38: if_statement => "if" "(" expr . ")" statement ]*
    [ 39: if_statement => "if" "(" expr . ")" statement "else" statement ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    ")" : shift, and go to state 317
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 298
    [ 169: encaps => <OFFSET_IN_STRING> @12 expr . "]" @13 ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "]" : shift, and go to state 318
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 299
    [ 172: encaps => "${" @14 expr . "}" @15 ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "}" : shift, and go to state 319
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 300
    [ 58: callable_variable => dereferencable arrow_and_property "(" argument_list ")" . ]*
    default action: reduce with rule 58 (callable_variable)


state 301
    [ 64: arrow_and_property => "->" @0 property_name @1 . ]*
    default action: reduce with rule 64 (arrow_and_property)


state 302
    [ 66: property_name => "{" expr . "}" ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "}" : shift, and go to state 320
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 303
    [ 76: expr_without_var => "list" "(" array_pair_list ")" "=" . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 321
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 304
    [ 77: expr_without_var => "[" array_pair_list "]" "=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 77 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 305
    [ 152: primitive => <HEREDOC_HEADER> @6 @7 heredoc_list <END_OF_HEREDOC> @8 . ]*
    default action: reduce with rule 152 (primitive)


state 306
    [ 156: primitive => <NOWDOC_HEADER> @9 @10 heredoc_list <END_OF_HEREDOC> @11 . ]*
    default action: reduce with rule 156 (primitive)


state 307
    [ 42: non_empty_for_exprs => non_empty_for_exprs "," . expr ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 322
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 308
    [ 30: foreach_variable => "list" "(" array_pair_list ")" . ]*
    default action: reduce with rule 30 (foreach_variable)


state 309
    [ 131: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" . statement_list "}" ]*
    default action: reduce with rule 12 (statement_list)
    statement_list : go to state 323


state 310
    [ 133: function_declaration_statement => "function" <NAME> "(" parameter_list ")" "{" statement_list "}" . ]*
    default action: reduce with rule 133 (function_declaration_statement)


state 311
    [ 140: lexical_vars => "use" "(" lexical_var_list ")" . ]*
    default action: reduce with rule 140 (lexical_vars)


state 312
    [ 141: lexical_var_list => lexical_var_list "," . <VARIABLE> ]*
    no default action
    <VARIABLE> : shift, and go to state 324


state 313
    [ 20: statement => "while" "(" expr ")" . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 325
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 314
    [ 21: statement => "do" statement "while" "(" . expr ")" ";" ]*
    no default action
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    expr : go to state 326
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 315
    [ 22: statement => "for" "(" for_exprs ";" . for_exprs ";" for_exprs ")" statement ]*
    default action: reduce with rule 40 (for_exprs)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    for_exprs : go to state 327
    non_empty_for_exprs : go to state 277
    expr : go to state 278
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 316
    [ 23: statement => "foreach" "(" expr "as" . foreach_as ")" statement ]*
    no default action
    <STRING> : shift, and go to state 51
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "(" : shift, and go to state 21
    "[" : shift, and go to state 159
    "list" : shift, and go to state 158
    "array" : shift, and go to state 50
    foreach_as : go to state 328
    foreach_variable : go to state 156
    dereferencable : go to state 68
    dereferencable_primitive : go to state 22
    var : go to state 157
    callable_variable : go to state 81
    simple_var : go to state 39


state 317
    [ 38: if_statement => "if" "(" expr ")" . statement ]*
    [ 39: if_statement => "if" "(" expr ")" . statement "else" statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 329
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 318
    [ 169: encaps => <OFFSET_IN_STRING> @12 expr "]" . @13 ]*
    default action: reduce with rule 168 (@13)
    @13 : go to state 330


state 319
    [ 172: encaps => "${" @14 expr "}" . @15 ]*
    default action: reduce with rule 171 (@15)
    @15 : go to state 331


state 320
    [ 66: property_name => "{" expr "}" . ]*
    default action: reduce with rule 66 (property_name)


state 321
    [ 76: expr_without_var => "list" "(" array_pair_list ")" "=" expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 76 (expr_without_var)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "." : shift, and go to state 118


state 322
    [ 42: non_empty_for_exprs => non_empty_for_exprs "," expr . ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    default action: reduce with rule 42 (non_empty_for_exprs)
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 323
    [ 131: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list . "}" ]*
    [ 11: statement_list => statement_list . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    "}" : shift, and go to state 332
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 28
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 324
    [ 141: lexical_var_list => lexical_var_list "," <VARIABLE> . ]*
    default action: reduce with rule 141 (lexical_var_list)


state 325
    [ 20: statement => "while" "(" expr ")" statement . ]*
    default action: reduce with rule 20 (statement)


state 326
    [ 21: statement => "do" statement "while" "(" expr . ")" ";" ]*
    [ 90: expr_without_var => expr . "?" expr ":" expr ]*
    [ 91: expr_without_var => expr . "?" ":" expr ]*
    [ 92: expr_without_var => expr . ">" expr ]*
    [ 93: expr_without_var => expr . "<" expr ]*
    [ 94: expr_without_var => expr . ">=" expr ]*
    [ 95: expr_without_var => expr . "<=" expr ]*
    [ 96: expr_without_var => expr . "==" expr ]*
    [ 97: expr_without_var => expr . "===" expr ]*
    [ 98: expr_without_var => expr . "!=" expr ]*
    [ 99: expr_without_var => expr . "!==" expr ]*
    [ 100: expr_without_var => expr . "^" expr ]*
    [ 101: expr_without_var => expr . "|" expr ]*
    [ 102: expr_without_var => expr . "&" expr ]*
    [ 103: expr_without_var => expr . ">>" expr ]*
    [ 104: expr_without_var => expr . "<<" expr ]*
    [ 105: expr_without_var => expr . "&&" expr ]*
    [ 106: expr_without_var => expr . "||" expr ]*
    [ 107: expr_without_var => expr . "OR" expr ]*
    [ 108: expr_without_var => expr . "XOR" expr ]*
    [ 109: expr_without_var => expr . "AND" expr ]*
    [ 110: expr_without_var => expr . "+" expr ]*
    [ 111: expr_without_var => expr . "-" expr ]*
    [ 112: expr_without_var => expr . "*" expr ]*
    [ 113: expr_without_var => expr . "/" expr ]*
    [ 114: expr_without_var => expr . "%" expr ]*
    [ 115: expr_without_var => expr . "**" expr ]*
    [ 116: expr_without_var => expr . "." expr ]*
    no default action
    "+" : shift, and go to state 112
    "-" : shift, and go to state 113
    "*" : shift, and go to state 114
    "/" : shift, and go to state 115
    "**" : shift, and go to state 117
    "?" : shift, and go to state 93
    "%" : shift, and go to state 116
    ">" : shift, and go to state 94
    "<" : shift, and go to state 95
    ">=" : shift, and go to state 96
    "<=" : shift, and go to state 97
    "==" : shift, and go to state 98
    "===" : shift, and go to state 99
    "!=" : shift, and go to state 100
    "!==" : shift, and go to state 101
    "&" : shift, and go to state 104
    "|" : shift, and go to state 103
    "^" : shift, and go to state 102
    "<<" : shift, and go to state 106
    ">>" : shift, and go to state 105
    ")" : shift, and go to state 333
    "&&" : shift, and go to state 107
    "||" : shift, and go to state 108
    "OR" : shift, and go to state 109
    "AND" : shift, and go to state 111
    "XOR" : shift, and go to state 110
    "." : shift, and go to state 118


state 327
    [ 22: statement => "for" "(" for_exprs ";" for_exprs . ";" for_exprs ")" statement ]*
    no default action
    ";" : shift, and go to state 334


state 328
    [ 23: statement => "foreach" "(" expr "as" foreach_as . ")" statement ]*
    no default action
    ")" : shift, and go to state 335


state 329
    [ 38: if_statement => "if" "(" expr ")" statement . ]*
    [ 39: if_statement => "if" "(" expr ")" statement . "else" statement ]*
    default action: reduce with rule 38 (if_statement)
    "else" : shift, and go to state 336


state 330
    [ 169: encaps => <OFFSET_IN_STRING> @12 expr "]" @13 . ]*
    default action: reduce with rule 169 (encaps)


state 331
    [ 172: encaps => "${" @14 expr "}" @15 . ]*
    default action: reduce with rule 172 (encaps)


state 332
    [ 131: expr_without_var => "function" "(" parameter_list ")" lexical_vars "{" statement_list "}" . ]*
    default action: reduce with rule 131 (expr_without_var)


state 333
    [ 21: statement => "do" statement "while" "(" expr ")" . ";" ]*
    no default action
    ";" : shift, and go to state 337


state 334
    [ 22: statement => "for" "(" for_exprs ";" for_exprs ";" . for_exprs ")" statement ]*
    default action: reduce with rule 40 (for_exprs)
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "!" : shift, and go to state 31
    "print" : shift, and go to state 33
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    for_exprs : go to state 338
    non_empty_for_exprs : go to state 277
    expr : go to state 278
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 335
    [ 23: statement => "foreach" "(" expr "as" foreach_as ")" . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 339
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 336
    [ 39: if_statement => "if" "(" expr ")" statement "else" . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 340
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 337
    [ 21: statement => "do" statement "while" "(" expr ")" ";" . ]*
    default action: reduce with rule 21 (statement)


state 338
    [ 22: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs . ")" statement ]*
    no default action
    ")" : shift, and go to state 341


state 339
    [ 23: statement => "foreach" "(" expr "as" foreach_as ")" statement . ]*
    default action: reduce with rule 23 (statement)


state 340
    [ 39: if_statement => "if" "(" expr ")" statement "else" statement . ]*
    default action: reduce with rule 39 (if_statement)


state 341
    [ 22: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" . statement ]*
    no default action
    <INLINE_HTML> : shift, and go to state 205
    "<?=" : shift, and go to state 195
    <NAME> : shift, and go to state 43
    <DECIMAL> : shift, and go to state 42
    <INT> : shift, and go to state 41
    <STRING> : shift, and go to state 51
    """ : shift, and go to state 44
    "`" : shift, and go to state 36
    "$" : shift, and go to state 49
    <VARIABLE> : shift, and go to state 48
    "+" : shift, and go to state 29
    "-" : shift, and go to state 30
    "~" : shift, and go to state 32
    "++" : shift, and go to state 34
    "--" : shift, and go to state 35
    <HEREDOC_HEADER> : shift, and go to state 45
    <NOWDOC_HEADER> : shift, and go to state 46
    "(" : shift, and go to state 71
    "[" : shift, and go to state 70
    "{" : shift, and go to state 191
    ";" : shift, and go to state 192
    "!" : shift, and go to state 31
    "if" : shift, and go to state 206
    "echo" : shift, and go to state 196
    "print" : shift, and go to state 33
    "while" : shift, and go to state 198
    "do" : shift, and go to state 199
    "for" : shift, and go to state 200
    "foreach" : shift, and go to state 201
    "function" : shift, and go to state 53
    "list" : shift, and go to state 69
    "array" : shift, and go to state 50
    "break" : shift, and go to state 203
    "continue" : shift, and go to state 204
    "return" : shift, and go to state 202
    statement : go to state 342
    inline_html_list : go to state 194
    if_statement : go to state 197
    expr : go to state 193
    callable_expr : go to state 47
    dereferencable : go to state 68
    dereferencable_primitive : go to state 40
    var : go to state 65
    callable_variable : go to state 67
    simple_var : go to state 39
    function_call : go to state 38
    expr_without_var : go to state 66
    primitive : go to state 37


state 342
    [ 22: statement => "for" "(" for_exprs ";" for_exprs ";" for_exprs ")" statement . ]*
    default action: reduce with rule 22 (statement)


