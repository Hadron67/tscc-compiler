/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/
/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
interface DFATable{
    pnext: number[];
    disnext: number[];
    checknext: number[];
    maxAsicii: number;
    classTable: number[];
    unicodeClassTable: number[];
    isEnd: number[];
    hasArc: number[];
};
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     2,     3,     4,     5,     6,     7,     8,     9,    10,
         1,    11,    46,    12,    13,    14,    11,    11,    15,    11,
        16,    17,    11,    18,    19,    20,    21,    11,    11,    11,
        22,    23,    24,    25,    26,    27,    33,    46,     7,    45,
        45,    28,    34,    34,    34,    27,    29,    30,    37,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    27,    32,    36,
        35,    32,    34,    28,    31,    -1,    -1,    27,    29,    30,
        -1,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    27,
        -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    27,
        29,    30,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    27,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
        -1,    27,    29,    30,    -1,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    27,    -1,    -1,    -1,    -1,    -1,    28,
        -1,    -1,    -1,    27,    29,    30,    -1,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    27,    -1,    -1,    -1,    -1,
        -1,    28,    -1,    -1,    -1,    27,    29,    30,    -1,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    27,    -1,    -1,
        -1,    -1,    -1,    28,    -1,    -1,    -1,    27,    29,    30,
        -1,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    27,
        -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    27,
        29,    30,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    27,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
        -1,    27,    29,    30,    -1,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    27,    -1,    -1,    -1,    -1,    -1,    28,
        -1,    -1,    -1,    27,    29,    30,    -1,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    27,    -1,    -1,    -1,    -1,
        -1,    28,    -1,    -1,    -1,    27,    29,    30,    -1,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    27,    -1,    -1,
        -1,    -1,    -1,    28,    -1,    -1,    -1,    27,    29,    30,
        -1,    29,    29,    44,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    27,
        -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    27,
        29,    30,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    43,    29,    29,
        29,    27,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
        -1,    27,    29,    30,    -1,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    27,    -1,    -1,    -1,    -1,    -1,    28,
        -1,    -1,    -1,    27,    29,    30,    -1,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    27,    -1,    -1,    -1,    -1,
        -1,    28,    -1,    -1,    -1,    27,    29,    30,    -1,    29,
        29,    29,    29,    29,    29,    29,    29,    42,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    27,    -1,    -1,
        -1,    -1,    -1,    28,    -1,    -1,    -1,    27,    29,    30,
        -1,    29,    29,    29,    41,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    27,
        -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    27,
        29,    30,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    40,    29,
        29,    27,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
        -1,    27,    29,    30,    -1,    29,    29,    29,    29,    29,
        39,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    27,    -1,    -1,    -1,    -1,    -1,    28,
        -1,    -1,    -1,    27,    29,    30,    -1,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    27,    -1,    -1,    -1,    -1,
        -1,    28,    -1,    -1,    -1,    27,    29,    30,    -1,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    27,    -1,    -1,
        -1,    -1,    -1,    28,    -1,    -1,    -1,    27,    29,    30,
        -1,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    38,    29,    29,    29,    29,    27,
        -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    27,
        29,    30,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    27,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
        -1,    27,    29,    30,    -1,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    -1,    -1,    -1,
]; 
var jjlexdisnext0 = [ 
         0,   771,    73,   -35,   -35,    65,   -35,    32,    62,    61,
        40,   739,   -35,   707,   675,   643,   611,   579,   547,   515,
       483,   451,   419,   387,   -35,   -35,   -35,   355,   323,   291,
       259,   -35,    62,    34,    31,   -35,   -35,   -35,   227,   195,
       163,   131,    99,    67,    35,    33,     6,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    44,     7,    34,     7,    45,
        33,    44,     7,    45,    33,    44,    44,    44,    10,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    43,    32,     9,
         8,     5,    32,    43,     2,    -1,    -1,    43,    43,    43,
        -1,    43,    43,    43,    43,    43,    43,    43,    43,    43,
        43,    43,    43,    43,    43,    43,    43,    43,    43,    42,
        -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    42,
        42,    42,    -1,    42,    42,    42,    42,    42,    42,    42,
        42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
        42,    41,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
        -1,    41,    41,    41,    -1,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    40,    -1,    -1,    -1,    -1,    -1,    40,
        -1,    -1,    -1,    40,    40,    40,    -1,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    39,    -1,    -1,    -1,    -1,
        -1,    39,    -1,    -1,    -1,    39,    39,    39,    -1,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    38,    -1,    -1,
        -1,    -1,    -1,    38,    -1,    -1,    -1,    38,    38,    38,
        -1,    38,    38,    38,    38,    38,    38,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    38,    30,
        -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    30,
        30,    30,    -1,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    29,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
        -1,    29,    29,    29,    -1,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    28,    -1,    -1,    -1,    -1,    -1,    28,
        -1,    -1,    -1,    28,    28,    28,    -1,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    27,    -1,    -1,    -1,    -1,
        -1,    27,    -1,    -1,    -1,    27,    27,    27,    -1,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    23,    -1,    -1,
        -1,    -1,    -1,    23,    -1,    -1,    -1,    23,    23,    23,
        -1,    23,    23,    23,    23,    23,    23,    23,    23,    23,
        23,    23,    23,    23,    23,    23,    23,    23,    23,    22,
        -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    22,
        22,    22,    -1,    22,    22,    22,    22,    22,    22,    22,
        22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    21,    -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,
        -1,    21,    21,    21,    -1,    21,    21,    21,    21,    21,
        21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
        21,    21,    21,    20,    -1,    -1,    -1,    -1,    -1,    20,
        -1,    -1,    -1,    20,    20,    20,    -1,    20,    20,    20,
        20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
        20,    20,    20,    20,    20,    19,    -1,    -1,    -1,    -1,
        -1,    19,    -1,    -1,    -1,    19,    19,    19,    -1,    19,
        19,    19,    19,    19,    19,    19,    19,    19,    19,    19,
        19,    19,    19,    19,    19,    19,    19,    18,    -1,    -1,
        -1,    -1,    -1,    18,    -1,    -1,    -1,    18,    18,    18,
        -1,    18,    18,    18,    18,    18,    18,    18,    18,    18,
        18,    18,    18,    18,    18,    18,    18,    18,    18,    17,
        -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    17,
        17,    17,    -1,    17,    17,    17,    17,    17,    17,    17,
        17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
        17,    16,    -1,    -1,    -1,    -1,    -1,    16,    -1,    -1,
        -1,    16,    16,    16,    -1,    16,    16,    16,    16,    16,
        16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
        16,    16,    16,    15,    -1,    -1,    -1,    -1,    -1,    15,
        -1,    -1,    -1,    15,    15,    15,    -1,    15,    15,    15,
        15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
        15,    15,    15,    15,    15,    14,    -1,    -1,    -1,    -1,
        -1,    14,    -1,    -1,    -1,    14,    14,    14,    -1,    14,
        14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
        14,    14,    14,    14,    14,    14,    14,    13,    -1,    -1,
        -1,    -1,    -1,    13,    -1,    -1,    -1,    13,    13,    13,
        -1,    13,    13,    13,    13,    13,    13,    13,    13,    13,
        13,    13,    13,    13,    13,    13,    13,    13,    13,    11,
        -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,    11,
        11,    11,    -1,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,     1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
        -1,     1,     1,     1,    -1,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,     1,    -1,    -1,    -1,
]; 
var jjlexclassTable0 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
        -1,    -1,     1,     2,    -1,     3,     4,     5,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,    -1,    -1,
         7,     8,     9,    -1,    -1,     0,     0,     0,     0,    10,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    -1,    -1,    -1,    -1,     0,    -1,     0,     0,     0,
         0,    10,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    11,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,
        -1,    -1,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    -1,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    11,    -1,    11,    11,
        11,    11,    11,    11,    11,    11,
]; 
var jjlexunicodeClassTable0 = [ 
        11,   256,   705,    11,   710,   721,    11,   736,   740,    11,
       748,   748,    11,   750,   750,    12,   768,   879,    11,   880,
       884,    11,   886,   887,    11,   890,   893,    11,   902,   902,
        11,   904,   906,    11,   908,   908,    11,   910,   929,    11,
       931,  1013,    11,  1015,  1153,    12,  1155,  1159,    11,  1162,
      1319,    11,  1329,  1366,    11,  1369,  1369,    11,  1377,  1415,
        12,  1425,  1469,    12,  1471,  1471,    12,  1473,  1474,    12,
      1476,  1477,    12,  1479,  1479,    11,  1488,  1514,    11,  1520,
      1522,    12,  1552,  1562,    11,  1568,  1610,    12,  1611,  1641,
        11,  1646,  1647,    12,  1648,  1648,    11,  1649,  1747,    11,
      1749,  1749,    12,  1750,  1756,    12,  1759,  1764,    11,  1765,
      1766,    12,  1767,  1768,    12,  1770,  1773,    11,  1774,  1775,
        12,  1776,  1785,    11,  1786,  1788,    11,  1791,  1791,    11,
      1808,  1808,    12,  1809,  1809,    11,  1810,  1839,    12,  1840,
      1866,    11,  1869,  1957,    12,  1958,  1968,    11,  1969,  1969,
        12,  1984,  1993,    11,  1994,  2026,    12,  2027,  2035,    11,
      2036,  2037,    11,  2042,  2042,    11,  2048,  2069,    12,  2070,
      2073,    11,  2074,  2074,    12,  2075,  2083,    11,  2084,  2084,
        12,  2085,  2087,    11,  2088,  2088,    12,  2089,  2093,    11,
      2112,  2136,    12,  2137,  2139,    11,  2208,  2208,    11,  2210,
      2220,    12,  2276,  2302,    12,  2304,  2307,    11,  2308,  2361,
        12,  2362,  2364,    11,  2365,  2365,    12,  2366,  2383,    11,
      2384,  2384,    12,  2385,  2391,    11,  2392,  2401,    12,  2402,
      2403,    12,  2406,  2415,    11,  2417,  2423,    11,  2425,  2431,
        12,  2433,  2435,    11,  2437,  2444,    11,  2447,  2448,    11,
      2451,  2472,    11,  2474,  2480,    11,  2482,  2482,    11,  2486,
      2489,    12,  2492,  2492,    11,  2493,  2493,    12,  2494,  2500,
        12,  2503,  2504,    12,  2507,  2509,    11,  2510,  2510,    12,
      2519,  2519,    11,  2524,  2525,    11,  2527,  2529,    12,  2530,
      2531,    12,  2534,  2543,    11,  2544,  2545,    12,  2561,  2563,
        11,  2565,  2570,    11,  2575,  2576,    11,  2579,  2600,    11,
      2602,  2608,    11,  2610,  2611,    11,  2613,  2614,    11,  2616,
      2617,    12,  2620,  2620,    12,  2622,  2626,    12,  2631,  2632,
        12,  2635,  2637,    12,  2641,  2641,    11,  2649,  2652,    11,
      2654,  2654,    12,  2662,  2673,    11,  2674,  2676,    12,  2677,
      2677,    12,  2689,  2691,    11,  2693,  2701,    11,  2703,  2705,
        11,  2707,  2728,    11,  2730,  2736,    11,  2738,  2739,    11,
      2741,  2745,    12,  2748,  2748,    11,  2749,  2749,    12,  2750,
      2757,    12,  2759,  2761,    12,  2763,  2765,    11,  2768,  2768,
        11,  2784,  2785,    12,  2786,  2787,    12,  2790,  2799,    12,
      2817,  2819,    11,  2821,  2828,    11,  2831,  2832,    11,  2835,
      2856,    11,  2858,  2864,    11,  2866,  2867,    11,  2869,  2873,
        12,  2876,  2876,    11,  2877,  2877,    12,  2878,  2884,    12,
      2887,  2888,    12,  2891,  2893,    12,  2902,  2903,    11,  2908,
      2909,    11,  2911,  2913,    12,  2914,  2915,    12,  2918,  2927,
        11,  2929,  2929,    12,  2946,  2946,    11,  2947,  2947,    11,
      2949,  2954,    11,  2958,  2960,    11,  2962,  2965,    11,  2969,
      2970,    11,  2972,  2972,    11,  2974,  2975,    11,  2979,  2980,
        11,  2984,  2986,    11,  2990,  3001,    12,  3006,  3010,    12,
      3014,  3016,    12,  3018,  3021,    11,  3024,  3024,    12,  3031,
      3031,    12,  3046,  3055,    12,  3073,  3075,    11,  3077,  3084,
        11,  3086,  3088,    11,  3090,  3112,    11,  3114,  3123,    11,
      3125,  3129,    11,  3133,  3133,    12,  3134,  3140,    12,  3142,
      3144,    12,  3146,  3149,    12,  3157,  3158,    11,  3160,  3161,
        11,  3168,  3169,    12,  3170,  3171,    12,  3174,  3183,    12,
      3202,  3203,    11,  3205,  3212,    11,  3214,  3216,    11,  3218,
      3240,    11,  3242,  3251,    11,  3253,  3257,    12,  3260,  3260,
        11,  3261,  3261,    12,  3262,  3268,    12,  3270,  3272,    12,
      3274,  3277,    12,  3285,  3286,    11,  3294,  3294,    11,  3296,
      3297,    12,  3298,  3299,    12,  3302,  3311,    11,  3313,  3314,
        12,  3330,  3331,    11,  3333,  3340,    11,  3342,  3344,    11,
      3346,  3386,    11,  3389,  3389,    12,  3390,  3396,    12,  3398,
      3400,    12,  3402,  3405,    11,  3406,  3406,    12,  3415,  3415,
        11,  3424,  3425,    12,  3426,  3427,    12,  3430,  3439,    11,
      3450,  3455,    12,  3458,  3459,    11,  3461,  3478,    11,  3482,
      3505,    11,  3507,  3515,    11,  3517,  3517,    11,  3520,  3526,
        12,  3530,  3530,    12,  3535,  3540,    12,  3542,  3542,    12,
      3544,  3551,    12,  3570,  3571,    11,  3585,  3632,    12,  3633,
      3633,    11,  3634,  3635,    12,  3636,  3642,    11,  3648,  3654,
        12,  3655,  3662,    12,  3664,  3673,    11,  3713,  3714,    11,
      3716,  3716,    11,  3719,  3720,    11,  3722,  3722,    11,  3725,
      3725,    11,  3732,  3735,    11,  3737,  3743,    11,  3745,  3747,
        11,  3749,  3749,    11,  3751,  3751,    11,  3754,  3755,    11,
      3757,  3760,    12,  3761,  3761,    11,  3762,  3763,    12,  3764,
      3769,    12,  3771,  3772,    11,  3773,  3773,    11,  3776,  3780,
        11,  3782,  3782,    12,  3784,  3789,    12,  3792,  3801,    11,
      3804,  3807,    11,  3840,  3840,    12,  3864,  3865,    12,  3872,
      3881,    12,  3893,  3893,    12,  3895,  3895,    12,  3897,  3897,
        12,  3902,  3903,    11,  3904,  3911,    11,  3913,  3948,    12,
      3953,  3972,    12,  3974,  3975,    11,  3976,  3980,    12,  3981,
      3991,    12,  3993,  4028,    12,  4038,  4038,    11,  4096,  4138,
        12,  4139,  4158,    11,  4159,  4159,    12,  4160,  4169,    11,
      4176,  4181,    12,  4182,  4185,    11,  4186,  4189,    12,  4190,
      4192,    11,  4193,  4193,    12,  4194,  4196,    11,  4197,  4198,
        12,  4199,  4205,    11,  4206,  4208,    12,  4209,  4212,    11,
      4213,  4225,    12,  4226,  4237,    11,  4238,  4238,    12,  4239,
      4253,    11,  4256,  4293,    11,  4295,  4295,    11,  4301,  4301,
        11,  4304,  4346,    11,  4348,  4680,    11,  4682,  4685,    11,
      4688,  4694,    11,  4696,  4696,    11,  4698,  4701,    11,  4704,
      4744,    11,  4746,  4749,    11,  4752,  4784,    11,  4786,  4789,
        11,  4792,  4798,    11,  4800,  4800,    11,  4802,  4805,    11,
      4808,  4822,    11,  4824,  4880,    11,  4882,  4885,    11,  4888,
      4954,    12,  4957,  4959,    11,  4992,  5007,    11,  5024,  5108,
        11,  5121,  5740,    11,  5743,  5759,    11,  5761,  5786,    11,
      5792,  5866,    11,  5870,  5872,    11,  5888,  5900,    11,  5902,
      5905,    12,  5906,  5908,    11,  5920,  5937,    12,  5938,  5940,
        11,  5952,  5969,    12,  5970,  5971,    11,  5984,  5996,    11,
      5998,  6000,    12,  6002,  6003,    11,  6016,  6067,    12,  6068,
      6099,    11,  6103,  6103,    11,  6108,  6108,    12,  6109,  6109,
        12,  6112,  6121,    12,  6155,  6157,    12,  6160,  6169,    11,
      6176,  6263,    11,  6272,  6312,    12,  6313,  6313,    11,  6314,
      6314,    11,  6320,  6389,    11,  6400,  6428,    12,  6432,  6443,
        12,  6448,  6459,    12,  6470,  6479,    11,  6480,  6509,    11,
      6512,  6516,    11,  6528,  6571,    12,  6576,  6592,    11,  6593,
      6599,    12,  6600,  6601,    12,  6608,  6617,    11,  6656,  6678,
        12,  6679,  6683,    11,  6688,  6740,    12,  6741,  6750,    12,
      6752,  6780,    12,  6783,  6793,    12,  6800,  6809,    11,  6823,
      6823,    12,  6912,  6916,    11,  6917,  6963,    12,  6964,  6980,
        11,  6981,  6987,    12,  6992,  7001,    12,  7019,  7027,    12,
      7040,  7042,    11,  7043,  7072,    12,  7073,  7085,    11,  7086,
      7087,    12,  7088,  7097,    11,  7098,  7141,    12,  7142,  7155,
        11,  7168,  7203,    12,  7204,  7223,    12,  7232,  7241,    11,
      7245,  7247,    12,  7248,  7257,    11,  7258,  7293,    12,  7376,
      7378,    12,  7380,  7400,    11,  7401,  7404,    12,  7405,  7405,
        11,  7406,  7409,    12,  7410,  7412,    11,  7413,  7414,    11,
      7424,  7615,    12,  7616,  7654,    12,  7676,  7679,    11,  7680,
      7957,    11,  7960,  7965,    11,  7968,  8005,    11,  8008,  8013,
        11,  8016,  8023,    11,  8025,  8025,    11,  8027,  8027,    11,
      8029,  8029,    11,  8031,  8061,    11,  8064,  8116,    11,  8118,
      8124,    11,  8126,  8126,    11,  8130,  8132,    11,  8134,  8140,
        11,  8144,  8147,    11,  8150,  8155,    11,  8160,  8172,    11,
      8178,  8180,    11,  8182,  8188,    12,  8204,  8205,    12,  8255,
      8256,    12,  8276,  8276,    11,  8305,  8305,    11,  8319,  8319,
        11,  8336,  8348,    12,  8400,  8412,    12,  8417,  8417,    12,
      8421,  8432,    11,  8450,  8450,    11,  8455,  8455,    11,  8458,
      8467,    11,  8469,  8469,    11,  8473,  8477,    11,  8484,  8484,
        11,  8486,  8486,    11,  8488,  8488,    11,  8490,  8493,    11,
      8495,  8505,    11,  8508,  8511,    11,  8517,  8521,    11,  8526,
      8526,    11,  8544,  8584,    11, 11264, 11310,    11, 11312, 11358,
        11, 11360, 11492,    11, 11499, 11502,    12, 11503, 11505,    11,
     11506, 11507,    11, 11520, 11557,    11, 11559, 11559,    11, 11565,
     11565,    11, 11568, 11623,    11, 11631, 11631,    12, 11647, 11647,
        11, 11648, 11670,    11, 11680, 11686,    11, 11688, 11694,    11,
     11696, 11702,    11, 11704, 11710,    11, 11712, 11718,    11, 11720,
     11726,    11, 11728, 11734,    11, 11736, 11742,    12, 11744, 11775,
        11, 11823, 11823,    13, 12290, 12290,    11, 12293, 12295,    11,
     12321, 12329,    12, 12330, 12335,    11, 12337, 12341,    11, 12344,
     12348,    11, 12353, 12438,    12, 12441, 12442,    11, 12445, 12447,
        11, 12449, 12538,    11, 12540, 12543,    11, 12549, 12589,    11,
     12593, 12686,    11, 12704, 12730,    11, 12784, 12799,    11, 13312,
     19893,    11, 19968, 19980,    14, 19981, 19981,    11, 19982, 19987,
        15, 19988, 19988,    11, 19989, 20039,    16, 20040, 20040,    11,
     20041, 20109,    17, 20110, 20110,    11, 20111, 20195,    18, 20196,
     20196,    11, 20197, 21016,    19, 21017, 21017,    11, 21018, 21541,
        20, 21542, 21542,    11, 21543, 22913,    21, 22914, 22914,    11,
     22915, 22986,    22, 22987, 22987,    11, 22988, 23544,    23, 23545,
     23545,    11, 23546, 24319,    24, 24320, 24320,    11, 24321, 24402,
        25, 24403, 24403,    11, 24404, 25109,    26, 25110, 25110,    11,
     25111, 26158,    27, 26159, 26159,    11, 26160, 26462,    28, 26463,
     26463,    11, 26464, 26523,    29, 26524, 26524,    11, 26525, 32466,
        30, 32467, 32467,    11, 32468, 37026,    31, 37027, 37027,    11,
     37028, 40908,    11, 40960, 42124,    11, 42192, 42237,    11, 42240,
     42508,    11, 42512, 42527,    12, 42528, 42537,    11, 42538, 42539,
        11, 42560, 42606,    12, 42607, 42607,    12, 42612, 42621,    11,
     42623, 42647,    12, 42655, 42655,    11, 42656, 42735,    12, 42736,
     42737,    11, 42775, 42783,    11, 42786, 42888,    11, 42891, 42894,
        11, 42896, 42899,    11, 42912, 42922,    11, 43000, 43009,    12,
     43010, 43010,    11, 43011, 43013,    12, 43014, 43014,    11, 43015,
     43018,    12, 43019, 43019,    11, 43020, 43042,    12, 43043, 43047,
        11, 43072, 43123,    12, 43136, 43137,    11, 43138, 43187,    12,
     43188, 43204,    12, 43216, 43225,    12, 43232, 43249,    11, 43250,
     43255,    11, 43259, 43259,    12, 43264, 43273,    11, 43274, 43301,
        12, 43302, 43309,    11, 43312, 43334,    12, 43335, 43347,    11,
     43360, 43388,    12, 43392, 43395,    11, 43396, 43442,    12, 43443,
     43456,    11, 43471, 43471,    12, 43472, 43481,    11, 43520, 43560,
        12, 43561, 43574,    11, 43584, 43586,    12, 43587, 43587,    11,
     43588, 43595,    12, 43596, 43597,    12, 43600, 43609,    11, 43616,
     43638,    11, 43642, 43642,    12, 43643, 43643,    11, 43648, 43695,
        12, 43696, 43696,    11, 43697, 43697,    12, 43698, 43700,    11,
     43701, 43702,    12, 43703, 43704,    11, 43705, 43709,    12, 43710,
     43711,    11, 43712, 43712,    12, 43713, 43713,    11, 43714, 43714,
        11, 43739, 43741,    11, 43744, 43754,    12, 43755, 43759,    11,
     43762, 43764,    12, 43765, 43766,    11, 43777, 43782,    11, 43785,
     43790,    11, 43793, 43798,    11, 43808, 43814,    11, 43816, 43822,
        11, 43968, 44002,    12, 44003, 44010,    12, 44012, 44013,    12,
     44016, 44025,    11, 44032, 55203,    11, 55216, 55238,    11, 55243,
     55291,    11, 63744, 64109,    11, 64112, 64217,    11, 64256, 64262,
        11, 64275, 64279,    11, 64285, 64285,    12, 64286, 64286,    11,
     64287, 64296,    11, 64298, 64310,    11, 64312, 64316,    11, 64318,
     64318,    11, 64320, 64321,    11, 64323, 64324,    11, 64326, 64433,
        11, 64467, 64829,    11, 64848, 64911,    11, 64914, 64967,    11,
     65008, 65019,    12, 65024, 65039,    12, 65056, 65062,    12, 65075,
     65076,    12, 65101, 65103,    11, 65136, 65140,    11, 65142, 65276,
        32, 65288, 65288,    33, 65289, 65289,    34, 65292, 65292,    12,
     65296, 65305,    11, 65313, 65338,    12, 65343, 65343,    11, 65345,
     65370,    11, 65382, 65470,    11, 65474, 65479,    11, 65482, 65487,
        11, 65490, 65495,    11, 65498, 65500,
]; 
var jjlexisEnd0 = [ 
    0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,0,0,1,0,1,1,1,1,1,0,1,1,
    1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,
    1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,
    1,1,
]; 
var jjlextable0: DFATable = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
/*
    dfa tables
*/
var jjdfaTables: DFATable[] = [
    jjlextable0,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc: number[], c: number){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,     1,    23,    21,    22,    -1,    24,     2,    17,    15,
        18,     1,    13,     1,    26,    10,     1,     1,     1,     1,
         8,    27,     1,     1,    11,    12,    14,     1,     1,     1,
         1,    25,     2,     2,    -1,    19,    16,    20,    28,     7,
         5,     9,     3,     4,     6,     2,     2,
]; 

var jjstateCount = 71;
var jjtokenCount = 29;
var jjactERR = 72;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
        67,    63,     9,    27,    28,    32,    31,    30,    29,    33,
        34,    35,    36,    37,    26,    25,    64,    33,    34,    35,
        36,    37,    35,    36,    37,    27,    28,    32,    31,    30,
        29,    33,    34,    35,    36,    37,    26,    25,    61,    37,
        37,    27,    28,    32,    31,    30,    29,    33,    34,    35,
        36,    37,    26,    25,    43,    37,    27,    28,    32,    31,
        30,    29,    33,    34,    35,    36,    37,    26,    25,    27,
        28,    32,    31,    30,    29,    33,    34,    35,    36,    37,
        26,    25,    27,    28,    32,    31,    30,    29,    33,    34,
        35,    36,    37,    26,    25,    27,    28,    32,    31,    30,
        29,    33,    34,    35,    36,    37,    26,    27,    28,    32,
        31,    30,    29,    33,    34,    35,    36,    37,    27,    28,
        32,    31,    30,    29,    33,    34,    35,    36,    37,    17,
        18,    19,    62,    22,    46,     7,    23,    24,    21,    13,
        33,    34,    35,    36,    37,    35,    36,    37,    11,    15,
        16,    33,    34,    35,    36,    37,    14,    27,    28,    32,
        31,    30,    29,    33,    34,    35,    36,    37,    17,    18,
        19,    10,    22,     4,     0,    23,     0,    21,    13,     0,
         0,     0,     0,    17,    18,    19,     0,    22,    15,    16,
        23,     0,    21,    13,     0,    14,     0,     0,    17,    18,
        19,     0,    22,    15,    16,    23,     0,    21,    13,     0,
        14,    17,    18,    17,    18,    19,     0,    22,    15,    16,
        23,    13,    21,    13,     0,    14,    17,    18,     0,    17,
        18,    15,    16,    15,    16,     0,    13,     0,    14,    13,
        14,    17,    18,     0,    17,    18,    15,    16,     0,    15,
        16,    13,     0,    14,    13,     0,    14,    17,    18,    17,
        18,    15,    16,     0,    15,    16,     0,    13,    14,    13,
         0,    14,    17,    18,     0,    17,    18,    15,    16,    15,
        16,     0,    13,     0,    14,    13,    14,    17,    18,     0,
        17,    18,    15,    16,     0,    15,    16,    13,     0,    14,
        13,     0,    14,    17,    18,    17,    18,    15,    16,     0,
        15,    16,     0,    13,    14,    13,     0,    14,    17,    18,
         0,    17,    18,    15,    16,    15,    16,     0,    13,     0,
        14,    13,    14,    17,    18,     0,    17,    18,    15,    16,
         0,    15,    16,    13,     0,    14,    13,     0,    14,    17,
        18,    17,    18,    15,    16,     0,    15,    16,     0,    13,
        14,    13,     0,    14,    17,    18,     0,    17,    18,    15,
        16,    15,    16,     0,    13,     0,    14,    13,    14,    33,
        34,    35,    36,    37,    15,    16,     0,    15,    16,     0,
         0,    14,     0,     0,    14,    33,    34,    35,    36,    37,
         0,     0,     0,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -29,   173,   212,   -29,   -29,   -29,   156,   -29,   147,   366,
       122,    67,   363,   350,   348,   335,   -29,   -29,   -29,    41,
       134,   332,   123,   320,   317,   304,   302,   289,   286,   274,
       271,   258,   256,   243,   240,   228,   225,    26,   142,   -29,
       -29,   128,   -29,   -12,    10,   210,    54,    80,   103,    92,
       374,   358,   130,   119,    -4,   122,    -1,    30,    15,    14,
       -29,   -29,   -29,   197,   -12,   -29,   182,   -29,   167,   -29,
       -29,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
        64,    43,    43,    64,    64,    64,    64,    64,    64,    64,
        64,    64,    64,    64,    64,    64,    44,    54,    54,    54,
        54,    54,    56,    56,    56,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    37,    59,
        58,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    19,    57,    19,    19,    19,    19,
        19,    19,    19,    19,    19,    19,    19,    19,    19,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    49,    49,    49,
        49,    49,    49,    49,    49,    49,    49,    49,    48,    48,
        48,    48,    48,    48,    48,    48,    48,    48,    48,    41,
        41,    41,    41,    41,    22,    20,    41,    10,    41,    41,
        53,    53,    53,    53,    53,    55,    55,    55,     8,    41,
        41,    52,    52,    52,    52,    52,    41,    38,    38,    38,
        38,    38,    38,    38,    38,    38,    38,    38,    68,    68,
        68,     6,    68,     1,     0,    68,     0,    68,    68,     0,
         0,     0,     0,    66,    66,    66,     0,    66,    68,    68,
        66,     0,    66,    66,     0,    68,     0,     0,    63,    63,
        63,     0,    63,    66,    66,    63,     0,    63,    63,     0,
        66,    45,    45,     2,     2,     2,     0,     2,    63,    63,
         2,    45,     2,     2,     0,    63,    36,    36,     0,    35,
        35,    45,    45,     2,     2,     0,    36,     0,    45,    35,
         2,    34,    34,     0,    33,    33,    36,    36,     0,    35,
        35,    34,     0,    36,    33,     0,    35,    32,    32,    31,
        31,    34,    34,     0,    33,    33,     0,    32,    34,    31,
         0,    33,    30,    30,     0,    29,    29,    32,    32,    31,
        31,     0,    30,     0,    32,    29,    31,    28,    28,     0,
        27,    27,    30,    30,     0,    29,    29,    28,     0,    30,
        27,     0,    29,    26,    26,    25,    25,    28,    28,     0,
        27,    27,     0,    26,    28,    25,     0,    27,    24,    24,
         0,    23,    23,    26,    26,    25,    25,     0,    24,     0,
        26,    23,    25,    21,    21,     0,    15,    15,    24,    24,
         0,    23,    23,    21,     0,    24,    15,     0,    23,    14,
        14,    13,    13,    21,    21,     0,    15,    15,     0,    14,
        21,    13,     0,    15,    12,    12,     0,     9,     9,    14,
        14,    13,    13,     0,    12,     0,    14,     9,    13,    51,
        51,    51,    51,    51,    12,    12,     0,     9,     9,     0,
         0,    12,     0,     0,     9,    50,    50,    50,    50,    50,
         0,     0,     0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         3,    -1,     1,     0,     2,     4,    -1,     5,    -1,    -1,
        -1,    13,    -1,    -1,    -1,    -1,    33,    34,     6,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    31,
        32,    -1,     8,    -1,    -1,    -1,    12,    16,    17,    18,
        19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
        29,     7,     9,    -1,    -1,    14,    -1,    10,    -1,    11,
        15,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         7,    70,    69,    19,    19,    19,    65,    64,     4,    19,
         5,    59,    58,    19,    57,    56,    55,    54,    53,    52,
        51,    50,    49,    48,    47,    46,    44,    40,    39,    38,
        37,    11,    43,    67,    41,     1,     2,    -1,    -1,    -1,
        -1,    -1,    -1,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
        34,    -9,     5,    -9,    -9,    -9,    -9,    -9,    -9,    23,
        -9,    -9,    22,    21,    20,    19,    -9,    -9,    30,    -9,
        26,    18,    -9,    17,    16,    15,    14,    13,    12,    11,
        10,     9,     8,     7,     6,     4,     3,    -9,    -9,    -9,
        -9,    -5,    -9,    -9,    -9,    -1,    -9,    -9,    -9,    -9,
        -9,    -9,    -9,    -9,    -9,    -9,    -9,    -9,    -9,    -9,
        -9,    -9,    -9,     1,    -9,    26,    -3,    -9,    -4,    -9,
        -9,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     1,     2,     0,     1,     2,     0,     3,     2,     3,
         5,     5,     5,     3,     0,     2,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         2,     2,     2,     1,     1,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     2,     2,     3,     4,     4,     5,     5,     5,
         5,     5,     6,     6,     7,     7,     8,     8,     8,     8,
         8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
         8,     8,     8,     8,     8,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",              "NAME",               "NUM",
                 "BEGIN",               "END",                "IF",
                  "THEN",              "ELSE",             "WHILE",
                   "FOR",               "VAR",               "BRA",
                   "KET",               "EOL",             "COMMA",
                "ASSIGN",               "EQU",                "LT",
                    "GT",              "LTOE",              "GTOE",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "EXP",               "AND",
                    "OR",               "NOT",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,                null,
                    "开始",                "结束",                "如果",
                    "那么",                "否则",                 "当",
                    "对于",                 "令",                 "（",
                     "）",                 "。",                 "，",
                     "=",                "==",                 "<",
                     ">",                "<=",                ">=",
                     "+",                 "-",                 "*",
                     "/",                "**",                 "且",
                     "或",                "不是",
]; 


function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}
class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
interface Parser{
    init();
    accept(s: string);
    end();
    halt();
    on(ent: string, cb: (a1?, a2?, a3?) => any);
}
function createParser(): Parser {
    // members for lexer
    var jjlexState: number[];
    var jjstate: number;
    var jjmatched: string;
    var jjtoken: Token;
    
    var jjmarker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    var jjbackupCount: number;

    var jjline: number;
    var jjcolumn: number;
    var jjtline: number;
    var jjtcolumn: number;

    // members for parser
    var jjlrState: number[];
    var jjsematicS: any[] = [];
    var jjsematicVal: any;

    var jjstop;

    var jjhandlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    

    return {
        init,
        on,
        accept,
        end,
        halt
    };
    function init(){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;

        jjstop = false;
        
    }
    /**
     *  set 
     */
    function jjsetImg(s: string){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid: number){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjreturnToken(){
        jjemit('token', jjtokenNames[jjtoken.id], jjtoken.val);
        while(!jjstop && !jjacceptToken(jjtoken));
        jjtoken.id = -1;
    }
    function jjemit(name: string, a1?, a2?, a3?){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name: string, cb: (a1?, a2?, a3?) => any){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten: number){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            default:;
        }
        jjtoken.id !== -1 && jjreturnToken();
    }
    function jjrollback(): string{
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c: number){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode: number){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjreturnToken();
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s: string){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum: number){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }

    function jjacceptToken(t: Token){
        // look up action table
        var cstate = jjlrState[jjlrState.length - 1];
        var ind = jjdisact[cstate] + t.id;
        var act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            jjsyntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                jjstop = true;
                jjemit('accept');
                return true;
            }
            else {
                jjlrState.push(act - 1);
                jjsematicS.push(jjsematicVal);
                jjsematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            jjdoReduction(-act - 1);
            return false;
        }
        else {
            // error
            jjsyntaxError(t);
            // force consume
            return true;
        }
    }
    function jjsyntaxError(t: Token){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state: number){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk: number){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}
