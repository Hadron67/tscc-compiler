/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

import { GBuilder, createFileBuilder, TokenRefType } from './gbuilder';
import { Assoc } from '../grammar/token-entry';
import { CompilationError as E, JsccError } from '../util/E';
import { InputStream, endl } from '../util/io';
import { Context } from '../util/context';
import { LexAction, returnToken, blockAction, pushState, popState, setImg } from '../lexer/action';
import { Position, JNode, newNode, markPosition, nodeBetween } from './node';
import { File } from './file';

function nodeFromToken(t: Token): JNode{
    return {
        val: t.val,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
function nodeFromTrivalToken(t: Token): JNode{
    return {
        val: null,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
let escapes: {[s: string]: string} = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\'
};
function unescape(s: string){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}

/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else if(c === 34){
                ret.state = 2;
            }
            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 3;
            }
            else if(c === 37){
                ret.state = 4;
            }
            else if(c === 39){
                ret.state = 5;
            }
            else if(c === 40){
                ret.state = 6;
            }
            else if(c === 41){
                ret.state = 7;
            }
            else if(c === 42){
                ret.state = 8;
            }
            else if(c === 43){
                ret.state = 9;
            }
            else if(c === 44){
                ret.state = 10;
            }
            else if(c === 45){
                ret.state = 11;
            }
            else if(c === 47){
                ret.state = 12;
            }
            else if(c === 58){
                ret.state = 13;
            }
            else if(c === 59){
                ret.state = 14;
            }
            else if(c === 60){
                ret.state = 15;
            }
            else if(c === 61){
                ret.state = 16;
            }
            else if(c === 62){
                ret.state = 17;
            }
            else if(c === 63){
                ret.state = 18;
            }
            else if(c === 91){
                ret.state = 19;
            }
            else if(c === 93){
                ret.state = 20;
            }
            else if(c === 94){
                ret.state = 21;
            }
            else if(c === 123){
                ret.state = 22;
            }
            else if(c === 124){
                ret.state = 23;
            }
            else if(c === 125){
                ret.state = 24;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 25;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 37){
                ret.state = 33;
            }
            else if(c === 101){
                ret.state = 34;
            }
            else if(c === 104){
                ret.state = 35;
            }
            else if(c === 105){
                ret.state = 36;
            }
            else if(c === 108){
                ret.state = 37;
            }
            else if(c === 110){
                ret.state = 38;
            }
            else if(c === 111){
                ret.state = 39;
            }
            else if(c === 112){
                ret.state = 40;
            }
            else if(c === 114){
                ret.state = 41;
            }
            else if(c === 116){
                ret.state = 42;
            }
            else if(c === 117){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 6:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 8:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 9:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 10:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 11:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 12:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 42){
                ret.state = 47;
            }
            else if(c === 47){
                ret.state = 48;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 13:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 14:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 15:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 16:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 62){
                ret.state = 49;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 17:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 18:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 19:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 20:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 21:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 22:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 23:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 24:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 25:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 26:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 27:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 28:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 50;
            }
            else if(c === 117 || c === 120){
                ret.state = 51;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 29:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 30:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 31:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 32:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 33:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 34:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 109){
                ret.state = 52;
            }
            else if(c === 120){
                ret.state = 53;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 35:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 36:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 109){
                ret.state = 55;
            }
            else if(c === 110){
                ret.state = 56;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 37:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 57;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 38:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 39:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 59;
            }
            else if(c === 117){
                ret.state = 60;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 40:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 61;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 41:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 62;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 42:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 121){
                ret.state = 63;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 43:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 44:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 45:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 46:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 65;
            }
            else if(c === 117 || c === 120){
                ret.state = 66;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 47:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 67;
            }
            else if(c === 42){
                ret.state = 68;
            }
            else if(c === 47){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 48:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 49:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 50:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 51:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 52:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 72;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 53:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 73;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 54:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 74;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 55:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 75;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 56:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 76;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 57:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 102){
                ret.state = 77;
            }
            else if(c === 120){
                ret.state = 78;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 58:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 79;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 59:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 80;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 60:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 81;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 61:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 82;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 62:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 83;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 63:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 84;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 64:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 85;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 65:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 66:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 86;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 67:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 67;
            }
            else if(c === 42){
                ret.state = 68;
            }
            else if(c === 47){
                ret.state = 87;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 68:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 46 || c >= 48){
                ret.state = 88;
            }
            else if(c === 47){
                ret.state = 89;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 69:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 47){
                ret.state = 90;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 70:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 71:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 91;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 72:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 92;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 73:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 93;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 74:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 100){
                ret.state = 94;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 75:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 95;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 76:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 96;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 77:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 97;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 78:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 79:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 98;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 80:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 99;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 81:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 100;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 82:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 101;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 83:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 104){
                ret.state = 102;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 84:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 103;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 85:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 86:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 104;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 87:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 67;
            }
            else if(c === 42){
                ret.state = 68;
            }
            else if(c === 47){
                ret.state = 87;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 88:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 67;
            }
            else if(c === 42){
                ret.state = 68;
            }
            else if(c === 47){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 89:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 90:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 67;
            }
            else if(c === 42){
                ret.state = 68;
            }
            else if(c === 47){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 91:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 91;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 92:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 121){
                ret.state = 105;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 93:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 106;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 94:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 107;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 95:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 108;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 96:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 97:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 98:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 109;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 99:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 110;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 100:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 117){
                ret.state = 111;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 101:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 102:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 112;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 103:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 104:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 104;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 105:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 106:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 95){
                ret.state = 113;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 107:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 114;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 108:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 115;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 109:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 116;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 110:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 117;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 111:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 118;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 112:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 113:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 119;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 114:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 115:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 116:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 120;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 117:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 118:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 119:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 121;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 120:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 122;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 121:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 123;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 122:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 123:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA1(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 123){
                ret.state = 2;
            }
            else if(c === 125){
                ret.state = 3;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 2:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 3:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA2(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            ret.state = 1;
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            ret.state = 1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
var jjlexers = [
    moveDFA0,
    moveDFA1,
    moveDFA2,
];

/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,    -1,    -1,     1,    -1,    -1,    21,    22,    27,    28,
        36,    29,    -1,    30,    32,    20,    23,    19,    26,    24,
        25,    35,     3,    34,     4,     1,    -1,     2,    -1,     1,
         1,     1,     1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,    31,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
        -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    16,     7,    -1,    -1,
        -1,    15,    -1,    14,    -1,    13,    -1,    -1,    -1,    -1,
        -1,    -1,     8,    -1,    11,    18,    -1,     5,    17,    -1,
        -1,    -1,     9,    12,
]; 
var jjlexTokens1 = [ 
        37,    37,     3,     4,
]; 
var jjlexTokens2 = [ 
        -1,    38,
]; 

var jjstateCount = 174;
var jjtokenCount = 39;
var jjactERR = 175;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
         9,     7,    15,    16,    17,   152,    10,    11,    85,    12,
       -50,    13,    14,   -50,   160,   161,   159,   -51,  -112,   156,
       -51,   151,   -88,   150,   148,   -50,   101,   149,     5,   118,
       129,   118,   -51,  -106,   115,   116,   115,   116,  -113,   -88,
       102,   -88,    97,  -106,    94,    97,    26,    97,    26,    97,
        68,    56,    60,    66,   -39,    62,    49,    63,   174,    48,
        96,    43,    44,    96,   173,    96,   172,    96,    57,   171,
       141,    60,   169,   168,   167,   141,   165,   164,   128,   154,
       153,   145,   112,   133,   132,   131,   130,   126,  -106,   122,
       121,   120,   112,   109,   -95,   107,   106,   105,   104,   103,
        98,    91,    89,    88,    83,    79,    77,    76,    72,    71,
        70,    65,    58,    51,    47,    45,    41,    37,    21,    32,
        27,    21,     4,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -39,   122,    -5,   -39,   120,   -39,   -39,    47,   117,   -39,
       -39,   -39,   -39,   117,   -39,   -39,   -39,   117,   -39,   -39,
       -39,    97,    45,   -39,   -39,   -39,   -39,   -39,   -39,   -39,
       -39,   -39,    83,   -39,    31,   112,   113,   -39,    55,   -39,
        75,   -39,   -39,   -39,   -39,    32,   -39,   -39,    89,   -39,
       -39,    23,   -39,   101,    49,   -39,   109,   107,   -39,   -39,
       105,   -39,   -39,    94,    85,   -39,   -39,   -39,    85,   -39,
       -39,   -39,   -39,    89,     7,   -39,   102,    79,   100,    34,
       -39,    30,    43,   -39,    77,    40,     4,   -39,    79,    79,
        67,    92,   -39,   -39,   -39,    94,   -39,    93,   -39,   -39,
       -39,    92,   -39,    62,   -39,   -39,    72,    89,   -39,    70,
       -39,    85,    68,   -39,    85,   -39,   -39,    83,    81,   -39,
       -39,   -39,   -39,    59,   -39,    52,   -39,   -39,     8,   -39,
       -39,   -39,     6,   -39,    47,    -2,   -39,     3,    44,   -39,
        50,   -39,    15,    -6,   -39,   -39,   -12,   -39,    43,    76,
        55,   -39,    73,    72,    69,   -39,    -9,   -39,   -39,   -39,
       -39,    50,    68,    50,    64,   -39,   -39,   -39,   -39,    39,
       -39,    36,   -39,   -39,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
         2,     2,     2,     2,     2,   137,     2,     2,    74,     2,
       156,     2,     2,   156,   146,   146,   146,   135,   142,   143,
       135,   137,    74,   137,   137,   156,    86,   137,     2,   132,
       143,   128,   135,    81,   132,   132,   128,   128,    79,    74,
        86,    74,    85,    85,    82,    82,    22,    22,     7,     7,
        54,    45,   142,    54,    81,    51,    38,    51,   171,    38,
        85,    34,    34,    82,   169,    22,   164,     7,    45,   163,
       162,    79,   161,   154,   153,   152,   150,   149,   148,   140,
       138,   134,   125,   123,   118,   117,   114,   112,   111,   109,
       107,   106,   103,   101,    97,    95,    91,    90,    89,    88,
        84,    78,    77,    76,    73,    68,    64,    63,    60,    57,
        56,    53,    48,    40,    36,    35,    32,    21,    17,    13,
         8,     4,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         4,    -1,    -1,     0,    -1,     3,     5,    -1,    -1,   105,
       105,   105,   105,    -1,    16,    17,    18,     1,    73,    74,
        75,    26,     7,    20,    21,    22,    24,     9,    10,    11,
       105,    13,    -1,    72,    -1,    -1,    -1,    19,    -1,    12,
        14,    81,    77,    78,    30,    -1,    27,     8,    -1,     2,
        15,    -1,    80,    84,    35,    25,    -1,    -1,   108,   110,
        -1,    76,    81,    90,    -1,     6,    29,    31,    -1,    28,
        23,   109,    79,   100,    92,    88,    -1,    -1,    47,   111,
        82,   101,    -1,    89,    93,    38,    -1,    86,    -1,    -1,
        -1,    -1,   102,   103,   104,    -1,    99,    91,    96,    97,
        83,    -1,    47,    37,    47,   113,    -1,    -1,    85,    -1,
        33,    38,    -1,    42,    -1,    44,    45,    -1,    -1,    98,
        95,    32,    36,    -1,    40,    37,    53,    64,   105,    43,
        46,   109,   105,    34,    48,    53,    52,    -1,    66,    69,
        70,    41,   106,    -1,    53,    51,    58,    47,    65,    -1,
        -1,    63,    -1,    -1,    -1,    39,    53,    54,    55,    56,
        57,    -1,    67,    -1,    -1,    68,    71,   107,    59,    -1,
        61,    -1,    60,    62,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         5,   146,   157,     7,    92,   123,    85,    83,    22,    23,
       145,   137,   145,   137,   143,   113,    94,    80,    81,   141,
        63,    99,   123,    41,    37,    35,   169,   138,   139,   165,
       162,   154,    21,    58,    60,   122,   123,   133,   124,   118,
        58,    60,    91,    89,   126,   110,   116,   118,   107,    24,
       116,   118,    98,    86,    54,   124,   118,    66,    49,    68,
        73,    74,    72,    53,    24,    45,    32,    30,   118,   124,
       118,    17,    18,    19,     1,   142,     2,   161,   126,   156,
       136,   137,   134,   135,   136,   137,   112,   126,   109,   126,
        79,    77,    51,    52,    53,    39,   118,    38,    34,    33,
        19,    29,   118,    28,   118,    27,   118,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
        73,   -59,    -4,   -59,    37,   -59,    27,     0,   -59,    53,
        51,    49,    15,   -59,   -59,   -59,   -59,    64,   -59,   -59,
        61,    14,    15,   -59,   -59,   -59,    87,   -59,   -59,   -59,
        43,   -59,   -59,   -59,   -15,   -59,    53,   -59,   -59,   -59,
        52,    53,   -59,   -59,    41,   -59,   -59,   -59,   -59,   -59,
       -59,   -59,   -59,   -22,    43,   -59,   -59,   -59,   -59,   -59,
       -59,   -59,    22,    16,   -59,   -59,   -59,    76,   -59,   -59,
       -59,    35,   -59,   -33,   -40,   -59,    10,   -59,    21,   -16,
       -59,   -14,   -33,   -59,   -59,     3,   -59,   -59,   -59,   -59,
       -59,   -59,   -59,   -59,   -59,   -59,   -59,     0,   -59,   -59,
       -59,   -59,    66,    28,    64,   -59,   -59,   -59,   -59,   -59,
       -59,    17,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
       -59,   -59,   -59,   -59,   -59,    20,    58,   -59,    -2,   -59,
       -59,    20,    -6,   -59,   -59,   -14,   -59,   -28,   -59,   -59,
       -59,   -59,   -23,   -59,    54,   -59,   -26,    55,     0,   -59,
       -59,   -59,    -4,   -59,   -59,   -59,   -16,   -59,   -59,   -59,
       -59,   -59,    -5,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
       -59,   -59,   -59,   -59,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     0,     6,     2,     0,     0,     6,     2,     4,     2,
         2,     2,     3,     2,     0,     1,     1,     1,     1,     2,
         1,     1,     1,     4,     0,     3,     0,     1,     3,     2,
         0,     0,     6,     5,     7,     0,     2,     0,     0,     4,
         1,     3,     1,     2,     1,     1,     2,     0,     2,     3,
         1,     2,     1,     0,     3,     1,     1,     1,     0,     3,
         4,     3,     4,     1,     1,     0,     1,     0,     3,     1,
         1,     3,     2,     1,     1,     0,     5,     1,     1,     3,
         1,     0,     4,     4,     0,     3,     1,     1,     1,     2,
         0,     2,     0,     1,     0,     4,     2,     2,     3,     1,
         0,     1,     2,     2,     2,     0,     0,     5,     2,     0,
         1,     0,     0,     5,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     2,     1,     3,     3,     5,     4,     4,     4,     4,
         4,     4,     4,     4,     6,     6,     7,     7,     7,     8,
         8,     9,     9,    10,    10,    11,    11,    12,    12,    13,
        13,    15,    14,    14,    14,    16,    17,    17,    19,    18,
        18,    20,    20,    21,    21,    21,    21,    23,    22,    24,
        24,    25,    25,    27,    26,    28,    28,    28,    28,    29,
        29,    29,    29,    29,    30,    30,    31,    31,    32,    32,
        33,    33,    34,    34,    35,    37,    36,    38,    38,    39,
        39,    41,    40,    42,    42,    43,    43,    44,    44,    45,
        45,    46,    46,    47,    48,    47,    47,    47,    49,    49,
        50,    50,    50,    51,    51,    53,    54,    52,    55,    55,
        56,    57,    58,    56,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",              "NAME",            "STRING",
            "OPEN_BLOCK",       "CLOSE_BLOCK",           "OPT_DIR",
               "LEX_DIR",          "LEFT_DIR",         "RIGHT_DIR",
          "NONASSOC_DIR",           "USE_DIR",        "HEADER_DIR",
         "EXTRA_ARG_DIR",             "EMPTY",          "TYPE_DIR",
              "PREC_DIR",          "INIT_DIR",        "OUTPUT_DIR",
            "IMPORT_DIR",                "GT",                "LT",
                   "BRA",               "KET",               "EQU",
                  "CBRA",              "CKET",          "QUESTION",
                  "STAR",              "PLUS",              "DASH",
                 "COLON",             "ARROW",               "EOL",
             "SEPERATOR",                "OR",             "WEDGE",
                 "COMMA",          "ANY_CODE",  "ANY_EPLOGUE_CODE",
    
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,                null,
                     "{",                 "}",           "%option",
                  "%lex",             "%left",            "%right",
             "%nonassoc",              "%use",           "%header",
            "%extra_arg",            "%empty",             "%type",
                 "%prec",             "%init",           "%output",
               "%import",                 ">",                 "<",
                     "(",                 ")",                 "=",
                     "[",                 "]",                 "?",
                     "*",                 "+",                 "-",
                     ":",                "=>",                 ";",
                    "%%",                 "|",                 "^",
                     ",",                null,                null,
    
]; 


function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}
class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
interface Parser{
    init(ctx1: Context, b: GBuilder);
    accept(s: string);
    end();
    halt();
    on(ent: string, cb: (a1?, a2?, a3?) => any);
}
function createParser(): Parser {
    // members for lexer
    var _lexState: number[];
    var _state: number;
    var _matched: string;
    var _token: Token;
    
    var _marker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    var _backupCount: number;

    var _line: number;
    var _column: number;
    var _tline: number;
    var _tcolumn: number;

    // members for parser
    var _lrState: number[];
    var _sematicS: JNode[] = [];
    var _sematicVal: JNode;

    var _stop;

    var _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    
    let gb: GBuilder;
    let ctx: Context;
    let assoc: Assoc;
    let lexacts: LexAction[];
    let ruleLhs: JNode;


    return {
        init,
        on,
        accept,
        end,
        halt
    };
    function init(ctx1: Context, b: GBuilder){
        _lexState = [ 0 ];// DEFAULT
        _state = 0;
        _matched = '';
        _token = new Token(-1, null, 0, 0, 0, 0);
        _marker.state = -1;
        _backupCount = 0;
        _line = _tline = 0;
        _column = _tcolumn = 0;
        
        _lrState = [ 0 ];
        _sematicS = [];
        _sematicVal = null;

        _stop = false;
        
    gb = b;
    ctx = ctx1;

    }
    /**
     *  set 
     */
    function _setImg(s: string){
        _matched = s;
        _tline = _line;
        _tcolumn = _column;
    }
    function _prepareToken(tid: number){
        _token.id = tid;
        _token.val = _matched;
        _token.startLine = _tline;
        _token.startColumn = _tcolumn;
        _token.endLine = _line;
        _token.endColumn = _column - 1;

        _matched = '';
        _tline = _line;
        _tcolumn = _column;
    }
    function _returnToken(){
        _emit('token', jjtokenNames[_token.id], _token.val);
        while(!_stop && !_acceptToken(_token));
        _token.id = -1;
    }
    function _emit(name: string, a1?, a2?, a3?){
        var cbs = _handlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name: string, cb: (a1?, a2?, a3?) => any){
        _handlers[name] || (_handlers[name] = []);
        _handlers[name].push(cb);
    }
    function _doLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && _prepareToken(jjtk);
        switch(jjstaten){
            case 1:
                _setImg("");
                break;
            case 3:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 22:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            case 24:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            case 25:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 27:
                 _sematicVal = nodeFromToken(_token); _sematicVal.val = unescape(_sematicVal.val.substr(1, _sematicVal.val.length - 2)); 
                break;
            case 29:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 30:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 31:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 32:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 45:
                 _sematicVal = nodeFromToken(_token); _sematicVal.val = unescape(_sematicVal.val.substr(1, _sematicVal.val.length - 2)); 
                break;
            case 48:
                _setImg("");
                break;
            case 70:
                _setImg("");
                break;
            case 89:
                _setImg("");
                break;
            default:;
        }
    }
    function _doLexAction1(jjstaten: number){
        let jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && _prepareToken(jjtk);
        switch(jjstaten){
            case 0:
                 _sematicVal = newNode(_token.val); 
                break;
            case 1:
                 _sematicVal = newNode(_token.val); 
                break;
            case 2:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            case 3:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            default:;
        }
    }
    function _doLexAction2(jjstaten: number){
        let jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && _prepareToken(jjtk);
        switch(jjstaten){
            case 1:
                 _sematicVal = nodeFromToken(_token); 
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function _doLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                _doLexAction0(state);
                break;
            case 1:
                _doLexAction1(state);
                break;
            case 2:
                _doLexAction2(state);
                break;
            default:;
        }
        _token.id !== -1 && _returnToken();
    }
    function _rollback(): string{
        let ret = _matched.substr(_matched.length - _backupCount, _backupCount);
        _matched = _matched.substr(0, _matched.length - _backupCount);
        _backupCount = 0;
        _line = _marker.line;
        _column = _marker.column;
        _state = _marker.state;
        _marker.state = -1;
        return ret;
    }
    function _mark(){
        _marker.state = _state;
        _marker.line = _line;
        _marker.column = _column;
        _backupCount = 0;
    }
    function _consume(c: string){
        c === '\n' ? (_line++, _column = 0) : (_column += c.charCodeAt(0) > 0xff ? 2 : 1);
        _matched += c;
        _marker.state !== -1 && (_backupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function _acceptChar(c: string){
        var lexstate = _lexState[_lexState.length - 1];
        var retn = { state: _state, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    _doLexAction(lexstate, _state);
                    // recover
                    _marker.state = -1;
                    _backupCount = 0;
                    _state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    _mark();
                    _state = retn.state;
                    return _consume(c);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                _doLexAction(lexstate, _state);
                // recover
                _marker.state = -1;
                _backupCount = 0;
                _state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(_marker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = _rollback();
                    _doLexAction(lexstate, _state);
                    _state = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    _emit('lexicalerror', "unexpected character " + c, _line, _column);
                    // force consume
                    return true;
                }
            }
            else {
                _state = retn.state;
                // character consumed
                return _consume(c);
            }
        }
    }
    function _acceptEOF(){
        if(_state === 0){
            // recover
            _prepareToken(0);
            _returnToken();
            return true;
        }
        else {
            let lexstate = _lexState[_lexState.length - 1];
            let retn = { state: _state, hasArc: false, isEnd: false };
            jjlexers[lexstate](-1, retn);
            if(retn.isEnd){
                _doLexAction(lexstate, _state);
                _state = 0;
                _marker.state = -1;
                return false;
            }
            else if(_marker.state !== -1){
                let s = _rollback();
                _doLexAction(lexstate, _state);
                _state = 0;
                accept(s);
                return false;
            }
            else {
                _emit('lexicalerror', 'unexpected end of file');
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s: string){
        for(let i = 0; i < s.length && !_stop;){
            _acceptChar(s.charAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!_stop && !_acceptEOF());
        _stop = true;
    }
    function halt(){
        _stop = true;
    }
    function _doReduction(jjrulenum: number){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = _sematicS.length;
        var jjtop = _sematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: @0 => */
                _lexState.push(2);
                break;
            case 5:
                /* 5: @1 => */
                { gb.lexBuilder.prepareLex(); }
                break;
            case 9:
                /* 9: option => "%header" block */
                var b = _sematicS[jjsp - 1];
                { gb.setHeader(b); }
                break;
            case 10:
                /* 10: option => "%extra_arg" block */
                var b = _sematicS[jjsp - 1];
                { gb.setExtraArg(b); }
                break;
            case 11:
                /* 11: option => "%type" block */
                var ty = _sematicS[jjsp - 1];
                { gb.setType(ty); }
                break;
            case 12:
                /* 12: option => "%init" block block */
                var args = _sematicS[jjsp - 2];
                var b = _sematicS[jjsp - 1];
                { gb.setInit(args, b); }
                break;
            case 13:
                /* 13: option => "%output" <STRING> */
                var op = _sematicS[jjsp - 1];
                { gb.setOutput(op); }
                break;
            case 15:
                /* 15: epilogue => <ANY_EPLOGUE_CODE> */
                var ep = _sematicS[jjsp - 1];
                { gb.setEpilogue(ep); }
                break;
            case 16:
                /* 16: associativeDir => "%left" */
                { assoc = Assoc.LEFT; }
                break;
            case 17:
                /* 17: associativeDir => "%right" */
                { assoc = Assoc.RIGHT; }
                break;
            case 18:
                /* 18: associativeDir => "%nonassoc" */
                { assoc = Assoc.NON; }
                break;
            case 21:
                /* 21: assocToken => tokenRef */
                var t = _sematicS[jjsp - 1];
                { gb.defineTokenPrec(t, assoc, t.ext); }
                break;
            case 22:
                /* 22: assocToken => <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.defineTokenPrec(t, assoc, TokenRefType.NAME); }
                break;
            case 23:
                /* 23: optionBody => optionBody <NAME> "=" <STRING> */
                var name = _sematicS[jjsp - 3];
                var val = _sematicS[jjsp - 1];
                { gb.setOpt(name, val); }
                break;
            case 26:
                /* 26: states_ => */
                { gb.lexBuilder.selectState('DEFAULT'); }
                break;
            case 27:
                /* 27: states => <NAME> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); }
                break;
            case 28:
                /* 28: states => states "," <NAME> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); }
                break;
            case 31:
                /* 31: @2 => */
                var v = _sematicS[jjsp - 1];
                { gb.lexBuilder.prepareVar(v); }
                break;
            case 32:
                /* 32: lexBodyItem => <NAME> @2 "=" "<" regexp ">" */
                var v = _sematicS[jjsp - 6];
                { gb.lexBuilder.endVar(); }
                break;
            case 33:
                /* 33: lexBodyItem => newState "<" regexp ">" lexAction_ */
                { gb.lexBuilder.end(lexacts, '(untitled)'); }
                break;
            case 34:
                /* 34: lexBodyItem => newState "<" <NAME> ":" regexp ">" lexAction_ */
                var tn = _sematicS[jjsp - 5];
                { 
    let tdef = gb.defToken(tn, gb.lexBuilder.getPossibleAlias());
    lexacts.push(returnToken(tdef));
    gb.lexBuilder.end(lexacts, tn.val);
}
                break;
            case 35:
                /* 35: newState => */
                { gb.lexBuilder.newState(); }
                break;
            case 37:
                /* 37: lexAction_ => */
                { lexacts = []; }
                break;
            case 38:
                /* 38: @3 => */
                { lexacts = []; }
                break;
            case 40:
                /* 40: lexAction => block */
                var b = _sematicS[jjsp - 1];
                { lexacts = [blockAction(b.val, b.startLine)]; }
                break;
            case 43:
                /* 43: lexActionItem => "+" <NAME> */
                var vn = _sematicS[jjsp - 1];
                { gb.addPushStateAction(lexacts, vn); }
                break;
            case 44:
                /* 44: lexActionItem => "-" */
                { lexacts.push(popState()); }
                break;
            case 45:
                /* 45: lexActionItem => block */
                var b = _sematicS[jjsp - 1];
                { lexacts.push(blockAction(b.val, b.startLine)); }
                break;
            case 46:
                /* 46: lexActionItem => "=" <STRING> */
                var s = _sematicS[jjsp - 1];
                { lexacts.push(setImg(s.val)); }
                break;
            case 47:
                /* 47: @4 => */
                { gb.lexBuilder.enterUnion(); }
                break;
            case 48:
                /* 48: regexp => @4 union */
                { gb.lexBuilder.leaveUnion(); }
                break;
            case 49:
                /* 49: union => union "|" simpleRE */
                { gb.lexBuilder.endUnionItem(); }
                break;
            case 50:
                /* 50: union => simpleRE */
                { gb.lexBuilder.endUnionItem(); }
                break;
            case 53:
                /* 53: @5 => */
                { gb.lexBuilder.enterSimple(); }
                break;
            case 54:
                /* 54: basicRE => @5 primitiveRE rePostfix */
                var suffix = _sematicS[jjsp - 1];
                { gb.lexBuilder.simplePostfix(suffix.val as (''|'?'|'+'|'*')); }
                break;
            case 55:
                /* 55: rePostfix => "+" */
                { jjtop = newNode('+'); }
                break;
            case 56:
                /* 56: rePostfix => "?" */
                { jjtop = newNode('?'); }
                break;
            case 57:
                /* 57: rePostfix => "*" */
                { jjtop = newNode('*'); }
                break;
            case 58:
                /* 58: rePostfix => */
                { jjtop = newNode(''); }
                break;
            case 61:
                /* 61: primitiveRE => "<" <NAME> ">" */
                var n = _sematicS[jjsp - 2];
                { gb.lexBuilder.addVar(n); }
                break;
            case 62:
                /* 62: primitiveRE => "%import" "(" <STRING> ")" */
                var i = _sematicS[jjsp - 2];
                { gb.lexBuilder.importVar(i); }
                break;
            case 63:
                /* 63: primitiveRE => <STRING> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.addString(s.val); }
                break;
            case 64:
                /* 64: inverse_ => "^" */
                { gb.lexBuilder.beginSet(true); }
                break;
            case 65:
                /* 65: inverse_ => */
                { gb.lexBuilder.beginSet(false); }
                break;
            case 70:
                /* 70: setREItem => <STRING> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(s, s); }
                break;
            case 71:
                /* 71: setREItem => <STRING> "-" <STRING> */
                var from = _sematicS[jjsp - 3];
                var to = _sematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(from, to); }
                break;
            case 75:
                /* 75: @6 => */
                var n = _sematicS[jjsp - 1];
                { ruleLhs = n; }
                break;
            case 81:
                /* 81: @7 => */
                { gb.prepareRule(ruleLhs); }
                break;
            case 82:
                /* 82: rule => @7 ruleHead ruleBody ruleTrailer */
                { gb.commitRule(); }
                break;
            case 85:
                /* 85: varUseList => varUseList "," <NAME> */
                var vn = _sematicS[jjsp - 1];
                { gb.addRuleUseVar(vn); }
                break;
            case 86:
                /* 86: varUseList => <NAME> */
                var vn = _sematicS[jjsp - 1];
                { gb.addRuleUseVar(vn); }
                break;
            case 91:
                /* 91: itemName => <NAME> "=" */
                var itn = _sematicS[jjsp - 2];
                { gb.addRuleSematicVar(itn); }
                break;
            case 93:
                /* 93: ruleItem => <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.addRuleItem(t, TokenRefType.NAME); }
                break;
            case 94:
                /* 94: @8 => */
                var vn = _sematicS[jjsp - 2];
                { gb.addRuleSematicVar(vn); }
                break;
            case 95:
                /* 95: ruleItem => <NAME> "=" @8 <NAME> */
                var vn = _sematicS[jjsp - 4];
                var t = _sematicS[jjsp - 1];
                { gb.addRuleItem(t, TokenRefType.NAME); }
                break;
            case 96:
                /* 96: ruleItem => itemName tokenRef */
                var t = _sematicS[jjsp - 1];
                { gb.addRuleItem(t, t.ext); }
                break;
            case 97:
                /* 97: ruleItem => itemName lexAction */
                { gb.addAction(lexacts); }
                break;
            case 98:
                /* 98: tokenRef => "<" <NAME> ">" */
                var t = _sematicS[jjsp - 2];
                { jjtop = t; jjtop.ext = TokenRefType.TOKEN; }
                break;
            case 99:
                /* 99: tokenRef => <STRING> */
                { jjtop.ext = TokenRefType.STRING; }
                break;
            case 102:
                /* 102: ruleTrailer => rulePrec lexAction */
                { gb.addAction(lexacts); }
                break;
            case 103:
                /* 103: rulePrec => "%prec" <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.defineRulePr(t, TokenRefType.NAME); }
                break;
            case 104:
                /* 104: rulePrec => "%prec" tokenRef */
                var t = _sematicS[jjsp - 1];
                { gb.defineRulePr(t, t.ext); }
                break;
            case 105:
                /* 105: @9 => */
                _lexState.push(1);
                break;
            case 106:
                /* 106: @10 => */
                var open = _sematicS[jjsp - 2];
                var bl = _sematicS[jjsp - 1];
                _lexState.pop();
                break;
            case 107:
                /* 107: block => @9 "{" innerBlock @10 "}" */
                var open = _sematicS[jjsp - 4];
                var bl = _sematicS[jjsp - 3];
                var close = _sematicS[jjsp - 1];
                { jjtop = nodeBetween(open, close, bl.val); }
                break;
            case 108:
                /* 108: innerBlock => innerBlock innerBlockItem */
                var b = _sematicS[jjsp - 1];
                { jjtop.val += b.val; }
                break;
            case 109:
                /* 109: innerBlock => */
                { jjtop = newNode(''); }
                break;
            case 111:
                /* 111: @11 => */
                _lexState.push(1);
                break;
            case 112:
                /* 112: @12 => */
                var b = _sematicS[jjsp - 1];
                _lexState.pop();
                break;
            case 113:
                /* 113: innerBlockItem => @11 "{" innerBlock @12 "}" */
                var b = _sematicS[jjsp - 3];
                { jjtop = newNode(''); jjtop.val = '{' + b.val + '}'; }
                break;
        }
        _lrState.length -= jjruleLen[jjrulenum];
        var jjcstate = _lrState[_lrState.length - 1];
        _lrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        _sematicS.length -= jjruleLen[jjrulenum];
        _sematicS.push(jjtop);
    }

    function _acceptToken(t: Token){
        // look up action table
        var cstate = _lrState[_lrState.length - 1];
        var ind = jjdisact[cstate] + t.id;
        var act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            _syntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                _stop = true;
                _emit('accept');
                return true;
            }
            else {
                _lrState.push(act - 1);
                _sematicS.push(_sematicVal);
                _sematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            _doReduction(-act - 1);
            return false;
        }
        else {
            // error
            _syntaxError(t);
            // force consume
            return true;
        }
    }
    function _syntaxError(t: Token){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += _expected(_lrState[_lrState.length - 1]);
        _emit("syntaxerror", msg, t);
    }
    function _expected(state: number){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk: number){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}

function charPosition(line: number, column: number): Position{
    return {
        startLine: line,
        startColumn: column,
        endLine: line,
        endColumn: column
    }
}
export function parse(ctx: Context, source: string): File{
    let parser = createParser();
    let err = false;
    parser.on('lexicalerror', (msg, line, column) => {
        ctx.requireLines((ctx, lines) => {
            let msg2 = msg + ' ' + markPosition(charPosition(line, column), lines);
            ctx.err(new JsccError(msg2, 'LexicalError'));
        });
        // ctx.err(new CompilationError(msg, line));
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', (msg, token) => {
        // ctx.err(new CompilationError(msg, token.startLine));
        ctx.requireLines((ctx, lines) => {
            let msg2 = markPosition(token, lines) + endl + msg;
            ctx.err(new JsccError(msg2, 'SyntaxError'));
        });
        parser.halt();
        err = true;
    });
    let gb = createFileBuilder(ctx);
    parser.init(ctx, gb);
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        return gb.build();
    }
}