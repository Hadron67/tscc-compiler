/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

import { GBuilder, createFileBuilder, TokenRefType } from './gbuilder';
import { Assoc } from '../grammar/token-entry';
import { CompilationError as E, CompilationError } from '../util/E';
import { InputStream } from '../util/io';
import { Context } from '../util/context';
import { LexAction, returnToken, blockAction, pushState, popState, setImg } from '../lexer/action';
import { Position, JNode } from './node';
import { File } from './file';

function nodeFromToken(t: Token): JNode{
    return {
        val: t.val,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
function nodeFromTrivalToken(t: Token): JNode{
    return {
        val: null,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
function newNode(val: string): JNode{
    return {
        val: val,
        ext: null,
        startLine: 0,
        startColumn: 0,
        endLine: 0,
        endColumn: 0
    };
}
function unescape(s: string){
    return s
    .replace(/\\n/g, '\n')
    .replace(/\\t/g, '\t')
    .replace(/\\r/g, '\r')
    .replace(/\\\\/g, '\\');
}

/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else if(c === 34){
                ret.state = 2;
            }
            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 3;
            }
            else if(c === 37){
                ret.state = 4;
            }
            else if(c === 39){
                ret.state = 5;
            }
            else if(c === 40){
                ret.state = 6;
            }
            else if(c === 41){
                ret.state = 7;
            }
            else if(c === 42){
                ret.state = 8;
            }
            else if(c === 43){
                ret.state = 9;
            }
            else if(c === 44){
                ret.state = 10;
            }
            else if(c === 45){
                ret.state = 11;
            }
            else if(c === 47){
                ret.state = 12;
            }
            else if(c === 58){
                ret.state = 13;
            }
            else if(c === 59){
                ret.state = 14;
            }
            else if(c === 60){
                ret.state = 15;
            }
            else if(c === 61){
                ret.state = 16;
            }
            else if(c === 62){
                ret.state = 17;
            }
            else if(c === 63){
                ret.state = 18;
            }
            else if(c === 91){
                ret.state = 19;
            }
            else if(c === 93){
                ret.state = 20;
            }
            else if(c === 94){
                ret.state = 21;
            }
            else if(c === 123){
                ret.state = 22;
            }
            else if(c === 124){
                ret.state = 23;
            }
            else if(c === 125){
                ret.state = 24;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 28;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 29;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 37){
                ret.state = 30;
            }
            else if(c === 101){
                ret.state = 31;
            }
            else if(c === 104){
                ret.state = 32;
            }
            else if(c === 105){
                ret.state = 33;
            }
            else if(c === 108){
                ret.state = 34;
            }
            else if(c === 110){
                ret.state = 35;
            }
            else if(c === 111){
                ret.state = 36;
            }
            else if(c === 112){
                ret.state = 37;
            }
            else if(c === 114){
                ret.state = 38;
            }
            else if(c === 116){
                ret.state = 39;
            }
            else if(c === 117){
                ret.state = 40;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 41;
            }
            else if(c === 39){
                ret.state = 42;
            }
            else if(c === 92){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 6:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 8:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 9:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 10:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 11:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 12:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 42){
                ret.state = 44;
            }
            else if(c === 47){
                ret.state = 45;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 13:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 14:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 15:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 16:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 62){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 17:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 18:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 19:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 20:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 21:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 22:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 23:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 24:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 25:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 26:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 27:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 47;
            }
            else if(c === 117 || c === 120){
                ret.state = 48;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 28:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 28;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 29;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 29:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 28;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 29;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 30:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 31:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 109){
                ret.state = 49;
            }
            else if(c === 120){
                ret.state = 50;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 32:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 51;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 33:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 52;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 34:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 53;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 35:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 36:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 55;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 37:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 56;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 38:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 57;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 39:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 121){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 40:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 59;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 41:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 41;
            }
            else if(c === 39){
                ret.state = 42;
            }
            else if(c === 92){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 42:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 43:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 60;
            }
            else if(c === 117 || c === 120){
                ret.state = 61;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 44:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 62;
            }
            else if(c === 42){
                ret.state = 63;
            }
            else if(c === 47){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 45:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 65;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 46:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 47:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 48:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 66;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 49:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 67;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 50:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 68;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 51:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 52:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 53:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 102){
                ret.state = 71;
            }
            else if(c === 120){
                ret.state = 72;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 54:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 73;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 55:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 74;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 56:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 75;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 57:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 76;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 58:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 77;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 59:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 78;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 60:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 41;
            }
            else if(c === 39){
                ret.state = 42;
            }
            else if(c === 92){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 61:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 79;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 62:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 62;
            }
            else if(c === 42){
                ret.state = 63;
            }
            else if(c === 47){
                ret.state = 80;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 63:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 46 || c >= 48){
                ret.state = 81;
            }
            else if(c === 47){
                ret.state = 82;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 64:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 47){
                ret.state = 83;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 65:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 65;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 66:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 84;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 67:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 85;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 68:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 86;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 69:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 100){
                ret.state = 87;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 70:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 88;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 71:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 89;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 72:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 73:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 90;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 74:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 91;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 75:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 92;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 76:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 104){
                ret.state = 93;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 77:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 94;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 78:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 79:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 41;
            }
            else if(c === 39){
                ret.state = 42;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 95;
            }
            else if(c === 92){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 80:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 62;
            }
            else if(c === 42){
                ret.state = 63;
            }
            else if(c === 47){
                ret.state = 80;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 81:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 62;
            }
            else if(c === 42){
                ret.state = 63;
            }
            else if(c === 47){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 82:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 83:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 62;
            }
            else if(c === 42){
                ret.state = 63;
            }
            else if(c === 47){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 84:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 84;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 85:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 121){
                ret.state = 96;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 86:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 97;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 87:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 98;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 88:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 89:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 90:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 99;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 91:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 100;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 92:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 93:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 101;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 94:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 95:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 41;
            }
            else if(c === 39){
                ret.state = 42;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 95;
            }
            else if(c === 92){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 96:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 97:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 95){
                ret.state = 102;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 98:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 103;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 99:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 104;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 100:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 105;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 101:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 102:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 106;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 103:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 104:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 107;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 105:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 106:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 108;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 107:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 109;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 108:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 110;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 109:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 110:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA1(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 123){
                ret.state = 2;
            }
            else if(c === 125){
                ret.state = 3;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 2:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 3:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA2(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            ret.state = 1;
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            ret.state = 1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
var jjlexers = [
    moveDFA0,
    moveDFA1,
    moveDFA2,
];

/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,    -1,    -1,     1,    -1,    -1,    19,    20,    25,    26,
        34,    27,    -1,    28,    30,    18,    21,    17,    24,    22,
        23,    33,     3,    32,     4,    -1,     2,    -1,     1,     1,
        31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     2,    -1,    -1,    -1,    29,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    10,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    16,     7,
        -1,    -1,    15,    -1,    14,    -1,    13,    -1,    -1,    -1,
        -1,     8,    -1,    11,    -1,     5,    -1,    -1,    -1,     9,
        12,
]; 
var jjlexTokens1 = [ 
        35,    35,     3,     4,
]; 
var jjlexTokens2 = [ 
        -1,    36,
]; 

var jjstateCount = 168;
var jjtokenCount = 37;
var jjactERR = 169;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
         9,     7,    14,    15,    16,   149,    10,    11,   116,    12,
        83,    13,   -49,   113,   114,   -49,   157,   158,   156,  -110,
       -50,   148,   146,   -50,   -86,   147,     5,   -49,   116,    95,
      -104,    92,    95,   113,   114,   -50,    25,    95,   153,   -86,
        99,   -86,    25,    95,  -104,    94,  -111,    66,    94,   127,
        64,    58,    54,    94,   100,    60,   168,    61,    47,    94,
       167,    46,   139,   -38,    41,    42,   165,   164,   163,    55,
       139,   161,   126,   151,   150,   143,   110,    58,   131,   130,
       129,   128,   124,  -104,   120,   119,   118,   110,   107,   -93,
       105,   104,   103,   102,   101,    96,    89,    87,    86,    81,
        77,    75,    74,    70,    69,    68,    63,    56,    49,    45,
        43,    39,    35,    20,    29,    26,    20,     4,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -37,   117,    -5,   -37,   115,   -37,   -37,    41,   112,   -37,
       -37,   113,   -37,   -37,   -37,   -37,   112,   -37,   -37,   -37,
        94,    35,   -37,   -37,   -37,   -37,   -37,   -37,   -37,   -37,
        80,   -37,    36,   107,   108,   -37,    57,   -37,    72,   -37,
       -37,   -37,   -37,    35,   -37,   -37,    86,   -37,   -37,    25,
       -37,    96,    46,   -37,   104,   102,   -37,   -37,   100,   -37,
       -37,    89,    82,   -37,   -37,   -37,    82,   -37,   -37,   -37,
       -37,    84,     9,   -37,    97,    76,    95,    42,   -37,    41,
        30,   -37,    74,    27,    20,   -37,    76,    76,    64,    87,
       -37,   -37,   -37,    89,   -37,    88,   -37,   -37,   -37,    87,
       -37,    59,   -37,   -37,    69,    84,   -37,    67,   -37,    80,
        65,   -37,    80,   -37,   -37,    78,    76,   -37,   -37,   -37,
       -37,    56,   -37,    48,   -37,   -37,     7,   -37,   -37,   -37,
       -13,   -37,    43,     3,   -37,     3,    40,   -37,    46,   -37,
        16,    15,   -37,   -37,    -8,   -37,    39,    70,   -37,    68,
        66,    63,   -37,    -5,   -37,   -37,   -37,   -37,    46,    60,
        43,   -37,   -37,   -37,   -37,    33,   -37,   -37,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
         2,     2,     2,     2,     2,   135,     2,     2,   130,     2,
        72,     2,   153,   130,   130,   153,   144,   144,   144,   140,
       133,   135,   135,   133,    72,   135,     2,   153,   126,    83,
        83,    80,    80,   126,   126,   133,    21,    21,   141,    72,
        84,    72,     7,     7,    79,    83,    77,    52,    80,   141,
        52,   140,    43,    21,    84,    49,   165,    49,    36,     7,
       160,    36,   159,    79,    32,    32,   158,   151,   150,    43,
       149,   147,   146,   138,   136,   132,   123,    77,   121,   116,
       115,   112,   110,   109,   107,   105,   104,   101,    99,    95,
        93,    89,    88,    87,    86,    82,    76,    75,    74,    71,
        66,    62,    61,    58,    55,    54,    51,    46,    38,    34,
        33,    30,    20,    16,    11,     8,     4,     1,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         4,    -1,    -1,     0,    -1,     3,     5,    -1,    -1,   103,
       103,    -1,   103,    15,    16,    17,     1,    71,    72,    73,
        25,     7,    19,    20,    21,    23,     9,    10,    11,   103,
        -1,    70,    -1,    -1,    -1,    18,    -1,    12,    13,    79,
        75,    76,    29,    -1,    26,     8,    -1,     2,    14,    -1,
        78,    82,    34,    24,    -1,    -1,   106,   108,    -1,    74,
        79,    88,    -1,     6,    28,    30,    -1,    27,    22,   107,
        77,    98,    90,    86,    -1,    -1,    46,   109,    80,    99,
        -1,    87,    91,    37,    -1,    84,    -1,    -1,    -1,    -1,
       100,   101,   102,    -1,    97,    89,    94,    95,    81,    -1,
        46,    36,    46,   111,    -1,    -1,    83,    -1,    32,    37,
        -1,    41,    -1,    43,    44,    -1,    -1,    96,    93,    31,
        35,    -1,    39,    36,    52,    62,   103,    42,    45,   107,
       103,    33,    47,    52,    51,    -1,    64,    67,    68,    40,
       104,    -1,    52,    50,    57,    46,    63,    -1,    61,    -1,
        -1,    -1,    38,    52,    53,    54,    55,    56,    -1,    65,
        -1,    66,    69,   105,    58,    -1,    60,    59,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         5,    90,   121,     7,   144,    33,    97,   121,    83,    81,
        21,    22,   143,   135,   154,   143,   135,   141,   111,    92,
        61,   139,    78,    79,    39,    35,    20,   165,   136,   137,
       161,   159,   120,   121,    84,   122,   116,    96,    87,   124,
       122,   116,   151,   140,    56,    58,    56,    58,    89,   114,
       116,    23,   114,   116,    71,    72,    64,   131,    66,   108,
       105,    75,    70,    51,    52,    23,   122,   116,    47,    43,
        32,    30,    27,   116,    16,    17,    18,     1,    77,     2,
       158,   124,   153,   134,   135,   132,   133,   134,   135,   110,
       124,   107,   124,    49,    50,    51,    37,   116,    36,    29,
       116,    26,   116,    -1,    31,    18,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
        76,   -59,    -4,   -59,    40,   -59,    21,     2,   -59,    49,
        20,   -59,    47,   -59,   -59,   -59,    69,   -59,   -59,    33,
        -6,    16,   -59,   -59,   -59,    88,   -59,   -59,   -59,    44,
       -59,   -59,   -14,   -59,    57,   -59,   -59,   -59,    62,    54,
       -59,   -59,    51,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
       -59,   -22,    42,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
        22,    10,   -59,   -59,   -59,    46,   -59,   -59,   -59,    23,
       -59,   -28,   -38,   -59,    -9,   -59,    16,   -10,   -59,   -17,
       -30,   -59,   -59,   -12,   -59,   -59,   -59,   -59,   -59,   -59,
       -59,   -59,   -59,   -59,   -59,    12,   -59,   -59,   -59,   -59,
        69,    42,    67,   -59,   -59,   -59,   -59,   -59,   -59,    14,
       -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
       -59,   -59,   -59,    40,    61,   -59,     0,   -59,   -59,   -12,
        -3,   -59,   -59,   -11,   -59,   -25,   -59,   -59,   -59,   -59,
       -12,   -59,    57,   -59,   -14,    58,     1,   -59,   -59,    -3,
       -59,   -59,   -59,   -14,   -59,   -59,   -59,   -59,   -59,    -4,
       -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     0,     6,     2,     0,     0,     6,     2,     4,     2,
         2,     2,     3,     0,     1,     1,     1,     1,     2,     1,
         1,     1,     4,     0,     3,     0,     1,     3,     2,     0,
         0,     6,     5,     7,     0,     2,     0,     0,     4,     1,
         3,     1,     2,     1,     1,     2,     0,     2,     3,     1,
         2,     1,     0,     3,     1,     1,     1,     0,     3,     4,
         3,     1,     1,     0,     1,     0,     3,     1,     1,     3,
         2,     1,     1,     0,     5,     1,     1,     3,     1,     0,
         4,     4,     0,     3,     1,     1,     1,     2,     0,     2,
         0,     1,     0,     4,     2,     2,     3,     1,     0,     1,
         2,     2,     2,     0,     0,     5,     2,     0,     1,     0,
         0,     5,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     2,     1,     3,     3,     5,     4,     4,     4,     4,
         4,     4,     4,     6,     6,     7,     7,     7,     8,     8,
         9,     9,    10,    10,    11,    11,    12,    12,    13,    13,
        15,    14,    14,    14,    16,    17,    17,    19,    18,    18,
        20,    20,    21,    21,    21,    21,    23,    22,    24,    24,
        25,    25,    27,    26,    28,    28,    28,    28,    29,    29,
        29,    29,    30,    30,    31,    31,    32,    32,    33,    33,
        34,    34,    35,    37,    36,    38,    38,    39,    39,    41,
        40,    42,    42,    43,    43,    44,    44,    45,    45,    46,
        46,    47,    48,    47,    47,    47,    49,    49,    50,    50,
        50,    51,    51,    53,    54,    52,    55,    55,    56,    57,
        58,    56,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",              "NAME",            "STRING",
            "OPEN_BLOCK",       "CLOSE_BLOCK",           "OPT_DIR",
               "LEX_DIR",          "LEFT_DIR",         "RIGHT_DIR",
          "NONASSOC_DIR",           "USE_DIR",        "HEADER_DIR",
         "EXTRA_ARG_DIR",             "EMPTY",          "TYPE_DIR",
              "PREC_DIR",          "INIT_DIR",                "GT",
                    "LT",               "BRA",               "KET",
                   "EQU",              "CBRA",              "CKET",
              "QUESTION",              "STAR",              "PLUS",
                  "DASH",             "COLON",             "ARROW",
                   "EOL",         "SEPERATOR",                "OR",
                 "WEDGE",             "COMMA",          "ANY_CODE",
      "ANY_EPLOGUE_CODE",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,                null,
                     "{",                 "}",           "%option",
                  "%lex",             "%left",            "%right",
             "%nonassoc",              "%use",           "%header",
            "%extra_arg",            "%empty",             "%type",
                 "%prec",             "%init",                 ">",
                     "<",                 "(",                 ")",
                     "=",                 "[",                 "]",
                     "?",                 "*",                 "+",
                     "-",                 ":",                "=>",
                     ";",                "%%",                 "|",
                     "^",                 ",",                null,
                    null,
]; 


function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}

class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
interface Parser{
    init(b: GBuilder);
    accept(s: string);
    end();
    halt();
    on(ent: string, cb: (a1?, a2?, a3?) => any);
}
function createParser(): Parser {
    // members for lexer
    var _lexState: number[];
    var _state: number;
    var _matched: string;
    var _token: Token;
    
    var _marker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    var _backupCount: number;

    var _line: number;
    var _column: number;
    var _tline: number;
    var _tcolumn: number;

    // members for parser
    var _lrState: number[] = [];
    var _sematicS: JNode[] = [];
    var _sematicVal: JNode;

    var _stop;

    var _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    
    let gb: GBuilder;
    let ctx: Context;
    let assoc: Assoc;
    let lexacts: LexAction[];
    let ruleLhs: JNode;


    
    function init(b: GBuilder){
        _lexState = [ 0 ];// DEFAULT
        _state = 0;
        _matched = '';
        _token = new Token(-1, null, 0, 0, 0, 0);
        _marker.state = -1;
        _backupCount = 0;
        _line = _tline = 1;
        _column = _tcolumn = 1;
        
        _lrState = [ 0 ];
        _sematicS = [];
        _sematicVal = null;

        _stop = false;
        
    gb = b;

    }
    /**
     *  set 
     */
    function _setImg(s: string){
        _matched = s;
        _tline = _line;
        _tcolumn = _column;
    }
    function _prepareToken(tid: number){
        _token.id = tid;
        _token.val = _matched;
        _token.startLine = _tline;
        _token.startColumn = _tcolumn;
        _token.endLine = _line;
        _token.endColumn = _column;

        _matched = '';
        _tline = _line;
        _tcolumn = _column;
    }
    function _returnToken(){
        _emit('token', jjtokenNames[_token.id], _token.val);
        while(!_stop && !_acceptToken(_token));
        _token.id = -1;
    }
    function _emit(name: string, a1?, a2?, a3?){
        var cbs = _handlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name: string, cb: (a1?, a2?, a3?) => any){
        _handlers[name] || (_handlers[name] = []);
        _handlers[name].push(cb);
    }
    function _doLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && _prepareToken(jjtk);
        switch(jjstaten){
            case 1:
                _setImg("");
                break;
            case 3:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 22:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            case 24:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            case 26:
                 _sematicVal = nodeFromToken(_token);_sematicVal.val = unescape(_sematicVal.val.substr(1, _sematicVal.val.length - 2)); 
                break;
            case 28:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 29:
                 _sematicVal = nodeFromToken(_token); 
                break;
            case 42:
                 _sematicVal = nodeFromToken(_token);_sematicVal.val = unescape(_sematicVal.val.substr(1, _sematicVal.val.length - 2)); 
                break;
            case 45:
                _setImg("");
                break;
            case 65:
                _setImg("");
                break;
            case 82:
                _setImg("");
                break;
            default:;
        }
    }
    function _doLexAction1(jjstaten: number){
        let jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && _prepareToken(jjtk);
        switch(jjstaten){
            case 0:
                 _sematicVal = newNode(_token.val); 
                break;
            case 1:
                 _sematicVal = newNode(_token.val); 
                break;
            case 2:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            case 3:
                 _sematicVal = nodeFromTrivalToken(_token); 
                break;
            default:;
        }
    }
    function _doLexAction2(jjstaten: number){
        let jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && _prepareToken(jjtk);
        switch(jjstaten){
            case 1:
                 _sematicVal = nodeFromToken(_token); 
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function _doLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                _doLexAction0(state);
                break;
            case 1:
                _doLexAction1(state);
                break;
            case 2:
                _doLexAction2(state);
                break;
            default:;
        }
        _token.id !== -1 && _returnToken();
    }
    function _rollback(): string{
        let ret = _matched.substr(_matched.length - _backupCount, _backupCount);
        _matched = _matched.substr(0, _matched.length - _backupCount);
        _backupCount = 0;
        _line = _marker.line;
        _column = _marker.column;
        _state = _marker.state;
        _marker.state = -1;
        return ret;
    }
    function _mark(){
        _marker.state = _state;
        _marker.line = _line;
        _marker.column = _column;
        _backupCount = 0;
    }
    function _consume(c: string){
        c === '\n' ? (_line++, _column = 0) : (_column++);
        _matched += c;
        _marker.state !== -1 && (_backupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function _acceptChar(c: string){
        var lexstate = _lexState[_lexState.length - 1];
        var retn = { state: _state, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    _doLexAction(lexstate, _state);
                    // recover
                    _marker.state = -1;
                    _backupCount = 0;
                    _state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    _mark();
                    _state = retn.state;
                    return _consume(c);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                _doLexAction(lexstate, _state);
                // recover
                _marker.state = -1;
                _backupCount = 0;
                _state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(_marker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = _rollback();
                    _doLexAction(lexstate, _state);
                    _state = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    _emit('lexicalerror', `unexpected character "${c}"`, _line, _column);
                    // force consume
                    return true;
                }
            }
            else {
                _state = retn.state;
                // character consumed
                return _consume(c);
            }
        }
    }
    function _acceptEOF(){
        if(_state === 0){
            // recover
            _prepareToken(0);
            _returnToken();
            return true;
        }
        else {
            let lexstate = _lexState[_lexState.length - 1];
            let retn = { state: _state, hasArc: false, isEnd: false };
            jjlexers[lexstate](-1, retn);
            if(retn.isEnd){
                _doLexAction(lexstate, _state);
                _state = 0;
                _marker.state = -1;
                return false;
            }
            else if(_marker.state !== -1){
                let s = _rollback();
                _doLexAction(lexstate, _state);
                _state = 0;
                accept(s);
                return false;
            }
            else {
                _emit('lexicalerror', 'unexpected end of file');
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s: string){
        for(let i = 0; i < s.length && !_stop;){
            _acceptChar(s.charAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!_stop && !_acceptEOF());
        _stop = true;
    }
    function halt(){
        _stop = true;
    }
    function _doReduction(jjrulenum: number){
        let jjnt = jjlhs[jjrulenum];
        let jjsp = _sematicS.length;
        let jjtop = _sematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: @0 => */
                _lexState.push(2);
                break;
            case 5:
                /* 5: @1 => */
                { gb.lexBuilder.prepareLex(); }
                break;
            case 9:
                /* 9: option => "%header" block */
                var b = _sematicS[jjsp - 1];
                { gb.setHeader(b.val); }
                break;
            case 10:
                /* 10: option => "%extra_arg" block */
                var b = _sematicS[jjsp - 1];
                { gb.setExtraArg(b.val); }
                break;
            case 11:
                /* 11: option => "%type" <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.setType(t.val); }
                break;
            case 12:
                /* 12: option => "%init" block block */
                var args = _sematicS[jjsp - 2];
                var b = _sematicS[jjsp - 1];
                { gb.setInit(args.val, b.val); }
                break;
            case 14:
                /* 14: epilogue => <ANY_EPLOGUE_CODE> */
                var ep = _sematicS[jjsp - 1];
                { gb.setEpilogue(ep); }
                break;
            case 15:
                /* 15: associativeDir => "%left" */
                { assoc = Assoc.LEFT; }
                break;
            case 16:
                /* 16: associativeDir => "%right" */
                { assoc = Assoc.RIGHT; }
                break;
            case 17:
                /* 17: associativeDir => "%nonassoc" */
                { assoc = Assoc.NON; }
                break;
            case 20:
                /* 20: assocToken => tokenRef */
                var t = _sematicS[jjsp - 1];
                { gb.defineTokenPrec(t.val, assoc, t.ext, t.startLine); }
                break;
            case 21:
                /* 21: assocToken => <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.defineTokenPrec(t.val, assoc, TokenRefType.NAME, t.startLine); }
                break;
            case 22:
                /* 22: optionBody => optionBody <NAME> "=" <STRING> */
                var name = _sematicS[jjsp - 3];
                var val = _sematicS[jjsp - 1];
                { gb.setOpt(name.val, val.val); }
                break;
            case 25:
                /* 25: states_ => */
                { gb.lexBuilder.selectState('DEFAULT'); }
                break;
            case 26:
                /* 26: states => <NAME> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); }
                break;
            case 27:
                /* 27: states => states "," <NAME> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); }
                break;
            case 30:
                /* 30: @2 => */
                var v = _sematicS[jjsp - 1];
                { gb.lexBuilder.prepareVar(v.val, v.startLine); }
                break;
            case 31:
                /* 31: lexBodyItem => <NAME> @2 "=" "<" regexp ">" */
                var v = _sematicS[jjsp - 6];
                { gb.lexBuilder.endVar(); }
                break;
            case 32:
                /* 32: lexBodyItem => newState "<" regexp ">" lexAction_ */
                { gb.lexBuilder.end(lexacts, '(untitled)'); }
                break;
            case 33:
                /* 33: lexBodyItem => newState "<" <NAME> ":" regexp ">" lexAction_ */
                var tn = _sematicS[jjsp - 5];
                { 
    let tdef = gb.defToken(tn.val, gb.lexBuilder.getPossibleAlias(), tn.startLine);
    lexacts.push(returnToken(tdef));
    gb.lexBuilder.end(lexacts, tn.val);
}
                break;
            case 34:
                /* 34: newState => */
                { gb.lexBuilder.newState(); }
                break;
            case 36:
                /* 36: lexAction_ => */
                { lexacts = []; }
                break;
            case 37:
                /* 37: @3 => */
                { lexacts = []; }
                break;
            case 39:
                /* 39: lexAction => block */
                var b = _sematicS[jjsp - 1];
                { lexacts = [blockAction(b.val, b.startLine)]; }
                break;
            case 42:
                /* 42: lexActionItem => "+" <NAME> */
                var vn = _sematicS[jjsp - 1];
                { gb.addPushStateAction(lexacts, vn.val, vn.startLine); }
                break;
            case 43:
                /* 43: lexActionItem => "-" */
                { lexacts.push(popState()); }
                break;
            case 44:
                /* 44: lexActionItem => block */
                var b = _sematicS[jjsp - 1];
                { lexacts.push(blockAction(b.val, b.startLine)); }
                break;
            case 45:
                /* 45: lexActionItem => "=" <STRING> */
                var s = _sematicS[jjsp - 1];
                { lexacts.push(setImg(s.val)); }
                break;
            case 46:
                /* 46: @4 => */
                { gb.lexBuilder.enterUnion(); }
                break;
            case 47:
                /* 47: regexp => @4 union */
                { gb.lexBuilder.leaveUnion(); }
                break;
            case 48:
                /* 48: union => union "|" simpleRE */
                { gb.lexBuilder.endUnionItem(); }
                break;
            case 49:
                /* 49: union => simpleRE */
                { gb.lexBuilder.endUnionItem(); }
                break;
            case 52:
                /* 52: @5 => */
                { gb.lexBuilder.enterSimple(); }
                break;
            case 53:
                /* 53: basicRE => @5 primitiveRE rePostfix */
                var suffix = _sematicS[jjsp - 1];
                { gb.lexBuilder.simplePostfix(suffix.val as (''|'?'|'+'|'*')); }
                break;
            case 54:
                /* 54: rePostfix => "+" */
                { jjtop = newNode('+'); }
                break;
            case 55:
                /* 55: rePostfix => "?" */
                { jjtop = newNode('?'); }
                break;
            case 56:
                /* 56: rePostfix => "*" */
                { jjtop = newNode('*'); }
                break;
            case 57:
                /* 57: rePostfix => */
                { jjtop = newNode(''); }
                break;
            case 60:
                /* 60: primitiveRE => "<" <NAME> ">" */
                var n = _sematicS[jjsp - 2];
                { gb.lexBuilder.addVar(n.val, n.startLine); }
                break;
            case 61:
                /* 61: primitiveRE => <STRING> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.addString(s.val); }
                break;
            case 62:
                /* 62: inverse_ => "^" */
                { gb.lexBuilder.beginSet(true); }
                break;
            case 63:
                /* 63: inverse_ => */
                { gb.lexBuilder.beginSet(false); }
                break;
            case 68:
                /* 68: setREItem => <STRING> */
                var s = _sematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(s.val, s.val, s.startLine, s.startLine); }
                break;
            case 69:
                /* 69: setREItem => <STRING> "-" <STRING> */
                var from = _sematicS[jjsp - 3];
                var to = _sematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(from.val, to.val, from.startLine, to.startLine); }
                break;
            case 73:
                /* 73: @6 => */
                var n = _sematicS[jjsp - 1];
                { ruleLhs = n; }
                break;
            case 79:
                /* 79: @7 => */
                { gb.prepareRule(ruleLhs.val,ruleLhs.startLine); }
                break;
            case 80:
                /* 80: rule => @7 ruleHead ruleBody ruleTrailer */
                { gb.commitRule(); }
                break;
            case 83:
                /* 83: varUseList => varUseList "," <NAME> */
                var vn = _sematicS[jjsp - 1];
                { gb.addRuleUseVar(vn.val, vn.startLine); }
                break;
            case 84:
                /* 84: varUseList => <NAME> */
                var vn = _sematicS[jjsp - 1];
                { gb.addRuleUseVar(vn.val, vn.startLine); }
                break;
            case 89:
                /* 89: itemName => <NAME> "=" */
                var itn = _sematicS[jjsp - 2];
                { gb.addRuleSematicVar(itn.val, itn.startLine); }
                break;
            case 91:
                /* 91: ruleItem => <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.addRuleItem(t.val,TokenRefType.NAME,t.startLine); }
                break;
            case 92:
                /* 92: @8 => */
                var vn = _sematicS[jjsp - 2];
                { gb.addRuleSematicVar(vn.val, vn.startLine); }
                break;
            case 93:
                /* 93: ruleItem => <NAME> "=" @8 <NAME> */
                var vn = _sematicS[jjsp - 4];
                var t = _sematicS[jjsp - 1];
                { gb.addRuleItem(t.val,TokenRefType.NAME,t.startLine); }
                break;
            case 94:
                /* 94: ruleItem => itemName tokenRef */
                var t = _sematicS[jjsp - 1];
                { gb.addRuleItem(t.val, t.ext, t.startLine); }
                break;
            case 95:
                /* 95: ruleItem => itemName lexAction */
                { gb.addAction(lexacts); }
                break;
            case 96:
                /* 96: tokenRef => "<" <NAME> ">" */
                var t = _sematicS[jjsp - 2];
                { jjtop = t; jjtop.ext = TokenRefType.TOKEN; }
                break;
            case 97:
                /* 97: tokenRef => <STRING> */
                { jjtop.ext = TokenRefType.STRING; }
                break;
            case 100:
                /* 100: ruleTrailer => rulePrec lexAction */
                { gb.addAction(lexacts); }
                break;
            case 101:
                /* 101: rulePrec => "%prec" <NAME> */
                var t = _sematicS[jjsp - 1];
                { gb.defineRulePr(t.val, TokenRefType.NAME, t.startLine); }
                break;
            case 102:
                /* 102: rulePrec => "%prec" tokenRef */
                var t = _sematicS[jjsp - 1];
                { gb.defineRulePr(t.val, t.ext, t.startLine); }
                break;
            case 103:
                /* 103: @9 => */
                _lexState.push(1);
                break;
            case 104:
                /* 104: @10 => */
                var open = _sematicS[jjsp - 2];
                var bl = _sematicS[jjsp - 1];
                _lexState.pop();
                break;
            case 105:
                /* 105: block => @9 "{" innerBlock @10 "}" */
                var open = _sematicS[jjsp - 4];
                var bl = _sematicS[jjsp - 3];
                var close = _sematicS[jjsp - 1];
                { 
    jjtop = newNode('');
    jjtop.val = bl.val;
    jjtop.startLine = open.startLine;
    jjtop.startColumn = open.startColumn;
    jjtop.endLine = close.endLine;
    jjtop.endColumn = close.endColumn;
}
                break;
            case 106:
                /* 106: innerBlock => innerBlock innerBlockItem */
                var b = _sematicS[jjsp - 1];
                { jjtop.val += b.val; }
                break;
            case 107:
                /* 107: innerBlock => */
                { jjtop = newNode(''); }
                break;
            case 109:
                /* 109: @11 => */
                _lexState.push(1);
                break;
            case 110:
                /* 110: @12 => */
                var b = _sematicS[jjsp - 1];
                _lexState.pop();
                break;
            case 111:
                /* 111: innerBlockItem => @11 "{" innerBlock @12 "}" */
                var b = _sematicS[jjsp - 3];
                { jjtop = newNode(''); jjtop.val = '{' + b.val + '}'; }
                break;
        }
        _lrState.length -= jjruleLen[jjrulenum];
        let jjcstate = _lrState[_lrState.length - 1];
        _lrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        _sematicS.length -= jjruleLen[jjrulenum];
        _sematicS.push(jjtop);
    }

    function _acceptToken(t: Token){
        // look up action table
        let cstate = _lrState[_lrState.length - 1];
        let ind = jjdisact[cstate] + t.id;
        let act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            _syntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                _stop = true;
                _emit('accept');
                return true;
            }
            else {
                _lrState.push(act - 1);
                _sematicS.push(_sematicVal);
                _sematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            _doReduction(-act - 1);
            return false;
        }
        else {
            // error
            _syntaxError(t);
            // force consume
            return true;
        }
    }
    function _syntaxError(t: Token){
        let msg = `unexpected token ${t.toString()}, expecting one of the following token(s):\n`
        msg += _expected(_lrState[_lrState.length - 1]);
        _emit("syntaxerror", msg, t);
    }
    function _expected(state: number){
        let dis = jjdisact[state];
        let ret = '';
        function expect(tk: number){
            let ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(let tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += `    ${tokenToString(tk)} ...` + '\n');
        }
        return ret;
    }
    return {
        init,
        on,
        accept,
        end,
        halt
    };
}


export function parse(ctx: Context, source: string): File{
    let parser = createParser();
    let err = false;
    parser.on('lexicalerror', (msg, line, column) => {
        ctx.err(new CompilationError(msg, line));
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', (msg, token) => {
        ctx.err(new CompilationError(msg, token.startLine));
        parser.halt();
        err = true;
    });
    let gb = createFileBuilder(ctx);
    parser.init(gb);
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        return gb.build();
    }
}