/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

import { GBuilder, createFileBuilder, TokenRefType } from './gbuilder';
import { Assoc } from '../grammar/token-entry';
import { CompilationError as E, JsccError } from '../util/E';
import { InputStream, endl } from '../util/io';
import { Context } from '../util/context';
import { LexAction } from '../lexer/action';
import { Position, JNode, newNode, markPosition, nodeBetween } from './node';
import { File } from './file';

function nodeFromToken(t: Token): JNode{
    return {
        val: t.val,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
function nodeFromTrivalToken(t: Token): JNode{
    return {
        val: null,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
let escapes: {[s: string]: string} = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'"
};
function unescape(s: string): string{
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x' || c === 'U' || c === 'X'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}

/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
interface DFATable{
    pnext: number[];
    disnext: number[];
    checknext: number[];
    maxAsicii: number;
    classTable: number[];
    unicodeClassTable: number[];
    isEnd: number[];
    hasArc: number[];
};
/*
    dfa table definations
*/
var jjlexpnext0: number[] = [ 
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        71,    70,    70,    70,    72,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    71,    70,    70,    70,    72,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        71,    70,    70,    70,    91,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    93,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        71,    70,    70,    70,    91,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    71,    70,    70,    70,    72,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        46,    46,   131,    46,    46,    46,    46,    47,    46,    46,
        46,    46,    46,    46,    46,   110,    46,    46,    46,    46,
        46,    46,   110,    46,    46,    48,    46,    46,    46,   110,
       110,   110,   110,   110,   110,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    27,    27,   130,    28,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        95,    27,    27,    27,    27,    27,    27,    95,    27,    27,
        29,    27,    27,    27,    95,    95,    95,    95,    95,    95,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        46,    46,   129,    46,    46,    46,    46,    47,    46,    46,
        46,    46,    46,    46,    46,   110,    46,    46,    46,    46,
        46,    46,   110,    46,    46,    48,    46,    46,    46,   110,
       110,   110,   110,   110,   110,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    27,    27,   128,    28,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        95,    27,    27,    27,    27,    27,    27,    95,    27,    27,
        29,    27,    27,    27,    95,    95,    95,    95,    95,    95,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        46,    46,   127,    46,    46,    46,    46,    47,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    48,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    27,    27,   126,    28,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        29,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        30,    30,   125,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    46,    46,   124,    46,    46,
        46,    46,    47,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        48,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        30,    30,   123,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    27,    27,   122,    28,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        29,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        46,    46,   121,    46,    46,    46,    46,    47,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    48,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    30,    30,   120,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        27,    27,   119,    28,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    29,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,     1,     1,     2,     3,     4,
         5,     6,     7,     8,     9,    10,    11,    12,    13,   118,
        14,    15,    16,    17,    18,    19,     4,     4,    20,   117,
        21,    22,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,    23,    24,    25,    26,    31,    79,
        65,    61,    57,    58,    80,    62,    54,    66,    32,    49,
         1,     1,   116,    50,    55,    31,    31,   115,    81,   114,
       113,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,   112,   111,    33,    34,   109,   108,
       107,   106,   105,    32,   104,   103,   102,   101,   100,    99,
        31,    31,    98,    97,    96,    94,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    89,
        88,    33,    34,    87,    86,    85,    84,    83,    32,    82,
        78,    77,    76,    75,    74,    31,    31,    67,    64,    63,
        60,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    59,    56,    33,    34,    51,    -1,
        -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,
        31,    31,    -1,    -1,    -1,    -1,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    -1,
        -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    32,    -1,
        -1,    -1,    -1,    -1,    -1,    31,    31,    -1,    -1,    -1,
        -1,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    -1,    -1,    33,    34,    -1,    -1,
        -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,
        31,    31,    -1,    -1,    -1,    -1,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    90,    68,
        -1,    33,    34,    68,    -1,    90,    -1,    52,    -1,    -1,
        -1,    52,    90,    90,    90,    90,    90,    90,    -1,    69,
        -1,    68,    -1,    -1,    -1,    -1,    68,    53,    35,    52,
        68,    -1,    -1,    -1,    52,    -1,    -1,    68,    52,    -1,
        68,    -1,    68,    69,    69,    52,    -1,    -1,    52,    -1,
        52,    53,    53,    -1,    -1,    36,    -1,    -1,    37,    38,
        73,    39,    -1,    40,    41,    42,    43,    73,    44,    45,
        -1,    -1,    -1,    -1,    73,    73,    73,    73,    73,    73,
    
]; 
var jjlexdisnext0: number[] = [ 
      1044,  1109,   990,   935,  1318,  1392,   880,   -55,   -55,   -55,
       -55,   -55,   -55,  1099,   -55,   -55,   -55,  1218,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,  1273,   825,   -55,  1374,
       770,  1228,  1183,  1138,  1093,   -55,  1066,  1202,  1062,  1201,
      1168,  1058,  1165,  1171,  1058,  1162,   715,   -55,  1366,   275,
       660,   -55,   605,  1415,  1161,  1157,  1173,  1158,  1163,  1070,
      1158,  1151,  1150,  1162,  1159,  1155,  1147,  1156,   550,  1353,
       220,   165,  1151,   495,  1118,  1119,  1130,  1117,  1112,  1112,
      1110,   -55,  1126,  1117,  1109,  1120,  1114,  1116,  1115,   -55,
       440,   110,    55,   -55,     0,   385,  1096,  1115,  1087,  1075,
       -55,  1071,   -55,  1067,  1027,  1012,   -55,   946,   896,   -55,
       330,   -55,   854,   783,   726,   -55,   672,   621,   561,   -55,
       -55,   523,   -55,   -55,   455,   -55,   -55,   398,   356,   297,
       -55,   -55,
]; 
var jjlexchecknext0: number[] = [ 
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
        94,    94,    94,    94,    94,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
        91,    91,    91,    91,    91,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    49,    49,    49,    49,    49,
        49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
        49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
        49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
        49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
        49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
       110,   110,   129,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
       110,   110,   110,   110,   110,    95,    95,   128,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
        90,    90,   127,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    73,    73,   124,    73,    73,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        68,    68,   121,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    52,    52,   118,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
        50,    50,   117,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    46,    46,   116,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
        30,    30,   114,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    27,    27,   113,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
         6,     6,   112,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,     6,     3,     3,   108,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         2,     2,   107,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
         0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    34,    59,
        44,    41,    38,    38,    59,    41,    36,    44,    34,    13,
         1,     1,   103,    13,    36,    34,    34,   101,    59,    99,
        98,    34,    34,    34,    34,    34,    34,    34,    34,    34,
        34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
        34,    34,    34,    33,    97,    96,    34,    34,    88,    87,
        86,    85,    84,    33,    83,    82,    80,    79,    78,    77,
        33,    33,    76,    75,    74,    72,    33,    33,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    33,    32,    67,
        66,    33,    33,    65,    64,    63,    62,    61,    32,    60,
        58,    57,    56,    55,    54,    32,    32,    45,    43,    42,
        40,    32,    32,    32,    32,    32,    32,    32,    32,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
        32,    32,    32,    31,    39,    37,    32,    32,    17,    -1,
        -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
        31,    31,    -1,    -1,    -1,    -1,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    26,    -1,
        -1,    31,    31,    -1,    -1,    -1,    -1,    -1,    26,    -1,
        -1,    -1,    -1,    -1,    -1,    26,    26,    -1,    -1,    -1,
        -1,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,     4,    -1,    -1,    26,    26,    -1,    -1,
        -1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,
         4,     4,    -1,    -1,    -1,    -1,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,    69,    48,
        -1,     4,     4,    48,    -1,    69,    -1,    29,    -1,    -1,
        -1,    29,    69,    69,    69,    69,    69,    69,    -1,    48,
        -1,    48,    -1,    -1,    -1,    -1,    48,    29,     5,    29,
        48,    -1,    -1,    -1,    29,    -1,    -1,    48,    29,    -1,
        48,    -1,    48,    48,    48,    29,    -1,    -1,    29,    -1,
        29,    29,    29,    -1,    -1,     5,    -1,    -1,     5,     5,
        53,     5,    -1,     5,     5,     5,     5,    53,     5,     5,
        -1,    -1,    -1,    -1,    53,    53,    53,    53,    53,    53,
    
]; 
var jjlexclassTable0: number[] = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     1,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     3,     4,     5,     6,     0,     7,
         8,     9,    10,    11,    12,    13,     0,    14,    15,    15,
        15,    15,    15,    15,    15,    15,    15,    15,    16,    17,
        18,    19,    20,    21,     0,    22,    22,    22,    22,    22,
        22,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,    23,     5,     5,    23,     5,
         5,    24,    25,    26,    27,    28,     0,    29,    30,    31,
        32,    33,    34,    35,    36,    37,     5,    38,    39,    40,
        41,    42,    43,     5,    44,    45,    46,    47,     5,     5,
        48,    49,     5,    50,    51,    52,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    53,     0,     0,     0,     0,    53,     0,     0,     0,
         0,     0,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,     0,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    53,    53,    53,     0,    53,    53,
        53,    53,    53,    53,    53,    53,
]; 
var jjlexunicodeClassTable0: number[] = [ 
        53,   256,   705,     0,   706,   709,    53,   710,   721,     0,
       722,   735,    53,   736,   740,     0,   741,   747,    53,   748,
       748,     0,   749,   749,    53,   750,   750,     0,   751,   767,
        54,   768,   879,    53,   880,   884,     0,   885,   885,    53,
       886,   887,     0,   888,   889,    53,   890,   893,     0,   894,
       901,    53,   902,   902,     0,   903,   903,    53,   904,   906,
         0,   907,   907,    53,   908,   908,     0,   909,   909,    53,
       910,   929,     0,   930,   930,    53,   931,  1013,     0,  1014,
      1014,    53,  1015,  1153,     0,  1154,  1154,    54,  1155,  1159,
         0,  1160,  1161,    53,  1162,  1319,     0,  1320,  1328,    53,
      1329,  1366,     0,  1367,  1368,    53,  1369,  1369,     0,  1370,
      1376,    53,  1377,  1415,     0,  1416,  1424,    54,  1425,  1469,
         0,  1470,  1470,    54,  1471,  1471,     0,  1472,  1472,    54,
      1473,  1474,     0,  1475,  1475,    54,  1476,  1477,     0,  1478,
      1478,    54,  1479,  1479,     0,  1480,  1487,    53,  1488,  1514,
         0,  1515,  1519,    53,  1520,  1522,     0,  1523,  1551,    54,
      1552,  1562,     0,  1563,  1567,    53,  1568,  1610,    54,  1611,
      1641,     0,  1642,  1645,    53,  1646,  1647,    54,  1648,  1648,
        53,  1649,  1747,     0,  1748,  1748,    53,  1749,  1749,    54,
      1750,  1756,     0,  1757,  1758,    54,  1759,  1764,    53,  1765,
      1766,    54,  1767,  1768,     0,  1769,  1769,    54,  1770,  1773,
        53,  1774,  1775,    54,  1776,  1785,    53,  1786,  1788,     0,
      1789,  1790,    53,  1791,  1791,     0,  1792,  1807,    53,  1808,
      1808,    54,  1809,  1809,    53,  1810,  1839,    54,  1840,  1866,
         0,  1867,  1868,    53,  1869,  1957,    54,  1958,  1968,    53,
      1969,  1969,     0,  1970,  1983,    54,  1984,  1993,    53,  1994,
      2026,    54,  2027,  2035,    53,  2036,  2037,     0,  2038,  2041,
        53,  2042,  2042,     0,  2043,  2047,    53,  2048,  2069,    54,
      2070,  2073,    53,  2074,  2074,    54,  2075,  2083,    53,  2084,
      2084,    54,  2085,  2087,    53,  2088,  2088,    54,  2089,  2093,
         0,  2094,  2111,    53,  2112,  2136,    54,  2137,  2139,     0,
      2140,  2207,    53,  2208,  2208,     0,  2209,  2209,    53,  2210,
      2220,     0,  2221,  2275,    54,  2276,  2302,     0,  2303,  2303,
        54,  2304,  2307,    53,  2308,  2361,    54,  2362,  2364,    53,
      2365,  2365,    54,  2366,  2383,    53,  2384,  2384,    54,  2385,
      2391,    53,  2392,  2401,    54,  2402,  2403,     0,  2404,  2405,
        54,  2406,  2415,     0,  2416,  2416,    53,  2417,  2423,     0,
      2424,  2424,    53,  2425,  2431,     0,  2432,  2432,    54,  2433,
      2435,     0,  2436,  2436,    53,  2437,  2444,     0,  2445,  2446,
        53,  2447,  2448,     0,  2449,  2450,    53,  2451,  2472,     0,
      2473,  2473,    53,  2474,  2480,     0,  2481,  2481,    53,  2482,
      2482,     0,  2483,  2485,    53,  2486,  2489,     0,  2490,  2491,
        54,  2492,  2492,    53,  2493,  2493,    54,  2494,  2500,     0,
      2501,  2502,    54,  2503,  2504,     0,  2505,  2506,    54,  2507,
      2509,    53,  2510,  2510,     0,  2511,  2518,    54,  2519,  2519,
         0,  2520,  2523,    53,  2524,  2525,     0,  2526,  2526,    53,
      2527,  2529,    54,  2530,  2531,     0,  2532,  2533,    54,  2534,
      2543,    53,  2544,  2545,     0,  2546,  2560,    54,  2561,  2563,
         0,  2564,  2564,    53,  2565,  2570,     0,  2571,  2574,    53,
      2575,  2576,     0,  2577,  2578,    53,  2579,  2600,     0,  2601,
      2601,    53,  2602,  2608,     0,  2609,  2609,    53,  2610,  2611,
         0,  2612,  2612,    53,  2613,  2614,     0,  2615,  2615,    53,
      2616,  2617,     0,  2618,  2619,    54,  2620,  2620,     0,  2621,
      2621,    54,  2622,  2626,     0,  2627,  2630,    54,  2631,  2632,
         0,  2633,  2634,    54,  2635,  2637,     0,  2638,  2640,    54,
      2641,  2641,     0,  2642,  2648,    53,  2649,  2652,     0,  2653,
      2653,    53,  2654,  2654,     0,  2655,  2661,    54,  2662,  2673,
        53,  2674,  2676,    54,  2677,  2677,     0,  2678,  2688,    54,
      2689,  2691,     0,  2692,  2692,    53,  2693,  2701,     0,  2702,
      2702,    53,  2703,  2705,     0,  2706,  2706,    53,  2707,  2728,
         0,  2729,  2729,    53,  2730,  2736,     0,  2737,  2737,    53,
      2738,  2739,     0,  2740,  2740,    53,  2741,  2745,     0,  2746,
      2747,    54,  2748,  2748,    53,  2749,  2749,    54,  2750,  2757,
         0,  2758,  2758,    54,  2759,  2761,     0,  2762,  2762,    54,
      2763,  2765,     0,  2766,  2767,    53,  2768,  2768,     0,  2769,
      2783,    53,  2784,  2785,    54,  2786,  2787,     0,  2788,  2789,
        54,  2790,  2799,     0,  2800,  2816,    54,  2817,  2819,     0,
      2820,  2820,    53,  2821,  2828,     0,  2829,  2830,    53,  2831,
      2832,     0,  2833,  2834,    53,  2835,  2856,     0,  2857,  2857,
        53,  2858,  2864,     0,  2865,  2865,    53,  2866,  2867,     0,
      2868,  2868,    53,  2869,  2873,     0,  2874,  2875,    54,  2876,
      2876,    53,  2877,  2877,    54,  2878,  2884,     0,  2885,  2886,
        54,  2887,  2888,     0,  2889,  2890,    54,  2891,  2893,     0,
      2894,  2901,    54,  2902,  2903,     0,  2904,  2907,    53,  2908,
      2909,     0,  2910,  2910,    53,  2911,  2913,    54,  2914,  2915,
         0,  2916,  2917,    54,  2918,  2927,     0,  2928,  2928,    53,
      2929,  2929,     0,  2930,  2945,    54,  2946,  2946,    53,  2947,
      2947,     0,  2948,  2948,    53,  2949,  2954,     0,  2955,  2957,
        53,  2958,  2960,     0,  2961,  2961,    53,  2962,  2965,     0,
      2966,  2968,    53,  2969,  2970,     0,  2971,  2971,    53,  2972,
      2972,     0,  2973,  2973,    53,  2974,  2975,     0,  2976,  2978,
        53,  2979,  2980,     0,  2981,  2983,    53,  2984,  2986,     0,
      2987,  2989,    53,  2990,  3001,     0,  3002,  3005,    54,  3006,
      3010,     0,  3011,  3013,    54,  3014,  3016,     0,  3017,  3017,
        54,  3018,  3021,     0,  3022,  3023,    53,  3024,  3024,     0,
      3025,  3030,    54,  3031,  3031,     0,  3032,  3045,    54,  3046,
      3055,     0,  3056,  3072,    54,  3073,  3075,     0,  3076,  3076,
        53,  3077,  3084,     0,  3085,  3085,    53,  3086,  3088,     0,
      3089,  3089,    53,  3090,  3112,     0,  3113,  3113,    53,  3114,
      3123,     0,  3124,  3124,    53,  3125,  3129,     0,  3130,  3132,
        53,  3133,  3133,    54,  3134,  3140,     0,  3141,  3141,    54,
      3142,  3144,     0,  3145,  3145,    54,  3146,  3149,     0,  3150,
      3156,    54,  3157,  3158,     0,  3159,  3159,    53,  3160,  3161,
         0,  3162,  3167,    53,  3168,  3169,    54,  3170,  3171,     0,
      3172,  3173,    54,  3174,  3183,     0,  3184,  3201,    54,  3202,
      3203,     0,  3204,  3204,    53,  3205,  3212,     0,  3213,  3213,
        53,  3214,  3216,     0,  3217,  3217,    53,  3218,  3240,     0,
      3241,  3241,    53,  3242,  3251,     0,  3252,  3252,    53,  3253,
      3257,     0,  3258,  3259,    54,  3260,  3260,    53,  3261,  3261,
        54,  3262,  3268,     0,  3269,  3269,    54,  3270,  3272,     0,
      3273,  3273,    54,  3274,  3277,     0,  3278,  3284,    54,  3285,
      3286,     0,  3287,  3293,    53,  3294,  3294,     0,  3295,  3295,
        53,  3296,  3297,    54,  3298,  3299,     0,  3300,  3301,    54,
      3302,  3311,     0,  3312,  3312,    53,  3313,  3314,     0,  3315,
      3329,    54,  3330,  3331,     0,  3332,  3332,    53,  3333,  3340,
         0,  3341,  3341,    53,  3342,  3344,     0,  3345,  3345,    53,
      3346,  3386,     0,  3387,  3388,    53,  3389,  3389,    54,  3390,
      3396,     0,  3397,  3397,    54,  3398,  3400,     0,  3401,  3401,
        54,  3402,  3405,    53,  3406,  3406,     0,  3407,  3414,    54,
      3415,  3415,     0,  3416,  3423,    53,  3424,  3425,    54,  3426,
      3427,     0,  3428,  3429,    54,  3430,  3439,     0,  3440,  3449,
        53,  3450,  3455,     0,  3456,  3457,    54,  3458,  3459,     0,
      3460,  3460,    53,  3461,  3478,     0,  3479,  3481,    53,  3482,
      3505,     0,  3506,  3506,    53,  3507,  3515,     0,  3516,  3516,
        53,  3517,  3517,     0,  3518,  3519,    53,  3520,  3526,     0,
      3527,  3529,    54,  3530,  3530,     0,  3531,  3534,    54,  3535,
      3540,     0,  3541,  3541,    54,  3542,  3542,     0,  3543,  3543,
        54,  3544,  3551,     0,  3552,  3569,    54,  3570,  3571,     0,
      3572,  3584,    53,  3585,  3632,    54,  3633,  3633,    53,  3634,
      3635,    54,  3636,  3642,     0,  3643,  3647,    53,  3648,  3654,
        54,  3655,  3662,     0,  3663,  3663,    54,  3664,  3673,     0,
      3674,  3712,    53,  3713,  3714,     0,  3715,  3715,    53,  3716,
      3716,     0,  3717,  3718,    53,  3719,  3720,     0,  3721,  3721,
        53,  3722,  3722,     0,  3723,  3724,    53,  3725,  3725,     0,
      3726,  3731,    53,  3732,  3735,     0,  3736,  3736,    53,  3737,
      3743,     0,  3744,  3744,    53,  3745,  3747,     0,  3748,  3748,
        53,  3749,  3749,     0,  3750,  3750,    53,  3751,  3751,     0,
      3752,  3753,    53,  3754,  3755,     0,  3756,  3756,    53,  3757,
      3760,    54,  3761,  3761,    53,  3762,  3763,    54,  3764,  3769,
         0,  3770,  3770,    54,  3771,  3772,    53,  3773,  3773,     0,
      3774,  3775,    53,  3776,  3780,     0,  3781,  3781,    53,  3782,
      3782,     0,  3783,  3783,    54,  3784,  3789,     0,  3790,  3791,
        54,  3792,  3801,     0,  3802,  3803,    53,  3804,  3807,     0,
      3808,  3839,    53,  3840,  3840,     0,  3841,  3863,    54,  3864,
      3865,     0,  3866,  3871,    54,  3872,  3881,     0,  3882,  3892,
        54,  3893,  3893,     0,  3894,  3894,    54,  3895,  3895,     0,
      3896,  3896,    54,  3897,  3897,     0,  3898,  3901,    54,  3902,
      3903,    53,  3904,  3911,     0,  3912,  3912,    53,  3913,  3948,
         0,  3949,  3952,    54,  3953,  3972,     0,  3973,  3973,    54,
      3974,  3975,    53,  3976,  3980,    54,  3981,  3991,     0,  3992,
      3992,    54,  3993,  4028,     0,  4029,  4037,    54,  4038,  4038,
         0,  4039,  4095,    53,  4096,  4138,    54,  4139,  4158,    53,
      4159,  4159,    54,  4160,  4169,     0,  4170,  4175,    53,  4176,
      4181,    54,  4182,  4185,    53,  4186,  4189,    54,  4190,  4192,
        53,  4193,  4193,    54,  4194,  4196,    53,  4197,  4198,    54,
      4199,  4205,    53,  4206,  4208,    54,  4209,  4212,    53,  4213,
      4225,    54,  4226,  4237,    53,  4238,  4238,    54,  4239,  4253,
         0,  4254,  4255,    53,  4256,  4293,     0,  4294,  4294,    53,
      4295,  4295,     0,  4296,  4300,    53,  4301,  4301,     0,  4302,
      4303,    53,  4304,  4346,     0,  4347,  4347,    53,  4348,  4680,
         0,  4681,  4681,    53,  4682,  4685,     0,  4686,  4687,    53,
      4688,  4694,     0,  4695,  4695,    53,  4696,  4696,     0,  4697,
      4697,    53,  4698,  4701,     0,  4702,  4703,    53,  4704,  4744,
         0,  4745,  4745,    53,  4746,  4749,     0,  4750,  4751,    53,
      4752,  4784,     0,  4785,  4785,    53,  4786,  4789,     0,  4790,
      4791,    53,  4792,  4798,     0,  4799,  4799,    53,  4800,  4800,
         0,  4801,  4801,    53,  4802,  4805,     0,  4806,  4807,    53,
      4808,  4822,     0,  4823,  4823,    53,  4824,  4880,     0,  4881,
      4881,    53,  4882,  4885,     0,  4886,  4887,    53,  4888,  4954,
         0,  4955,  4956,    54,  4957,  4959,     0,  4960,  4991,    53,
      4992,  5007,     0,  5008,  5023,    53,  5024,  5108,     0,  5109,
      5120,    53,  5121,  5740,     0,  5741,  5742,    53,  5743,  5759,
         0,  5760,  5760,    53,  5761,  5786,     0,  5787,  5791,    53,
      5792,  5866,     0,  5867,  5869,    53,  5870,  5872,     0,  5873,
      5887,    53,  5888,  5900,     0,  5901,  5901,    53,  5902,  5905,
        54,  5906,  5908,     0,  5909,  5919,    53,  5920,  5937,    54,
      5938,  5940,     0,  5941,  5951,    53,  5952,  5969,    54,  5970,
      5971,     0,  5972,  5983,    53,  5984,  5996,     0,  5997,  5997,
        53,  5998,  6000,     0,  6001,  6001,    54,  6002,  6003,     0,
      6004,  6015,    53,  6016,  6067,    54,  6068,  6099,     0,  6100,
      6102,    53,  6103,  6103,     0,  6104,  6107,    53,  6108,  6108,
        54,  6109,  6109,     0,  6110,  6111,    54,  6112,  6121,     0,
      6122,  6154,    54,  6155,  6157,     0,  6158,  6159,    54,  6160,
      6169,     0,  6170,  6175,    53,  6176,  6263,     0,  6264,  6271,
        53,  6272,  6312,    54,  6313,  6313,    53,  6314,  6314,     0,
      6315,  6319,    53,  6320,  6389,     0,  6390,  6399,    53,  6400,
      6428,     0,  6429,  6431,    54,  6432,  6443,     0,  6444,  6447,
        54,  6448,  6459,     0,  6460,  6469,    54,  6470,  6479,    53,
      6480,  6509,     0,  6510,  6511,    53,  6512,  6516,     0,  6517,
      6527,    53,  6528,  6571,     0,  6572,  6575,    54,  6576,  6592,
        53,  6593,  6599,    54,  6600,  6601,     0,  6602,  6607,    54,
      6608,  6617,     0,  6618,  6655,    53,  6656,  6678,    54,  6679,
      6683,     0,  6684,  6687,    53,  6688,  6740,    54,  6741,  6750,
         0,  6751,  6751,    54,  6752,  6780,     0,  6781,  6782,    54,
      6783,  6793,     0,  6794,  6799,    54,  6800,  6809,     0,  6810,
      6822,    53,  6823,  6823,     0,  6824,  6911,    54,  6912,  6916,
        53,  6917,  6963,    54,  6964,  6980,    53,  6981,  6987,     0,
      6988,  6991,    54,  6992,  7001,     0,  7002,  7018,    54,  7019,
      7027,     0,  7028,  7039,    54,  7040,  7042,    53,  7043,  7072,
        54,  7073,  7085,    53,  7086,  7087,    54,  7088,  7097,    53,
      7098,  7141,    54,  7142,  7155,     0,  7156,  7167,    53,  7168,
      7203,    54,  7204,  7223,     0,  7224,  7231,    54,  7232,  7241,
         0,  7242,  7244,    53,  7245,  7247,    54,  7248,  7257,    53,
      7258,  7293,     0,  7294,  7375,    54,  7376,  7378,     0,  7379,
      7379,    54,  7380,  7400,    53,  7401,  7404,    54,  7405,  7405,
        53,  7406,  7409,    54,  7410,  7412,    53,  7413,  7414,     0,
      7415,  7423,    53,  7424,  7615,    54,  7616,  7654,     0,  7655,
      7675,    54,  7676,  7679,    53,  7680,  7957,     0,  7958,  7959,
        53,  7960,  7965,     0,  7966,  7967,    53,  7968,  8005,     0,
      8006,  8007,    53,  8008,  8013,     0,  8014,  8015,    53,  8016,
      8023,     0,  8024,  8024,    53,  8025,  8025,     0,  8026,  8026,
        53,  8027,  8027,     0,  8028,  8028,    53,  8029,  8029,     0,
      8030,  8030,    53,  8031,  8061,     0,  8062,  8063,    53,  8064,
      8116,     0,  8117,  8117,    53,  8118,  8124,     0,  8125,  8125,
        53,  8126,  8126,     0,  8127,  8129,    53,  8130,  8132,     0,
      8133,  8133,    53,  8134,  8140,     0,  8141,  8143,    53,  8144,
      8147,     0,  8148,  8149,    53,  8150,  8155,     0,  8156,  8159,
        53,  8160,  8172,     0,  8173,  8177,    53,  8178,  8180,     0,
      8181,  8181,    53,  8182,  8188,     0,  8189,  8203,    54,  8204,
      8205,     0,  8206,  8254,    54,  8255,  8256,     0,  8257,  8275,
        54,  8276,  8276,     0,  8277,  8304,    53,  8305,  8305,     0,
      8306,  8318,    53,  8319,  8319,     0,  8320,  8335,    53,  8336,
      8348,     0,  8349,  8399,    54,  8400,  8412,     0,  8413,  8416,
        54,  8417,  8417,     0,  8418,  8420,    54,  8421,  8432,     0,
      8433,  8449,    53,  8450,  8450,     0,  8451,  8454,    53,  8455,
      8455,     0,  8456,  8457,    53,  8458,  8467,     0,  8468,  8468,
        53,  8469,  8469,     0,  8470,  8472,    53,  8473,  8477,     0,
      8478,  8483,    53,  8484,  8484,     0,  8485,  8485,    53,  8486,
      8486,     0,  8487,  8487,    53,  8488,  8488,     0,  8489,  8489,
        53,  8490,  8493,     0,  8494,  8494,    53,  8495,  8505,     0,
      8506,  8507,    53,  8508,  8511,     0,  8512,  8516,    53,  8517,
      8521,     0,  8522,  8525,    53,  8526,  8526,     0,  8527,  8543,
        53,  8544,  8584,     0,  8585, 11263,    53, 11264, 11310,     0,
     11311, 11311,    53, 11312, 11358,     0, 11359, 11359,    53, 11360,
     11492,     0, 11493, 11498,    53, 11499, 11502,    54, 11503, 11505,
        53, 11506, 11507,     0, 11508, 11519,    53, 11520, 11557,     0,
     11558, 11558,    53, 11559, 11559,     0, 11560, 11564,    53, 11565,
     11565,     0, 11566, 11567,    53, 11568, 11623,     0, 11624, 11630,
        53, 11631, 11631,     0, 11632, 11646,    54, 11647, 11647,    53,
     11648, 11670,     0, 11671, 11679,    53, 11680, 11686,     0, 11687,
     11687,    53, 11688, 11694,     0, 11695, 11695,    53, 11696, 11702,
         0, 11703, 11703,    53, 11704, 11710,     0, 11711, 11711,    53,
     11712, 11718,     0, 11719, 11719,    53, 11720, 11726,     0, 11727,
     11727,    53, 11728, 11734,     0, 11735, 11735,    53, 11736, 11742,
         0, 11743, 11743,    54, 11744, 11775,     0, 11776, 11822,    53,
     11823, 11823,     0, 11824, 12292,    53, 12293, 12295,     0, 12296,
     12320,    53, 12321, 12329,    54, 12330, 12335,     0, 12336, 12336,
        53, 12337, 12341,     0, 12342, 12343,    53, 12344, 12348,     0,
     12349, 12352,    53, 12353, 12438,     0, 12439, 12440,    54, 12441,
     12442,     0, 12443, 12444,    53, 12445, 12447,     0, 12448, 12448,
        53, 12449, 12538,     0, 12539, 12539,    53, 12540, 12543,     0,
     12544, 12548,    53, 12549, 12589,     0, 12590, 12592,    53, 12593,
     12686,     0, 12687, 12703,    53, 12704, 12730,     0, 12731, 12783,
        53, 12784, 12799,     0, 12800, 13311,    53, 13312, 19893,     0,
     19894, 19967,    53, 19968, 40908,     0, 40909, 40959,    53, 40960,
     42124,     0, 42125, 42191,    53, 42192, 42237,     0, 42238, 42239,
        53, 42240, 42508,     0, 42509, 42511,    53, 42512, 42527,    54,
     42528, 42537,    53, 42538, 42539,     0, 42540, 42559,    53, 42560,
     42606,    54, 42607, 42607,     0, 42608, 42611,    54, 42612, 42621,
         0, 42622, 42622,    53, 42623, 42647,     0, 42648, 42654,    54,
     42655, 42655,    53, 42656, 42735,    54, 42736, 42737,     0, 42738,
     42774,    53, 42775, 42783,     0, 42784, 42785,    53, 42786, 42888,
         0, 42889, 42890,    53, 42891, 42894,     0, 42895, 42895,    53,
     42896, 42899,     0, 42900, 42911,    53, 42912, 42922,     0, 42923,
     42999,    53, 43000, 43009,    54, 43010, 43010,    53, 43011, 43013,
        54, 43014, 43014,    53, 43015, 43018,    54, 43019, 43019,    53,
     43020, 43042,    54, 43043, 43047,     0, 43048, 43071,    53, 43072,
     43123,     0, 43124, 43135,    54, 43136, 43137,    53, 43138, 43187,
        54, 43188, 43204,     0, 43205, 43215,    54, 43216, 43225,     0,
     43226, 43231,    54, 43232, 43249,    53, 43250, 43255,     0, 43256,
     43258,    53, 43259, 43259,     0, 43260, 43263,    54, 43264, 43273,
        53, 43274, 43301,    54, 43302, 43309,     0, 43310, 43311,    53,
     43312, 43334,    54, 43335, 43347,     0, 43348, 43359,    53, 43360,
     43388,     0, 43389, 43391,    54, 43392, 43395,    53, 43396, 43442,
        54, 43443, 43456,     0, 43457, 43470,    53, 43471, 43471,    54,
     43472, 43481,     0, 43482, 43519,    53, 43520, 43560,    54, 43561,
     43574,     0, 43575, 43583,    53, 43584, 43586,    54, 43587, 43587,
        53, 43588, 43595,    54, 43596, 43597,     0, 43598, 43599,    54,
     43600, 43609,     0, 43610, 43615,    53, 43616, 43638,     0, 43639,
     43641,    53, 43642, 43642,    54, 43643, 43643,     0, 43644, 43647,
        53, 43648, 43695,    54, 43696, 43696,    53, 43697, 43697,    54,
     43698, 43700,    53, 43701, 43702,    54, 43703, 43704,    53, 43705,
     43709,    54, 43710, 43711,    53, 43712, 43712,    54, 43713, 43713,
        53, 43714, 43714,     0, 43715, 43738,    53, 43739, 43741,     0,
     43742, 43743,    53, 43744, 43754,    54, 43755, 43759,     0, 43760,
     43761,    53, 43762, 43764,    54, 43765, 43766,     0, 43767, 43776,
        53, 43777, 43782,     0, 43783, 43784,    53, 43785, 43790,     0,
     43791, 43792,    53, 43793, 43798,     0, 43799, 43807,    53, 43808,
     43814,     0, 43815, 43815,    53, 43816, 43822,     0, 43823, 43967,
        53, 43968, 44002,    54, 44003, 44010,     0, 44011, 44011,    54,
     44012, 44013,     0, 44014, 44015,    54, 44016, 44025,     0, 44026,
     44031,    53, 44032, 55203,     0, 55204, 55215,    53, 55216, 55238,
         0, 55239, 55242,    53, 55243, 55291,     0, 55292, 63743,    53,
     63744, 64109,     0, 64110, 64111,    53, 64112, 64217,     0, 64218,
     64255,    53, 64256, 64262,     0, 64263, 64274,    53, 64275, 64279,
         0, 64280, 64284,    53, 64285, 64285,    54, 64286, 64286,    53,
     64287, 64296,     0, 64297, 64297,    53, 64298, 64310,     0, 64311,
     64311,    53, 64312, 64316,     0, 64317, 64317,    53, 64318, 64318,
         0, 64319, 64319,    53, 64320, 64321,     0, 64322, 64322,    53,
     64323, 64324,     0, 64325, 64325,    53, 64326, 64433,     0, 64434,
     64466,    53, 64467, 64829,     0, 64830, 64847,    53, 64848, 64911,
         0, 64912, 64913,    53, 64914, 64967,     0, 64968, 65007,    53,
     65008, 65019,     0, 65020, 65023,    54, 65024, 65039,     0, 65040,
     65055,    54, 65056, 65062,     0, 65063, 65074,    54, 65075, 65076,
         0, 65077, 65100,    54, 65101, 65103,     0, 65104, 65135,    53,
     65136, 65140,     0, 65141, 65141,    53, 65142, 65276,     0, 65277,
     65295,    54, 65296, 65305,     0, 65306, 65312,    53, 65313, 65338,
         0, 65339, 65342,    54, 65343, 65343,     0, 65344, 65344,    53,
     65345, 65370,     0, 65371, 65381,    53, 65382, 65470,     0, 65471,
     65473,    53, 65474, 65479,     0, 65480, 65481,    53, 65482, 65487,
         0, 65488, 65489,    53, 65490, 65495,     0, 65496, 65497,    53,
     65498, 65500,     0, 65501,Infinity,
]; 
var jjlexisEnd0: number[] = [ 
    0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,
    1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,
    1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,
    0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
    0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,
    0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,
    1,0,1,1,0,1,1,0,0,0,1,1,
]; 
var jjlexhasArc0: number[] = [ 
    1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,
    0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,
    1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,
    1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,
    1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,
    1,0,1,1,0,1,0,1,1,1,0,1,1,1,0,
    0,1,0,0,1,0,0,1,1,1,0,0,
]; 
var jjlextable0: DFATable = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1: number[] = [ 
         6,     6,     7,     7,     1,     2,     3,     4,     1,     5,
         6,     6,     1,     5,
]; 
var jjlexdisnext1: number[] = [ 
         4,    12,     0,    -4,    -4,    10,     8,    -4,
]; 
var jjlexchecknext1: number[] = [ 
         2,     2,     2,     2,     0,     0,     0,     0,     6,     6,
         5,     5,     1,     1,
]; 
var jjlexclassTable1: number[] = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     2,     0,     3,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable1: number[] = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1: number[] = [ 
    0,1,0,1,1,0,1,1,
]; 
var jjlexhasArc1: number[] = [ 
    1,1,1,0,0,1,1,0,
]; 
var jjlextable1: DFATable = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2: number[] = [ 
        13,    14,    13,    13,    13,    13,    13,    13,    13,    13,
        13,    13,    13,    13,    13,    13,    13,    13,    14,    14,
        13,    13,     1,     2,     1,     1,     1,     1,     3,     1,
         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         4,     5,     1,     1,     7,    32,    37,     7,    38,    39,
         9,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    -1,    -1,    40,    41,     7,    32,    37,     7,
        38,    39,     9,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    -1,    -1,    40,    41,     7,    32,
        37,     7,    38,    39,     9,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    -1,    -1,    40,    41,
         7,    32,    37,     7,    38,    39,     9,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    -1,    -1,
        40,    41,     7,    32,    37,     7,    38,    39,     9,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        -1,    -1,    40,    41,     7,    32,    37,     7,    38,    39,
         9,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    -1,    -1,    40,    41,     7,    28,     7,     7,
         7,    29,     9,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    -1,    -1,    30,     7,     7,     8,
         7,     7,     7,     7,     9,     7,     7,     7,    10,     7,
         7,     7,    11,     7,     7,    12,    -1,    -1,     7,     7,
         7,    -1,     7,     7,     7,     7,     9,     7,     7,    42,
         7,     7,     7,     7,     7,     7,     7,     7,    -1,    -1,
         7,     7,     7,    -1,     7,     7,     7,     7,     9,     7,
         7,     7,    31,     7,     7,     7,     7,     7,     7,     7,
        -1,    -1,     7,     7,     7,    -1,     7,     7,     7,     7,
         9,     7,     7,     7,     7,     7,     7,     7,     7,    27,
         7,     7,    -1,    -1,     7,     7,     7,    -1,     7,     7,
         7,     7,     9,     7,     7,     7,     7,    26,     7,     7,
         7,     7,     7,     7,    -1,    -1,     7,     7,     7,    -1,
         7,    25,     7,     7,     9,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,    -1,    -1,     7,     7,
         7,    -1,     7,     7,     7,     7,     9,     7,     7,     7,
        24,     7,     7,     7,     7,     7,     7,     7,    -1,    -1,
         7,     7,     7,    -1,     7,     7,     7,     7,     9,     7,
        23,     7,     7,     7,     7,     7,     7,     7,     7,     7,
        -1,    -1,     7,     7,     7,    -1,     7,     7,     7,     7,
         9,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,    22,    -1,    -1,     7,     7,     7,    -1,     7,     7,
         7,     7,     9,     7,     7,     7,     7,     7,     7,    21,
         7,     7,     7,     7,    -1,    -1,     7,     7,     7,    -1,
         7,     7,     7,     7,     9,     7,     7,     7,     7,     7,
         7,     7,     7,     7,     7,    20,    -1,    -1,     7,     7,
         7,    -1,     7,     7,     7,     7,     9,     7,     7,     7,
         7,     7,    19,     7,     7,     7,     7,     7,    -1,    -1,
         7,     7,     7,    -1,     7,     7,     7,     7,     9,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
        -1,    -1,     7,     7,     1,    -1,     1,     1,     1,     1,
         6,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,    -1,    -1,     1,     1,     7,    -1,     7,     7,
         7,     7,     9,     7,     7,     7,     7,     7,     7,     7,
         7,     7,    18,     7,    -1,    -1,     7,     7,     7,    -1,
         7,     7,     7,     7,     9,    17,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,    -1,    -1,     7,     7,
         7,    -1,     7,     7,     7,     7,     9,     7,     7,     7,
         7,     7,     7,     7,    16,     7,     7,     7,    -1,    -1,
         7,     7,    15,    -1,    15,    15,    15,    15,    15,    15,
        15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
        -1,    -1,    15,    15,     7,    -1,     7,     7,     7,     7,
         9,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,    -1,    -1,     7,     7,    13,    -1,    13,    13,
        13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
        13,    13,    13,    13,    -1,    -1,    13,    13,     1,    -1,
         1,     1,     1,     1,     6,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,    -1,    -1,     1,     1,
        32,    33,    -1,    34,    32,    -1,    32,    32,    32,    32,
        32,    32,    32,    32,    32,    32,    32,    -1,    -1,    35,
        36,    32,    33,    -1,    34,    32,    -1,    32,    32,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    -1,    -1,
        35,    36,    32,    33,    -1,    34,    32,    -1,    32,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    -1,
        -1,    35,    36,    32,    33,    -1,    34,    32,    -1,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
        -1,    -1,    35,    36,    32,    33,    -1,    34,    32,    -1,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
        32,    -1,    -1,    35,    36,
]; 
var jjlexdisnext2: number[] = [ 
        22,   638,   198,     0,   -22,   -22,   616,   594,   -22,   572,
       550,   528,   506,   484,   -22,   462,   440,   418,   396,   374,
       352,   330,   308,   286,   264,   176,   242,   -22,   743,   154,
       132,   220,   722,   701,   -22,   680,   659,   110,   -22,    88,
        66,    44,   -22,
]; 
var jjlexchecknext2: number[] = [ 
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    41,    41,    41,    41,    41,    41,
        41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
        41,    41,    -1,    -1,    41,    41,    40,    40,    40,    40,
        40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
        40,    40,    40,    40,    -1,    -1,    40,    40,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    -1,    -1,    39,    39,
        37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
        37,    37,    37,    37,    37,    37,    37,    37,    -1,    -1,
        37,    37,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        -1,    -1,    30,    30,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    -1,    -1,    29,    29,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    -1,    -1,    25,    25,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,    -1,    -1,     2,     2,
        31,    -1,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    -1,    -1,
        31,    31,    26,    -1,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        -1,    -1,    26,    26,    24,    -1,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,    -1,    -1,    24,    24,    23,    -1,    23,    23,
        23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
        23,    23,    23,    23,    -1,    -1,    23,    23,    22,    -1,
        22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
        22,    22,    22,    22,    22,    22,    -1,    -1,    22,    22,
        21,    -1,    21,    21,    21,    21,    21,    21,    21,    21,
        21,    21,    21,    21,    21,    21,    21,    21,    -1,    -1,
        21,    21,    20,    -1,    20,    20,    20,    20,    20,    20,
        20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
        -1,    -1,    20,    20,    19,    -1,    19,    19,    19,    19,
        19,    19,    19,    19,    19,    19,    19,    19,    19,    19,
        19,    19,    -1,    -1,    19,    19,    18,    -1,    18,    18,
        18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
        18,    18,    18,    18,    -1,    -1,    18,    18,    17,    -1,
        17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
        17,    17,    17,    17,    17,    17,    -1,    -1,    17,    17,
        16,    -1,    16,    16,    16,    16,    16,    16,    16,    16,
        16,    16,    16,    16,    16,    16,    16,    16,    -1,    -1,
        16,    16,    15,    -1,    15,    15,    15,    15,    15,    15,
        15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
        -1,    -1,    15,    15,    13,    -1,    13,    13,    13,    13,
        13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
        13,    13,    -1,    -1,    13,    13,    12,    -1,    12,    12,
        12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
        12,    12,    12,    12,    -1,    -1,    12,    12,    11,    -1,
        11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    -1,    -1,    11,    11,
        10,    -1,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    -1,    -1,
        10,    10,     9,    -1,     9,     9,     9,     9,     9,     9,
         9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
        -1,    -1,     9,     9,     7,    -1,     7,     7,     7,     7,
         7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
         7,     7,    -1,    -1,     7,     7,     6,    -1,     6,     6,
         6,     6,     6,     6,     6,     6,     6,     6,     6,     6,
         6,     6,     6,     6,    -1,    -1,     6,     6,     1,    -1,
         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,    -1,    -1,     1,     1,
        36,    36,    -1,    36,    36,    -1,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    -1,    -1,    36,
        36,    35,    35,    -1,    35,    35,    -1,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    -1,    -1,
        35,    35,    33,    33,    -1,    33,    33,    -1,    33,    33,
        33,    33,    33,    33,    33,    33,    33,    33,    33,    -1,
        -1,    33,    33,    32,    32,    -1,    32,    32,    -1,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
        -1,    -1,    32,    32,    28,    28,    -1,    28,    28,    -1,
        28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    -1,    -1,    28,    28,
]; 
var jjlexclassTable2: number[] = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     0,     0,
         3,     0,     4,     0,     0,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     0,     6,     0,     0,     5,     0,     7,     5,     8,
         9,    10,     5,     5,    11,    12,     5,    13,     5,    14,
        15,    16,     5,     5,     5,     5,    17,     5,     5,     5,
         5,     5,     5,    18,     0,    19,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    20,     0,     0,     0,     0,    20,     0,     0,     0,
         0,     0,    20,    20,    20,    20,    20,    20,    20,    20,
        20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
        20,    20,    20,    20,    20,     0,    20,    20,    20,    20,
        20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
        20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
        20,    20,    20,    20,    20,    20,    20,     0,    20,    20,
        20,    20,    20,    20,    20,    20,
]; 
var jjlexunicodeClassTable2: number[] = [ 
        20,   256,   705,     0,   706,   709,    20,   710,   721,     0,
       722,   735,    20,   736,   740,     0,   741,   747,    20,   748,
       748,     0,   749,   749,    20,   750,   750,     0,   751,   767,
        21,   768,   879,    20,   880,   884,     0,   885,   885,    20,
       886,   887,     0,   888,   889,    20,   890,   893,     0,   894,
       901,    20,   902,   902,     0,   903,   903,    20,   904,   906,
         0,   907,   907,    20,   908,   908,     0,   909,   909,    20,
       910,   929,     0,   930,   930,    20,   931,  1013,     0,  1014,
      1014,    20,  1015,  1153,     0,  1154,  1154,    21,  1155,  1159,
         0,  1160,  1161,    20,  1162,  1319,     0,  1320,  1328,    20,
      1329,  1366,     0,  1367,  1368,    20,  1369,  1369,     0,  1370,
      1376,    20,  1377,  1415,     0,  1416,  1424,    21,  1425,  1469,
         0,  1470,  1470,    21,  1471,  1471,     0,  1472,  1472,    21,
      1473,  1474,     0,  1475,  1475,    21,  1476,  1477,     0,  1478,
      1478,    21,  1479,  1479,     0,  1480,  1487,    20,  1488,  1514,
         0,  1515,  1519,    20,  1520,  1522,     0,  1523,  1551,    21,
      1552,  1562,     0,  1563,  1567,    20,  1568,  1610,    21,  1611,
      1641,     0,  1642,  1645,    20,  1646,  1647,    21,  1648,  1648,
        20,  1649,  1747,     0,  1748,  1748,    20,  1749,  1749,    21,
      1750,  1756,     0,  1757,  1758,    21,  1759,  1764,    20,  1765,
      1766,    21,  1767,  1768,     0,  1769,  1769,    21,  1770,  1773,
        20,  1774,  1775,    21,  1776,  1785,    20,  1786,  1788,     0,
      1789,  1790,    20,  1791,  1791,     0,  1792,  1807,    20,  1808,
      1808,    21,  1809,  1809,    20,  1810,  1839,    21,  1840,  1866,
         0,  1867,  1868,    20,  1869,  1957,    21,  1958,  1968,    20,
      1969,  1969,     0,  1970,  1983,    21,  1984,  1993,    20,  1994,
      2026,    21,  2027,  2035,    20,  2036,  2037,     0,  2038,  2041,
        20,  2042,  2042,     0,  2043,  2047,    20,  2048,  2069,    21,
      2070,  2073,    20,  2074,  2074,    21,  2075,  2083,    20,  2084,
      2084,    21,  2085,  2087,    20,  2088,  2088,    21,  2089,  2093,
         0,  2094,  2111,    20,  2112,  2136,    21,  2137,  2139,     0,
      2140,  2207,    20,  2208,  2208,     0,  2209,  2209,    20,  2210,
      2220,     0,  2221,  2275,    21,  2276,  2302,     0,  2303,  2303,
        21,  2304,  2307,    20,  2308,  2361,    21,  2362,  2364,    20,
      2365,  2365,    21,  2366,  2383,    20,  2384,  2384,    21,  2385,
      2391,    20,  2392,  2401,    21,  2402,  2403,     0,  2404,  2405,
        21,  2406,  2415,     0,  2416,  2416,    20,  2417,  2423,     0,
      2424,  2424,    20,  2425,  2431,     0,  2432,  2432,    21,  2433,
      2435,     0,  2436,  2436,    20,  2437,  2444,     0,  2445,  2446,
        20,  2447,  2448,     0,  2449,  2450,    20,  2451,  2472,     0,
      2473,  2473,    20,  2474,  2480,     0,  2481,  2481,    20,  2482,
      2482,     0,  2483,  2485,    20,  2486,  2489,     0,  2490,  2491,
        21,  2492,  2492,    20,  2493,  2493,    21,  2494,  2500,     0,
      2501,  2502,    21,  2503,  2504,     0,  2505,  2506,    21,  2507,
      2509,    20,  2510,  2510,     0,  2511,  2518,    21,  2519,  2519,
         0,  2520,  2523,    20,  2524,  2525,     0,  2526,  2526,    20,
      2527,  2529,    21,  2530,  2531,     0,  2532,  2533,    21,  2534,
      2543,    20,  2544,  2545,     0,  2546,  2560,    21,  2561,  2563,
         0,  2564,  2564,    20,  2565,  2570,     0,  2571,  2574,    20,
      2575,  2576,     0,  2577,  2578,    20,  2579,  2600,     0,  2601,
      2601,    20,  2602,  2608,     0,  2609,  2609,    20,  2610,  2611,
         0,  2612,  2612,    20,  2613,  2614,     0,  2615,  2615,    20,
      2616,  2617,     0,  2618,  2619,    21,  2620,  2620,     0,  2621,
      2621,    21,  2622,  2626,     0,  2627,  2630,    21,  2631,  2632,
         0,  2633,  2634,    21,  2635,  2637,     0,  2638,  2640,    21,
      2641,  2641,     0,  2642,  2648,    20,  2649,  2652,     0,  2653,
      2653,    20,  2654,  2654,     0,  2655,  2661,    21,  2662,  2673,
        20,  2674,  2676,    21,  2677,  2677,     0,  2678,  2688,    21,
      2689,  2691,     0,  2692,  2692,    20,  2693,  2701,     0,  2702,
      2702,    20,  2703,  2705,     0,  2706,  2706,    20,  2707,  2728,
         0,  2729,  2729,    20,  2730,  2736,     0,  2737,  2737,    20,
      2738,  2739,     0,  2740,  2740,    20,  2741,  2745,     0,  2746,
      2747,    21,  2748,  2748,    20,  2749,  2749,    21,  2750,  2757,
         0,  2758,  2758,    21,  2759,  2761,     0,  2762,  2762,    21,
      2763,  2765,     0,  2766,  2767,    20,  2768,  2768,     0,  2769,
      2783,    20,  2784,  2785,    21,  2786,  2787,     0,  2788,  2789,
        21,  2790,  2799,     0,  2800,  2816,    21,  2817,  2819,     0,
      2820,  2820,    20,  2821,  2828,     0,  2829,  2830,    20,  2831,
      2832,     0,  2833,  2834,    20,  2835,  2856,     0,  2857,  2857,
        20,  2858,  2864,     0,  2865,  2865,    20,  2866,  2867,     0,
      2868,  2868,    20,  2869,  2873,     0,  2874,  2875,    21,  2876,
      2876,    20,  2877,  2877,    21,  2878,  2884,     0,  2885,  2886,
        21,  2887,  2888,     0,  2889,  2890,    21,  2891,  2893,     0,
      2894,  2901,    21,  2902,  2903,     0,  2904,  2907,    20,  2908,
      2909,     0,  2910,  2910,    20,  2911,  2913,    21,  2914,  2915,
         0,  2916,  2917,    21,  2918,  2927,     0,  2928,  2928,    20,
      2929,  2929,     0,  2930,  2945,    21,  2946,  2946,    20,  2947,
      2947,     0,  2948,  2948,    20,  2949,  2954,     0,  2955,  2957,
        20,  2958,  2960,     0,  2961,  2961,    20,  2962,  2965,     0,
      2966,  2968,    20,  2969,  2970,     0,  2971,  2971,    20,  2972,
      2972,     0,  2973,  2973,    20,  2974,  2975,     0,  2976,  2978,
        20,  2979,  2980,     0,  2981,  2983,    20,  2984,  2986,     0,
      2987,  2989,    20,  2990,  3001,     0,  3002,  3005,    21,  3006,
      3010,     0,  3011,  3013,    21,  3014,  3016,     0,  3017,  3017,
        21,  3018,  3021,     0,  3022,  3023,    20,  3024,  3024,     0,
      3025,  3030,    21,  3031,  3031,     0,  3032,  3045,    21,  3046,
      3055,     0,  3056,  3072,    21,  3073,  3075,     0,  3076,  3076,
        20,  3077,  3084,     0,  3085,  3085,    20,  3086,  3088,     0,
      3089,  3089,    20,  3090,  3112,     0,  3113,  3113,    20,  3114,
      3123,     0,  3124,  3124,    20,  3125,  3129,     0,  3130,  3132,
        20,  3133,  3133,    21,  3134,  3140,     0,  3141,  3141,    21,
      3142,  3144,     0,  3145,  3145,    21,  3146,  3149,     0,  3150,
      3156,    21,  3157,  3158,     0,  3159,  3159,    20,  3160,  3161,
         0,  3162,  3167,    20,  3168,  3169,    21,  3170,  3171,     0,
      3172,  3173,    21,  3174,  3183,     0,  3184,  3201,    21,  3202,
      3203,     0,  3204,  3204,    20,  3205,  3212,     0,  3213,  3213,
        20,  3214,  3216,     0,  3217,  3217,    20,  3218,  3240,     0,
      3241,  3241,    20,  3242,  3251,     0,  3252,  3252,    20,  3253,
      3257,     0,  3258,  3259,    21,  3260,  3260,    20,  3261,  3261,
        21,  3262,  3268,     0,  3269,  3269,    21,  3270,  3272,     0,
      3273,  3273,    21,  3274,  3277,     0,  3278,  3284,    21,  3285,
      3286,     0,  3287,  3293,    20,  3294,  3294,     0,  3295,  3295,
        20,  3296,  3297,    21,  3298,  3299,     0,  3300,  3301,    21,
      3302,  3311,     0,  3312,  3312,    20,  3313,  3314,     0,  3315,
      3329,    21,  3330,  3331,     0,  3332,  3332,    20,  3333,  3340,
         0,  3341,  3341,    20,  3342,  3344,     0,  3345,  3345,    20,
      3346,  3386,     0,  3387,  3388,    20,  3389,  3389,    21,  3390,
      3396,     0,  3397,  3397,    21,  3398,  3400,     0,  3401,  3401,
        21,  3402,  3405,    20,  3406,  3406,     0,  3407,  3414,    21,
      3415,  3415,     0,  3416,  3423,    20,  3424,  3425,    21,  3426,
      3427,     0,  3428,  3429,    21,  3430,  3439,     0,  3440,  3449,
        20,  3450,  3455,     0,  3456,  3457,    21,  3458,  3459,     0,
      3460,  3460,    20,  3461,  3478,     0,  3479,  3481,    20,  3482,
      3505,     0,  3506,  3506,    20,  3507,  3515,     0,  3516,  3516,
        20,  3517,  3517,     0,  3518,  3519,    20,  3520,  3526,     0,
      3527,  3529,    21,  3530,  3530,     0,  3531,  3534,    21,  3535,
      3540,     0,  3541,  3541,    21,  3542,  3542,     0,  3543,  3543,
        21,  3544,  3551,     0,  3552,  3569,    21,  3570,  3571,     0,
      3572,  3584,    20,  3585,  3632,    21,  3633,  3633,    20,  3634,
      3635,    21,  3636,  3642,     0,  3643,  3647,    20,  3648,  3654,
        21,  3655,  3662,     0,  3663,  3663,    21,  3664,  3673,     0,
      3674,  3712,    20,  3713,  3714,     0,  3715,  3715,    20,  3716,
      3716,     0,  3717,  3718,    20,  3719,  3720,     0,  3721,  3721,
        20,  3722,  3722,     0,  3723,  3724,    20,  3725,  3725,     0,
      3726,  3731,    20,  3732,  3735,     0,  3736,  3736,    20,  3737,
      3743,     0,  3744,  3744,    20,  3745,  3747,     0,  3748,  3748,
        20,  3749,  3749,     0,  3750,  3750,    20,  3751,  3751,     0,
      3752,  3753,    20,  3754,  3755,     0,  3756,  3756,    20,  3757,
      3760,    21,  3761,  3761,    20,  3762,  3763,    21,  3764,  3769,
         0,  3770,  3770,    21,  3771,  3772,    20,  3773,  3773,     0,
      3774,  3775,    20,  3776,  3780,     0,  3781,  3781,    20,  3782,
      3782,     0,  3783,  3783,    21,  3784,  3789,     0,  3790,  3791,
        21,  3792,  3801,     0,  3802,  3803,    20,  3804,  3807,     0,
      3808,  3839,    20,  3840,  3840,     0,  3841,  3863,    21,  3864,
      3865,     0,  3866,  3871,    21,  3872,  3881,     0,  3882,  3892,
        21,  3893,  3893,     0,  3894,  3894,    21,  3895,  3895,     0,
      3896,  3896,    21,  3897,  3897,     0,  3898,  3901,    21,  3902,
      3903,    20,  3904,  3911,     0,  3912,  3912,    20,  3913,  3948,
         0,  3949,  3952,    21,  3953,  3972,     0,  3973,  3973,    21,
      3974,  3975,    20,  3976,  3980,    21,  3981,  3991,     0,  3992,
      3992,    21,  3993,  4028,     0,  4029,  4037,    21,  4038,  4038,
         0,  4039,  4095,    20,  4096,  4138,    21,  4139,  4158,    20,
      4159,  4159,    21,  4160,  4169,     0,  4170,  4175,    20,  4176,
      4181,    21,  4182,  4185,    20,  4186,  4189,    21,  4190,  4192,
        20,  4193,  4193,    21,  4194,  4196,    20,  4197,  4198,    21,
      4199,  4205,    20,  4206,  4208,    21,  4209,  4212,    20,  4213,
      4225,    21,  4226,  4237,    20,  4238,  4238,    21,  4239,  4253,
         0,  4254,  4255,    20,  4256,  4293,     0,  4294,  4294,    20,
      4295,  4295,     0,  4296,  4300,    20,  4301,  4301,     0,  4302,
      4303,    20,  4304,  4346,     0,  4347,  4347,    20,  4348,  4680,
         0,  4681,  4681,    20,  4682,  4685,     0,  4686,  4687,    20,
      4688,  4694,     0,  4695,  4695,    20,  4696,  4696,     0,  4697,
      4697,    20,  4698,  4701,     0,  4702,  4703,    20,  4704,  4744,
         0,  4745,  4745,    20,  4746,  4749,     0,  4750,  4751,    20,
      4752,  4784,     0,  4785,  4785,    20,  4786,  4789,     0,  4790,
      4791,    20,  4792,  4798,     0,  4799,  4799,    20,  4800,  4800,
         0,  4801,  4801,    20,  4802,  4805,     0,  4806,  4807,    20,
      4808,  4822,     0,  4823,  4823,    20,  4824,  4880,     0,  4881,
      4881,    20,  4882,  4885,     0,  4886,  4887,    20,  4888,  4954,
         0,  4955,  4956,    21,  4957,  4959,     0,  4960,  4991,    20,
      4992,  5007,     0,  5008,  5023,    20,  5024,  5108,     0,  5109,
      5120,    20,  5121,  5740,     0,  5741,  5742,    20,  5743,  5759,
         0,  5760,  5760,    20,  5761,  5786,     0,  5787,  5791,    20,
      5792,  5866,     0,  5867,  5869,    20,  5870,  5872,     0,  5873,
      5887,    20,  5888,  5900,     0,  5901,  5901,    20,  5902,  5905,
        21,  5906,  5908,     0,  5909,  5919,    20,  5920,  5937,    21,
      5938,  5940,     0,  5941,  5951,    20,  5952,  5969,    21,  5970,
      5971,     0,  5972,  5983,    20,  5984,  5996,     0,  5997,  5997,
        20,  5998,  6000,     0,  6001,  6001,    21,  6002,  6003,     0,
      6004,  6015,    20,  6016,  6067,    21,  6068,  6099,     0,  6100,
      6102,    20,  6103,  6103,     0,  6104,  6107,    20,  6108,  6108,
        21,  6109,  6109,     0,  6110,  6111,    21,  6112,  6121,     0,
      6122,  6154,    21,  6155,  6157,     0,  6158,  6159,    21,  6160,
      6169,     0,  6170,  6175,    20,  6176,  6263,     0,  6264,  6271,
        20,  6272,  6312,    21,  6313,  6313,    20,  6314,  6314,     0,
      6315,  6319,    20,  6320,  6389,     0,  6390,  6399,    20,  6400,
      6428,     0,  6429,  6431,    21,  6432,  6443,     0,  6444,  6447,
        21,  6448,  6459,     0,  6460,  6469,    21,  6470,  6479,    20,
      6480,  6509,     0,  6510,  6511,    20,  6512,  6516,     0,  6517,
      6527,    20,  6528,  6571,     0,  6572,  6575,    21,  6576,  6592,
        20,  6593,  6599,    21,  6600,  6601,     0,  6602,  6607,    21,
      6608,  6617,     0,  6618,  6655,    20,  6656,  6678,    21,  6679,
      6683,     0,  6684,  6687,    20,  6688,  6740,    21,  6741,  6750,
         0,  6751,  6751,    21,  6752,  6780,     0,  6781,  6782,    21,
      6783,  6793,     0,  6794,  6799,    21,  6800,  6809,     0,  6810,
      6822,    20,  6823,  6823,     0,  6824,  6911,    21,  6912,  6916,
        20,  6917,  6963,    21,  6964,  6980,    20,  6981,  6987,     0,
      6988,  6991,    21,  6992,  7001,     0,  7002,  7018,    21,  7019,
      7027,     0,  7028,  7039,    21,  7040,  7042,    20,  7043,  7072,
        21,  7073,  7085,    20,  7086,  7087,    21,  7088,  7097,    20,
      7098,  7141,    21,  7142,  7155,     0,  7156,  7167,    20,  7168,
      7203,    21,  7204,  7223,     0,  7224,  7231,    21,  7232,  7241,
         0,  7242,  7244,    20,  7245,  7247,    21,  7248,  7257,    20,
      7258,  7293,     0,  7294,  7375,    21,  7376,  7378,     0,  7379,
      7379,    21,  7380,  7400,    20,  7401,  7404,    21,  7405,  7405,
        20,  7406,  7409,    21,  7410,  7412,    20,  7413,  7414,     0,
      7415,  7423,    20,  7424,  7615,    21,  7616,  7654,     0,  7655,
      7675,    21,  7676,  7679,    20,  7680,  7957,     0,  7958,  7959,
        20,  7960,  7965,     0,  7966,  7967,    20,  7968,  8005,     0,
      8006,  8007,    20,  8008,  8013,     0,  8014,  8015,    20,  8016,
      8023,     0,  8024,  8024,    20,  8025,  8025,     0,  8026,  8026,
        20,  8027,  8027,     0,  8028,  8028,    20,  8029,  8029,     0,
      8030,  8030,    20,  8031,  8061,     0,  8062,  8063,    20,  8064,
      8116,     0,  8117,  8117,    20,  8118,  8124,     0,  8125,  8125,
        20,  8126,  8126,     0,  8127,  8129,    20,  8130,  8132,     0,
      8133,  8133,    20,  8134,  8140,     0,  8141,  8143,    20,  8144,
      8147,     0,  8148,  8149,    20,  8150,  8155,     0,  8156,  8159,
        20,  8160,  8172,     0,  8173,  8177,    20,  8178,  8180,     0,
      8181,  8181,    20,  8182,  8188,     0,  8189,  8203,    21,  8204,
      8205,     0,  8206,  8254,    21,  8255,  8256,     0,  8257,  8275,
        21,  8276,  8276,     0,  8277,  8304,    20,  8305,  8305,     0,
      8306,  8318,    20,  8319,  8319,     0,  8320,  8335,    20,  8336,
      8348,     0,  8349,  8399,    21,  8400,  8412,     0,  8413,  8416,
        21,  8417,  8417,     0,  8418,  8420,    21,  8421,  8432,     0,
      8433,  8449,    20,  8450,  8450,     0,  8451,  8454,    20,  8455,
      8455,     0,  8456,  8457,    20,  8458,  8467,     0,  8468,  8468,
        20,  8469,  8469,     0,  8470,  8472,    20,  8473,  8477,     0,
      8478,  8483,    20,  8484,  8484,     0,  8485,  8485,    20,  8486,
      8486,     0,  8487,  8487,    20,  8488,  8488,     0,  8489,  8489,
        20,  8490,  8493,     0,  8494,  8494,    20,  8495,  8505,     0,
      8506,  8507,    20,  8508,  8511,     0,  8512,  8516,    20,  8517,
      8521,     0,  8522,  8525,    20,  8526,  8526,     0,  8527,  8543,
        20,  8544,  8584,     0,  8585, 11263,    20, 11264, 11310,     0,
     11311, 11311,    20, 11312, 11358,     0, 11359, 11359,    20, 11360,
     11492,     0, 11493, 11498,    20, 11499, 11502,    21, 11503, 11505,
        20, 11506, 11507,     0, 11508, 11519,    20, 11520, 11557,     0,
     11558, 11558,    20, 11559, 11559,     0, 11560, 11564,    20, 11565,
     11565,     0, 11566, 11567,    20, 11568, 11623,     0, 11624, 11630,
        20, 11631, 11631,     0, 11632, 11646,    21, 11647, 11647,    20,
     11648, 11670,     0, 11671, 11679,    20, 11680, 11686,     0, 11687,
     11687,    20, 11688, 11694,     0, 11695, 11695,    20, 11696, 11702,
         0, 11703, 11703,    20, 11704, 11710,     0, 11711, 11711,    20,
     11712, 11718,     0, 11719, 11719,    20, 11720, 11726,     0, 11727,
     11727,    20, 11728, 11734,     0, 11735, 11735,    20, 11736, 11742,
         0, 11743, 11743,    21, 11744, 11775,     0, 11776, 11822,    20,
     11823, 11823,     0, 11824, 12292,    20, 12293, 12295,     0, 12296,
     12320,    20, 12321, 12329,    21, 12330, 12335,     0, 12336, 12336,
        20, 12337, 12341,     0, 12342, 12343,    20, 12344, 12348,     0,
     12349, 12352,    20, 12353, 12438,     0, 12439, 12440,    21, 12441,
     12442,     0, 12443, 12444,    20, 12445, 12447,     0, 12448, 12448,
        20, 12449, 12538,     0, 12539, 12539,    20, 12540, 12543,     0,
     12544, 12548,    20, 12549, 12589,     0, 12590, 12592,    20, 12593,
     12686,     0, 12687, 12703,    20, 12704, 12730,     0, 12731, 12783,
        20, 12784, 12799,     0, 12800, 13311,    20, 13312, 19893,     0,
     19894, 19967,    20, 19968, 40908,     0, 40909, 40959,    20, 40960,
     42124,     0, 42125, 42191,    20, 42192, 42237,     0, 42238, 42239,
        20, 42240, 42508,     0, 42509, 42511,    20, 42512, 42527,    21,
     42528, 42537,    20, 42538, 42539,     0, 42540, 42559,    20, 42560,
     42606,    21, 42607, 42607,     0, 42608, 42611,    21, 42612, 42621,
         0, 42622, 42622,    20, 42623, 42647,     0, 42648, 42654,    21,
     42655, 42655,    20, 42656, 42735,    21, 42736, 42737,     0, 42738,
     42774,    20, 42775, 42783,     0, 42784, 42785,    20, 42786, 42888,
         0, 42889, 42890,    20, 42891, 42894,     0, 42895, 42895,    20,
     42896, 42899,     0, 42900, 42911,    20, 42912, 42922,     0, 42923,
     42999,    20, 43000, 43009,    21, 43010, 43010,    20, 43011, 43013,
        21, 43014, 43014,    20, 43015, 43018,    21, 43019, 43019,    20,
     43020, 43042,    21, 43043, 43047,     0, 43048, 43071,    20, 43072,
     43123,     0, 43124, 43135,    21, 43136, 43137,    20, 43138, 43187,
        21, 43188, 43204,     0, 43205, 43215,    21, 43216, 43225,     0,
     43226, 43231,    21, 43232, 43249,    20, 43250, 43255,     0, 43256,
     43258,    20, 43259, 43259,     0, 43260, 43263,    21, 43264, 43273,
        20, 43274, 43301,    21, 43302, 43309,     0, 43310, 43311,    20,
     43312, 43334,    21, 43335, 43347,     0, 43348, 43359,    20, 43360,
     43388,     0, 43389, 43391,    21, 43392, 43395,    20, 43396, 43442,
        21, 43443, 43456,     0, 43457, 43470,    20, 43471, 43471,    21,
     43472, 43481,     0, 43482, 43519,    20, 43520, 43560,    21, 43561,
     43574,     0, 43575, 43583,    20, 43584, 43586,    21, 43587, 43587,
        20, 43588, 43595,    21, 43596, 43597,     0, 43598, 43599,    21,
     43600, 43609,     0, 43610, 43615,    20, 43616, 43638,     0, 43639,
     43641,    20, 43642, 43642,    21, 43643, 43643,     0, 43644, 43647,
        20, 43648, 43695,    21, 43696, 43696,    20, 43697, 43697,    21,
     43698, 43700,    20, 43701, 43702,    21, 43703, 43704,    20, 43705,
     43709,    21, 43710, 43711,    20, 43712, 43712,    21, 43713, 43713,
        20, 43714, 43714,     0, 43715, 43738,    20, 43739, 43741,     0,
     43742, 43743,    20, 43744, 43754,    21, 43755, 43759,     0, 43760,
     43761,    20, 43762, 43764,    21, 43765, 43766,     0, 43767, 43776,
        20, 43777, 43782,     0, 43783, 43784,    20, 43785, 43790,     0,
     43791, 43792,    20, 43793, 43798,     0, 43799, 43807,    20, 43808,
     43814,     0, 43815, 43815,    20, 43816, 43822,     0, 43823, 43967,
        20, 43968, 44002,    21, 44003, 44010,     0, 44011, 44011,    21,
     44012, 44013,     0, 44014, 44015,    21, 44016, 44025,     0, 44026,
     44031,    20, 44032, 55203,     0, 55204, 55215,    20, 55216, 55238,
         0, 55239, 55242,    20, 55243, 55291,     0, 55292, 63743,    20,
     63744, 64109,     0, 64110, 64111,    20, 64112, 64217,     0, 64218,
     64255,    20, 64256, 64262,     0, 64263, 64274,    20, 64275, 64279,
         0, 64280, 64284,    20, 64285, 64285,    21, 64286, 64286,    20,
     64287, 64296,     0, 64297, 64297,    20, 64298, 64310,     0, 64311,
     64311,    20, 64312, 64316,     0, 64317, 64317,    20, 64318, 64318,
         0, 64319, 64319,    20, 64320, 64321,     0, 64322, 64322,    20,
     64323, 64324,     0, 64325, 64325,    20, 64326, 64433,     0, 64434,
     64466,    20, 64467, 64829,     0, 64830, 64847,    20, 64848, 64911,
         0, 64912, 64913,    20, 64914, 64967,     0, 64968, 65007,    20,
     65008, 65019,     0, 65020, 65023,    21, 65024, 65039,     0, 65040,
     65055,    21, 65056, 65062,     0, 65063, 65074,    21, 65075, 65076,
         0, 65077, 65100,    21, 65101, 65103,     0, 65104, 65135,    20,
     65136, 65140,     0, 65141, 65141,    20, 65142, 65276,     0, 65277,
     65295,    21, 65296, 65305,     0, 65306, 65312,    20, 65313, 65338,
         0, 65339, 65342,    21, 65343, 65343,     0, 65344, 65344,    20,
     65345, 65370,     0, 65371, 65381,    20, 65382, 65470,     0, 65471,
     65473,    20, 65474, 65479,     0, 65480, 65481,    20, 65482, 65487,
         0, 65488, 65489,    20, 65490, 65495,     0, 65496, 65497,    20,
     65498, 65500,     0, 65501,Infinity,
]; 
var jjlexisEnd2: number[] = [ 
    0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
    1,1,0,0,1,0,0,1,1,1,1,1,1,
]; 
var jjlexhasArc2: number[] = [ 
    1,1,1,1,0,0,1,1,0,1,1,1,1,1,0,
    1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,
    1,1,1,1,0,1,1,1,0,1,1,1,0,
]; 
var jjlextable2: DFATable = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
var jjlexpnext3: number[] = [ 
         1,     1,
]; 
var jjlexdisnext3: number[] = [ 
         1,     0,
]; 
var jjlexchecknext3: number[] = [ 
         1,     0,
]; 
var jjlexclassTable3: number[] = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable3: number[] = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd3: number[] = [ 
    0,1,
]; 
var jjlexhasArc3: number[] = [ 
    1,1,
]; 
var jjlextable3: DFATable = {
    pnext: jjlexpnext3,
    disnext: jjlexdisnext3,
    checknext: jjlexchecknext3,
    maxAsicii: 255,
    classTable: jjlexclassTable3,
    unicodeClassTable: jjlexunicodeClassTable3,
    isEnd: jjlexisEnd3,
    hasArc: jjlexhasArc3
};
/*
    dfa tables
*/
var jjdfaTables: DFATable[] = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
    jjlextable3,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc: number[], c: number){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0: number[] = [ 
        -1,    -1,    -1,    -1,     1,    -1,    -1,    23,    24,    29,
        30,    38,    31,    -1,    32,    34,    22,    25,    21,    28,
        26,    27,    37,     3,    36,     4,     1,    -1,     2,    -1,
        -1,     1,     1,     1,     1,    35,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,
        -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        17,    -1,     8,    -1,    -1,    -1,    16,    -1,    -1,    15,
        -1,    14,    -1,    -1,    -1,    20,    -1,    -1,    -1,     9,
         7,    -1,    12,    19,    -1,     5,    18,    -1,    -1,    -1,
        10,    13,
]; 
var jjlexTokens1: number[] = [ 
        -1,    39,    -1,     3,     4,    -1,    39,    40,
]; 
var jjlexTokens2: number[] = [ 
        -1,    39,    39,    -1,     3,     4,    -1,    39,    41,    -1,
        39,    39,    39,    39,    40,    39,    39,    39,    39,    39,
        39,    39,    39,    39,    39,    39,    39,    42,    -1,    39,
        39,    39,    -1,    -1,    44,    -1,    -1,    39,    44,    39,
        39,    39,    43,
]; 
var jjlexTokens3: number[] = [ 
        -1,    39,
]; 

var jjstateCount = 208;
var jjtokenCount = 45;
var jjactERR = 209;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact: number[] = [ 
         9,     7,    15,    16,    17,    18,   182,    10,    11,   204,
        12,   171,    13,    14,   181,   207,   152,   146,   203,   -57,
       181,   202,   -57,   187,   188,   186,   110,   113,   170,   200,
         5,   169,   167,   199,   -57,   168,    73,   108,   135,   160,
       152,    73,    69,   132,   133,   197,   134,   112,    99,   194,
       175,   176,   177,   178,   179,   180,   175,   176,   177,   178,
       179,   180,   135,   -95,   113,   -44,   -44,   132,   133,   105,
       134,   -58,    71,    72,   -58,    27,   113,    71,    72,    27,
       113,   -95,    22,   -95,   112,   117,   -58,    81,   107,   -42,
        79,    75,    66,    76,    56,   160,   112,    55,   192,   118,
       112,    50,    51,   191,   145,   173,   172,   164,   129,    67,
       152,   150,   149,   148,   147,   143,    37,   -44,   139,   138,
       137,   107,   129,   107,   126,  -102,   124,   121,   120,   119,
       114,   103,   102,    97,    93,    91,    90,    84,    83,    78,
        74,    68,    61,    59,    58,    54,    52,    47,    46,    30,
        41,    36,    34,    30,    30,    30,    30,    28,    22,     4,
    
]; 
/*
    displacement of action table.
*/
var jjdisact: number[] = [ 
       -45,   159,    -5,   -45,   157,   -45,   -45,    78,   154,   153,
       152,   151,   150,   150,   129,   -45,   -45,   -45,    81,   -45,
       -45,   -45,   128,    74,   -45,   -45,   -45,   -45,   -45,   -45,
       -45,   -45,   146,   -45,   126,   146,   -45,   -45,    69,   143,
       144,   -45,    93,   -45,   -45,   143,   122,   103,   -45,   -45,
       -45,   -45,    71,   -45,   -45,   116,    38,   119,   -45,   -45,
       -45,    57,   -45,   128,    86,   -45,   137,   135,   -45,   -45,
       -45,   -45,   -45,   -45,   -45,   -45,   122,   112,   -45,   -45,
       -45,   112,   -45,   -45,   -45,   -45,   -45,   117,    47,   -45,
       131,   106,    68,    33,   -45,    63,    25,   -45,   105,    62,
        61,   -45,   107,   107,    95,   -45,   -45,   -45,   -45,   -45,
       -45,   125,   -45,   124,   -45,   -45,   -45,   123,   103,    90,
       101,   -45,   -45,    99,   118,   -45,    97,   -45,   114,    94,
       -45,   113,   -45,   112,   110,   -45,   -45,   -45,   -45,   -45,
        85,   107,    76,   -45,   -45,    37,   -45,   -45,   -45,    13,
       -45,   -45,   -45,    71,    50,   -45,     9,    68,   -45,    74,
       -45,   -21,   -45,   -45,   -45,    -5,   -45,    67,   102,    75,
       -45,    93,    47,   -45,   -45,   -45,   -45,   -45,   -45,   -45,
       -45,   -45,   -45,    -2,   -45,   -45,   -45,   -45,    21,    37,
        12,    27,   -45,   -45,   -45,    17,   -45,    -9,   -45,   -15,
       -45,   -45,   -45,   -45,    11,   -45,   -45,   -45,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact: number[] = [ 
         2,     2,     2,     2,     2,     2,   161,     2,     2,   199,
         2,   156,     2,     2,   204,   204,   149,   161,   197,   183,
       195,   195,   183,   165,   165,   165,    96,    96,   156,   191,
         2,   156,   156,   190,   183,   156,    93,    93,   149,   189,
       145,    56,    56,   149,   149,   188,   149,    96,    88,   172,
       204,   204,   204,   204,   204,   204,   195,   195,   195,   195,
       195,   195,   145,    88,    99,    99,    95,   145,   145,    92,
       145,   154,    93,    93,   154,    23,    23,    56,    56,     7,
         7,    88,    18,    88,    99,   100,   154,    64,    92,    95,
        64,    61,    52,    61,    42,   171,    23,    42,   169,   100,
         7,    38,    38,   168,   167,   159,   157,   153,   142,    52,
       141,   140,   134,   133,   131,   129,    18,   128,   126,   124,
       123,   120,   119,   118,   117,   113,   111,   104,   103,   102,
        98,    91,    90,    87,    81,    77,    76,    67,    66,    63,
        57,    55,    47,    46,    45,    40,    39,    35,    34,    32,
        22,    14,    13,    12,    11,    10,     9,     8,     4,     1,
    
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred: number[] = [ 
         4,    -1,    -1,     0,    -1,     3,     5,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    19,    20,    21,    -1,    80,
        81,    82,    29,     7,    23,    24,    25,    27,     9,   112,
        10,    11,    -1,    13,    14,    -1,     1,    79,    -1,    -1,
        -1,    22,    -1,   116,    12,    -1,    -1,    17,    88,    84,
        85,    33,    -1,    30,     8,    -1,    -1,    -1,    16,     2,
        18,    -1,    87,    91,    38,    28,    -1,    -1,   113,   115,
       117,   118,   119,    15,    83,    88,    97,    -1,     6,    32,
        34,    -1,    31,    26,   114,   116,    86,   107,    99,    95,
        -1,    -1,    54,    -1,    89,   108,    -1,    96,   100,    41,
        -1,    93,    -1,    -1,    -1,    52,    54,   120,   109,   110,
       111,    -1,   106,    98,   103,   104,    90,    -1,    54,    40,
        54,    53,   121,    -1,    -1,    92,    -1,    36,    41,    -1,
        46,    -1,    48,    -1,    -1,    51,   105,   102,    35,    39,
        -1,    -1,    40,    60,    71,    -1,    47,    49,    50,    -1,
        44,   122,    37,    55,    60,    59,    -1,    73,    76,    77,
        45,    -1,   123,    60,    58,    65,    54,    72,    -1,    -1,
        70,    -1,    -1,   126,   128,   129,   130,   131,   132,   133,
       134,    42,   127,    60,    61,    62,    63,    64,    -1,    74,
        -1,    -1,    75,    78,   135,    -1,    66,    -1,    68,    -1,
       127,   124,    67,    69,    -1,   125,   136,   137,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto: number[] = [ 
         5,   173,   173,   165,     7,   161,   130,   160,   108,   140,
       141,    69,    69,    39,   115,   140,   141,   103,   105,   143,
        99,    97,    23,    24,   164,   156,   184,   164,   156,   110,
        94,    95,    76,    48,    41,    22,   200,   197,   157,   158,
       195,   192,   189,   127,   100,   135,   135,   114,   139,   140,
       141,    87,    88,    79,    32,    81,    37,    20,    31,    30,
        28,   152,   150,   124,    91,    25,   129,   105,   143,   126,
       105,   143,    86,    63,    64,    59,    25,    52,    44,    38,
        34,    18,    19,    20,     1,   207,     2,   205,   204,   194,
       188,   143,   183,   155,   156,   182,   162,   153,   154,   155,
       156,   122,   121,   143,    93,    85,    84,    61,    62,    63,
        56,    47,    43,    42,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto: number[] = [ 
        83,   -71,    -4,   -71,    44,   -71,    30,    13,   -71,     5,
         4,     3,    -1,   -71,    74,   -71,   -71,   -71,    18,   -71,
       -71,    39,     1,    24,   -71,   -71,   -71,   102,   -71,    56,
       -71,   -71,    23,   -71,   -71,   -71,   109,   -71,    -8,   -71,
        64,   -71,   -71,    52,   -71,   -71,   -71,    68,    65,   -71,
       -71,    60,   -71,   -71,   -71,   -71,   -48,   -71,   -71,   -71,
       -71,   -71,   -71,   -13,    38,   -71,   -71,   -71,    49,   -71,
       -71,   -71,    45,   -71,   -71,    29,     4,   -71,   -71,   -71,
        48,   -71,   -71,   -71,   -71,    46,   -71,   -23,   -29,   -71,
        -2,   -71,    -7,   -47,   -71,   -11,   -23,   -71,   -71,    -5,
       -71,   -71,   -71,   -71,   -71,   -71,    77,    40,   -71,   -71,
       -71,   -71,   -71,    12,   -71,   -71,   -71,   -71,    45,    25,
        42,   -71,   -71,   -71,   -71,   -71,   -71,   -71,    29,   -71,
       -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,
       -71,     0,    43,    70,   -71,   -16,   -71,   -71,   -71,   -17,
       -71,    33,   -71,   -71,    -2,   -71,   -29,   -71,   -71,   -71,
       -71,   -71,    31,    64,   -71,    -5,    65,     9,   -71,   -71,
       -71,     5,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,
        21,   -71,   -26,    -5,   -71,   -71,   -71,   -71,   -71,     3,
       -71,   -71,   -71,   -71,   -33,   -65,   -71,   -71,   -71,   -71,
        22,    22,   -71,   -71,   -66,   -71,    15,   -71,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen: number[] = [ 
         2,     0,     6,     2,     0,     0,     6,     2,     4,     2,
         2,     2,     3,     2,     2,     4,     3,     0,     1,     1,
         1,     1,     2,     1,     1,     1,     4,     0,     3,     0,
         1,     3,     2,     0,     0,     6,     5,     7,     0,     2,
         0,     0,     4,     0,     2,     3,     1,     2,     1,     2,
         2,     1,     1,     2,     0,     2,     3,     1,     2,     1,
         0,     3,     1,     1,     1,     0,     3,     4,     3,     4,
         1,     1,     0,     1,     0,     3,     1,     1,     3,     2,
         1,     1,     0,     5,     1,     1,     3,     1,     0,     4,
         4,     0,     3,     1,     1,     1,     2,     0,     2,     0,
         1,     0,     4,     2,     2,     3,     1,     0,     1,     2,
         2,     2,     0,     0,     5,     2,     0,     1,     1,     0,
         0,     5,     0,     0,     0,     6,     2,     0,     1,     1,
         1,     1,     1,     1,     0,     0,     0,     6,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs: number[] = [ 
         0,     2,     1,     3,     3,     5,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     6,     6,     7,     7,     8,
         8,     8,     9,     9,    10,    10,    11,    11,    12,    12,
        13,    13,    14,    14,    16,    15,    15,    15,    17,    18,
        18,    20,    19,    21,    19,    22,    22,    23,    23,    23,
        23,    23,    24,    24,    26,    25,    27,    27,    28,    28,
        30,    29,    31,    31,    31,    31,    32,    32,    32,    32,
        32,    33,    33,    34,    34,    35,    35,    36,    36,    37,
        37,    38,    40,    39,    41,    41,    42,    42,    44,    43,
        45,    45,    46,    46,    47,    47,    48,    48,    49,    49,
        50,    51,    50,    50,    50,    52,    52,    53,    53,    53,
        54,    54,    56,    57,    55,    58,    58,    59,    59,    60,
        61,    59,    63,    64,    65,    62,    66,    66,    67,    67,
        67,    67,    67,    67,    68,    69,    70,    67,
]; 
/*
    token names
*/
var jjtokenNames: string[] = [ 
                   "EOF",              "NAME",            "STRING",
            "OPEN_BLOCK",       "CLOSE_BLOCK",           "OPT_DIR",
               "LEX_DIR",         "TOKEN_DIR",          "LEFT_DIR",
             "RIGHT_DIR",      "NONASSOC_DIR",           "USE_DIR",
            "HEADER_DIR",     "EXTRA_ARG_DIR",             "EMPTY",
              "TYPE_DIR",          "PREC_DIR",          "INIT_DIR",
            "OUTPUT_DIR",        "IMPORT_DIR",         "LEAST_DIR",
                    "GT",                "LT",               "BRA",
                   "KET",               "EQU",              "CBRA",
                  "CKET",          "QUESTION",              "STAR",
                  "PLUS",              "DASH",             "COLON",
                 "ARROW",               "EOL",         "SEPERATOR",
                    "OR",             "WEDGE",             "COMMA",
              "ANY_CODE","ESCAPED_CHAR_IN_BLOCK",           "LHS_REF",
             "TOKEN_REF",           "MATCHED",        "EMIT_TOKEN",
    
]; 
/*
    token alias
*/
var jjtokenAlias: string[] = [ 
                    null,                null,                null,
                     "{",                 "}",           "%option",
                  "%lex",            "%token",             "%left",
                "%right",         "%nonassoc",              "%use",
               "%header",        "%extra_arg",            "%empty",
                 "%type",             "%prec",             "%init",
               "%output",           "%import",            "%least",
                     ">",                 "<",                 "(",
                     ")",                 "=",                 "[",
                     "]",                 "?",                 "*",
                     "+",                 "-",                 ":",
                    "=>",                 ";",                "%%",
                     "|",                 "^",                 ",",
                    null,                null,                "$$",
                "$token",          "$matched",                null,
    
]; 


function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}
class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
interface Parser{
    init(ctx1: Context, b: GBuilder);
    accept(s: string);
    end();
    halt();
    on(ent: string, cb: (a1?, a2?, a3?) => any);
}
function createParser(): Parser {
    // members for lexer
    var jjlexState: number[];
    var jjstate: number;
    var jjmatched: string;
    var jjtoken: Token;
    
    var jjmarker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    var jjbackupCount: number;

    var jjline: number;
    var jjcolumn: number;
    var jjtline: number;
    var jjtcolumn: number;

    // members for parser
    var jjlrState: number[];
    var jjsematicS: JNode[];
    var jjsematicVal: JNode;
    var jjtokenQueue: Token[];

    var jjstop;

    var jjhandlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    
    let gb: GBuilder;
    let ctx: Context;
    let assoc: Assoc;
    let lexact: LexAction;
    let ruleLhs: JNode;
    let least: boolean;


    return {
        init,
        on,
        accept,
        end,
        halt
    };
    function init(ctx1: Context, b: GBuilder){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjtokenQueue = [];

        jjstop = false;
        
    gb = b;
    ctx = ctx1;


        jjtryReduce();
    }
    /**
     *  set 
     */
    function jjsetImg(s: string){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid: number){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjtokenQueue.push(jjtoken);

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjemit(name: string, a1?, a2?, a3?){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name: string, cb: (a1?, a2?, a3?) => any){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten: number){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 3:
                jjsetImg(""); 
                break;
            case 4:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 23:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 25:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 26:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 28:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 30:
                jjsetImg(""); 
                break;
            case 31:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 32:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 33:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 34:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 47:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); }
                break;
            case 50:
                jjsetImg(""); 
                break;
            case 93:
                jjsetImg(""); 
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten: number){
        var jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = newNode(jjtoken.val); }
                break;
            case 3:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 6:
                { jjsematicVal = newNode(jjtoken.val); }
                break;
            case 7:
                { jjsematicVal = newNode(jjtoken.val.charAt(1)); }
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten: number){
        var jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 2:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 4:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 5:
                { jjsematicVal = nodeFromTrivalToken(jjtoken); }
                break;
            case 7:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 10:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 11:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 12:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 13:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 14:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.charAt(1); }
                break;
            case 15:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 16:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 17:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 18:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 19:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 20:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 21:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 22:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 23:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 24:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 25:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 26:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 29:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 30:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 31:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 34:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(6, jjsematicVal.val.length - 7); }
                break;
            case 37:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 38:
                { jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = jjsematicVal.val.substr(6, jjsematicVal.val.length - 7); }
                break;
            case 39:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 40:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            case 41:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    function jjdoLexAction3(jjstaten: number){
        var jjtk = jjlexTokens3[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                { jjsematicVal = nodeFromToken(jjtoken); }
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            case 3:
                jjdoLexAction3(state);
                break;
            default:;
        }
        jjtokenQueue.length > 0 && jjacceptToken(null);
    }
    function jjrollback(): string{
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c: number){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode: number){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjacceptToken(null);
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s: string){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum: number){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: @0 => */
                jjlexState.push(3); 
                break;
            case 5:
                /* 5: @1 => */
                { gb.lexBuilder.prepareLex(); } 
                break;
            case 7:
                /* 7: option => associativeDir assocTokens */
                { gb.incPr(); } 
                break;
            case 9:
                /* 9: option => "%header" block */
                var b = jjsematicS[jjsp - 1];
                { gb.setHeader(b); } 
                break;
            case 10:
                /* 10: option => "%extra_arg" block */
                var b = jjsematicS[jjsp - 1];
                { gb.setExtraArg(b); } 
                break;
            case 11:
                /* 11: option => "%type" block */
                var ty = jjsematicS[jjsp - 1];
                { gb.setType(ty); } 
                break;
            case 12:
                /* 12: option => "%init" block block */
                var args = jjsematicS[jjsp - 2];
                var b = jjsematicS[jjsp - 1];
                { gb.setInit(args, b); } 
                break;
            case 13:
                /* 13: option => "%output" <STRING> */
                var op = jjsematicS[jjsp - 1];
                { gb.setOutput(op); } 
                break;
            case 15:
                /* 15: tokenDefs => tokenDefs "<" <NAME> ">" */
                var t = jjsematicS[jjsp - 2];
                { gb.defToken(t, null); } 
                break;
            case 16:
                /* 16: tokenDefs => "<" <NAME> ">" */
                var t = jjsematicS[jjsp - 2];
                { gb.defToken(t, null); } 
                break;
            case 18:
                /* 18: epilogue => <ANY_CODE> */
                var ep = jjsematicS[jjsp - 1];
                { gb.setEpilogue(ep); } 
                break;
            case 19:
                /* 19: associativeDir => "%left" */
                { assoc = Assoc.LEFT; } 
                break;
            case 20:
                /* 20: associativeDir => "%right" */
                { assoc = Assoc.RIGHT; } 
                break;
            case 21:
                /* 21: associativeDir => "%nonassoc" */
                { assoc = Assoc.NON; } 
                break;
            case 24:
                /* 24: assocToken => tokenRef */
                var t = jjsematicS[jjsp - 1];
                { gb.defineTokenPrec(t, assoc, t.ext); } 
                break;
            case 25:
                /* 25: assocToken => <NAME> */
                var t = jjsematicS[jjsp - 1];
                { gb.defineTokenPrec(t, assoc, TokenRefType.NAME); } 
                break;
            case 26:
                /* 26: optionBody => optionBody <NAME> "=" <STRING> */
                var name = jjsematicS[jjsp - 3];
                var val = jjsematicS[jjsp - 1];
                { gb.setOpt(name, val); } 
                break;
            case 29:
                /* 29: states_ => */
                { gb.lexBuilder.selectState('DEFAULT'); } 
                break;
            case 30:
                /* 30: states => <NAME> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); } 
                break;
            case 31:
                /* 31: states => states "," <NAME> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); } 
                break;
            case 34:
                /* 34: @2 => */
                var v = jjsematicS[jjsp - 1];
                { gb.lexBuilder.prepareVar(v); } 
                break;
            case 35:
                /* 35: lexBodyItem => <NAME> @2 "=" "<" regexp ">" */
                var v = jjsematicS[jjsp - 6];
                { gb.lexBuilder.endVar(); } 
                break;
            case 36:
                /* 36: lexBodyItem => newState "<" regexp ">" lexAction_ */
                { gb.lexBuilder.end(lexact, least, '(untitled)'); } 
                break;
            case 37:
                /* 37: lexBodyItem => newState "<" <NAME> ":" regexp ">" lexAction_ */
                var tn = jjsematicS[jjsp - 5];
                { 
        let tdef = gb.defToken(tn, gb.lexBuilder.getPossibleAlias());
        lexact.returnToken(tdef);
        gb.lexBuilder.end(lexact, least, tn.val);
    } 
                break;
            case 38:
                /* 38: newState => */
                { gb.lexBuilder.newState(); } 
                break;
            case 40:
                /* 40: lexAction_ => */
                { lexact = new LexAction(); } 
                break;
            case 41:
                /* 41: @3 => */
                { lexact = new LexAction(); } 
                break;
            case 43:
                /* 43: @4 => */
                { lexact = new LexAction(); } 
                break;
            case 47:
                /* 47: lexActionItem => "+" <NAME> */
                var vn = jjsematicS[jjsp - 1];
                { gb.addPushStateAction(lexact, vn); lexact.raw('; '); } 
                break;
            case 48:
                /* 48: lexActionItem => "-" */
                { lexact.popState(); lexact.raw('; '); } 
                break;
            case 49:
                /* 49: lexActionItem => "=>" <NAME> */
                var sn = jjsematicS[jjsp - 1];
                { gb.addSwitchToStateAction(lexact, sn); lexact.raw('; '); } 
                break;
            case 50:
                /* 50: lexActionItem => "=" <STRING> */
                var s = jjsematicS[jjsp - 1];
                { lexact.setImg(s.val); lexact.raw('; '); } 
                break;
            case 52:
                /* 52: regexp => innerRegexp */
                { least = false; } 
                break;
            case 53:
                /* 53: regexp => "%least" innerRegexp */
                { least = true; } 
                break;
            case 54:
                /* 54: @5 => */
                { gb.lexBuilder.enterUnion(); } 
                break;
            case 55:
                /* 55: innerRegexp => @5 union */
                { gb.lexBuilder.leaveUnion(); } 
                break;
            case 56:
                /* 56: union => union "|" simpleRE */
                { gb.lexBuilder.endUnionItem(); } 
                break;
            case 57:
                /* 57: union => simpleRE */
                { gb.lexBuilder.endUnionItem(); } 
                break;
            case 60:
                /* 60: @6 => */
                { gb.lexBuilder.enterSimple(); } 
                break;
            case 61:
                /* 61: basicRE => @6 primitiveRE rePostfix */
                var suffix = jjsematicS[jjsp - 1];
                { gb.lexBuilder.simplePostfix(suffix.val as (''|'?'|'+'|'*')); } 
                break;
            case 62:
                /* 62: rePostfix => "+" */
                { jjtop = newNode('+'); } 
                break;
            case 63:
                /* 63: rePostfix => "?" */
                { jjtop = newNode('?'); } 
                break;
            case 64:
                /* 64: rePostfix => "*" */
                { jjtop = newNode('*'); } 
                break;
            case 65:
                /* 65: rePostfix => */
                { jjtop = newNode(''); } 
                break;
            case 68:
                /* 68: primitiveRE => "<" <NAME> ">" */
                var n = jjsematicS[jjsp - 2];
                { gb.lexBuilder.addVar(n); } 
                break;
            case 69:
                /* 69: primitiveRE => "%import" "(" <STRING> ")" */
                var i = jjsematicS[jjsp - 2];
                { gb.lexBuilder.importVar(i); } 
                break;
            case 70:
                /* 70: primitiveRE => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.addString(s.val); } 
                break;
            case 71:
                /* 71: inverse_ => "^" */
                { gb.lexBuilder.beginSet(true); } 
                break;
            case 72:
                /* 72: inverse_ => */
                { gb.lexBuilder.beginSet(false); } 
                break;
            case 77:
                /* 77: setREItem => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(s, s); } 
                break;
            case 78:
                /* 78: setREItem => <STRING> "-" <STRING> */
                var from = jjsematicS[jjsp - 3];
                var to = jjsematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(from, to); } 
                break;
            case 82:
                /* 82: @7 => */
                var n = jjsematicS[jjsp - 1];
                { ruleLhs = n; } 
                break;
            case 88:
                /* 88: @8 => */
                { gb.prepareRule(ruleLhs); } 
                break;
            case 89:
                /* 89: rule => @8 ruleHead ruleBody ruleTrailer */
                { gb.commitRule(); } 
                break;
            case 92:
                /* 92: varUseList => varUseList "," <NAME> */
                var vn = jjsematicS[jjsp - 1];
                { gb.addRuleUseVar(vn); } 
                break;
            case 93:
                /* 93: varUseList => <NAME> */
                var vn = jjsematicS[jjsp - 1];
                { gb.addRuleUseVar(vn); } 
                break;
            case 98:
                /* 98: itemName => <NAME> "=" */
                var itn = jjsematicS[jjsp - 2];
                { gb.addRuleSematicVar(itn); } 
                break;
            case 100:
                /* 100: ruleItem => <NAME> */
                var t = jjsematicS[jjsp - 1];
                { gb.addRuleItem(t, TokenRefType.NAME); } 
                break;
            case 101:
                /* 101: @9 => */
                var vn = jjsematicS[jjsp - 2];
                { gb.addRuleSematicVar(vn); } 
                break;
            case 102:
                /* 102: ruleItem => <NAME> "=" @9 <NAME> */
                var vn = jjsematicS[jjsp - 4];
                var t = jjsematicS[jjsp - 1];
                { gb.addRuleItem(t, TokenRefType.NAME); } 
                break;
            case 103:
                /* 103: ruleItem => itemName tokenRef */
                var t = jjsematicS[jjsp - 1];
                { gb.addRuleItem(t, t.ext); } 
                break;
            case 104:
                /* 104: ruleItem => itemName lexAction */
                { gb.addAction(lexact); } 
                break;
            case 105:
                /* 105: tokenRef => "<" <NAME> ">" */
                var t = jjsematicS[jjsp - 2];
                { jjtop = t; jjtop.ext = TokenRefType.TOKEN; } 
                break;
            case 106:
                /* 106: tokenRef => <STRING> */
                { jjtop.ext = TokenRefType.STRING; } 
                break;
            case 109:
                /* 109: ruleTrailer => rulePrec lexAction */
                { gb.addAction(lexact); } 
                break;
            case 110:
                /* 110: rulePrec => "%prec" <NAME> */
                var t = jjsematicS[jjsp - 1];
                { gb.defineRulePr(t, TokenRefType.NAME); } 
                break;
            case 111:
                /* 111: rulePrec => "%prec" tokenRef */
                var t = jjsematicS[jjsp - 1];
                { gb.defineRulePr(t, t.ext); } 
                break;
            case 112:
                /* 112: @10 => */
                var open = jjsematicS[jjsp - 1];
                jjlexState.push(1); 
                break;
            case 113:
                /* 113: @11 => */
                var open = jjsematicS[jjsp - 4];
                var bl = jjsematicS[jjsp - 2];
                var close = jjsematicS[jjsp - 1];
                jjlexState.pop(); 
                break;
            case 114:
                /* 114: block => "{" @10 innerBlock "}" @11 */
                var open = jjsematicS[jjsp - 5];
                var bl = jjsematicS[jjsp - 3];
                var close = jjsematicS[jjsp - 2];
                { jjtop = nodeBetween(open, close, bl.val); } 
                break;
            case 115:
                /* 115: innerBlock => innerBlock innerBlockItem */
                var b = jjsematicS[jjsp - 1];
                { jjtop.val += b.val; } 
                break;
            case 116:
                /* 116: innerBlock => */
                { jjtop = newNode(''); } 
                break;
            case 119:
                /* 119: @12 => */
                jjlexState.push(1); 
                break;
            case 120:
                /* 120: @13 => */
                var b = jjsematicS[jjsp - 2];
                jjlexState.pop(); 
                break;
            case 121:
                /* 121: innerBlockItem => "{" @12 innerBlock "}" @13 */
                var b = jjsematicS[jjsp - 3];
                { jjtop = newNode(''); jjtop.val = '{' + b.val + '}'; } 
                break;
            case 122:
                /* 122: @14 => */
                var open = jjsematicS[jjsp - 1];
                jjlexState.push(2); 
                break;
            case 123:
                /* 123: @15 => */
                var open = jjsematicS[jjsp - 2];
                { lexact.beginBlock(open); } 
                break;
            case 124:
                /* 124: @16 => */
                var open = jjsematicS[jjsp - 5];
                var t = jjsematicS[jjsp - 3];
                var close = jjsematicS[jjsp - 1];
                jjlexState.pop(); 
                break;
            case 125:
                /* 125: actionBlock => "{" @14 @15 innerActionBlock "}" @16 */
                var open = jjsematicS[jjsp - 6];
                var t = jjsematicS[jjsp - 4];
                var close = jjsematicS[jjsp - 2];
                { lexact.endBlock(close); } 
                break;
            case 128:
                /* 128: innerActionBlockItem => <ANY_CODE> */
                var c = jjsematicS[jjsp - 1];
                { lexact.raw(c.val); } 
                break;
            case 129:
                /* 129: innerActionBlockItem => <ESCAPED_CHAR_IN_BLOCK> */
                var c = jjsematicS[jjsp - 1];
                { lexact.raw(c.val); } 
                break;
            case 130:
                /* 130: innerActionBlockItem => "$$" */
                { lexact.lhs(); } 
                break;
            case 131:
                /* 131: innerActionBlockItem => "$token" */
                { lexact.tokenObj(); } 
                break;
            case 132:
                /* 132: innerActionBlockItem => "$matched" */
                { lexact.matched(); } 
                break;
            case 133:
                /* 133: innerActionBlockItem => <EMIT_TOKEN> */
                var t = jjsematicS[jjsp - 1];
                { gb.addEmitTokenAction(lexact, t); } 
                break;
            case 134:
                /* 134: @17 => */
                jjlexState.push(2); 
                break;
            case 135:
                /* 135: @18 => */
                { lexact.raw('{'); } 
                break;
            case 136:
                /* 136: @19 => */
                jjlexState.pop(); 
                break;
            case 137:
                /* 137: innerActionBlockItem => "{" @17 @18 innerActionBlock "}" @19 */
                { lexact.raw('}'); } 
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjacceptToken(tk: Token){
        // look up action table
        var shifted = false;
        tk !== null && jjtokenQueue.push(tk);
        while(!jjstop && jjtokenQueue.length > 0){
            var t = jjtokenQueue[0];
            var cstate = jjlrState[jjlrState.length - 1];
            var ind = jjdisact[cstate] + t.id;
            var act = 0;
            if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
                act = -jjdefred[cstate] - 1;
            }
            else {
                act = jjpact[ind];
            }
            if(act === jjactERR){
                // explicit error
                jjsyntaxError(t);
                jjtokenQueue.shift();
            }
            else if(act > 0){
                // shift
                if(t.id === 0){
                    // end of file
                    jjstop = true;
                    jjemit('accept');
                    jjtokenQueue.shift();
                }
                else {
                    jjlrState.push(act - 1);
                    jjsematicS.push(jjsematicVal);
                    jjsematicVal = null;
                    jjtryReduce();
                    // token consumed
                    jjtokenQueue.shift();
                }
            }
            else if(act < 0){
                jjdoReduction(-act - 1);
                jjtryReduce();
            }
            else {
                // error
                jjsyntaxError(t);
                // force consume
                jjtokenQueue.shift();
            }
        }
    }
    function jjtryReduce(){
        var cstate = jjlrState[jjlrState.length - 1];
        var act;
        while(jjdisact[cstate] === -jjtokenCount && (act = jjdefred[cstate]) !== -1){
            jjdoReduction(act);
            cstate = jjlrState[jjlrState.length - 1];
        }
    }
    function jjsyntaxError(t: Token){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state: number){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk: number){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}

function charPosition(c: string, line: number, column: number): Position{
    return {
        startLine: line,
        startColumn: column,
        endLine: line,
        endColumn: c.charCodeAt(0) > 0xff ? column + 1 : column
    }
}
export function parse(ctx: Context, source: string): File{
    let parser = createParser();
    let err = false;
    parser.on('lexicalerror', (c, line, column) => {
        ctx.requireLines((ctx, lines) => {
            let msg2 = `unexpected character ${c}`;
            msg2 += ' ' + markPosition(charPosition(c, line, column), lines);
            ctx.err(new JsccError(msg2, 'Lexical error'));
        });
        // ctx.err(new CompilationError(msg, line));
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', (msg, token) => {
        // ctx.err(new CompilationError(msg, token.startLine));
        ctx.requireLines((ctx, lines) => {
            let msg2 = markPosition(token, lines) + endl + msg;
            ctx.err(new JsccError(msg2, 'Syntax error'));
        });
        parser.halt();
        err = true;
    });
    let gb = createFileBuilder(ctx);
    parser.init(ctx, gb);

    ctx.beginTime('parse grammar file');
    parser.accept(source);
    parser.end();
    ctx.endTime();

    if(err){
        return null;
    }
    else {
        return gb.build();
    }
}