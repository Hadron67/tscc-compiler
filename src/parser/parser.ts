/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

import { GBuilder, createFileBuilder, TokenRefType } from './gbuilder';
import { Assoc } from '../grammar/token-entry';
import { CompilationError as E, JsccError } from '../util/E';
import { InputStream, endl } from '../util/io';
import { Context } from '../util/context';
import { LexAction, returnToken, blockAction, pushState, popState, setImg } from '../lexer/action';
import { Position, JNode, newNode, markPosition, nodeBetween } from './node';
import { File } from './file';

function nodeFromToken(t: Token): JNode{
    return {
        val: t.val,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
function nodeFromTrivalToken(t: Token): JNode{
    return {
        val: null,
        ext: null,
        startLine: t.startLine,
        startColumn: t.startColumn,
        endLine: t.endLine,
        endColumn: t.endColumn
    };
}
let escapes: {[s: string]: string} = {
    'n': '\n',
    'f': '\f',
    'b': '\b',
    'r': '\r',
    't': '\t',
    '\\': '\\',
    '"': '"',
    "'": "'"
};
function unescape(s: string){
    let ret = '';
    let i = 0;
    while(i < s.length){
        let c = s.charAt(i);
        if(c === '\\'){
            c = s.charAt(++i);
            if(escapes[c]){
                ret += escapes[c];
                i++;
            }
            else if(c === 'u' || c === 'x'){
                c = s.charAt(++i);
                let hex = '';
                while(/[0-9a-fA-F]/.test(c)){
                    hex += c;
                    c = s.charAt(++i);
                }
                ret += String.fromCharCode(parseInt(hex, 16));
            }
        }
        else {
            ret += c;
            i++;
        }
    }
    return ret;
}

/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else if(c === 34){
                ret.state = 2;
            }
            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 3;
            }
            else if(c === 37){
                ret.state = 4;
            }
            else if(c === 39){
                ret.state = 5;
            }
            else if(c === 40){
                ret.state = 6;
            }
            else if(c === 41){
                ret.state = 7;
            }
            else if(c === 42){
                ret.state = 8;
            }
            else if(c === 43){
                ret.state = 9;
            }
            else if(c === 44){
                ret.state = 10;
            }
            else if(c === 45){
                ret.state = 11;
            }
            else if(c === 47){
                ret.state = 12;
            }
            else if(c === 58){
                ret.state = 13;
            }
            else if(c === 59){
                ret.state = 14;
            }
            else if(c === 60){
                ret.state = 15;
            }
            else if(c === 61){
                ret.state = 16;
            }
            else if(c === 62){
                ret.state = 17;
            }
            else if(c === 63){
                ret.state = 18;
            }
            else if(c === 91){
                ret.state = 19;
            }
            else if(c === 93){
                ret.state = 20;
            }
            else if(c === 94){
                ret.state = 21;
            }
            else if(c === 123){
                ret.state = 22;
            }
            else if(c === 124){
                ret.state = 23;
            }
            else if(c === 125){
                ret.state = 24;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 25;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 37){
                ret.state = 33;
            }
            else if(c === 101){
                ret.state = 34;
            }
            else if(c === 104){
                ret.state = 35;
            }
            else if(c === 105){
                ret.state = 36;
            }
            else if(c === 108){
                ret.state = 37;
            }
            else if(c === 110){
                ret.state = 38;
            }
            else if(c === 111){
                ret.state = 39;
            }
            else if(c === 112){
                ret.state = 40;
            }
            else if(c === 114){
                ret.state = 41;
            }
            else if(c === 116){
                ret.state = 42;
            }
            else if(c === 117){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 6:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 8:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 9:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 10:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 11:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 12:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 42){
                ret.state = 47;
            }
            else if(c === 47){
                ret.state = 48;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 13:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 14:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 15:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 16:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 62){
                ret.state = 49;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 17:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 18:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 19:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 20:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 21:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 22:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 23:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 24:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 25:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 26:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 27:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 28:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 50;
            }
            else if(c === 117 || c === 120){
                ret.state = 51;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 29:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 30:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 31:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 32:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){
                ret.state = 31;
            }
            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 33:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 34:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 109){
                ret.state = 52;
            }
            else if(c === 120){
                ret.state = 53;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 35:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 36:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 109){
                ret.state = 55;
            }
            else if(c === 110){
                ret.state = 56;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 37:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 57;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 38:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 39:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 59;
            }
            else if(c === 117){
                ret.state = 60;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 40:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 61;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 41:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 62;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 42:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 63;
            }
            else if(c === 121){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 43:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 65;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 44:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 45:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 46:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 66;
            }
            else if(c === 117 || c === 120){
                ret.state = 67;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 47:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 68;
            }
            else if(c === 42){
                ret.state = 69;
            }
            else if(c === 47){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 48:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 49:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 50:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 51:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 72;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 52:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 73;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 53:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 74;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 54:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 75;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 55:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 76;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 56:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 77;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 57:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 102){
                ret.state = 78;
            }
            else if(c === 120){
                ret.state = 79;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 58:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 80;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 59:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 81;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 60:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 82;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 61:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 83;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 62:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 84;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 63:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 107){
                ret.state = 85;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 64:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 86;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 65:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 87;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 66:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 67:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 88;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 68:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 68;
            }
            else if(c === 42){
                ret.state = 69;
            }
            else if(c === 47){
                ret.state = 89;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 69:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 46 || c >= 48){
                ret.state = 90;
            }
            else if(c === 47){
                ret.state = 91;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 70:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 47){
                ret.state = 92;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 71:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 72:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 93;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 73:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 94;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 74:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 95;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 75:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 100){
                ret.state = 96;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 76:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 97;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 77:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 98;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 78:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 99;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 79:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 80:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 100;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 81:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 101;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 82:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 102;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 83:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 103;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 84:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 104){
                ret.state = 104;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 85:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 105;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 86:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 106;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 87:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 88:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 107;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 89:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 68;
            }
            else if(c === 42){
                ret.state = 69;
            }
            else if(c === 47){
                ret.state = 89;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 90:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 68;
            }
            else if(c === 42){
                ret.state = 69;
            }
            else if(c === 47){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 91:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 92:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 68;
            }
            else if(c === 42){
                ret.state = 69;
            }
            else if(c === 47){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 93:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 93;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 94:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 121){
                ret.state = 108;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 95:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 109;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 96:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 110;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 97:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 111;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 98:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 99:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 100:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 112;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 101:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 113;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 102:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 117){
                ret.state = 114;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 103:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 104:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 115;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 105:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 116;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 106:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 107:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 44;
            }
            else if(c === 39){
                ret.state = 45;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 107;
            }
            else if(c === 92){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 108:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 109:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 95){
                ret.state = 117;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 110:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 118;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 111:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 119;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 112:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 120;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 113:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 121;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 114:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 122;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 115:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 116:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 117:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 123;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 118:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 119:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 120:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 124;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 121:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 122:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 123:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 125;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 124:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 126;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 125:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 127;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 126:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 127:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA1(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 91 || (c >= 93 && c <= 122) || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 92){
                ret.state = 2;
            }
            else if(c === 123){
                ret.state = 3;
            }
            else if(c === 125){
                ret.state = 4;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 91 || (c >= 93 && c <= 122) || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 92){
                ret.state = 5;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 6;
            }
            else if(c === 123 || c === 125){
                ret.state = 7;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 3:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 4:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 6;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 6:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 91 || (c >= 93 && c <= 122) || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 92){
                ret.state = 5;
            }
            else {
                ret.state = -1;
            } 
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA2(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            ret.state = 1;
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            ret.state = 1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
var jjlexers = [
    moveDFA0,
    moveDFA1,
    moveDFA2,
];
interface DFATable{
    pnext: number[];
    disnext: number[];
    checknext: number[];
    maxAsicii: number;
    classTable: number[];
    unicodeClassTable: number[];
    isEnd: number[];
    hasArc: number[];
};

var jjlexpnext0 = [ 
        68,    68,    68,    68,    68,    68,    68,    68,    68,    69,
        68,    68,    68,    70,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    69,    68,    68,    68,    70,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    69,    68,    68,    68,    89,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    91,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    69,    68,    68,    68,    89,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    69,    68,    68,    68,    70,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    44,    44,
       127,    44,    44,    44,    45,    44,    44,    44,    44,    44,
        44,    44,   107,    44,    44,    44,    44,    44,    44,   107,
        44,    46,    44,    44,    44,   107,   107,   107,   107,   107,
       107,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    26,    26,   126,    27,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    93,    26,    26,    26,    26,
        26,    26,    93,    26,    28,    26,    26,    26,    93,    93,
        93,    93,    93,    93,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    44,    44,   125,    44,    44,    44,
        45,    44,    44,    44,    44,    44,    44,    44,   107,    44,
        44,    44,    44,    44,    44,   107,    44,    46,    44,    44,
        44,   107,   107,   107,   107,   107,   107,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    26,    26,   124,
        27,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    93,    26,    26,    26,    26,    26,    26,    93,    26,
        28,    26,    26,    26,    93,    93,    93,    93,    93,    93,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        71,    71,   123,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    44,    44,   122,    44,    44,    44,    45,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    46,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    26,    26,   121,    27,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    28,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    71,
        71,   120,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    44,    44,   119,    44,    44,    44,    45,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    46,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    26,    26,   118,    27,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    28,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    44,    44,
       117,    44,    44,    44,    45,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    46,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    26,    26,   116,    27,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    28,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,     1,     1,     2,     3,     4,     5,
         6,     7,     8,     9,    10,    11,    12,   115,    13,    14,
        15,    16,    17,    18,     3,    19,   114,    20,    21,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,    22,    23,    24,    25,    29,    78,    63,    59,    55,
        56,    52,    60,    47,    64,    30,   113,    48,   112,    53,
        79,   111,    29,     1,     1,   110,   109,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
       108,   106,    31,    32,   105,   104,   103,   102,   101,    30,
       100,    99,    98,    97,    96,    95,    29,    94,    92,    87,
        86,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    85,    84,    31,    32,    83,    82,
        81,    80,    77,    30,    76,    75,    74,    73,    65,    62,
        29,    61,    58,    57,    54,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    49,    -1,
        31,    32,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,
        -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,
        -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
        -1,    -1,    -1,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    -1,    -1,    31,    32,
        -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,
        -1,    -1,    29,    -1,    -1,    33,    -1,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    -1,
        -1,    34,    31,    32,    35,    36,    -1,    37,    -1,    38,
        39,    40,    41,    66,    42,    43,    66,    -1,    -1,    -1,
        -1,    50,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    66,    -1,
        -1,    50,    66,    -1,    -1,    -1,    50,    -1,    -1,    66,
        50,    -1,    66,    -1,    66,    67,    67,    50,    88,    -1,
        50,    -1,    50,    51,    51,    88,    -1,    -1,    -1,    -1,
        72,    88,    88,    88,    88,    88,    88,    72,    -1,    -1,
        -1,    -1,    -1,    72,    72,    72,    72,    72,    72,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
]; 
var jjlexdisnext0 = [ 
       953,  1022,   901,  1221,  1240,   848,   -53,   -53,   -53,   -53,
       -53,   -53,  1004,   -53,   -53,   -53,  1119,   -53,   -53,   -53,
       -53,   -53,   -53,   -53,   -53,  1177,   795,   -53,  1288,  1133,
      1089,  1045,  1001,   -53,   973,  1083,   971,  1082,  1072,   967,
      1069,  1074,   967,  1065,   742,   -53,  1280,   265,   689,   -53,
       636,  1326,  1066,  1062,  1078,  1063,  1067,   974,  1062,  1056,
      1055,  1067,  1062,  1058,  1029,  1038,   583,  1314,   212,   159,
      1055,   530,   477,  1023,  1023,  1034,  1023,  1018,  1017,   -53,
      1033,  1023,  1016,  1027,  1021,  1023,  1020,   -53,   424,   106,
        53,   -53,     0,   371,  1003,   999,   994,   979,   -53,   -53,
       975,   976,   931,   -53,   923,   864,   -53,   318,   -53,   824,
       755,   700,   648,   599,   541,   -53,   -53,   505,   -53,   -53,
       439,   -53,   -53,   384,   344,   287,   -53,   -53,
]; 
var jjlexchecknext0 = [ 
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
        92,    92,    92,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
        90,    90,    90,    90,    90,    90,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
        89,    89,    89,    89,    89,    89,    89,    89,    89,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        69,    69,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    68,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
        47,    47,    47,    47,    47,    47,    47,    47,   107,   107,
       125,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
       107,    93,    93,   124,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
        93,    93,    93,    93,    88,    88,   123,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
        88,    88,    88,    88,    88,    88,    88,    72,    72,   120,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
        71,    71,   117,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    71,    66,    66,   114,    66,    66,    66,    66,
        66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
        66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
        66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
        66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
        66,    66,    66,    66,    66,    66,    50,    50,   113,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    48,
        48,   112,    48,    48,    48,    48,    48,    48,    48,    48,
        48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
        48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
        48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
        48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
        48,    48,    44,    44,   111,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
        44,    44,    44,    44,    44,    26,    26,   110,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    26,    26,    26,    26,     5,     5,
       109,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
         5,     2,     2,   105,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
         2,     2,     2,     2,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   104,     0,     0,
         0,     0,     0,     0,     0,     0,   102,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,    32,    57,    42,    39,    36,
        36,    34,    39,    12,    42,    32,   101,    12,   100,    34,
        57,    97,    32,     1,     1,    96,    95,    32,    32,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
        32,    32,    32,    32,    32,    32,    32,    32,    32,    31,
        94,    86,    32,    32,    85,    84,    83,    82,    81,    31,
        80,    78,    77,    76,    75,    74,    31,    73,    70,    65,
        64,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    31,    30,    63,    62,    31,    31,    61,    60,
        59,    58,    56,    30,    55,    54,    53,    52,    43,    41,
        30,    40,    38,    37,    35,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
        30,    30,    30,    30,    30,    30,    30,    29,    16,    -1,
        30,    30,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
        -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
        29,    25,    -1,    -1,    29,    29,    -1,    -1,    -1,    -1,
        -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
        -1,    -1,    -1,    25,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    25,     3,    -1,    -1,    25,    25,
        -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
        -1,    -1,     3,    -1,    -1,     4,    -1,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,    -1,
        -1,     4,     3,     3,     4,     4,    -1,     4,    -1,     4,
         4,     4,     4,    46,     4,     4,    46,    -1,    -1,    -1,
        -1,    28,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    46,    -1,
        -1,    28,    46,    -1,    -1,    -1,    28,    -1,    -1,    46,
        28,    -1,    46,    -1,    46,    46,    46,    28,    67,    -1,
        28,    -1,    28,    28,    28,    67,    -1,    -1,    -1,    -1,
        51,    67,    67,    67,    67,    67,    67,    51,    -1,    -1,
        -1,    -1,    -1,    51,    51,    51,    51,    51,    51,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
]; 
var jjlexclassTable0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
         2,     0,     0,     1,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     3,     0,     4,     5,     0,     6,
         7,     8,     9,    10,    11,    12,     0,    13,    14,    14,
        14,    14,    14,    14,    14,    14,    14,    14,    15,    16,
        17,    18,    19,    20,     0,    21,    21,    21,    21,    21,
        21,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,    22,    23,    24,    25,    26,     0,    27,    28,    29,
        30,    31,    32,    33,    34,    35,     4,    36,    37,    38,
        39,    40,    41,     4,    42,    43,    44,    45,     4,     4,
        46,    47,     4,    48,    49,    50,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    51,     0,     0,     0,     0,    51,     0,     0,     0,
         0,     0,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,     0,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
        51,    51,    51,    51,    51,    51,    51,     0,    51,    51,
        51,    51,    51,    51,    51,    51,
]; 
var jjlexunicodeClassTable0 = [ 
        51,   256,   705,     0,   706,   709,    51,   710,   721,     0,
       722,   735,    51,   736,   740,     0,   741,   747,    51,   748,
       748,     0,   749,   749,    51,   750,   750,     0,   751,   767,
        52,   768,   879,    51,   880,   884,     0,   885,   885,    51,
       886,   887,     0,   888,   889,    51,   890,   893,     0,   894,
       901,    51,   902,   902,     0,   903,   903,    51,   904,   906,
         0,   907,   907,    51,   908,   908,     0,   909,   909,    51,
       910,   929,     0,   930,   930,    51,   931,  1013,     0,  1014,
      1014,    51,  1015,  1153,     0,  1154,  1154,    52,  1155,  1159,
         0,  1160,  1161,    51,  1162,  1319,     0,  1320,  1328,    51,
      1329,  1366,     0,  1367,  1368,    51,  1369,  1369,     0,  1370,
      1376,    51,  1377,  1415,     0,  1416,  1424,    52,  1425,  1469,
         0,  1470,  1470,    52,  1471,  1471,     0,  1472,  1472,    52,
      1473,  1474,     0,  1475,  1475,    52,  1476,  1477,     0,  1478,
      1478,    52,  1479,  1479,     0,  1480,  1487,    51,  1488,  1514,
         0,  1515,  1519,    51,  1520,  1522,     0,  1523,  1551,    52,
      1552,  1562,     0,  1563,  1567,    51,  1568,  1610,    52,  1611,
      1641,     0,  1642,  1645,    51,  1646,  1647,    52,  1648,  1648,
        51,  1649,  1747,     0,  1748,  1748,    51,  1749,  1749,    52,
      1750,  1756,     0,  1757,  1758,    52,  1759,  1764,    51,  1765,
      1766,    52,  1767,  1768,     0,  1769,  1769,    52,  1770,  1773,
        51,  1774,  1775,    52,  1776,  1785,    51,  1786,  1788,     0,
      1789,  1790,    51,  1791,  1791,     0,  1792,  1807,    51,  1808,
      1808,    52,  1809,  1809,    51,  1810,  1839,    52,  1840,  1866,
         0,  1867,  1868,    51,  1869,  1957,    52,  1958,  1968,    51,
      1969,  1969,     0,  1970,  1983,    52,  1984,  1993,    51,  1994,
      2026,    52,  2027,  2035,    51,  2036,  2037,     0,  2038,  2041,
        51,  2042,  2042,     0,  2043,  2047,    51,  2048,  2069,    52,
      2070,  2073,    51,  2074,  2074,    52,  2075,  2083,    51,  2084,
      2084,    52,  2085,  2087,    51,  2088,  2088,    52,  2089,  2093,
         0,  2094,  2111,    51,  2112,  2136,    52,  2137,  2139,     0,
      2140,  2207,    51,  2208,  2208,     0,  2209,  2209,    51,  2210,
      2220,     0,  2221,  2275,    52,  2276,  2302,     0,  2303,  2303,
        52,  2304,  2307,    51,  2308,  2361,    52,  2362,  2364,    51,
      2365,  2365,    52,  2366,  2383,    51,  2384,  2384,    52,  2385,
      2391,    51,  2392,  2401,    52,  2402,  2403,     0,  2404,  2405,
        52,  2406,  2415,     0,  2416,  2416,    51,  2417,  2423,     0,
      2424,  2424,    51,  2425,  2431,     0,  2432,  2432,    52,  2433,
      2435,     0,  2436,  2436,    51,  2437,  2444,     0,  2445,  2446,
        51,  2447,  2448,     0,  2449,  2450,    51,  2451,  2472,     0,
      2473,  2473,    51,  2474,  2480,     0,  2481,  2481,    51,  2482,
      2482,     0,  2483,  2485,    51,  2486,  2489,     0,  2490,  2491,
        52,  2492,  2492,    51,  2493,  2493,    52,  2494,  2500,     0,
      2501,  2502,    52,  2503,  2504,     0,  2505,  2506,    52,  2507,
      2509,    51,  2510,  2510,     0,  2511,  2518,    52,  2519,  2519,
         0,  2520,  2523,    51,  2524,  2525,     0,  2526,  2526,    51,
      2527,  2529,    52,  2530,  2531,     0,  2532,  2533,    52,  2534,
      2543,    51,  2544,  2545,     0,  2546,  2560,    52,  2561,  2563,
         0,  2564,  2564,    51,  2565,  2570,     0,  2571,  2574,    51,
      2575,  2576,     0,  2577,  2578,    51,  2579,  2600,     0,  2601,
      2601,    51,  2602,  2608,     0,  2609,  2609,    51,  2610,  2611,
         0,  2612,  2612,    51,  2613,  2614,     0,  2615,  2615,    51,
      2616,  2617,     0,  2618,  2619,    52,  2620,  2620,     0,  2621,
      2621,    52,  2622,  2626,     0,  2627,  2630,    52,  2631,  2632,
         0,  2633,  2634,    52,  2635,  2637,     0,  2638,  2640,    52,
      2641,  2641,     0,  2642,  2648,    51,  2649,  2652,     0,  2653,
      2653,    51,  2654,  2654,     0,  2655,  2661,    52,  2662,  2673,
        51,  2674,  2676,    52,  2677,  2677,     0,  2678,  2688,    52,
      2689,  2691,     0,  2692,  2692,    51,  2693,  2701,     0,  2702,
      2702,    51,  2703,  2705,     0,  2706,  2706,    51,  2707,  2728,
         0,  2729,  2729,    51,  2730,  2736,     0,  2737,  2737,    51,
      2738,  2739,     0,  2740,  2740,    51,  2741,  2745,     0,  2746,
      2747,    52,  2748,  2748,    51,  2749,  2749,    52,  2750,  2757,
         0,  2758,  2758,    52,  2759,  2761,     0,  2762,  2762,    52,
      2763,  2765,     0,  2766,  2767,    51,  2768,  2768,     0,  2769,
      2783,    51,  2784,  2785,    52,  2786,  2787,     0,  2788,  2789,
        52,  2790,  2799,     0,  2800,  2816,    52,  2817,  2819,     0,
      2820,  2820,    51,  2821,  2828,     0,  2829,  2830,    51,  2831,
      2832,     0,  2833,  2834,    51,  2835,  2856,     0,  2857,  2857,
        51,  2858,  2864,     0,  2865,  2865,    51,  2866,  2867,     0,
      2868,  2868,    51,  2869,  2873,     0,  2874,  2875,    52,  2876,
      2876,    51,  2877,  2877,    52,  2878,  2884,     0,  2885,  2886,
        52,  2887,  2888,     0,  2889,  2890,    52,  2891,  2893,     0,
      2894,  2901,    52,  2902,  2903,     0,  2904,  2907,    51,  2908,
      2909,     0,  2910,  2910,    51,  2911,  2913,    52,  2914,  2915,
         0,  2916,  2917,    52,  2918,  2927,     0,  2928,  2928,    51,
      2929,  2929,     0,  2930,  2945,    52,  2946,  2946,    51,  2947,
      2947,     0,  2948,  2948,    51,  2949,  2954,     0,  2955,  2957,
        51,  2958,  2960,     0,  2961,  2961,    51,  2962,  2965,     0,
      2966,  2968,    51,  2969,  2970,     0,  2971,  2971,    51,  2972,
      2972,     0,  2973,  2973,    51,  2974,  2975,     0,  2976,  2978,
        51,  2979,  2980,     0,  2981,  2983,    51,  2984,  2986,     0,
      2987,  2989,    51,  2990,  3001,     0,  3002,  3005,    52,  3006,
      3010,     0,  3011,  3013,    52,  3014,  3016,     0,  3017,  3017,
        52,  3018,  3021,     0,  3022,  3023,    51,  3024,  3024,     0,
      3025,  3030,    52,  3031,  3031,     0,  3032,  3045,    52,  3046,
      3055,     0,  3056,  3072,    52,  3073,  3075,     0,  3076,  3076,
        51,  3077,  3084,     0,  3085,  3085,    51,  3086,  3088,     0,
      3089,  3089,    51,  3090,  3112,     0,  3113,  3113,    51,  3114,
      3123,     0,  3124,  3124,    51,  3125,  3129,     0,  3130,  3132,
        51,  3133,  3133,    52,  3134,  3140,     0,  3141,  3141,    52,
      3142,  3144,     0,  3145,  3145,    52,  3146,  3149,     0,  3150,
      3156,    52,  3157,  3158,     0,  3159,  3159,    51,  3160,  3161,
         0,  3162,  3167,    51,  3168,  3169,    52,  3170,  3171,     0,
      3172,  3173,    52,  3174,  3183,     0,  3184,  3201,    52,  3202,
      3203,     0,  3204,  3204,    51,  3205,  3212,     0,  3213,  3213,
        51,  3214,  3216,     0,  3217,  3217,    51,  3218,  3240,     0,
      3241,  3241,    51,  3242,  3251,     0,  3252,  3252,    51,  3253,
      3257,     0,  3258,  3259,    52,  3260,  3260,    51,  3261,  3261,
        52,  3262,  3268,     0,  3269,  3269,    52,  3270,  3272,     0,
      3273,  3273,    52,  3274,  3277,     0,  3278,  3284,    52,  3285,
      3286,     0,  3287,  3293,    51,  3294,  3294,     0,  3295,  3295,
        51,  3296,  3297,    52,  3298,  3299,     0,  3300,  3301,    52,
      3302,  3311,     0,  3312,  3312,    51,  3313,  3314,     0,  3315,
      3329,    52,  3330,  3331,     0,  3332,  3332,    51,  3333,  3340,
         0,  3341,  3341,    51,  3342,  3344,     0,  3345,  3345,    51,
      3346,  3386,     0,  3387,  3388,    51,  3389,  3389,    52,  3390,
      3396,     0,  3397,  3397,    52,  3398,  3400,     0,  3401,  3401,
        52,  3402,  3405,    51,  3406,  3406,     0,  3407,  3414,    52,
      3415,  3415,     0,  3416,  3423,    51,  3424,  3425,    52,  3426,
      3427,     0,  3428,  3429,    52,  3430,  3439,     0,  3440,  3449,
        51,  3450,  3455,     0,  3456,  3457,    52,  3458,  3459,     0,
      3460,  3460,    51,  3461,  3478,     0,  3479,  3481,    51,  3482,
      3505,     0,  3506,  3506,    51,  3507,  3515,     0,  3516,  3516,
        51,  3517,  3517,     0,  3518,  3519,    51,  3520,  3526,     0,
      3527,  3529,    52,  3530,  3530,     0,  3531,  3534,    52,  3535,
      3540,     0,  3541,  3541,    52,  3542,  3542,     0,  3543,  3543,
        52,  3544,  3551,     0,  3552,  3569,    52,  3570,  3571,     0,
      3572,  3584,    51,  3585,  3632,    52,  3633,  3633,    51,  3634,
      3635,    52,  3636,  3642,     0,  3643,  3647,    51,  3648,  3654,
        52,  3655,  3662,     0,  3663,  3663,    52,  3664,  3673,     0,
      3674,  3712,    51,  3713,  3714,     0,  3715,  3715,    51,  3716,
      3716,     0,  3717,  3718,    51,  3719,  3720,     0,  3721,  3721,
        51,  3722,  3722,     0,  3723,  3724,    51,  3725,  3725,     0,
      3726,  3731,    51,  3732,  3735,     0,  3736,  3736,    51,  3737,
      3743,     0,  3744,  3744,    51,  3745,  3747,     0,  3748,  3748,
        51,  3749,  3749,     0,  3750,  3750,    51,  3751,  3751,     0,
      3752,  3753,    51,  3754,  3755,     0,  3756,  3756,    51,  3757,
      3760,    52,  3761,  3761,    51,  3762,  3763,    52,  3764,  3769,
         0,  3770,  3770,    52,  3771,  3772,    51,  3773,  3773,     0,
      3774,  3775,    51,  3776,  3780,     0,  3781,  3781,    51,  3782,
      3782,     0,  3783,  3783,    52,  3784,  3789,     0,  3790,  3791,
        52,  3792,  3801,     0,  3802,  3803,    51,  3804,  3807,     0,
      3808,  3839,    51,  3840,  3840,     0,  3841,  3863,    52,  3864,
      3865,     0,  3866,  3871,    52,  3872,  3881,     0,  3882,  3892,
        52,  3893,  3893,     0,  3894,  3894,    52,  3895,  3895,     0,
      3896,  3896,    52,  3897,  3897,     0,  3898,  3901,    52,  3902,
      3903,    51,  3904,  3911,     0,  3912,  3912,    51,  3913,  3948,
         0,  3949,  3952,    52,  3953,  3972,     0,  3973,  3973,    52,
      3974,  3975,    51,  3976,  3980,    52,  3981,  3991,     0,  3992,
      3992,    52,  3993,  4028,     0,  4029,  4037,    52,  4038,  4038,
         0,  4039,  4095,    51,  4096,  4138,    52,  4139,  4158,    51,
      4159,  4159,    52,  4160,  4169,     0,  4170,  4175,    51,  4176,
      4181,    52,  4182,  4185,    51,  4186,  4189,    52,  4190,  4192,
        51,  4193,  4193,    52,  4194,  4196,    51,  4197,  4198,    52,
      4199,  4205,    51,  4206,  4208,    52,  4209,  4212,    51,  4213,
      4225,    52,  4226,  4237,    51,  4238,  4238,    52,  4239,  4253,
         0,  4254,  4255,    51,  4256,  4293,     0,  4294,  4294,    51,
      4295,  4295,     0,  4296,  4300,    51,  4301,  4301,     0,  4302,
      4303,    51,  4304,  4346,     0,  4347,  4347,    51,  4348,  4680,
         0,  4681,  4681,    51,  4682,  4685,     0,  4686,  4687,    51,
      4688,  4694,     0,  4695,  4695,    51,  4696,  4696,     0,  4697,
      4697,    51,  4698,  4701,     0,  4702,  4703,    51,  4704,  4744,
         0,  4745,  4745,    51,  4746,  4749,     0,  4750,  4751,    51,
      4752,  4784,     0,  4785,  4785,    51,  4786,  4789,     0,  4790,
      4791,    51,  4792,  4798,     0,  4799,  4799,    51,  4800,  4800,
         0,  4801,  4801,    51,  4802,  4805,     0,  4806,  4807,    51,
      4808,  4822,     0,  4823,  4823,    51,  4824,  4880,     0,  4881,
      4881,    51,  4882,  4885,     0,  4886,  4887,    51,  4888,  4954,
         0,  4955,  4956,    52,  4957,  4959,     0,  4960,  4991,    51,
      4992,  5007,     0,  5008,  5023,    51,  5024,  5108,     0,  5109,
      5120,    51,  5121,  5740,     0,  5741,  5742,    51,  5743,  5759,
         0,  5760,  5760,    51,  5761,  5786,     0,  5787,  5791,    51,
      5792,  5866,     0,  5867,  5869,    51,  5870,  5872,     0,  5873,
      5887,    51,  5888,  5900,     0,  5901,  5901,    51,  5902,  5905,
        52,  5906,  5908,     0,  5909,  5919,    51,  5920,  5937,    52,
      5938,  5940,     0,  5941,  5951,    51,  5952,  5969,    52,  5970,
      5971,     0,  5972,  5983,    51,  5984,  5996,     0,  5997,  5997,
        51,  5998,  6000,     0,  6001,  6001,    52,  6002,  6003,     0,
      6004,  6015,    51,  6016,  6067,    52,  6068,  6099,     0,  6100,
      6102,    51,  6103,  6103,     0,  6104,  6107,    51,  6108,  6108,
        52,  6109,  6109,     0,  6110,  6111,    52,  6112,  6121,     0,
      6122,  6154,    52,  6155,  6157,     0,  6158,  6159,    52,  6160,
      6169,     0,  6170,  6175,    51,  6176,  6263,     0,  6264,  6271,
        51,  6272,  6312,    52,  6313,  6313,    51,  6314,  6314,     0,
      6315,  6319,    51,  6320,  6389,     0,  6390,  6399,    51,  6400,
      6428,     0,  6429,  6431,    52,  6432,  6443,     0,  6444,  6447,
        52,  6448,  6459,     0,  6460,  6469,    52,  6470,  6479,    51,
      6480,  6509,     0,  6510,  6511,    51,  6512,  6516,     0,  6517,
      6527,    51,  6528,  6571,     0,  6572,  6575,    52,  6576,  6592,
        51,  6593,  6599,    52,  6600,  6601,     0,  6602,  6607,    52,
      6608,  6617,     0,  6618,  6655,    51,  6656,  6678,    52,  6679,
      6683,     0,  6684,  6687,    51,  6688,  6740,    52,  6741,  6750,
         0,  6751,  6751,    52,  6752,  6780,     0,  6781,  6782,    52,
      6783,  6793,     0,  6794,  6799,    52,  6800,  6809,     0,  6810,
      6822,    51,  6823,  6823,     0,  6824,  6911,    52,  6912,  6916,
        51,  6917,  6963,    52,  6964,  6980,    51,  6981,  6987,     0,
      6988,  6991,    52,  6992,  7001,     0,  7002,  7018,    52,  7019,
      7027,     0,  7028,  7039,    52,  7040,  7042,    51,  7043,  7072,
        52,  7073,  7085,    51,  7086,  7087,    52,  7088,  7097,    51,
      7098,  7141,    52,  7142,  7155,     0,  7156,  7167,    51,  7168,
      7203,    52,  7204,  7223,     0,  7224,  7231,    52,  7232,  7241,
         0,  7242,  7244,    51,  7245,  7247,    52,  7248,  7257,    51,
      7258,  7293,     0,  7294,  7375,    52,  7376,  7378,     0,  7379,
      7379,    52,  7380,  7400,    51,  7401,  7404,    52,  7405,  7405,
        51,  7406,  7409,    52,  7410,  7412,    51,  7413,  7414,     0,
      7415,  7423,    51,  7424,  7615,    52,  7616,  7654,     0,  7655,
      7675,    52,  7676,  7679,    51,  7680,  7957,     0,  7958,  7959,
        51,  7960,  7965,     0,  7966,  7967,    51,  7968,  8005,     0,
      8006,  8007,    51,  8008,  8013,     0,  8014,  8015,    51,  8016,
      8023,     0,  8024,  8024,    51,  8025,  8025,     0,  8026,  8026,
        51,  8027,  8027,     0,  8028,  8028,    51,  8029,  8029,     0,
      8030,  8030,    51,  8031,  8061,     0,  8062,  8063,    51,  8064,
      8116,     0,  8117,  8117,    51,  8118,  8124,     0,  8125,  8125,
        51,  8126,  8126,     0,  8127,  8129,    51,  8130,  8132,     0,
      8133,  8133,    51,  8134,  8140,     0,  8141,  8143,    51,  8144,
      8147,     0,  8148,  8149,    51,  8150,  8155,     0,  8156,  8159,
        51,  8160,  8172,     0,  8173,  8177,    51,  8178,  8180,     0,
      8181,  8181,    51,  8182,  8188,     0,  8189,  8203,    52,  8204,
      8205,     0,  8206,  8254,    52,  8255,  8256,     0,  8257,  8275,
        52,  8276,  8276,     0,  8277,  8304,    51,  8305,  8305,     0,
      8306,  8318,    51,  8319,  8319,     0,  8320,  8335,    51,  8336,
      8348,     0,  8349,  8399,    52,  8400,  8412,     0,  8413,  8416,
        52,  8417,  8417,     0,  8418,  8420,    52,  8421,  8432,     0,
      8433,  8449,    51,  8450,  8450,     0,  8451,  8454,    51,  8455,
      8455,     0,  8456,  8457,    51,  8458,  8467,     0,  8468,  8468,
        51,  8469,  8469,     0,  8470,  8472,    51,  8473,  8477,     0,
      8478,  8483,    51,  8484,  8484,     0,  8485,  8485,    51,  8486,
      8486,     0,  8487,  8487,    51,  8488,  8488,     0,  8489,  8489,
        51,  8490,  8493,     0,  8494,  8494,    51,  8495,  8505,     0,
      8506,  8507,    51,  8508,  8511,     0,  8512,  8516,    51,  8517,
      8521,     0,  8522,  8525,    51,  8526,  8526,     0,  8527,  8543,
        51,  8544,  8584,     0,  8585, 11263,    51, 11264, 11310,     0,
     11311, 11311,    51, 11312, 11358,     0, 11359, 11359,    51, 11360,
     11492,     0, 11493, 11498,    51, 11499, 11502,    52, 11503, 11505,
        51, 11506, 11507,     0, 11508, 11519,    51, 11520, 11557,     0,
     11558, 11558,    51, 11559, 11559,     0, 11560, 11564,    51, 11565,
     11565,     0, 11566, 11567,    51, 11568, 11623,     0, 11624, 11630,
        51, 11631, 11631,     0, 11632, 11646,    52, 11647, 11647,    51,
     11648, 11670,     0, 11671, 11679,    51, 11680, 11686,     0, 11687,
     11687,    51, 11688, 11694,     0, 11695, 11695,    51, 11696, 11702,
         0, 11703, 11703,    51, 11704, 11710,     0, 11711, 11711,    51,
     11712, 11718,     0, 11719, 11719,    51, 11720, 11726,     0, 11727,
     11727,    51, 11728, 11734,     0, 11735, 11735,    51, 11736, 11742,
         0, 11743, 11743,    52, 11744, 11775,     0, 11776, 11822,    51,
     11823, 11823,     0, 11824, 12292,    51, 12293, 12295,     0, 12296,
     12320,    51, 12321, 12329,    52, 12330, 12335,     0, 12336, 12336,
        51, 12337, 12341,     0, 12342, 12343,    51, 12344, 12348,     0,
     12349, 12352,    51, 12353, 12438,     0, 12439, 12440,    52, 12441,
     12442,     0, 12443, 12444,    51, 12445, 12447,     0, 12448, 12448,
        51, 12449, 12538,     0, 12539, 12539,    51, 12540, 12543,     0,
     12544, 12548,    51, 12549, 12589,     0, 12590, 12592,    51, 12593,
     12686,     0, 12687, 12703,    51, 12704, 12730,     0, 12731, 12783,
        51, 12784, 12799,     0, 12800, 13311,    51, 13312, 19893,     0,
     19894, 19967,    51, 19968, 40908,     0, 40909, 40959,    51, 40960,
     42124,     0, 42125, 42191,    51, 42192, 42237,     0, 42238, 42239,
        51, 42240, 42508,     0, 42509, 42511,    51, 42512, 42527,    52,
     42528, 42537,    51, 42538, 42539,     0, 42540, 42559,    51, 42560,
     42606,    52, 42607, 42607,     0, 42608, 42611,    52, 42612, 42621,
         0, 42622, 42622,    51, 42623, 42647,     0, 42648, 42654,    52,
     42655, 42655,    51, 42656, 42735,    52, 42736, 42737,     0, 42738,
     42774,    51, 42775, 42783,     0, 42784, 42785,    51, 42786, 42888,
         0, 42889, 42890,    51, 42891, 42894,     0, 42895, 42895,    51,
     42896, 42899,     0, 42900, 42911,    51, 42912, 42922,     0, 42923,
     42999,    51, 43000, 43009,    52, 43010, 43010,    51, 43011, 43013,
        52, 43014, 43014,    51, 43015, 43018,    52, 43019, 43019,    51,
     43020, 43042,    52, 43043, 43047,     0, 43048, 43071,    51, 43072,
     43123,     0, 43124, 43135,    52, 43136, 43137,    51, 43138, 43187,
        52, 43188, 43204,     0, 43205, 43215,    52, 43216, 43225,     0,
     43226, 43231,    52, 43232, 43249,    51, 43250, 43255,     0, 43256,
     43258,    51, 43259, 43259,     0, 43260, 43263,    52, 43264, 43273,
        51, 43274, 43301,    52, 43302, 43309,     0, 43310, 43311,    51,
     43312, 43334,    52, 43335, 43347,     0, 43348, 43359,    51, 43360,
     43388,     0, 43389, 43391,    52, 43392, 43395,    51, 43396, 43442,
        52, 43443, 43456,     0, 43457, 43470,    51, 43471, 43471,    52,
     43472, 43481,     0, 43482, 43519,    51, 43520, 43560,    52, 43561,
     43574,     0, 43575, 43583,    51, 43584, 43586,    52, 43587, 43587,
        51, 43588, 43595,    52, 43596, 43597,     0, 43598, 43599,    52,
     43600, 43609,     0, 43610, 43615,    51, 43616, 43638,     0, 43639,
     43641,    51, 43642, 43642,    52, 43643, 43643,     0, 43644, 43647,
        51, 43648, 43695,    52, 43696, 43696,    51, 43697, 43697,    52,
     43698, 43700,    51, 43701, 43702,    52, 43703, 43704,    51, 43705,
     43709,    52, 43710, 43711,    51, 43712, 43712,    52, 43713, 43713,
        51, 43714, 43714,     0, 43715, 43738,    51, 43739, 43741,     0,
     43742, 43743,    51, 43744, 43754,    52, 43755, 43759,     0, 43760,
     43761,    51, 43762, 43764,    52, 43765, 43766,     0, 43767, 43776,
        51, 43777, 43782,     0, 43783, 43784,    51, 43785, 43790,     0,
     43791, 43792,    51, 43793, 43798,     0, 43799, 43807,    51, 43808,
     43814,     0, 43815, 43815,    51, 43816, 43822,     0, 43823, 43967,
        51, 43968, 44002,    52, 44003, 44010,     0, 44011, 44011,    52,
     44012, 44013,     0, 44014, 44015,    52, 44016, 44025,     0, 44026,
     44031,    51, 44032, 55203,     0, 55204, 55215,    51, 55216, 55238,
         0, 55239, 55242,    51, 55243, 55291,     0, 55292, 63743,    51,
     63744, 64109,     0, 64110, 64111,    51, 64112, 64217,     0, 64218,
     64255,    51, 64256, 64262,     0, 64263, 64274,    51, 64275, 64279,
         0, 64280, 64284,    51, 64285, 64285,    52, 64286, 64286,    51,
     64287, 64296,     0, 64297, 64297,    51, 64298, 64310,     0, 64311,
     64311,    51, 64312, 64316,     0, 64317, 64317,    51, 64318, 64318,
         0, 64319, 64319,    51, 64320, 64321,     0, 64322, 64322,    51,
     64323, 64324,     0, 64325, 64325,    51, 64326, 64433,     0, 64434,
     64466,    51, 64467, 64829,     0, 64830, 64847,    51, 64848, 64911,
         0, 64912, 64913,    51, 64914, 64967,     0, 64968, 65007,    51,
     65008, 65019,     0, 65020, 65023,    52, 65024, 65039,     0, 65040,
     65055,    52, 65056, 65062,     0, 65063, 65074,    52, 65075, 65076,
         0, 65077, 65100,    52, 65101, 65103,     0, 65104, 65135,    51,
     65136, 65140,     0, 65141, 65141,    51, 65142, 65276,     0, 65277,
     65295,    52, 65296, 65305,     0, 65306, 65312,    51, 65313, 65338,
         0, 65339, 65342,    52, 65343, 65343,     0, 65344, 65344,    51,
     65345, 65370,     0, 65371, 65381,    51, 65382, 65470,     0, 65471,
     65473,    51, 65474, 65479,     0, 65480, 65481,    51, 65482, 65487,
         0, 65488, 65489,    51, 65490, 65495,     0, 65496, 65497,    51,
     65498, 65500,     0, 65501,Infinity,
]; 
var jjlexisEnd0 = [ 
    0,1,0,1,0,0,1,1,1,1,1,1,0,1,1,
    1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,
    1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
    1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
    0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,
    0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,
    0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,
    0,1,1,0,0,0,1,1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,
    0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,
    1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,
    0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,
    1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,
    1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,
    1,0,0,1,1,1,0,0,
]; 
var jjlextable0: DFATable = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
var jjlexpnext1 = [ 
         6,     6,     7,     7,     1,     2,     3,     4,     1,     5,
         6,     6,     1,     5,    -1,    -1,
]; 
var jjlexdisnext1 = [ 
         4,    12,     0,    -4,    -4,    10,     8,    -4,
]; 
var jjlexchecknext1 = [ 
         2,     2,     2,     2,     0,     0,     0,     0,     6,     6,
         5,     5,     1,     1,    -1,    -1,
]; 
var jjlexclassTable1 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     2,     0,     3,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable1 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd1 = [ 
    1,1,0,1,1,0,1,1,
]; 
var jjlexhasArc1 = [ 
    1,1,1,0,0,1,1,0,
]; 
var jjlextable1: DFATable = {
    pnext: jjlexpnext1,
    disnext: jjlexdisnext1,
    checknext: jjlexchecknext1,
    maxAsicii: 255,
    classTable: jjlexclassTable1,
    unicodeClassTable: jjlexunicodeClassTable1,
    isEnd: jjlexisEnd1,
    hasArc: jjlexhasArc1
};
var jjlexpnext2 = [ 
         1,     1,
]; 
var jjlexdisnext2 = [ 
         1,     0,
]; 
var jjlexchecknext2 = [ 
         1,     0,
]; 
var jjlexclassTable2 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,
]; 
var jjlexunicodeClassTable2 = [ 
         0,   256,Infinity,
]; 
var jjlexisEnd2 = [ 
    0,1,
]; 
var jjlexhasArc2 = [ 
    1,1,
]; 
var jjlextable2: DFATable = {
    pnext: jjlexpnext2,
    disnext: jjlexdisnext2,
    checknext: jjlexchecknext2,
    maxAsicii: 255,
    classTable: jjlexclassTable2,
    unicodeClassTable: jjlexunicodeClassTable2,
    isEnd: jjlexisEnd2,
    hasArc: jjlexhasArc2
};
/*
    dfa tables
*/
var jjdfaTables: DFATable[] = [
    jjlextable0,
    jjlextable1,
    jjlextable2,
];
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,    -1,    -1,     1,    -1,    -1,    22,    23,    28,    29,
        37,    30,    -1,    31,    33,    21,    24,    20,    27,    25,
        26,    36,     3,    35,     4,     1,    -1,     2,    -1,     1,
         1,     1,     1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,    32,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,     8,
        -1,    -1,    -1,    16,    -1,    -1,    15,    -1,    14,    -1,
        -1,    -1,    -1,    -1,    -1,     9,     7,    -1,    12,    19,
        -1,     5,    18,    -1,    -1,    -1,    10,    13,
]; 
var jjlexTokens1 = [ 
        38,    38,    -1,     3,     4,    -1,    38,    39,
]; 
var jjlexTokens2 = [ 
        -1,    40,
]; 

var jjstateCount = 183;
var jjtokenCount = 41;
var jjactERR = 184;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
         9,     7,    15,    16,    17,    18,    94,    10,    11,  -116,
        12,   161,    13,    14,   169,   170,   168,   -53,   127,  -117,
       -53,   -91,   -54,   124,   125,   -54,    48,    49,   160,     5,
       159,   157,   -53,    71,   158,    72,   127,   -54,   -91,  -109,
       -91,   124,   125,   110,    67,    68,   106,  -109,   103,   106,
        27,   106,   165,    67,    68,    27,   106,   111,   183,    77,
        63,   -42,    75,   138,    54,   105,   182,    53,   105,   181,
       105,   180,   150,   178,   177,   105,   176,    64,   150,   174,
       173,   137,   163,   162,   154,   121,   142,   141,   140,   139,
       135,  -109,   131,   130,   129,   121,   118,   -98,   116,   115,
       114,   113,   112,   107,   100,    98,    97,    92,    88,    86,
        85,    81,    80,    79,    74,    70,    65,    58,    56,    55,
        52,    50,    46,    45,    44,    40,    22,    35,    33,    28,
        22,     4,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -41,   131,    -5,   -41,   129,   -41,   -41,    54,   126,   -41,
       -41,   -41,   -41,   126,   106,   -41,   -41,   -41,   125,   -41,
       -41,   -41,   104,    49,   -41,   -41,   -41,   -41,   -41,   -41,
       -41,   -41,   -41,   103,   122,    88,   -41,    -5,   118,   119,
       -41,    63,   -41,   118,    98,    77,   -41,   -41,   -41,   -41,
        40,   -41,   -41,    92,    95,   -41,   -41,   -41,     0,   -41,
       103,    58,   -41,   112,   110,   -41,   -41,   -41,   108,   -41,
       -41,   -41,    96,    87,   -41,   -41,   -41,    87,   -41,   -41,
       -41,   -41,    91,     5,   -41,   105,    81,   103,    15,   -41,
        36,    47,   -41,    79,    44,    20,   -41,    81,    81,    69,
        95,   -41,   -41,   -41,    97,   -41,    96,   -41,   -41,   -41,
        95,   -41,    64,   -41,   -41,    74,    92,   -41,    72,   -41,
        88,    70,   -41,    88,   -41,   -41,    86,    84,   -41,   -41,
       -41,   -41,    61,   -41,    54,   -41,   -41,    12,   -41,   -41,
       -41,    -6,   -41,    49,     2,   -41,     9,    46,   -41,    52,
       -41,     6,    26,   -41,   -41,   -13,   -41,    45,    79,    57,
       -41,    76,    74,    70,   -41,    -3,   -41,   -41,   -41,   -41,
        50,    70,    51,    67,   -41,   -41,   -41,   -41,    40,   -41,
        35,   -41,   -41,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
         2,     2,     2,     2,     2,     2,    83,     2,     2,   151,
         2,   146,     2,     2,   155,   155,   155,   165,   141,    88,
       165,    83,   144,   141,   141,   144,    37,    37,   146,     2,
       146,   146,   165,    58,   146,    58,   137,   144,    83,    90,
        83,   137,   137,    95,   151,   151,    94,    94,    91,    91,
        23,    23,   152,    88,    88,     7,     7,    95,   180,    61,
        50,    90,    61,   152,    41,    94,   178,    41,    91,   173,
        23,   172,   171,   170,   163,     7,   162,    50,   161,   159,
       158,   157,   149,   147,   143,   134,   132,   127,   126,   123,
       121,   120,   118,   116,   115,   112,   110,   106,   104,   100,
        99,    98,    97,    93,    87,    86,    85,    82,    77,    73,
        72,    68,    64,    63,    60,    54,    53,    45,    44,    43,
        39,    38,    35,    34,    33,    22,    18,    14,    13,     8,
         4,     1,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         4,    -1,    -1,     0,    -1,     3,     5,    -1,    -1,   108,
       108,   108,   108,    -1,    -1,    19,    20,    21,     1,    76,
        77,    78,    29,     7,    23,    24,    25,    27,     9,    10,
        11,   108,    13,    14,    -1,    -1,    75,    -1,    -1,    -1,
        22,    -1,    12,    -1,    -1,    17,    84,    80,    81,    33,
        -1,    30,     8,    -1,    -1,    16,     2,    18,    -1,    83,
        87,    38,    28,    -1,    -1,   111,   113,   114,    -1,    15,
        79,    84,    93,    -1,     6,    32,    34,    -1,    31,    26,
       112,    82,   103,    95,    91,    -1,    -1,    50,   115,    85,
       104,    -1,    92,    96,    41,    -1,    89,    -1,    -1,    -1,
        -1,   105,   106,   107,    -1,   102,    94,    99,   100,    86,
        -1,    50,    40,    50,   117,    -1,    -1,    88,    -1,    36,
        41,    -1,    45,    -1,    47,    48,    -1,    -1,   101,    98,
        35,    39,    -1,    43,    40,    56,    67,   108,    46,    49,
       112,   108,    37,    51,    56,    55,    -1,    69,    72,    73,
        44,   109,    -1,    56,    54,    61,    50,    68,    -1,    -1,
        66,    -1,    -1,    -1,    42,    56,    57,    58,    59,    60,
        -1,    70,    -1,    -1,    71,    74,   110,    62,    -1,    64,
        -1,    63,    65,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
         5,   155,   101,   132,     7,    94,    92,    23,    24,   154,
       146,   166,   163,   150,    65,    68,   154,   146,   152,   122,
       103,   108,   132,    65,    68,   100,    89,    90,    72,    46,
        40,    38,   174,   171,    98,   135,   133,   127,    75,    22,
        77,   178,   147,   148,   125,   127,   142,   119,    25,   116,
       125,   127,   107,   131,   132,   133,   127,    95,    82,    83,
        81,    60,    56,    50,    35,    33,    31,   127,   170,   135,
        25,    18,    19,    20,     1,   151,     2,   165,   145,   146,
       143,   144,   145,   146,   121,   135,    88,   133,   127,   118,
       135,    86,    61,    58,    59,    60,    42,   127,    36,    20,
        41,    37,    30,   127,    29,   127,    28,   127,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
        73,   -60,    -4,   -60,    36,   -60,    34,    -2,   -60,    53,
        51,    49,    13,   -60,    59,   -60,   -60,   -60,    62,   -60,
       -60,    63,    19,    20,   -60,   -60,   -60,    89,   -60,   -60,
       -60,    43,   -60,   -60,   -60,   -60,   -60,   -10,   -60,    50,
       -60,   -60,   -60,   -60,   -60,    55,    53,   -60,   -60,    78,
       -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,
       -15,    23,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,
       -60,    19,    13,   -60,   -60,   -60,    75,   -60,   -60,   -60,
        30,   -60,   -25,   -42,   -60,    13,   -60,    11,   -34,   -60,
       -17,   -30,   -60,   -60,     2,   -60,   -60,   -60,   -60,   -60,
       -60,   -60,   -60,   -60,   -60,   -60,     0,   -60,   -60,   -60,
       -60,    66,    29,    61,   -60,   -60,   -60,   -60,   -60,   -60,
        34,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,
       -60,   -60,   -60,   -60,    28,    55,   -60,    -9,   -60,   -60,
        19,    -3,   -60,   -60,   -11,   -60,   -29,   -60,   -60,   -60,
       -60,   -43,   -60,    51,   -60,   -18,    45,     2,   -60,   -60,
       -60,    -2,   -60,   -60,   -60,   -18,   -60,   -60,   -60,   -60,
       -60,     9,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,
       -60,   -60,   -60,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     0,     6,     2,     0,     0,     6,     2,     4,     2,
         2,     2,     3,     2,     2,     4,     3,     0,     1,     1,
         1,     1,     2,     1,     1,     1,     4,     0,     3,     0,
         1,     3,     2,     0,     0,     6,     5,     7,     0,     2,
         0,     0,     4,     1,     3,     1,     2,     1,     1,     2,
         0,     2,     3,     1,     2,     1,     0,     3,     1,     1,
         1,     0,     3,     4,     3,     4,     1,     1,     0,     1,
         0,     3,     1,     1,     3,     2,     1,     1,     0,     5,
         1,     1,     3,     1,     0,     4,     4,     0,     3,     1,
         1,     1,     2,     0,     2,     0,     1,     0,     4,     2,
         2,     3,     1,     0,     1,     2,     2,     2,     0,     0,
         5,     2,     0,     1,     1,     0,     0,     5,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     2,     1,     3,     3,     5,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     6,     6,     7,     7,     8,
         8,     8,     9,     9,    10,    10,    11,    11,    12,    12,
        13,    13,    14,    14,    16,    15,    15,    15,    17,    18,
        18,    20,    19,    19,    21,    21,    22,    22,    22,    22,
        24,    23,    25,    25,    26,    26,    28,    27,    29,    29,
        29,    29,    30,    30,    30,    30,    30,    31,    31,    32,
        32,    33,    33,    34,    34,    35,    35,    36,    38,    37,
        39,    39,    40,    40,    42,    41,    43,    43,    44,    44,
        45,    45,    46,    46,    47,    47,    48,    49,    48,    48,
        48,    50,    50,    51,    51,    51,    52,    52,    54,    55,
        53,    56,    56,    57,    57,    58,    59,    57,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",              "NAME",            "STRING",
            "OPEN_BLOCK",       "CLOSE_BLOCK",           "OPT_DIR",
               "LEX_DIR",         "TOKEN_DIR",          "LEFT_DIR",
             "RIGHT_DIR",      "NONASSOC_DIR",           "USE_DIR",
            "HEADER_DIR",     "EXTRA_ARG_DIR",             "EMPTY",
              "TYPE_DIR",          "PREC_DIR",          "INIT_DIR",
            "OUTPUT_DIR",        "IMPORT_DIR",                "GT",
                    "LT",               "BRA",               "KET",
                   "EQU",              "CBRA",              "CKET",
              "QUESTION",              "STAR",              "PLUS",
                  "DASH",             "COLON",             "ARROW",
                   "EOL",         "SEPERATOR",                "OR",
                 "WEDGE",             "COMMA",          "ANY_CODE",
    "ESCAPED_CHAR_IN_BLOCK",  "ANY_EPLOGUE_CODE",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,                null,
                     "{",                 "}",           "%option",
                  "%lex",            "%token",             "%left",
                "%right",         "%nonassoc",              "%use",
               "%header",        "%extra_arg",            "%empty",
                 "%type",             "%prec",             "%init",
               "%output",           "%import",                 ">",
                     "<",                 "(",                 ")",
                     "=",                 "[",                 "]",
                     "?",                 "*",                 "+",
                     "-",                 ":",                "=>",
                     ";",                "%%",                 "|",
                     "^",                 ",",                null,
                    null,                null,
]; 


function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}
class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
interface Parser{
    init(ctx1: Context, b: GBuilder);
    accept(s: string);
    end();
    halt();
    on(ent: string, cb: (a1?, a2?, a3?) => any);
}
function createParser(): Parser {
    // members for lexer
    var jjlexState: number[];
    var jjstate: number;
    var jjmatched: string;
    var jjtoken: Token;
    
    var jjmarker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    var jjbackupCount: number;

    var jjline: number;
    var jjcolumn: number;
    var jjtline: number;
    var jjtcolumn: number;

    // members for parser
    var jjlrState: number[];
    var jjsematicS: JNode[] = [];
    var jjsematicVal: JNode;

    var jjstop;

    var jjhandlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    
    let gb: GBuilder;
    let ctx: Context;
    let assoc: Assoc;
    let lexacts: LexAction[];
    let ruleLhs: JNode;


    return {
        init,
        on,
        accept,
        end,
        halt
    };
    function init(ctx1: Context, b: GBuilder){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;

        jjstop = false;
        
    gb = b;
    ctx = ctx1;

    }
    /**
     *  set 
     */
    function jjsetImg(s: string){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid: number){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjreturnToken(){
        jjemit('token', jjtokenNames[jjtoken.id], jjtoken.val);
        while(!jjstop && !jjacceptToken(jjtoken));
        jjtoken.id = -1;
    }
    function jjemit(name: string, a1?, a2?, a3?){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name: string, cb: (a1?, a2?, a3?) => any){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg("");
                break;
            case 3:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            case 22:
                 jjsematicVal = nodeFromTrivalToken(jjtoken); 
                break;
            case 24:
                 jjsematicVal = nodeFromTrivalToken(jjtoken); 
                break;
            case 25:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            case 27:
                 jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); 
                break;
            case 29:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            case 30:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            case 31:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            case 32:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            case 45:
                 jjsematicVal = nodeFromToken(jjtoken); jjsematicVal.val = unescape(jjsematicVal.val.substr(1, jjsematicVal.val.length - 2)); 
                break;
            case 48:
                jjsetImg("");
                break;
            case 71:
                jjsetImg("");
                break;
            case 91:
                jjsetImg("");
                break;
            default:;
        }
    }
    function jjdoLexAction1(jjstaten: number){
        let jjtk = jjlexTokens1[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 0:
                 jjsematicVal = newNode(jjtoken.val); 
                break;
            case 1:
                 jjsematicVal = newNode(jjtoken.val); 
                break;
            case 3:
                 jjsematicVal = nodeFromTrivalToken(jjtoken); 
                break;
            case 4:
                 jjsematicVal = nodeFromTrivalToken(jjtoken); 
                break;
            case 6:
                 jjsematicVal = newNode(jjtoken.val); 
                break;
            case 7:
                 jjsematicVal = newNode(jjtoken.val.charAt(1)); 
                break;
            default:;
        }
    }
    function jjdoLexAction2(jjstaten: number){
        let jjtk = jjlexTokens2[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                 jjsematicVal = nodeFromToken(jjtoken); 
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            case 1:
                jjdoLexAction1(state);
                break;
            case 2:
                jjdoLexAction2(state);
                break;
            default:;
        }
        jjtoken.id !== -1 && jjreturnToken();
    }
    function jjrollback(): string{
        let ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c: string){
        c === '\n' ? (jjline++, jjcolumn = 0) : (jjcolumn += c.charCodeAt(0) > 0xff ? 2 : 1);
        jjmatched += c;
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(c: string){
        var lexstate = jjlexState[jjlexState.length - 1];
        var retn = { state: jjstate, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = retn.state;
                    return jjconsume(c);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', c, jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = retn.state;
                // character consumed
                return jjconsume(c);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjreturnToken();
            return true;
        }
        else {
            let lexstate = jjlexState[jjlexState.length - 1];
            let retn = { state: jjstate, hasArc: false, isEnd: false };
            jjlexers[lexstate](-1, retn);
            if(retn.isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                let s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s: string){
        for(let i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum: number){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
            case 1:
                /* 1: @0 => */
                jjlexState.push(2);
                break;
            case 5:
                /* 5: @1 => */
                { gb.lexBuilder.prepareLex(); }
                break;
            case 7:
                /* 7: option => associativeDir assocTokens */
                { gb.incPr(); }
                break;
            case 9:
                /* 9: option => "%header" block */
                var b = jjsematicS[jjsp - 1];
                { gb.setHeader(b); }
                break;
            case 10:
                /* 10: option => "%extra_arg" block */
                var b = jjsematicS[jjsp - 1];
                { gb.setExtraArg(b); }
                break;
            case 11:
                /* 11: option => "%type" block */
                var ty = jjsematicS[jjsp - 1];
                { gb.setType(ty); }
                break;
            case 12:
                /* 12: option => "%init" block block */
                var args = jjsematicS[jjsp - 2];
                var b = jjsematicS[jjsp - 1];
                { gb.setInit(args, b); }
                break;
            case 13:
                /* 13: option => "%output" <STRING> */
                var op = jjsematicS[jjsp - 1];
                { gb.setOutput(op); }
                break;
            case 15:
                /* 15: tokenDefs => tokenDefs "<" <NAME> ">" */
                var t = jjsematicS[jjsp - 2];
                { gb.defToken(t, null); }
                break;
            case 16:
                /* 16: tokenDefs => "<" <NAME> ">" */
                var t = jjsematicS[jjsp - 2];
                { gb.defToken(t, null); }
                break;
            case 18:
                /* 18: epilogue => <ANY_EPLOGUE_CODE> */
                var ep = jjsematicS[jjsp - 1];
                { gb.setEpilogue(ep); }
                break;
            case 19:
                /* 19: associativeDir => "%left" */
                { assoc = Assoc.LEFT; }
                break;
            case 20:
                /* 20: associativeDir => "%right" */
                { assoc = Assoc.RIGHT; }
                break;
            case 21:
                /* 21: associativeDir => "%nonassoc" */
                { assoc = Assoc.NON; }
                break;
            case 24:
                /* 24: assocToken => tokenRef */
                var t = jjsematicS[jjsp - 1];
                { gb.defineTokenPrec(t, assoc, t.ext); }
                break;
            case 25:
                /* 25: assocToken => <NAME> */
                var t = jjsematicS[jjsp - 1];
                { gb.defineTokenPrec(t, assoc, TokenRefType.NAME); }
                break;
            case 26:
                /* 26: optionBody => optionBody <NAME> "=" <STRING> */
                var name = jjsematicS[jjsp - 3];
                var val = jjsematicS[jjsp - 1];
                { gb.setOpt(name, val); }
                break;
            case 29:
                /* 29: states_ => */
                { gb.lexBuilder.selectState('DEFAULT'); }
                break;
            case 30:
                /* 30: states => <NAME> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); }
                break;
            case 31:
                /* 31: states => states "," <NAME> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.selectState(s.val); }
                break;
            case 34:
                /* 34: @2 => */
                var v = jjsematicS[jjsp - 1];
                { gb.lexBuilder.prepareVar(v); }
                break;
            case 35:
                /* 35: lexBodyItem => <NAME> @2 "=" "<" regexp ">" */
                var v = jjsematicS[jjsp - 6];
                { gb.lexBuilder.endVar(); }
                break;
            case 36:
                /* 36: lexBodyItem => newState "<" regexp ">" lexAction_ */
                { gb.lexBuilder.end(lexacts, '(untitled)'); }
                break;
            case 37:
                /* 37: lexBodyItem => newState "<" <NAME> ":" regexp ">" lexAction_ */
                var tn = jjsematicS[jjsp - 5];
                { 
    let tdef = gb.defToken(tn, gb.lexBuilder.getPossibleAlias());
    lexacts.push(returnToken(tdef));
    gb.lexBuilder.end(lexacts, tn.val);
}
                break;
            case 38:
                /* 38: newState => */
                { gb.lexBuilder.newState(); }
                break;
            case 40:
                /* 40: lexAction_ => */
                { lexacts = []; }
                break;
            case 41:
                /* 41: @3 => */
                { lexacts = []; }
                break;
            case 43:
                /* 43: lexAction => block */
                var b = jjsematicS[jjsp - 1];
                { lexacts = [blockAction(b.val, b.startLine)]; }
                break;
            case 46:
                /* 46: lexActionItem => "+" <NAME> */
                var vn = jjsematicS[jjsp - 1];
                { gb.addPushStateAction(lexacts, vn); }
                break;
            case 47:
                /* 47: lexActionItem => "-" */
                { lexacts.push(popState()); }
                break;
            case 48:
                /* 48: lexActionItem => block */
                var b = jjsematicS[jjsp - 1];
                { lexacts.push(blockAction(b.val, b.startLine)); }
                break;
            case 49:
                /* 49: lexActionItem => "=" <STRING> */
                var s = jjsematicS[jjsp - 1];
                { lexacts.push(setImg(s.val)); }
                break;
            case 50:
                /* 50: @4 => */
                { gb.lexBuilder.enterUnion(); }
                break;
            case 51:
                /* 51: regexp => @4 union */
                { gb.lexBuilder.leaveUnion(); }
                break;
            case 52:
                /* 52: union => union "|" simpleRE */
                { gb.lexBuilder.endUnionItem(); }
                break;
            case 53:
                /* 53: union => simpleRE */
                { gb.lexBuilder.endUnionItem(); }
                break;
            case 56:
                /* 56: @5 => */
                { gb.lexBuilder.enterSimple(); }
                break;
            case 57:
                /* 57: basicRE => @5 primitiveRE rePostfix */
                var suffix = jjsematicS[jjsp - 1];
                { gb.lexBuilder.simplePostfix(suffix.val as (''|'?'|'+'|'*')); }
                break;
            case 58:
                /* 58: rePostfix => "+" */
                { jjtop = newNode('+'); }
                break;
            case 59:
                /* 59: rePostfix => "?" */
                { jjtop = newNode('?'); }
                break;
            case 60:
                /* 60: rePostfix => "*" */
                { jjtop = newNode('*'); }
                break;
            case 61:
                /* 61: rePostfix => */
                { jjtop = newNode(''); }
                break;
            case 64:
                /* 64: primitiveRE => "<" <NAME> ">" */
                var n = jjsematicS[jjsp - 2];
                { gb.lexBuilder.addVar(n); }
                break;
            case 65:
                /* 65: primitiveRE => "%import" "(" <STRING> ")" */
                var i = jjsematicS[jjsp - 2];
                { gb.lexBuilder.importVar(i); }
                break;
            case 66:
                /* 66: primitiveRE => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.addString(s.val); }
                break;
            case 67:
                /* 67: inverse_ => "^" */
                { gb.lexBuilder.beginSet(true); }
                break;
            case 68:
                /* 68: inverse_ => */
                { gb.lexBuilder.beginSet(false); }
                break;
            case 73:
                /* 73: setREItem => <STRING> */
                var s = jjsematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(s, s); }
                break;
            case 74:
                /* 74: setREItem => <STRING> "-" <STRING> */
                var from = jjsematicS[jjsp - 3];
                var to = jjsematicS[jjsp - 1];
                { gb.lexBuilder.addSetItem(from, to); }
                break;
            case 78:
                /* 78: @6 => */
                var n = jjsematicS[jjsp - 1];
                { ruleLhs = n; }
                break;
            case 84:
                /* 84: @7 => */
                { gb.prepareRule(ruleLhs); }
                break;
            case 85:
                /* 85: rule => @7 ruleHead ruleBody ruleTrailer */
                { gb.commitRule(); }
                break;
            case 88:
                /* 88: varUseList => varUseList "," <NAME> */
                var vn = jjsematicS[jjsp - 1];
                { gb.addRuleUseVar(vn); }
                break;
            case 89:
                /* 89: varUseList => <NAME> */
                var vn = jjsematicS[jjsp - 1];
                { gb.addRuleUseVar(vn); }
                break;
            case 94:
                /* 94: itemName => <NAME> "=" */
                var itn = jjsematicS[jjsp - 2];
                { gb.addRuleSematicVar(itn); }
                break;
            case 96:
                /* 96: ruleItem => <NAME> */
                var t = jjsematicS[jjsp - 1];
                { gb.addRuleItem(t, TokenRefType.NAME); }
                break;
            case 97:
                /* 97: @8 => */
                var vn = jjsematicS[jjsp - 2];
                { gb.addRuleSematicVar(vn); }
                break;
            case 98:
                /* 98: ruleItem => <NAME> "=" @8 <NAME> */
                var vn = jjsematicS[jjsp - 4];
                var t = jjsematicS[jjsp - 1];
                { gb.addRuleItem(t, TokenRefType.NAME); }
                break;
            case 99:
                /* 99: ruleItem => itemName tokenRef */
                var t = jjsematicS[jjsp - 1];
                { gb.addRuleItem(t, t.ext); }
                break;
            case 100:
                /* 100: ruleItem => itemName lexAction */
                { gb.addAction(lexacts); }
                break;
            case 101:
                /* 101: tokenRef => "<" <NAME> ">" */
                var t = jjsematicS[jjsp - 2];
                { jjtop = t; jjtop.ext = TokenRefType.TOKEN; }
                break;
            case 102:
                /* 102: tokenRef => <STRING> */
                { jjtop.ext = TokenRefType.STRING; }
                break;
            case 105:
                /* 105: ruleTrailer => rulePrec lexAction */
                { gb.addAction(lexacts); }
                break;
            case 106:
                /* 106: rulePrec => "%prec" <NAME> */
                var t = jjsematicS[jjsp - 1];
                { gb.defineRulePr(t, TokenRefType.NAME); }
                break;
            case 107:
                /* 107: rulePrec => "%prec" tokenRef */
                var t = jjsematicS[jjsp - 1];
                { gb.defineRulePr(t, t.ext); }
                break;
            case 108:
                /* 108: @9 => */
                jjlexState.push(1);
                break;
            case 109:
                /* 109: @10 => */
                var open = jjsematicS[jjsp - 2];
                var bl = jjsematicS[jjsp - 1];
                jjlexState.pop();
                break;
            case 110:
                /* 110: block => @9 "{" innerBlock @10 "}" */
                var open = jjsematicS[jjsp - 4];
                var bl = jjsematicS[jjsp - 3];
                var close = jjsematicS[jjsp - 1];
                { jjtop = nodeBetween(open, close, bl.val); }
                break;
            case 111:
                /* 111: innerBlock => innerBlock innerBlockItem */
                var b = jjsematicS[jjsp - 1];
                { jjtop.val += b.val; }
                break;
            case 112:
                /* 112: innerBlock => */
                { jjtop = newNode(''); }
                break;
            case 115:
                /* 115: @11 => */
                jjlexState.push(1);
                break;
            case 116:
                /* 116: @12 => */
                var b = jjsematicS[jjsp - 1];
                jjlexState.pop();
                break;
            case 117:
                /* 117: innerBlockItem => @11 "{" innerBlock @12 "}" */
                var b = jjsematicS[jjsp - 3];
                { jjtop = newNode(''); jjtop.val = '{' + b.val + '}'; }
                break;
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }

    function jjacceptToken(t: Token){
        // look up action table
        var cstate = jjlrState[jjlrState.length - 1];
        var ind = jjdisact[cstate] + t.id;
        var act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            jjsyntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                jjstop = true;
                jjemit('accept');
                return true;
            }
            else {
                jjlrState.push(act - 1);
                jjsematicS.push(jjsematicVal);
                jjsematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            jjdoReduction(-act - 1);
            return false;
        }
        else {
            // error
            jjsyntaxError(t);
            // force consume
            return true;
        }
    }
    function jjsyntaxError(t: Token){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state: number){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk: number){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}

function charPosition(c: string, line: number, column: number): Position{
    return {
        startLine: line,
        startColumn: column,
        endLine: line,
        endColumn: c.charCodeAt(0) > 0xff ? column + 1 : column
    }
}
export function parse(ctx: Context, source: string): File{
    let parser = createParser();
    let err = false;
    parser.on('lexicalerror', (c, line, column) => {
        ctx.requireLines((ctx, lines) => {
            let msg2 = `unexpected character ${c}`;
            msg2 += ' ' + markPosition(charPosition(c, line, column), lines);
            ctx.err(new JsccError(msg2, 'Lexical error'));
        });
        // ctx.err(new CompilationError(msg, line));
        parser.halt();
        err = true;
    });
    parser.on('syntaxerror', (msg, token) => {
        // ctx.err(new CompilationError(msg, token.startLine));
        ctx.requireLines((ctx, lines) => {
            let msg2 = markPosition(token, lines) + endl + msg;
            ctx.err(new JsccError(msg2, 'Syntax error'));
        });
        parser.halt();
        err = true;
    });
    let gb = createFileBuilder(ctx);
    parser.init(ctx, gb);
    parser.accept(source);
    parser.end();
    if(err){
        return null;
    }
    else {
        return gb.build();
    }
}