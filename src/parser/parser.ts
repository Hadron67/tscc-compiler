/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

import { GBuilder, TokenRefType } from './gbuilder';
import { Assoc } from '../grammar/token-entry';
import { CompilationError as E, CompilationError } from '../util/E';
import { InputStream } from '../util/io';
import { Context } from '../util/context';
import { LexAction, returnToken, blockAction, pushState, popState, setImg } from '../lexer/action';


/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else if(c === 34){
                ret.state = 2;
            }
            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 3;
            }
            else if(c === 37){
                ret.state = 4;
            }
            else if(c === 39){
                ret.state = 5;
            }
            else if(c === 40){
                ret.state = 6;
            }
            else if(c === 41){
                ret.state = 7;
            }
            else if(c === 42){
                ret.state = 8;
            }
            else if(c === 43){
                ret.state = 9;
            }
            else if(c === 44){
                ret.state = 10;
            }
            else if(c === 45){
                ret.state = 11;
            }
            else if(c === 47){
                ret.state = 12;
            }
            else if(c === 58){
                ret.state = 13;
            }
            else if(c === 59){
                ret.state = 14;
            }
            else if(c === 60){
                ret.state = 15;
            }
            else if(c === 61){
                ret.state = 16;
            }
            else if(c === 62){
                ret.state = 17;
            }
            else if(c === 63){
                ret.state = 18;
            }
            else if(c === 91){
                ret.state = 19;
            }
            else if(c === 93){
                ret.state = 20;
            }
            else if(c === 94){
                ret.state = 21;
            }
            else if(c === 123){
                ret.state = 22;
            }
            else if(c === 124){
                ret.state = 23;
            }
            else if(c === 125){
                ret.state = 24;
            }
            else {
                ret.state = -1;
            }
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            }
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            }
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 28;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 29;
            }
            else {
                ret.state = -1;
            }
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 37){
                ret.state = 30;
            }
            else if(c === 101){
                ret.state = 31;
            }
            else if(c === 104){
                ret.state = 32;
            }
            else if(c === 108){
                ret.state = 33;
            }
            else if(c === 110){
                ret.state = 34;
            }
            else if(c === 111){
                ret.state = 35;
            }
            else if(c === 114){
                ret.state = 36;
            }
            else if(c === 117){
                ret.state = 37;
            }
            else {
                ret.state = -1;
            }
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 38;
            }
            else if(c === 39){
                ret.state = 39;
            }
            else if(c === 92){
                ret.state = 40;
            }
            else {
                ret.state = -1;
            }
            break;
        case 6:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 8:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 9:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 10:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 11:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 12:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 42){
                ret.state = 41;
            }
            else if(c === 47){
                ret.state = 42;
            }
            else {
                ret.state = -1;
            }
            break;
        case 13:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 14:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 15:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 16:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 62){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            }
            break;
        case 17:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 18:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 19:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 20:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 21:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 22:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 23:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 24:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 25:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            }
            break;
        case 26:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 27:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 44;
            }
            else if(c === 117 || c === 120){
                ret.state = 45;
            }
            else {
                ret.state = -1;
            }
            break;
        case 28:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 28;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 29;
            }
            else {
                ret.state = -1;
            }
            break;
        case 29:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 28;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 29;
            }
            else {
                ret.state = -1;
            }
            break;
        case 30:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 31:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 109){
                ret.state = 46;
            }
            else if(c === 120){
                ret.state = 47;
            }
            else {
                ret.state = -1;
            }
            break;
        case 32:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 48;
            }
            else {
                ret.state = -1;
            }
            break;
        case 33:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 49;
            }
            else {
                ret.state = -1;
            }
            break;
        case 34:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 50;
            }
            else {
                ret.state = -1;
            }
            break;
        case 35:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 51;
            }
            else {
                ret.state = -1;
            }
            break;
        case 36:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 52;
            }
            else {
                ret.state = -1;
            }
            break;
        case 37:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 53;
            }
            else {
                ret.state = -1;
            }
            break;
        case 38:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 38;
            }
            else if(c === 39){
                ret.state = 39;
            }
            else if(c === 92){
                ret.state = 40;
            }
            else {
                ret.state = -1;
            }
            break;
        case 39:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 40:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 54;
            }
            else if(c === 117 || c === 120){
                ret.state = 55;
            }
            else {
                ret.state = -1;
            }
            break;
        case 41:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 56;
            }
            else if(c === 42){
                ret.state = 57;
            }
            else if(c === 47){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            }
            break;
        case 42:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 59;
            }
            else {
                ret.state = -1;
            }
            break;
        case 43:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 44:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            }
            break;
        case 45:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 60;
            }
            else {
                ret.state = -1;
            }
            break;
        case 46:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 61;
            }
            else {
                ret.state = -1;
            }
            break;
        case 47:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 62;
            }
            else {
                ret.state = -1;
            }
            break;
        case 48:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 63;
            }
            else {
                ret.state = -1;
            }
            break;
        case 49:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 102){
                ret.state = 64;
            }
            else if(c === 120){
                ret.state = 65;
            }
            else {
                ret.state = -1;
            }
            break;
        case 50:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 66;
            }
            else {
                ret.state = -1;
            }
            break;
        case 51:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 67;
            }
            else {
                ret.state = -1;
            }
            break;
        case 52:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 68;
            }
            else {
                ret.state = -1;
            }
            break;
        case 53:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            }
            break;
        case 54:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 38;
            }
            else if(c === 39){
                ret.state = 39;
            }
            else if(c === 92){
                ret.state = 40;
            }
            else {
                ret.state = -1;
            }
            break;
        case 55:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            }
            break;
        case 56:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 56;
            }
            else if(c === 42){
                ret.state = 57;
            }
            else if(c === 47){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            }
            break;
        case 57:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 46 || c >= 48){
                ret.state = 72;
            }
            else if(c === 47){
                ret.state = 73;
            }
            else {
                ret.state = -1;
            }
            break;
        case 58:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 47){
                ret.state = 74;
            }
            else {
                ret.state = -1;
            }
            break;
        case 59:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 59;
            }
            else {
                ret.state = -1;
            }
            break;
        case 60:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 75;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            }
            break;
        case 61:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 76;
            }
            else {
                ret.state = -1;
            }
            break;
        case 62:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 77;
            }
            else {
                ret.state = -1;
            }
            break;
        case 63:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 100){
                ret.state = 78;
            }
            else {
                ret.state = -1;
            }
            break;
        case 64:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 79;
            }
            else {
                ret.state = -1;
            }
            break;
        case 65:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 66:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 80;
            }
            else {
                ret.state = -1;
            }
            break;
        case 67:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 81;
            }
            else {
                ret.state = -1;
            }
            break;
        case 68:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 104){
                ret.state = 82;
            }
            else {
                ret.state = -1;
            }
            break;
        case 69:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 70:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 38;
            }
            else if(c === 39){
                ret.state = 39;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 83;
            }
            else if(c === 92){
                ret.state = 40;
            }
            else {
                ret.state = -1;
            }
            break;
        case 71:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 56;
            }
            else if(c === 42){
                ret.state = 57;
            }
            else if(c === 47){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            }
            break;
        case 72:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 56;
            }
            else if(c === 42){
                ret.state = 57;
            }
            else if(c === 47){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            }
            break;
        case 73:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 74:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 56;
            }
            else if(c === 42){
                ret.state = 57;
            }
            else if(c === 47){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            }
            break;
        case 75:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 25;
            }
            else if(c === 34){
                ret.state = 26;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 75;
            }
            else if(c === 92){
                ret.state = 27;
            }
            else {
                ret.state = -1;
            }
            break;
        case 76:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 121){
                ret.state = 84;
            }
            else {
                ret.state = -1;
            }
            break;
        case 77:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 85;
            }
            else {
                ret.state = -1;
            }
            break;
        case 78:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 86;
            }
            else {
                ret.state = -1;
            }
            break;
        case 79:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 80:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 87;
            }
            else {
                ret.state = -1;
            }
            break;
        case 81:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 88;
            }
            else {
                ret.state = -1;
            }
            break;
        case 82:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 89;
            }
            else {
                ret.state = -1;
            }
            break;
        case 83:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 38;
            }
            else if(c === 39){
                ret.state = 39;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 83;
            }
            else if(c === 92){
                ret.state = 40;
            }
            else {
                ret.state = -1;
            }
            break;
        case 84:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 85:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 95){
                ret.state = 90;
            }
            else {
                ret.state = -1;
            }
            break;
        case 86:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 91;
            }
            else {
                ret.state = -1;
            }
            break;
        case 87:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 92;
            }
            else {
                ret.state = -1;
            }
            break;
        case 88:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 93;
            }
            else {
                ret.state = -1;
            }
            break;
        case 89:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 90:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 94;
            }
            else {
                ret.state = -1;
            }
            break;
        case 91:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 92:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 95;
            }
            else {
                ret.state = -1;
            }
            break;
        case 93:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 94:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 96;
            }
            else {
                ret.state = -1;
            }
            break;
        case 95:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 97;
            }
            else {
                ret.state = -1;
            }
            break;
        case 96:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 98;
            }
            else {
                ret.state = -1;
            }
            break;
        case 97:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 98:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA1(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 123){
                ret.state = 2;
            }
            else if(c === 125){
                ret.state = 3;
            }
            else {
                ret.state = -1;
            }
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            }
            break;
        case 2:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 3:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
let jjlexers = [
    moveDFA0,
    moveDFA1,
];

/*
    tokens that a lexical dfa state can return
*/
let jjlexTokens0 = [ 
        -1,    -1,    -1,     1,    -1,    -1,    16,    17,    22,    23,
        31,    24,    -1,    25,    27,    15,    18,    14,    21,    19,
        20,    30,     3,    29,     4,    -1,     2,    -1,     1,     1,
        28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
        -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    10,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,
        -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,     8,
        -1,    11,    -1,     5,    -1,    -1,    -1,     9,    12,
]; 
let jjlexTokens1 = [ 
        32,    32,     3,     4,
]; 

let jjstateCount = 140;
let jjtokenCount = 33;
let jjactERR = 141;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
let jjpact = [ 
         9,     7,    12,    13,    14,   -85,    10,    11,    57,    61,
       -84,   123,   -41,   140,    81,   -41,   130,   131,   129,    78,
        79,   139,    60,     5,   122,   120,   -30,   -41,   121,   -42,
        81,    66,   -42,    53,    64,    78,    79,   126,    71,    38,
        49,    44,    37,    45,   -42,    67,    43,    38,    87,    42,
        37,    61,    72,    28,    29,    18,    61,    50,   114,   137,
       136,   114,   134,   103,    60,   125,   124,   117,   115,    60,
        93,   106,   105,   101,   -84,    93,    91,    90,    89,    88,
        86,    85,    25,    84,    83,    76,    75,    70,    69,    68,
        63,    51,    47,    41,    39,    31,    22,    18,     4,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,
]; 
/*
    displacement of action table.
*/
let jjdisact = [ 
       -33,    98,    -5,   -33,    96,   -33,   -33,    54,    93,   -33,
       -33,   -33,   -33,   -33,    54,   -33,   -33,    28,    80,    49,
       -33,   -33,   -33,   -33,   -33,   -33,    37,   -33,   -33,    91,
        92,   -33,    45,    14,   -33,   -33,   -33,    76,   -33,    26,
       -33,   -33,    73,   -33,    29,     7,    89,    30,   -33,    88,
        86,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,    86,
       -33,    21,   -33,   -33,   -33,   -33,    85,   -33,   -33,    71,
       -33,    83,    65,    67,    55,   -33,   -33,    78,   -33,   -33,
        76,    74,   -33,    61,    50,   -33,    12,   -33,   -33,   -33,
       -33,   -33,    71,    59,   -33,     1,    58,   -33,    52,   -33,
        45,   -33,   -33,    64,   -33,    -4,   -33,    38,    15,   -33,
         9,    35,   -33,    41,   -33,    17,   -33,   -33,    -5,   -33,
        33,    61,   -33,    59,    58,   -33,    -2,   -33,   -33,   -33,
       -33,    42,    56,     7,   -33,   -33,   -33,    -7,   -33,   -33,
    
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
let jjcheckact = [ 
         2,     2,     2,     2,     2,    95,     2,     2,    45,    45,
        45,   110,   126,   137,   105,   126,   118,   118,   118,   105,
       105,   133,    45,     2,   110,   110,    45,   126,   110,   108,
        86,    47,   108,    95,    47,    86,    86,   115,    61,    44,
        39,    33,    44,    33,   108,    47,    32,    26,   115,    32,
        26,    19,    61,    17,    17,    14,     7,    39,   132,   131,
       124,   123,   121,   120,    19,   113,   111,   107,   103,     7,
       100,    98,    96,    93,    92,    84,    83,    81,    80,    77,
        74,    73,    14,    72,    71,    69,    66,    59,    50,    49,
        46,    42,    37,    30,    29,    18,     8,     4,     1,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
let jjdefred = [ 
         3,    -1,    -1,     0,    -1,     2,     4,    -1,    -1,    83,
        83,    10,    11,    12,    -1,    63,    64,    -1,    18,     6,
        14,    16,     8,     9,     1,    62,    73,    66,    67,    -1,
        -1,    13,    -1,    -1,    69,    77,    71,    -1,    22,    -1,
        19,     7,    -1,    65,    73,    70,    -1,    -1,    17,    -1,
        -1,    86,    88,    89,    68,    76,    78,    79,    80,    -1,
        82,    -1,    75,     5,    21,    23,    38,    20,    15,    -1,
        72,    -1,    -1,    -1,    -1,    81,    33,    -1,    35,    36,
        -1,    -1,    74,    -1,    28,    38,    83,    34,    37,    87,
        38,    25,    29,    -1,    32,    83,    -1,    27,    -1,    31,
        28,    44,    54,    -1,    24,    83,    26,    39,    44,    43,
        -1,    56,    59,    60,    85,    -1,    44,    42,    49,    38,
        55,    -1,    53,    -1,    -1,    30,    44,    45,    46,    47,
        48,    -1,    57,    -1,    58,    61,    50,    -1,    52,    51,
    
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
let jjpgoto = [ 
         5,   118,     7,    58,    98,    54,    35,   117,   110,   127,
       117,   110,   115,    76,    64,    94,    61,    19,   134,   132,
        53,    81,   103,    31,    51,    33,    34,    35,    55,    57,
        99,    81,    29,    26,    25,    16,   106,    79,    81,    79,
        81,   137,   111,   112,    97,    98,    91,    73,   101,    72,
        39,    20,    18,    14,    15,    16,     1,     2,   131,   101,
       126,   109,   110,   107,   108,   109,   110,    96,   101,    95,
        47,    99,    81,    93,   101,    45,    32,    23,    81,    22,
        81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,
]; 
/*
    displacement of the goto table
*/
let jjdisgoto = [ 
        55,   -46,    -3,   -46,    23,   -46,    48,    11,   -46,    38,
        36,   -46,   -46,   -46,     3,   -46,   -46,     0,    24,   -17,
       -46,    69,   -46,   -46,   -46,   -46,    -9,   -46,   -46,   -46,
        41,   -46,   -46,   -46,   -46,    37,   -46,   -46,    60,   -46,
       -46,   -46,   -46,   -46,   -30,   -11,   -21,     3,   -46,   -46,
       -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,
       -46,   -46,   -46,   -46,   -46,    37,    29,   -46,   -46,   -46,
       -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,
       -46,   -46,   -46,   -46,    33,    55,    -2,   -46,   -46,    25,
        49,   -46,    30,   -46,   -46,   -21,   -46,   -46,   -46,   -46,
        23,    43,   -46,   -46,   -46,    -4,   -46,   -46,   -12,   -46,
       -24,   -46,   -46,   -46,   -46,   -46,    39,   -46,   -15,    40,
        -7,   -46,   -46,   -11,   -46,   -46,   -15,   -46,   -46,   -46,
       -46,   -46,    14,   -46,   -46,   -46,   -46,   -46,   -46,   -46,
    
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
let jjruleLen = [ 
         2,     4,     2,     0,     0,     6,     2,     4,     2,     2,
         1,     1,     1,     2,     1,     4,     0,     3,     0,     1,
         3,     2,     0,     0,     6,     4,     6,     2,     0,     0,
         4,     1,     3,     1,     2,     1,     1,     2,     0,     2,
         3,     1,     2,     1,     0,     3,     1,     1,     1,     0,
         3,     4,     3,     1,     1,     0,     1,     0,     3,     1,
         1,     3,     2,     1,     1,     4,     1,     1,     3,     1,
         2,     1,     4,     0,     3,     1,     2,     0,     1,     1,
         1,     3,     1,     0,     0,     5,     2,     0,     1,     1,
    
]; 
/*
    index of the LHS of each rule
*/
let jjlhs = [ 
         0,     1,     2,     2,     4,     3,     3,     3,     3,     3,
         5,     5,     5,     6,     6,     7,     7,     8,     8,     9,
         9,    10,    10,    12,    11,    11,    11,    13,    13,    15,
        14,    14,    16,    16,    17,    17,    17,    17,    19,    18,
        20,    20,    21,    21,    23,    22,    24,    24,    24,    24,
        25,    25,    25,    25,    26,    26,    27,    27,    28,    28,
        29,    29,    30,    30,    31,    32,    33,    33,    34,    34,
        35,    35,    36,    36,    37,    37,    38,    38,    39,    39,
        39,    40,    40,    42,    43,    41,    44,    44,    45,    45,
    
]; 
/*
    token names
*/
let jjtokenNames = [ 
                   "EOF",              "NAME",            "STRING",
            "OPEN_BLOCK",       "CLOSE_BLOCK",           "OPT_DIR",
               "LEX_DIR",          "LEFT_DIR",         "RIGHT_DIR",
          "NONASSOC_DIR",           "USE_DIR",        "HEADER_DIR",
         "EXTRA_ARG_DIR",             "EMPTY",                "GT",
                    "LT",               "BRA",               "KET",
                   "EQU",              "CBRA",              "CKET",
              "QUESTION",              "STAR",              "PLUS",
                  "DASH",             "COLON",             "ARROW",
                   "EOL",         "SEPERATOR",                "OR",
                 "WEDGE",             "COMMA",          "ANY_CODE",
    
]; 
/*
    token alias
*/
let jjtokenAlias = [ 
                    null,                null,                null,
                     "{",                 "}",           "%option",
                  "%lex",             "%left",            "%right",
             "%nonassoc",              "%use",           "%header",
            "%extra_arg",            "%empty",                 ">",
                     "<",                 "(",                 ")",
                     "=",                 "[",                 "]",
                     "?",                 "*",                 "+",
                     "-",                 ":",                "=>",
                     ";",                "%%",                 "|",
                     "^",                 ",",                null,
    
]; 


export function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}

export class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}

export class Parser {
    // members for lexer
    private _lexState: number[];
    private _state: number;
    private _matched: string[];
    private _token: Token;
    private _marker: number;
    private _markerLine;
    private _markerColumn;
    private _backupCount: number;
    private _inputBuf: string[] = [];
    private _line: number;
    private _column: number;
    private _tline: number;
    private _tcolumn: number;

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: any[] = [];

    private _stop = false;

    private _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    
    gb: GBuilder;
    ctx: Context;
    assoc: Assoc;
    lexacts: LexAction[];


    constructor(){
        this.init();
    }
    init(){
        this._lexState = [ 0 ];// DEFAULT
        this._state = 0;
        this._matched = [];
        this._token = null;
        this._marker = -1;
        this._markerLine = this._markerColumn = 0;
        this._backupCount = 0;
        this._inputBuf = [];
        this._line = this._tline = 0;
        this._column = this._tcolumn = 0;
        
        this._lrState = [ 0 ];
        this._sematicS = [];

        this._stop = false;
    }
    /**
     *  set 
     */
    private _setImg(s: string){
        this._matched.length = 0;
        for(let i = 0;i < s.length;i++){
            this._matched.push(s.charAt(i));
        }
        this._tline = this._line;
        this._tcolumn = this._column;
    }
    private _returnToken(tid: number){
        this._token = new Token(
            tid,
            this._matched.join(''),
            this._tline,
            this._tcolumn,
            this._line,
            this._column
        );
        this._matched.length = 0;
        this._tline = this._line;
        this._tcolumn = this._column;
        this._emit('token', jjtokenNames[this._token.id], this._token.val);
        while(!this._stop && !this._acceptToken(this._token));
        this._token = null;
    }
    private _emit(name: string, a1?, a2?, a3?){
        let cbs = this._handlers[name];
        if(cbs){
            for(let cb of cbs){
                cb(a1, a2, a3);
            }
        }
    }
    on(name: string, cb: (a1?, a2?, a3?) => any){
        this._handlers[name] || (this._handlers[name] = []);
        this._handlers[name].push(cb);
    }
    private _doLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        switch(jjstaten){
            case 1:
                this._setImg("");
                break;
            case 42:
                this._setImg("");
                break;
            case 59:
                this._setImg("");
                break;
            case 73:
                this._setImg("");
                break;
            default:;
        }
        jjtk !== -1 && this._returnToken(jjtk);
    }
    private _doLexAction1(jjstaten: number){
        let jjtk = jjlexTokens1[jjstaten];
        switch(jjstaten){
            default:;
        }
        jjtk !== -1 && this._returnToken(jjtk);
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    private _doLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                this._doLexAction0(state);
                break;
            case 1:
                this._doLexAction1(state);
                break;
            default:;
        }
        this._token !== null && (this._acceptToken(this._token), (this._token = null));
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    private _acceptChar(c: string){
        let lexstate = this._lexState[this._lexState.length - 1];
        let retn = { state: this._state, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    this._doLexAction(lexstate, this._state);
                    // recover
                    this._marker = -1;
                    this._backupCount = 0;
                    this._state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    this._marker = this._state;
                    this._markerLine = this._line;
                    this._markerColumn = this._column;
                    this._state = retn.state;
                    this._backupCount = 1;
                    c === '\n' ? (this._line++, this._column = 0) : (this._column++);
                    this._matched.push(c);
                    // character consumed
                    return true;
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                this._doLexAction(lexstate, this._state);
                // recover
                this._marker = -1;
                this._backupCount = 0;
                this._state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(this._marker !== -1){
                    // we have a previously marked state, which is a terminate state.
                    // rollback
                    this._state = this._marker;
                    this._marker = -1;
                    this._line = this._markerLine;
                    this._column = this._markerColumn;
                    while(this._backupCount --> 0){
                        this._inputBuf.push(this._matched.pop());
                    }
                    this._doLexAction(lexstate, this._state);
                    this._state = 0;
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    this._emit('lexicalerror', `unexpected character "${c}"`);
                    // force consume
                    return true;
                }
            }
            else {
                this._state = retn.state;
                c === '\n' ? (this._line++, this._column = 0) : (this._column++);
                this._matched.push(c);
                // character consumed
                return true;
            }
        }
    }
    private _acceptEOF(){
        if(this._state === 0){
            // recover
            this._returnToken(0);
            return true;
        }
        else {
            let lexstate = this._lexState[this._lexState.length - 1];
            let retn = { state: this._state, hasArc: false, isEnd: false };
            jjlexers[lexstate](-1, retn);
            if(retn.isEnd){
                this._doLexAction(lexstate, this._state);
                this._state = 0;
                this._marker = -1;
                return false;
            }
            else if(this._marker !== -1){
                this._state = this._marker;
                this._marker = -1;
                this._line = this._markerLine;
                this._column = this._markerColumn;
                while(this._backupCount --> 0){
                    this._inputBuf.push(this._matched.pop());
                }
                this._doLexAction(lexstate, this._state);
                this._state = 0;
                return false;
            }
            else {
                this._emit('lexicalerror', 'unexpected end of file');
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    accept(s: string){
        if(!this._stop){
            for(let i = s.length - 1; i >= 0; i--){
                this._inputBuf.push(s.charAt(i));
            }
            while(!this._stop && this._inputBuf.length > 0){
                this._acceptChar(this._inputBuf[this._inputBuf.length - 1]) && this._inputBuf.pop();
            }
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    end(){
        while(!this._stop){
            if(this._inputBuf.length > 0){
                this._acceptChar(this._inputBuf[this._inputBuf.length - 1]) && this._inputBuf.pop();
            }
            else if(this._acceptEOF()){
                break;
            }
        }
        this._stop = true;
    }
    halt(){
        this._stop = true;
    }
    private _doReduction(jjrulenum: number){
        let jjnt = jjlhs[jjrulenum];
        let jjsp = this._sematicS.length;
        let jjtop = this._sematicS[jjsp - jjruleLen[jjrulenum]] || {};
        switch(jjrulenum){
            case 4:
                /* 4: @0 => */
                { this.gb.lexBuilder.prepareLex(); }
                break;
            case 8:
                /* 8: option => "%header" block */
                var b = this._sematicS[jjsp - 1];
                { this.gb.setHeader(b.val); }
                break;
            case 9:
                /* 9: option => "%extra_arg" block */
                var b = this._sematicS[jjsp - 1];
                { this.gb.setExtraArg(b.val); }
                break;
            case 10:
                /* 10: associativeDir => "%left" */
                { this.assoc = Assoc.LEFT; }
                break;
            case 11:
                /* 11: associativeDir => "%right" */
                { this.assoc = Assoc.RIGHT; }
                break;
            case 12:
                /* 12: associativeDir => "%nonassoc" */
                { this.assoc = Assoc.NON; }
                break;
            case 13:
                /* 13: assocTokens => assocTokens tokenRef */
                var t = this._sematicS[jjsp - 1];
                { this.gb.defineTokenPrec(t.val, this.assoc, t.type, t.startLine); }
                break;
            case 14:
                /* 14: assocTokens => tokenRef */
                var t = this._sematicS[jjsp - 1];
                { this.gb.defineTokenPrec(t.val, this.assoc, t.type, t.startLine); }
                break;
            case 15:
                /* 15: optionBody => optionBody <NAME> "=" <STRING> */
                var name = this._sematicS[jjsp - 3];
                var val = this._sematicS[jjsp - 1];
                { this.gb.setOpt(name.val, val.val); }
                break;
            case 18:
                /* 18: states_ => */
                { this.gb.lexBuilder.selectState('DEFAULT'); }
                break;
            case 19:
                /* 19: states => <NAME> */
                var s = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.selectState(s.val); }
                break;
            case 20:
                /* 20: states => states "," <NAME> */
                var s = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.selectState(s.val); }
                break;
            case 23:
                /* 23: @1 => */
                var v = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.prepareVar(v.val, v.startLine); }
                break;
            case 24:
                /* 24: lexBodyItem => <NAME> @1 "=" "<" regexp ">" */
                var v = this._sematicS[jjsp - 6];
                { this.gb.lexBuilder.endVar(); }
                break;
            case 25:
                /* 25: lexBodyItem => "<" regexp ">" lexAction_ */
                { this.gb.lexBuilder.end(this.lexacts, '(untitled)'); }
                break;
            case 26:
                /* 26: lexBodyItem => "<" <NAME> ":" regexp ">" lexAction_ */
                var tn = this._sematicS[jjsp - 5];
                { 
    let tdef = this.gb.defToken(tn.val, this.gb.lexBuilder.possibleAlias, tn.startLine);
    this.lexacts.push(returnToken(tdef));
    this.gb.lexBuilder.end(this.lexacts, tn.val);
}
                break;
            case 28:
                /* 28: lexAction_ => */
                { this.lexacts = []; }
                break;
            case 29:
                /* 29: @2 => */
                { this.lexacts = []; }
                break;
            case 31:
                /* 31: lexAction => block */
                var b = this._sematicS[jjsp - 1];
                { this.lexacts = [blockAction(b.val, b.startLine)]; }
                break;
            case 32:
                /* 32: lexActions => lexActions "," lexActionItem */
                var it = this._sematicS[jjsp - 1];
                { this.lexacts.push(it.val); }
                break;
            case 34:
                /* 34: lexActionItem => "+" <NAME> */
                var vn = this._sematicS[jjsp - 1];
                { this.gb.addPushStateAction(this.lexacts, vn.val, vn.startLine); }
                break;
            case 35:
                /* 35: lexActionItem => "-" */
                { this.lexacts.push(popState()); }
                break;
            case 36:
                /* 36: lexActionItem => block */
                var b = this._sematicS[jjsp - 1];
                { this.lexacts.push(blockAction(b.val, b.startLine)); }
                break;
            case 37:
                /* 37: lexActionItem => "=" <STRING> */
                var s = this._sematicS[jjsp - 1];
                { this.lexacts.push(setImg(s.val)); }
                break;
            case 38:
                /* 38: @3 => */
                { this.gb.lexBuilder.enterUnion(); }
                break;
            case 39:
                /* 39: regexp => @3 union */
                { this.gb.lexBuilder.leaveUnion(); }
                break;
            case 40:
                /* 40: union => union "|" simpleRE */
                { this.gb.lexBuilder.endUnionItem(); }
                break;
            case 41:
                /* 41: union => simpleRE */
                { this.gb.lexBuilder.endUnionItem(); }
                break;
            case 44:
                /* 44: @4 => */
                { this.gb.lexBuilder.enterSimple(); }
                break;
            case 45:
                /* 45: basicRE => @4 primitiveRE rePostfix */
                var suffix = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.simplePostfix(suffix.val); }
                break;
            case 49:
                /* 49: rePostfix => */
                { jjtop.val = ''; }
                break;
            case 52:
                /* 52: primitiveRE => "<" <NAME> ">" */
                var n = this._sematicS[jjsp - 2];
                { this.gb.lexBuilder.addVar(n.val, n.startLine); }
                break;
            case 53:
                /* 53: primitiveRE => <STRING> */
                var s = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.addString(s); }
                break;
            case 54:
                /* 54: inverse_ => "^" */
                { this.gb.lexBuilder.beginSet(true); }
                break;
            case 55:
                /* 55: inverse_ => */
                { this.gb.lexBuilder.beginSet(false); }
                break;
            case 60:
                /* 60: setREItem => <STRING> */
                var s = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.addSetItem(s.val, s.val, s.startLine, s.startLine); }
                break;
            case 61:
                /* 61: setREItem => <STRING> "-" <STRING> */
                var from = this._sematicS[jjsp - 3];
                var to = this._sematicS[jjsp - 1];
                { this.gb.lexBuilder.addSetItem(from.val, to.val, from.startLine, to.startLine); }
                break;
            case 81:
                /* 81: tokenRef => "<" <NAME> ">" */
                var t = this._sematicS[jjsp - 2];
                { jjtop.val = t.val; jjtop.type = TokenRefType.TOKEN; }
                break;
            case 82:
                /* 82: tokenRef => <STRING> */
                { jjtop.type = TokenRefType.STRING; }
                break;
            case 83:
                /* 83: @5 => */
                this._lexState.push(1);
                break;
            case 84:
                /* 84: @6 => */
                var open = this._sematicS[jjsp - 2];
                var bl = this._sematicS[jjsp - 1];
                this._lexState.pop();
                break;
            case 85:
                /* 85: block => @5 "{" innerBlock @6 "}" */
                var open = this._sematicS[jjsp - 4];
                var bl = this._sematicS[jjsp - 3];
                var close = this._sematicS[jjsp - 1];
                { 
    jjtop.val = '{' + bl.val + '}';
    jjtop.startLine = open.startLine;
    jjtop.startColumn = open.startColumn;
    jjtop.endLine = close.endLine;
    jjtop.endColumn = close.endColumn;
}
                break;
            case 86:
                /* 86: innerBlock => innerBlock innerBlockItem */
                var b = this._sematicS[jjsp - 1];
                { jjtop.val += b.val; }
                break;
            case 87:
                /* 87: innerBlock => */
                { jjtop.val = ''; }
                break;
        }
        this._lrState.length -= jjruleLen[jjrulenum];
        let jjcstate = this._lrState[this._lrState.length - 1];
        this._lrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        this._sematicS.length -= jjruleLen[jjrulenum];
        this._sematicS.push(jjtop);
    }

    private _acceptToken(t: Token){
        // look up action table
        let cstate = this._lrState[this._lrState.length - 1];
        let ind = jjdisact[cstate] + t.id;
        let act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            this._syntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                this._stop = true;
                this._emit('accept');
                return true;
            }
            else {
                this._lrState.push(act - 1);
                this._sematicS.push(t);
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            this._doReduction(-act - 1);
            return false;
        }
        else {
            // error
            this._syntaxError(t);
            // force consume
            return true;
        }
    }
    private _syntaxError(t: Token){
        let msg = `unexpected token ${t.toString()}, expecting one of the following token(s):\n`
        msg += this._expected(this._lrState[this._lrState.length - 1]);
        this._emit("syntaxerror", msg);
    }
    private _expected(state: number){
        let dis = jjdisact[state];
        let ret = '';
        function expect(tk: number){
            let ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(let tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += `    ${tokenToString(tk)} ...` + '\n');
        }
        return ret;
    }
}