/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/
<%- input.header %>
<%
let prefix = input.prefix;
let tab = input.opt.tab || '    ';
function echo(s: string | number){
    output.write(s);
}
function echoLine(s: string | number){
    output.writeln(s);
}
function leftAlign(s: string, al: number): string{
    function repeat(s: string, t: number){
        let ret = '';
        while(t --> 0) ret += s;
        return ret;
    }
    return (s.length < al ? repeat(' ', al - s.length) : '') + s;
}
function printTable<T>(tname: string, t: T[], align: number, lc: number, mapper: (d: T) => string){
    let count = 1; %>
let <%- prefix + tname %> = [ 

    <% echo(tab); %>
    <% for(let i of t){
        echo(leftAlign(mapper(i), align));
        echo(',');
        count++ >= lc && (count = 1, echo(input.endl + tab));
    } %>
]; 
<% } 
function printState(state: State<LexAction[]>){ 
    function arcToString(arc: Arc<LexAction[]>): string{
        let ret: string[] = [];
        arc.chars.forEach((from, to) => {
            if(from === to){
                ret.push(`c === ${from}`);
            }
            else if(from === 0 && to !== Inf.oo){
                ret.push(`c <= ${to}`);
            }
            else if(from !== 0 && to === Inf.oo){
                ret.push(`c >= ${from}`);
            }
            else if(from !== 0 && to !== Inf.oo){
                ret.push(`(c >= ${from} && c <= ${to})`);
            }
            else {
                // this merely happens
                ret.push('true');
            }
        });
        return ret.join(' || ');
    } 
    let first = true; %>
        case <%- state.index %>:
            ret.hasArc = <%- state.arcs.length > 0 ? 'true' : 'false' %>;
            ret.isEnd = <%- state.endAction === null ? 'false' : 'true' %>;
    <% for(let arc of state.arcs){
        if(first) { %>
            if(<%- arcToString(arc) %>){
                ret.state = <%- arc.to.index %>;
            }
        <% first = false;
        } else { %>
            else if(<%- arcToString(arc) %>){
                ret.state = <%- arc.to.index %>;
            }
        <% }
    } 
    if(state.arcs.length === 0) { %>
            ret.state = -1;
    <% } else { %>
            else {
                ret.state = -1;
            }
    <% } %>
            break;
<% } 
function printDFA(dfa: DFA<LexAction[]>, n: number){ %>
function moveDFA<%- n %>(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
    <% for(let state of dfa.states){
        printState(state);
    } %>
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
<% }
function printLexTokens(dfa: DFA<LexAction[]>, n: number){
    function getAction(act: LexAction[]): number{
        for(let a of act){
            if(a.token !== -1){
                return a.token;
            }
        }
        return -1;
    }
    printTable<State<LexAction[]>>('lexTokens' + n, dfa.states, 6, 10, (state) => {
        return state.endAction ? getAction(state.endAction.data).toString() : '-1';
    });
} %>

/*
    find the next state to go in the dfa
*/
<% for(let i = 0, _a = input.dfas; i < _a.length; i++){
    printDFA(_a[i], i);
} %>

/*
    all the lexer data goes here.
*/
let <%- prefix %>lexers = [
<% for(let i = 0;i < input.dfas.length;i++){ %>
    moveDFA<%- i %>,
<% } %>
];

/*
    tokens that a lexical dfa state can return
*/
<% for(let i = 0, _a = input.dfas; i < _a.length; i++){
    printLexTokens(_a[i], i);
} %>

<% let pt = input.pt; %>
let <%- prefix %>stateCount = <%- pt.stateCount %>;
let <%- prefix %>tokenCount = <%- input.g.tokens.length %>;
let <%- prefix %>actERR = <%- pt.stateCount + 1 %>;
/*
    compressed action table: action = <%- prefix %>pact[<%- prefix %>disact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
<% printTable<Item>('pact', pt.pact, 6, 10, t => {
    if(t === null){
        return '0';
    }
    else if(t === Item.NULL){
        return String(pt.stateCount + 1);
    }
    else if(t.actionType === Action.SHIFT){
        return (t.shift.stateIndex + 1).toString();
    }
    else if(t.actionType === Action.REDUCE){
        return (-t.rule.index - 1).toString();
    }
}); %>
/*
    displacement of action table.
*/
<% printTable<number>('disact', pt.disact, 6, 10, t => t.toString()); %>
/*
    used to check if a position in <%- prefix  %>pact is out of bouds.
    if <%- prefix  %>checkact[<%- prefix %>disact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
<% printTable<number>('checkact', pt.checkact, 6, 10, t => t === undefined ? '0' : t.toString()); %>
/*
    default action table. action = <%- prefix %>defred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
<% printTable<number>('defred', pt.defred, 6, 10, t => t.toString()); %>
/*
    compressed goto table: goto = <%- prefix  %>pgoto[<%- prefix %>disgoto[STATE-NUM] + NON_TERMINAL]
*/
<% printTable<Item>('pgoto', pt.pgoto, 6, 10, t => {
    if(t === null){
        return '-1';
    }
    else {
        return t.shift.stateIndex.toString();
    }
}); %>
/*
    displacement of the goto table
*/
<% printTable<number>('disgoto', pt.disgoto, 6, 10, t => t.toString()); %>
/*
    length of each rule: rule length = <%- prefix %>ruleLen[RULE-NUM]
*/
<% printTable<Rule>('ruleLen', pt.g.rules, 6, 10, r => r.rhs.length.toString()); %>
/*
    index of the LHS of each rule
*/
<% printTable<Rule>('lhs', pt.g.rules, 6, 10, r => r.lhs.index.toString()); %>
/*
    token names
*/
<% printTable<TokenDef>('tokenNames', pt.g.tokens, 20, 3, t => `"${t.sym}"`); %>
/*
    token alias
*/
<% printTable<TokenDef>('tokenAlias', pt.g.tokens, 20, 3, t => t.alias ? `"${t.alias}"` : "null"); %>
<% let className = input.opt.className || 'Parser'; %>

<% function printLexActionsFunc(dfa: DFA<LexAction[]>, n: number){
    let codegen = {
        addBlock(b: string, line: number){ %>
                <%- b.replace(/\$token/g, 'this._token').replace(/\$\$/g, 'this._sematicVal') %>
        <% },
        pushLexState(n: number){ %>
                this._lexState.push(<%- n %>);
        <% },
        popLexState(){ %>
                this._lexState.pop();
        <% },
        setImg(n: string){ %>
                this._setImg("<%- n %>");
        <% },
        returnToken(t: TokenDef){ %>
                this._token = {
                    id: <%- t.index %>,
                    val: this._matched.join('')
                };
        <% }
    }; 
    function hasNormalAction(a: LexAction[]){
        for(let act of a){
            if(act.token === -1){
                return true;
            }
        }
        return false;
    }
    let statevn = prefix + 'staten'; %>
    private _doLexAction<%- n %>(<%- statevn %>: number){
        let <%- prefix %>tk = <%- prefix %>lexTokens<%- n %>[<%- statevn %>];
        <%- prefix %>tk !== -1 && this._prepareToken(<%- prefix %>tk);
        switch(<%- statevn %>){
    <% for(let i = 0, _a = dfa.states; i < _a.length; i++){ 
        if(_a[i].endAction !== null && hasNormalAction(_a[i].endAction.data)){ %>
            case <%- i %>:
            <% for(let act of _a[i].endAction.data){
                act.token === -1 && act.toCode(codegen);
            } %>
                break;
        <% }
    } %>
            default:;
        }
    }
<% } %>

export function tokenToString(tk: number){
    return <%- prefix %>tokenAlias[tk] === null ? `<${<%- prefix %>tokenNames[tk]}>` : `"${<%- prefix %>tokenAlias[tk]}"`;
}

export class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (<%- prefix %>tokenAlias[this.id] === null ? 
            `<${<%- prefix %>tokenNames[this.id]}>` :
            `"${<%- prefix %>tokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
<% let stype = input.sematicType || 'any'; %>
export class <%- className %> {
    // members for lexer
    private _lexState: number[];
    private _state: number;
    private _matched: string;
    private _token: Token;
    
    private _marker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    private _backupCount: number;

    private _line: number;
    private _column: number;
    private _tline: number;
    private _tcolumn: number;

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: <%- stype %>[] = [];
    private _sematicVal: <%- stype %>;

    private _stop;

    private _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    <%- input.extraArg %>

    constructor(){
        this.init();
    }
    init(){
        this._lexState = [ 0 ];// DEFAULT
        this._state = 0;
        this._matched = '';
        this._token = new Token(-1, null, 0, 0, 0, 0);
        this._marker.state = -1;
        this._backupCount = 0;
        this._line = this._tline = 1;
        this._column = this._tcolumn = 1;
        
        this._lrState = [ 0 ];
        this._sematicS = [];
        this._sematicVal = null;

        this._stop = false;
    }
    /**
     *  set 
     */
    private _setImg(s: string){
        this._matched = s;
        this._tline = this._line;
        this._tcolumn = this._column;
    }
    private _prepareToken(tid: number){
        this._token.id = tid;
        this._token.val = this._matched;
        this._token.startLine = this._tline;
        this._token.startColumn = this._tcolumn;
        this._token.endLine = this._line;
        this._token.endColumn = this._column;

        this._matched = '';
        this._tline = this._line;
        this._tcolumn = this._column;
    }
    private _returnToken(){
        this._emit('token', <%- prefix %>tokenNames[this._token.id], this._token.val);
        while(!this._stop && !this._acceptToken(this._token));
        this._token.id = -1;
    }
    private _emit(name: string, a1?, a2?, a3?){
        let cbs = this._handlers[name];
        if(cbs){
            for(let cb of cbs){
                cb(a1, a2, a3);
            }
        }
    }
    on(name: string, cb: (a1?, a2?, a3?) => any){
        this._handlers[name] || (this._handlers[name] = []);
        this._handlers[name].push(cb);
    }
<% for(let i = 0, _a = input.dfas; i < _a.length; i++){
    printLexActionsFunc(_a[i], i);
} %>
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    private _doLexAction(lexstate: number, state: number){
        switch(lexstate){
<% for(let i = 0;i < input.dfas.length;i++){ %>
            case <%- i %>:
                this._doLexAction<%- i %>(state);
                break;
<% } %>
            default:;
        }
        this._token.id !== -1 && this._returnToken();
    }
    private _rollback(){
        let ret = this._matched.substr(this._matched.length - this._backupCount, this._backupCount);
        this._matched = this._matched.substr(0, this._matched.length - this._backupCount);
        this._backupCount = 0;
        this._line = this._marker.line;
        this._column = this._marker.column;
        this._state = this._marker.state;
        this._marker.state = -1;
        return ret;
    }
    private _mark(){
        this._marker.state = this._state;
        this._marker.line = this._line;
        this._marker.column = this._column;
        this._backupCount = 0;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    private _acceptChar(c: string){
        function consume(cela: <%- className %>, c: string){
            c === '\n' ? (cela._line++, cela._column = 0) : (cela._column++);
            cela._matched += c;
            cela._marker.state !== -1 && (cela._backupCount++);
            return true;
        }
        let lexstate = this._lexState[this._lexState.length - 1];
        let retn = { state: this._state, hasArc: false, isEnd: false };
        <%- prefix %>lexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    this._doLexAction(lexstate, this._state);
                    // recover
                    this._marker.state = -1;
                    this._backupCount = 0;
                    this._state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    this._mark();
                    this._state = retn.state;
                    return consume(this, c);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                this._doLexAction(lexstate, this._state);
                // recover
                this._marker.state = -1;
                this._backupCount = 0;
                this._state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(this._marker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    let s = this._rollback();
                    this._doLexAction(lexstate, this._state);
                    this._state = 0;
                    this.accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    this._emit('lexicalerror', `unexpected character "${c}"`, this._line, this._column);
                    // force consume
                    return true;
                }
            }
            else {
                this._state = retn.state;
                // character consumed
                return consume(this, c);
            }
        }
    }
    private _acceptEOF(){
        if(this._state === 0){
            // recover
            this._prepareToken(0);
            this._returnToken();
            return true;
        }
        else {
            let lexstate = this._lexState[this._lexState.length - 1];
            let retn = { state: this._state, hasArc: false, isEnd: false };
            <%- prefix %>lexers[lexstate](-1, retn);
            if(retn.isEnd){
                this._doLexAction(lexstate, this._state);
                this._state = 0;
                this._marker.state = -1;
                return false;
            }
            else if(this._marker.state !== -1){
                let s = this._rollback();
                this._doLexAction(lexstate, this._state);
                this._state = 0;
                this.accept(s);
                return false;
            }
            else {
                this._emit('lexicalerror', 'unexpected end of file');
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    accept(s: string){
        for(let i = 0; i < s.length && !this._stop;){
            this._acceptChar(s.charAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    end(){
        while(!this._stop && !this._acceptEOF());
        this._stop = true;
    }
    halt(){
        this._stop = true;
    }
<% function printReduceActions(){
    let codegen = {
        addBlock(b: string, line: number){ %>
                {<%- b.replace(/\$\$/g, prefix + 'top') %>}
        <% },
        pushLexState(n: number){ %>
                this._lexState.push(<%- n %>);
        <% },
        popLexState(){ %>
                this._lexState.pop();
        <% },
        setImg(n: string){ %>
                this._setImg("<%- n %>");
        <% },
        returnToken(t: TokenDef){ %>
                this._token = {
                    id: <%- t.index %>,
                    val: this._matched.join('')
                };
        <% }
    };
    for(let rule of input.g.rules){
        if(rule.action !== null){ %>
            case <%- rule.index %>:
                /* <%- rule.toString() %> */
            <% for(let uvar in rule.vars){ %>
                var <%- uvar %> = this._sematicS[<%- prefix %>sp - <%- rule.rhs.length - rule.vars[uvar].val %>];
            <% }
            for(let uvar2 in rule.usedVars){ %>
                var <%- uvar2 %> = this._sematicS[<%- prefix %>sp - <%- rule.usedVars[uvar2].val %>];
            <% }
            for(let act of rule.action){
                act.toCode(codegen);
            } %>
                break;
        <% }
    }
} %>
    private _doReduction(<%- prefix %>rulenum: number){
        let <%- prefix %>nt = <%- prefix %>lhs[<%- prefix %>rulenum];
        let <%- prefix %>sp = this._sematicS.length;
        let <%- prefix %>top = this._sematicS[<%- prefix %>sp - <%- prefix %>ruleLen[<%- prefix %>rulenum]] || null;
        switch(<%- prefix %>rulenum){
<% printReduceActions(); %>
        }
        this._lrState.length -= <%- prefix %>ruleLen[<%- prefix %>rulenum];
        let <%- prefix %>cstate = this._lrState[this._lrState.length - 1];
        this._lrState.push(<%- prefix %>pgoto[<%- prefix %>disgoto[<%- prefix %>cstate] + <%- prefix %>nt]);

        this._sematicS.length -= <%- prefix %>ruleLen[<%- prefix %>rulenum];
        this._sematicS.push(<%- prefix %>top);
    }

    private _acceptToken(t: Token){
        // look up action table
        let cstate = this._lrState[this._lrState.length - 1];
        let ind = <%- prefix %>disact[cstate] + t.id;
        let act = 0;
        if(ind < 0 || ind >= <%- prefix %>pact.length || <%- prefix %>checkact[ind] !== cstate){
            act = -<%- prefix %>defred[cstate] - 1;
        }
        else {
            act = <%- prefix %>pact[ind];
        }
        if(act === <%- prefix %>actERR){
            // explicit error
            this._syntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                this._stop = true;
                this._emit('accept');
                return true;
            }
            else {
                this._lrState.push(act - 1);
                this._sematicS.push(this._sematicVal);
                this._sematicVal = null;
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            this._doReduction(-act - 1);
            return false;
        }
        else {
            // error
            this._syntaxError(t);
            // force consume
            return true;
        }
    }
    private _syntaxError(t: Token){
        let msg = `unexpected token ${t.toString()}, expecting one of the following token(s):\n`
        msg += this._expected(this._lrState[this._lrState.length - 1]);
        this._emit("syntaxerror", msg, t);
    }
    private _expected(state: number){
        let dis = <%- prefix %>disact[state];
        let ret = '';
        function expect(tk: number){
            let ind = dis + tk;
            if(ind < 0 || ind >= <%- prefix %>pact.length || state !== <%- prefix %>checkact[ind]){
                return <%- prefix %>defred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(let tk = 0; tk < <%- prefix %>tokenCount; tk++){
            expect(tk) && (ret += `    ${tokenToString(tk)} ...` + '\n');
        }
        return ret;
    }
}
