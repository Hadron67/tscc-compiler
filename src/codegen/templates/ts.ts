import { TemplateInput, TemplateOutput } from '../def';
import { Item, Action } from '../../grammar/item-set';
import { Rule } from '../../grammar/grammar';
import { TokenDef } from '../../grammar/token-entry';
import { CodeGenerator } from '../code-generator';
import { DFA } from '../../lexer/dfa';
import { LexAction } from '../../lexer/action';
import { State, Arc } from '../../lexer/state';
import { Inf } from '../../util/interval-set';

export default function(input: TemplateInput, output: TemplateOutput){
    echoLine("/*");
    echoLine("    generated by jscc, an LALR(1) parser generator made by hadroncfy");
    echo("*/");
    let prefix = input.prefix;
let tab = input.opt.tab || '    ';
function echo(s: string){
    output.write(s);
}
function echoLine(s: string){
    output.writeln(s);
}
function leftAlign(s: string, al: number): string{
    function repeat(s: string, t: number){
        let ret = '';
        while(t --> 0) ret += s;
        return ret;
    }
    return (s.length < al ? repeat(' ', al - s.length) : '') + s;
}
function printTable<T>(tname: string, t: T[], align: number, lc: number, mapper: (d: T) => string){
    let count = 1; 
    echoLine("");
    echo("let ");
    echo(prefix + tname );
    echoLine(" = [ ");
    echo(tab); 
    for(let i of t){
        echo(leftAlign(mapper(i), align));
        echo(',');
        count++ >= lc && (count = 1, echo(input.endl + tab));
    } 
    echoLine("");
    echo("]; ");
    } 
function printState(state: State<LexAction[]>){ 
    function arcToString(arc: Arc<LexAction[]>): string{
        let ret: string[] = [];
        arc.chars.forEach((from, to) => {
            if(from === to){
                ret.push(`c === ${from}`);
            }
            else if(from === Inf._oo && to !== Inf.oo){
                ret.push(`c <= ${to}`);
            }
            else if(from !== Inf._oo && to === Inf.oo){
                ret.push(`c >= ${from}`);
            }
            else if(from !== Inf._oo && to !== Inf.oo){
                ret.push(`c >= ${from} && c <= ${to}`);
            }
            else {
                // this merely happens
                ret.push('true');
            }
        });
        return ret.join(' || ');
    } 
    let first = true; 
    echoLine("");
    echo("        case ");
    echo(state.index.toString() );
    echoLine(":");
    echo("            ret.nfa = ");
    echo(state.arcs.length > 0 && state.endAction !== null ? 'true' : 'false' );
    echoLine(";");
    echo("            ret.isEnd = ");
    echo(state.endAction === null ? 'false' : 'true' );
    echo(";");
    for(let arc of state.arcs){
        if(first) { 
    echoLine("");
    echo("            if(");
    echo(arcToString(arc) );
    echoLine("){");
    echo("                ret.state = ");
    echo(arc.to.index.toString() );
    echoLine(";");
    echo("            }");
    first = false;
        } else { 
    echoLine("");
    echo("            else if(");
    echo(arcToString(arc) );
    echoLine("){");
    echo("                ret.state = ");
    echo(arc.to.index.toString() );
    echoLine(";");
    echo("            }");
    }
    } 
    if(state.arcs.length === 0) { 
    echoLine("");
    echo("            ret.state = -1;");
    } else { 
    echoLine("");
    echoLine("            else {");
    echoLine("                ret.state = -1;");
    echo("            }");
    } 
    echoLine("");
    echo("            break;");
    } 
function printDFA(dfa: DFA<LexAction[]>, n: number){ 
    echoLine("");
    echo("function moveDFA");
    echo(n.toString() );
    echoLine("(c: number, ret: { state: number, nfa: boolean, isEnd: boolean }){");
    echo("    switch(ret.state){");
    for(let state of dfa.states){
            printState(state);
        } 
    echoLine("");
    echoLine("        default:");
    echoLine("            ret.state = -1;");
    echoLine("            ret.nfa = false;");
    echoLine("    }");
    echo("}");
    }
function printLexTokens(dfa: DFA<LexAction[]>, n: number){
    function getAction(act: LexAction[]): number{
        for(let a of act){
            if(a.token !== -1){
                return a.token;
            }
        }
        return -1;
    }
    printTable<State<LexAction[]>>('lexTokens' + n, dfa.states, 6, 10, (state) => {
        return state.endAction ? getAction(state.endAction.data).toString() : '-1';
    });
} 
    echoLine("");
    echoLine("");
    echoLine("/*");
    echoLine("    find the next state to go in the dfa");
    echo("*/");
    for(let i = 0, _a = input.dfas; i < _a.length; i++){
    printDFA(_a[i], i);
} 
    echoLine("");
    echoLine("");
    echoLine("/*");
    echoLine("    all the lexer data goes here.");
    echoLine("*/");
    echo("let ");
    echo(prefix );
    echo("lexers = [");
    for(let i = 0;i < input.dfas.length;i++){ 
    echoLine("");
    echo("    moveDFA");
    echo(i.toString() );
    echo(",");
    } 
    echoLine("");
    echoLine("];");
    echoLine("");
    echoLine("/*");
    echoLine("    tokens that a lexical dfa state can return");
    echo("*/");
    for(let i = 0, _a = input.dfas; i < _a.length; i++){
    printLexTokens(_a[i], i);
} 
    echoLine("");
    let pt = input.pt; 
    echoLine("");
    echo("let ");
    echo(prefix );
    echo("stateCount = ");
    echo(pt.stateCount.toString() );
    echoLine(";");
    echoLine("/*");
    echo("    compressed action table: action = ");
    echo(prefix );
    echo("pact[");
    echo(prefix );
    echoLine("disact[STATE-NUM] + TOKEN]");
    echoLine("    when action > 0, shift the token and goto state (action - 1);");
    echoLine("    when action < 0, reduce with rule (1-action);");
    echoLine("    when action = 0, do default action.");
    echo("*/");
    printTable<Item>('pact', pt.pact, 6, 10, t => {
    if(t === null || t === Item.NULL){
        return '0';
    }
    else if(t.actionType === Action.SHIFT){
        return (t.shift.stateIndex + 1).toString();
    }
    else if(t.actionType === Action.REDUCE){
        return (-t.rule.index - 1).toString();
    }
}); 
    echoLine("");
    echoLine("/*");
    echoLine("    displacement of action table.");
    echo("*/");
    printTable<number>('disact', pt.disact, 6, 10, t => t.toString()); 
    echoLine("");
    echoLine("/*");
    echo("    used to check if a position in ");
    echo(prefix  );
    echoLine("pact is out of bouds.");
    echo("    if ");
    echo(prefix  );
    echo("checkact[");
    echo(prefix );
    echoLine("disact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.");
    echo("*/");
    printTable<number>('checkact', pt.checkact, 6, 10, t => t === undefined ? '0' : t.toString()); 
    echoLine("");
    echoLine("/*");
    echo("    default action table. action = ");
    echo(prefix );
    echoLine("defred[STATE-NUM],");
    echoLine("    where action is the number of the rule to reduce with.");
    echo("*/");
    printTable<number>('defred', pt.defred, 6, 10, t => t.toString()); 
    echoLine("");
    echoLine("/*");
    echo("    compressed goto table: goto = ");
    echo(prefix  );
    echo("pgoto[");
    echo(prefix );
    echoLine("disgoto[STATE-NUM] + NON_TERMINAL]");
    echo("*/");
    printTable<Item>('pgoto', pt.pgoto, 6, 10, t => {
    if(t === null){
        return '-1';
    }
    else {
        return t.shift.stateIndex.toString();
    }
}); 
    echoLine("");
    echoLine("/*");
    echoLine("    displacement of the goto table");
    echo("*/");
    printTable<number>('disgoto', pt.disgoto, 6, 10, t => t.toString()); 
    echoLine("");
    echoLine("/*");
    echo("    length of each rule: rule length = ");
    echo(prefix );
    echoLine("ruleLen[RULE-NUM]");
    echo("*/");
    printTable<Rule>('ruleLen', pt.g.rules, 6, 10, r => r.rhs.length.toString()); 
    echoLine("");
    echoLine("/*");
    echoLine("    index of the LHS of each rule");
    echo("*/");
    printTable<Rule>('lhs', pt.g.rules, 6, 10, r => r.lhs.index.toString()); 
    echoLine("");
    echoLine("/*");
    echoLine("    token names");
    echo("*/");
    printTable<TokenDef>('tokenNames', pt.g.tokens, 20, 3, t => `"${t.sym}"`); 
    echoLine("");
    echoLine("/*");
    echoLine("    token alias");
    echo("*/");
    printTable<TokenDef>('tokenAlias', pt.g.tokens, 20, 3, t => `"${t.alias}"` || '""'); 
    let className = input.opt.className || 'Parser'; 
    echoLine("");
    function printLexActionsFunc(dfa: DFA<LexAction[]>, n: number){
    let codegen = {
        addBlock(b: string, line: number){ 
    echoLine("");
    echo("                ");
    echo(b );
    },
        pushLexState(n: number){ 
    echoLine("");
    echo("                this._lexState.push(");
    echo(n.toString() );
    echo(");");
    },
        popLexState(){ 
    echoLine("");
    echo("                this._lexState.pop();");
    },
        setImg(n: string){ 
    echoLine("");
    echo("                this._setImg(\"");
    echo(n );
    echo("\");");
    },
        returnToken(t: TokenDef){ 
    echoLine("");
    echoLine("                this._token = {");
    echo("                    id: ");
    echo(t.index.toString() );
    echoLine(",");
    echoLine("                    val: this._matched.join('')");
    echo("                };");
    }
    }; 
    function hasNormalAction(a: LexAction[]){
        for(let act of a){
            if(act.token === -1){
                return true;
            }
        }
        return false;
    }
    let statevn = prefix + 'staten'; 
    echoLine("");
    echo("    private _doLexAction");
    echo(n.toString() );
    echo("(");
    echo(statevn );
    echoLine(": number){");
    echo("        let ");
    echo(prefix );
    echo("tk = ");
    echo(prefix );
    echo("lexTokens");
    echo(n.toString() );
    echo("[");
    echo(statevn );
    echoLine("];");
    echo("        switch(");
    echo(statevn );
    echo("){");
    for(let i = 0, _a = dfa.states; i < _a.length; i++){ 
                if(_a[i].endAction !== null && hasNormalAction(_a[i].endAction.data)){ 
    echoLine("");
    echo("            case ");
    echo(i.toString() );
    echo(":");
    for(let act of _a[i].endAction.data){
                        act.token === -1 && act.toCode(codegen);
                    } 
    echoLine("");
    echo("                break;");
    } 
    } 
    echoLine("");
    echoLine("            default:;");
    echoLine("        }");
    echo("        if(");
    echo(prefix );
    echoLine("tk !== -1){");
    echoLine("            this._token = {");
    echo("                id: ");
    echo(prefix );
    echoLine("tk,");
    echoLine("                val: this._matched.join('')");
    echoLine("            }");
    echoLine("            this._matched.length = 0;");
    echoLine("        }");
    echo("    }");
    } 
    echoLine("");
    echoLine("");
    echoLine("interface Token{");
    echoLine("    id: number;");
    echoLine("    val: string;");
    echoLine("};");
    echoLine("");
    echo("export class ");
    echo(className );
    echoLine(" {");
    echoLine("    // members for lexer");
    echoLine("    private _lexState: number[] = [];");
    echoLine("    private _state: number = 0;");
    echoLine("    private _matched: string[] = [];");
    echoLine("    private _token: Token = null;");
    echoLine("    private _marker: number = -1;");
    echoLine("    private _backup: string[] = [];");
    echoLine("");
    echoLine("    // members for parser");
    echoLine("    private _lrState: number[] = [];");
    echo("    private _sematicS: ");
    echo(input.sematicType );
    echoLine("[] = [];");
    echoLine("");
    echoLine("    /**");
    echoLine("     *  set ");
    echoLine("     */");
    echoLine("    private _setImg(s: string){");
    echoLine("        this._matched.length = 0;");
    echoLine("        for(let i = 0;i < s.length;i++){");
    echoLine("            this._matched.push(s.charAt(i));");
    echoLine("        }");
    echo("    }");
    for(let i = 0, _a = input.dfas; i < _a.length; i++){
        printLexActionsFunc(_a[i], i);
    } 
    echoLine("");
    echoLine("    /**");
    echoLine("     *  do a lexical action");
    echoLine("     *  @api private");
    echoLine("     *  @internal");
    echoLine("     */");
    echoLine("    private _doLexAction(lexstate: number, state: number){");
    echo("        switch(lexstate){");
    for(let i = 0;i < input.dfas.length;i++){ 
    echoLine("");
    echo("            case ");
    echo(i.toString() );
    echoLine(":");
    echo("                this._doLexAction");
    echo(i.toString() );
    echoLine("(state);");
    echo("                break;");
    } 
    echoLine("");
    echoLine("            default:;");
    echoLine("        }");
    echoLine("    }");
    echoLine("    private _acceptChar(c: number){");
    echoLine("        let lexstate = this._lexState[this._lexState.length - 1];");
    echoLine("        this._marker && this._backup.push(String.fromCharCode(c));");
    echoLine("        let retn = { state: this._state, nfa: false, isEnd: false };");
    echo("        ");
    echo(prefix );
    echoLine("lexers[lexstate](c, retn);");
    echoLine("        if(retn.isEnd){");
    echoLine("");
    echoLine("        }");
    echoLine("    }");
    echoLine("");
    echoLine("    private _acceptToken(t: Token){");
    echoLine("        ");
    echoLine("    }");
    echo("}");
    

}