/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/
/*
    constants
*/
var jjlf = '\n'.charCodeAt(0);
var jjcr = '\r'.charCodeAt(0);
/*
    dfa table definations
*/
var jjlexpnext0 = [ 
         1,     1,     2,     3,     4,     5,     6,     7,     8,     9,
        10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
        20,    21,    22,    23,     4,    24,    25,    26,     4,    27,
         4,     4,     4,     4,     4,     4,     4,    28,    29,    30,
        31,    32,    35,     1,     1,     2,     1,    33,     2,     1,
         1,     2,    36,    62,    63,    44,    59,    50,    51,    47,
        48,    45,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    60,    38,    42,
        40,    61,    52,    49,    14,    46,    36,    43,    37,    41,
        39,    34,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    75,    35,    35,    35,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    74,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    73,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    72,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    71,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        70,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    68,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    67,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    66,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    65,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    64,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    58,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    57,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    55,    35,
        35,    35,    56,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        54,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    53,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,
]; 
var jjlexdisnext0 = [ 
         0,    49,    46,    73,   888,    70,    72,   -42,   -42,    71,
        69,   -42,    43,    67,    70,   -42,   -42,    42,    65,    39,
       -42,   -42,   -42,    64,   854,   820,   786,   752,   718,   -42,
        38,   -42,   -42,    43,   -42,   684,   650,   -42,   -42,   -42,
       -42,   -42,   -42,   -42,   -42,   -42,   -42,    63,   -42,   -42,
       -42,    35,   -42,   616,   582,   548,   514,   480,   446,   -42,
       -42,   -42,   -42,   -42,   412,   378,   344,   310,   276,   242,
       208,   174,   140,   106,    72,    38,
]; 
var jjlexchecknext0 = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    75,    33,    33,    33,     2,     2,     2,     1,
         1,     1,    75,    51,    51,    12,    30,    19,    19,    17,
        17,    12,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    74,    30,     6,    10,
         9,    47,    23,    18,    14,    13,    74,    10,     5,     9,
         6,     3,    -1,    -1,    -1,    -1,    74,    74,    74,    74,
        74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
        73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    71,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    69,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    67,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    66,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    66,
        66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
        66,    66,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    65,    65,    65,    65,    65,    65,    65,    65,
        65,    65,    65,    65,    65,    65,    64,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    64,    64,    64,    64,
        64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
        58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    57,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    56,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    55,    55,    55,    55,    55,    55,    55,    55,
        55,    55,    55,    55,    55,    55,    54,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    27,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    25,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    25,    24,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexclassTable0 = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,     3,    -1,    -1,     4,     5,     6,    -1,
         7,     8,     9,    10,    11,    12,    -1,    13,    14,    14,
        14,    14,    14,    14,    14,    14,    14,    14,    15,    16,
        17,    18,    19,    20,    -1,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,    21,    -1,    22,    23,     4,    -1,     4,     4,    24,
        25,    26,    27,     4,    28,    29,     4,     4,    30,     4,
        31,    32,     4,     4,    33,    34,    35,    36,     4,    37,
         4,     4,     4,    38,    39,    40,    41,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,
]; 
var jjlexunicodeClassTable0 = [ 
    
]; 
var jjlexisEnd0 = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,
]; 
var jjlexhasArc0 = [ 
    1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,
    0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,
    1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,
    0,0,1,0,0,0,1,0,1,1,1,1,1,1,0,
    0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
    1,
]; 
var jjlextable0 = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
/*
    dfa tables
*/
var jjdfaTables = [
    jjlextable0,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc, c){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0 = [ 
        -1,    -1,    -1,    48,     2,    11,    29,    38,    39,     6,
         4,    42,     5,     7,     3,    10,    45,    13,    18,    12,
         9,    40,    41,    31,     2,     2,     2,     2,     2,    43,
        30,    44,    32,    -1,    17,     2,     2,    28,    46,    23,
         8,    21,    33,    19,    34,    20,    22,    35,    15,    16,
        14,    36,    25,    52,     2,     2,     2,    49,     2,    24,
        47,    27,    26,    37,     2,    53,     2,     2,    50,     2,
         2,     2,    51,     2,     2,    54,
]; 

var jjstateCount = 144;
var jjtokenCount = 55;
var jjactERR = 145;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact = [ 
        55,    56,    57,    58,    60,    45,   110,    59,     8,     9,
        10,    11,    12,    13,   -79,   -79,   -79,   -79,   -79,   -79,
       -79,   -79,   -79,   -79,   -79,    50,    48,    49,   143,    64,
        65,    53,    52,    54,    61,   -79,    62,   138,   -79,   141,
        73,   -79,    47,    46,    55,    56,    57,    58,    60,    45,
       139,    59,     8,     9,    10,    11,    12,    13,    14,    15,
        16,    17,    18,    19,    20,    21,    22,    23,    24,    50,
        48,    49,   137,    64,    65,    53,    52,    54,    61,    98,
        62,   129,   128,    73,    73,    73,    47,    46,    55,    56,
        57,    58,    60,    45,   -79,    59,     8,     9,    10,    11,
        12,    13,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
       -79,   -79,   -79,    50,    48,    49,   131,    64,    65,    53,
        52,    54,    61,   -79,    62,   -79,   -79,   112,    73,   -79,
        47,    46,    55,    56,    57,    58,    60,    45,   -78,    59,
         8,     9,    10,    11,    12,    13,   -78,   -78,   -78,   -78,
       -78,   -78,   -78,   -78,   -78,   -78,   -78,    50,    48,    49,
       130,    64,    65,    53,    52,    54,    61,   -78,    62,   -78,
       -78,   125,   119,   -78,    47,    46,    55,    56,    57,    58,
        60,    45,   117,    59,     8,     9,    10,    11,    12,    13,
       -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
       -78,    50,    48,    49,    60,    64,    65,    53,    52,    54,
        61,   -78,    62,    73,   -78,   116,   115,   -78,    47,    46,
        55,    56,    57,    58,    60,    45,   111,    59,     8,     9,
        10,    11,    12,    13,    61,    61,    62,    62,    61,   100,
        62,    99,    78,    72,    71,    50,    48,    49,    60,    60,
        36,    53,    52,    54,    61,    60,    62,     7,     0,     0,
         0,     0,    47,    46,    55,    56,    57,    58,    60,    45,
         0,    59,     8,     9,    10,    11,    12,    13,    61,    61,
        62,    62,     0,     0,     0,    61,     0,    62,     0,    50,
        48,    49,     0,     0,     0,    53,    52,    54,    61,     0,
        62,     0,     0,     0,     0,     0,    47,    46,    55,    56,
        57,    58,    60,    45,     0,    59,     8,     9,    10,    11,
        12,    13,     0,     0,     0,     0,     0,     0,     0,    39,
        42,    26,    27,    50,    48,    49,     0,     0,     0,    53,
        52,    54,    61,     0,    62,    55,    56,    57,    58,    60,
        47,    46,    59,     8,     9,    10,    11,    12,    13,    28,
        40,    41,     0,     0,     0,    31,    39,    42,    26,    27,
        50,    48,    49,     0,     0,    29,    53,    52,    54,    61,
         0,    62,    55,    56,    57,    58,    60,    47,    46,    59,
         8,     9,    10,    11,    12,    13,    28,    40,    41,     0,
         0,     0,    31,    39,    42,    26,    27,    50,    48,    49,
         0,     0,    29,    53,    52,    54,    61,     0,    62,    55,
        56,    57,    58,    60,    47,     0,    59,     8,     9,    10,
        11,    12,    13,    28,    40,    41,     0,     0,     0,    31,
        39,    42,    26,    27,    50,    48,    49,     0,     0,    29,
        53,    52,    54,    61,     0,    62,    55,    56,    57,    58,
        60,     0,     0,    59,     8,     9,    10,    11,    12,    13,
        28,    40,    41,     0,     0,     0,    31,    39,    42,    26,
        27,    50,    48,    49,     0,     0,    29,    53,    52,    54,
        61,     0,    62,    55,    56,    57,    58,    60,     0,     0,
        59,     8,     9,    10,    11,    12,    13,    28,    40,    41,
         0,     0,     0,    31,    39,    42,    26,    27,    50,     0,
        49,     0,     0,    29,    53,    52,    54,    61,     0,    62,
        55,    56,    57,    58,    60,     0,     0,    59,     8,     9,
        10,    11,    12,    13,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,    50,     0,     0,     0,     0,
        29,    53,    52,    54,    61,     0,    62,    55,    56,    57,
        58,    60,     0,     0,    59,     8,     9,    10,    11,    12,
        13,    55,    56,    57,    58,    60,     0,     0,    59,     8,
         9,    10,    11,    12,    13,     0,     0,     0,    53,    52,
        54,    61,     3,    62,    39,    42,    26,    27,     0,     0,
         0,     0,    53,    52,    54,    61,     0,    62,     0,     0,
         0,     0,     0,     0,     0,     0,     0,    39,    42,    26,
        27,     0,     0,     0,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,   102,     0,   101,     0,     0,
        29,   104,     0,   105,   106,   107,     6,    28,    40,    41,
         0,     0,     0,    31,    39,    42,    26,    27,   102,   122,
       101,     0,     0,    29,   104,     0,   105,   106,   107,     0,
         0,     0,     0,     0,     0,     0,    39,    42,    26,    27,
         0,     0,     0,     0,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,   102,   121,   101,     0,     0,
        29,   104,     0,   105,   106,   107,    28,    40,    41,     0,
         0,     0,    31,    39,    42,    26,    27,   102,     0,   101,
         0,     0,    29,   104,     0,   105,   106,   107,     0,     0,
         0,     0,     0,     0,     0,    39,    42,    26,    27,     0,
         0,     0,     0,    28,    40,    41,     0,     0,     0,    31,
         0,     0,     0,     0,   102,     0,   101,     0,     0,    29,
       104,     0,   105,   106,   107,    28,    40,    41,     0,     0,
         0,    31,    39,    42,    26,    27,   102,     0,   101,     0,
         0,    29,   104,     0,   105,   106,   107,     0,     0,     0,
         0,     0,     0,     0,    39,    42,    26,    27,     0,     0,
         0,     0,    28,    40,    41,     0,     0,     0,    31,     0,
         0,     0,     0,   102,     0,   101,     0,     0,    29,   104,
         0,   105,   106,   107,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,   102,     0,   101,     0,     0,
        29,   104,     0,   105,   106,   107,    55,    56,    57,    58,
        60,     0,     0,    59,    39,    42,    26,    27,     0,     0,
         0,    39,    42,    26,    27,     0,     0,     0,     0,     0,
         0,     0,    39,    42,    26,    27,     0,    53,    52,    54,
        61,     0,    62,     0,    28,    40,    41,     0,     0,     0,
        31,    28,    40,    41,     0,     0,     0,    31,     0,     0,
        29,     0,    28,    40,    41,     0,     0,    29,    31,    39,
        42,    26,    27,     0,     0,     0,     0,     0,    29,     0,
        39,    42,    26,    27,     0,     0,     0,    39,    42,    26,
        27,     0,     0,     0,     0,     0,     0,     0,     0,    28,
        40,    41,     0,     0,     0,    31,    39,    42,    26,    27,
        28,    40,    41,     0,     0,    29,    31,    28,    40,    41,
         0,     0,     0,    31,     0,     0,    29,    39,    42,    26,
        27,     0,     0,    29,     0,     0,    28,    40,    41,     0,
         0,     0,    31,     0,    39,    42,    26,    27,     0,     0,
         0,     0,    29,    39,    42,    26,    27,    28,    40,    41,
         0,     0,     0,    31,    39,    42,    26,    27,     0,     0,
         0,     0,     0,    29,    28,    40,    41,    57,    58,    60,
        31,     0,    59,    28,    40,    41,     0,     0,     0,    31,
        29,     0,     0,     0,    28,    40,    41,     0,     0,    29,
        31,    39,    42,    26,    27,     0,     0,     0,     0,    61,
        29,    62,    39,    42,    26,    27,     0,     0,     0,    39,
        42,    26,    27,     0,     0,     0,     0,     0,     0,     0,
         0,    28,    40,    41,     0,     0,     0,    31,    39,    42,
        26,    27,    28,    40,    41,     0,     0,    29,    31,    28,
        40,    41,     0,     0,     0,    31,     0,     0,    29,    39,
        42,    26,    27,     0,     0,    29,     0,     0,    28,    40,
        41,     0,     0,     0,    31,     0,    39,    42,    26,    27,
         0,     0,     0,     0,    29,    39,    42,    26,    27,    28,
        40,    41,     0,     0,     0,    31,    39,    42,    26,    27,
         0,     0,     0,     0,     0,    29,    28,    40,    41,    57,
        58,    60,    31,     0,    59,    28,    40,    41,     0,     0,
         0,    31,    29,     0,     0,     0,    28,    40,    41,     0,
         0,    29,    31,    39,    42,    26,    27,     0,     0,     0,
         0,    61,    29,    62,    39,    42,    26,    27,     0,     0,
         0,    39,    42,    26,    27,     0,     0,     0,     0,     0,
         0,     0,     0,    28,    40,    41,     0,     0,     0,    31,
        39,    42,    26,    27,    28,    40,    41,     0,     0,    29,
        31,    28,    40,    41,     0,     0,     0,    31,     0,     0,
        29,    39,    42,    26,    27,     0,     0,    29,     0,     0,
        28,    40,    41,     0,     0,     0,    31,     0,    39,    42,
        26,    27,     0,     0,     0,     0,    29,    39,    42,    26,
        27,    28,    40,    41,     0,     0,     0,    31,    39,    42,
        26,    27,     0,     0,     0,     0,     0,    29,    28,    40,
        41,     0,     0,     0,    31,     0,     0,    28,    40,    41,
         0,     0,     0,    31,    29,     0,     0,     0,    28,    40,
        41,     0,     0,    29,    31,    39,    42,    26,    27,     0,
         0,     0,     0,     0,    29,     0,    39,    42,    26,    27,
        55,    56,    57,    58,    60,     0,     0,    59,     0,     0,
         0,     0,     0,     0,     0,    28,    40,    41,     0,     0,
         0,    31,     0,     0,     0,     0,    28,    40,    41,     0,
         0,    29,    31,     0,    61,     0,    62,    55,    56,    57,
        58,    60,    29,     0,    59,    55,    56,    57,    58,    60,
         0,     0,    59,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    61,     0,    62,     0,     0,     0,     0,     0,    61,
         0,    62,
]; 
/*
    displacement of action table.
*/
var jjdisact = [ 
       -55,   602,   -55,   -55,   -55,   219,   248,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
       -55,   -55,   -55,   -55,    40,  1324,  1313,  1276,  1265,   -55,
      1256,   172,    -4,   205,   201,   -55,   -55,   304,   -55,  1239,
      1218,   -55,   200,   260,  1199,  1192,  1181,  1144,  1133,  1124,
      1107,  1086,  1067,  1060,  1049,  1012,  1001,   992,   975,   954,
       935,   928,   917,   -55,   -55,   200,   197,   577,   452,    40,
       198,   237,   880,   128,   216,    84,   -55,   869,    -4,   378,
       415,   489,   526,   563,   852,  1371,  1363,  1326,  1153,  1021,
       247,   241,   240,   196,   187,    86,   172,   -55,   -55,   -55,
       -55,   -55,   171,   177,   144,   802,   134,   128,    84,   862,
       -55,   -55,   662,   625,   -55,   512,   475,   120,   438,   341,
       -55,   -55,    43,    42,   122,    71,    41,   780,   743,   401,
       364,    22,   -55,    -2,     5,   -55,   721,    -6,   327,   -55,
       -55,   -11,   684,   -55,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact = [ 
        78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
        78,    78,    78,    78,    32,    32,    32,    32,    32,    32,
        32,    32,    32,    32,    32,    78,    78,    78,   141,    32,
        32,    78,    78,    78,    78,    32,    78,   133,    32,   137,
       133,    32,    78,    78,    69,    69,    69,    69,    69,    69,
       134,    69,    69,    69,    69,    69,    69,    69,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    69,
        69,    69,   131,    24,    24,    69,    69,    69,    69,    69,
        69,   123,   122,   126,   123,   122,    69,    69,   108,   108,
       108,   108,   108,   108,    75,   108,   108,   108,   108,   108,
       108,   108,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,   108,   108,   108,   125,    75,    75,   108,
       108,   108,   108,    75,   108,    75,    75,    95,    95,    75,
       108,   108,   107,   107,   107,   107,   107,   107,    73,   107,
       107,   107,   107,   107,   107,   107,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,   107,   107,   107,
       124,    73,    73,   107,   107,   107,   107,    73,   107,    73,
        73,   117,   106,    73,   107,   107,    96,    96,    96,    96,
        96,    96,   104,    96,    96,    96,    96,    96,    96,    96,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    96,    96,    96,    93,    31,    31,    96,    96,    96,
        96,    31,    96,   102,    31,   103,   102,    31,    96,    96,
        74,    74,    74,    74,    74,    74,    94,    74,    74,    74,
        74,    74,    74,    74,    93,    66,    93,    66,    65,    71,
        65,    70,    42,    34,    33,    74,    74,    74,    92,    91,
         6,    74,    74,    74,    74,    90,    74,     5,     0,     0,
         0,     0,    74,    74,    43,    43,    43,    43,    43,    43,
         0,    43,    43,    43,    43,    43,    43,    43,    92,    91,
        92,    91,     0,     0,     0,    90,     0,    90,     0,    43,
        43,    43,     0,     0,     0,    43,    43,    43,    43,     0,
        43,     0,     0,     0,     0,     0,    43,    43,    37,    37,
        37,    37,    37,    37,     0,    37,    37,    37,    37,    37,
        37,    37,     0,     0,     0,     0,     0,     0,     0,   138,
       138,   138,   138,    37,    37,    37,     0,     0,     0,    37,
        37,    37,    37,     0,    37,   119,   119,   119,   119,   119,
        37,    37,   119,   119,   119,   119,   119,   119,   119,   138,
       138,   138,     0,     0,     0,   138,   130,   130,   130,   130,
       119,   119,   119,     0,     0,   138,   119,   119,   119,   119,
         0,   119,    79,    79,    79,    79,    79,   119,   119,    79,
        79,    79,    79,    79,    79,    79,   130,   130,   130,     0,
         0,     0,   130,   129,   129,   129,   129,    79,    79,    79,
         0,     0,   130,    79,    79,    79,    79,     0,    79,    80,
        80,    80,    80,    80,    79,     0,    80,    80,    80,    80,
        80,    80,    80,   129,   129,   129,     0,     0,     0,   129,
       118,   118,   118,   118,    80,    80,    80,     0,     0,   129,
        80,    80,    80,    80,     0,    80,    68,    68,    68,    68,
        68,     0,     0,    68,    68,    68,    68,    68,    68,    68,
       118,   118,   118,     0,     0,     0,   118,   116,   116,   116,
       116,    68,    68,    68,     0,     0,   118,    68,    68,    68,
        68,     0,    68,    81,    81,    81,    81,    81,     0,     0,
        81,    81,    81,    81,    81,    81,    81,   116,   116,   116,
         0,     0,     0,   116,   115,   115,   115,   115,    81,     0,
        81,     0,     0,   116,    81,    81,    81,    81,     0,    81,
        82,    82,    82,    82,    82,     0,     0,    82,    82,    82,
        82,    82,    82,    82,   115,   115,   115,     0,     0,     0,
       115,     0,     0,     0,     0,    82,     0,     0,     0,     0,
       115,    82,    82,    82,    82,     0,    82,    83,    83,    83,
        83,    83,     0,     0,    83,    83,    83,    83,    83,    83,
        83,    67,    67,    67,    67,    67,     0,     0,    67,    67,
        67,    67,    67,    67,    67,     0,     0,     0,    83,    83,
        83,    83,     1,    83,     1,     1,     1,     1,     0,     0,
         0,     0,    67,    67,    67,    67,     0,    67,     0,     0,
         0,     0,     0,     0,     0,     0,     0,   113,   113,   113,
       113,     0,     0,     0,     1,     1,     1,     0,     0,     0,
         1,     0,     0,     0,     0,     1,     0,     1,     0,     0,
         1,     1,     0,     1,     1,     1,     1,   113,   113,   113,
         0,     0,     0,   113,   112,   112,   112,   112,   113,   113,
       113,     0,     0,   113,   113,     0,   113,   113,   113,     0,
         0,     0,     0,     0,     0,     0,   142,   142,   142,   142,
         0,     0,     0,     0,   112,   112,   112,     0,     0,     0,
       112,     0,     0,     0,     0,   112,   112,   112,     0,     0,
       112,   112,     0,   112,   112,   112,   142,   142,   142,     0,
         0,     0,   142,   136,   136,   136,   136,   142,     0,   142,
         0,     0,   142,   142,     0,   142,   142,   142,     0,     0,
         0,     0,     0,     0,     0,   128,   128,   128,   128,     0,
         0,     0,     0,   136,   136,   136,     0,     0,     0,   136,
         0,     0,     0,     0,   136,     0,   136,     0,     0,   136,
       136,     0,   136,   136,   136,   128,   128,   128,     0,     0,
         0,   128,   127,   127,   127,   127,   128,     0,   128,     0,
         0,   128,   128,     0,   128,   128,   128,     0,     0,     0,
         0,     0,     0,     0,   105,   105,   105,   105,     0,     0,
         0,     0,   127,   127,   127,     0,     0,     0,   127,     0,
         0,     0,     0,   127,     0,   127,     0,     0,   127,   127,
         0,   127,   127,   127,   105,   105,   105,     0,     0,     0,
       105,     0,     0,     0,     0,   105,     0,   105,     0,     0,
       105,   105,     0,   105,   105,   105,    84,    84,    84,    84,
        84,     0,     0,    84,   109,   109,   109,   109,     0,     0,
         0,    77,    77,    77,    77,     0,     0,     0,     0,     0,
         0,     0,    72,    72,    72,    72,     0,    84,    84,    84,
        84,     0,    84,     0,   109,   109,   109,     0,     0,     0,
       109,    77,    77,    77,     0,     0,     0,    77,     0,     0,
       109,     0,    72,    72,    72,     0,     0,    77,    72,    62,
        62,    62,    62,     0,     0,     0,     0,     0,    72,     0,
        61,    61,    61,    61,     0,     0,     0,    60,    60,    60,
        60,     0,     0,     0,     0,     0,     0,     0,     0,    62,
        62,    62,     0,     0,     0,    62,    59,    59,    59,    59,
        61,    61,    61,     0,     0,    62,    61,    60,    60,    60,
         0,     0,     0,    60,     0,     0,    61,    58,    58,    58,
        58,     0,     0,    60,     0,     0,    59,    59,    59,     0,
         0,     0,    59,     0,    57,    57,    57,    57,     0,     0,
         0,     0,    59,    56,    56,    56,    56,    58,    58,    58,
         0,     0,     0,    58,    55,    55,    55,    55,     0,     0,
         0,     0,     0,    58,    57,    57,    57,    89,    89,    89,
        57,     0,    89,    56,    56,    56,     0,     0,     0,    56,
        57,     0,     0,     0,    55,    55,    55,     0,     0,    56,
        55,    54,    54,    54,    54,     0,     0,     0,     0,    89,
        55,    89,    53,    53,    53,    53,     0,     0,     0,    52,
        52,    52,    52,     0,     0,     0,     0,     0,     0,     0,
         0,    54,    54,    54,     0,     0,     0,    54,    51,    51,
        51,    51,    53,    53,    53,     0,     0,    54,    53,    52,
        52,    52,     0,     0,     0,    52,     0,     0,    53,    50,
        50,    50,    50,     0,     0,    52,     0,     0,    51,    51,
        51,     0,     0,     0,    51,     0,    49,    49,    49,    49,
         0,     0,     0,     0,    51,    48,    48,    48,    48,    50,
        50,    50,     0,     0,     0,    50,    47,    47,    47,    47,
         0,     0,     0,     0,     0,    50,    49,    49,    49,    88,
        88,    88,    49,     0,    88,    48,    48,    48,     0,     0,
         0,    48,    49,     0,     0,     0,    47,    47,    47,     0,
         0,    48,    47,    46,    46,    46,    46,     0,     0,     0,
         0,    88,    47,    88,    45,    45,    45,    45,     0,     0,
         0,    44,    44,    44,    44,     0,     0,     0,     0,     0,
         0,     0,     0,    46,    46,    46,     0,     0,     0,    46,
        40,    40,    40,    40,    45,    45,    45,     0,     0,    46,
        45,    44,    44,    44,     0,     0,     0,    44,     0,     0,
        45,    39,    39,    39,    39,     0,     0,    44,     0,     0,
        40,    40,    40,     0,     0,     0,    40,     0,    30,    30,
        30,    30,     0,     0,     0,     0,    40,    28,    28,    28,
        28,    39,    39,    39,     0,     0,     0,    39,    27,    27,
        27,    27,     0,     0,     0,     0,     0,    39,    30,    30,
        30,     0,     0,     0,    30,     0,     0,    28,    28,    28,
         0,     0,     0,    28,    30,     0,     0,     0,    27,    27,
        27,     0,     0,    28,    27,    26,    26,    26,    26,     0,
         0,     0,     0,     0,    27,     0,    25,    25,    25,    25,
        87,    87,    87,    87,    87,     0,     0,    87,     0,     0,
         0,     0,     0,     0,     0,    26,    26,    26,     0,     0,
         0,    26,     0,     0,     0,     0,    25,    25,    25,     0,
         0,    26,    25,     0,    87,     0,    87,    86,    86,    86,
        86,    86,    25,     0,    86,    85,    85,    85,    85,    85,
         0,     0,    85,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,    86,     0,    86,     0,     0,     0,     0,     0,    85,
         0,    85,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred = [ 
         2,    -1,     0,     1,     3,    -1,     6,    62,    63,    64,
        65,    66,    67,    51,    52,    53,    54,    55,    56,    57,
        58,    59,    60,    61,    48,    -1,    -1,    -1,    -1,    45,
        -1,    48,    48,    -1,     5,     8,     9,    23,    75,    -1,
        -1,    74,    73,    71,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        69,    -1,    -1,    49,    50,    41,    42,    43,    44,    -1,
        -1,    -1,    -1,    48,    -1,    48,    68,    72,    -1,    26,
        27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
        37,    38,    39,    40,    -1,    -1,    24,    46,    10,     7,
        11,    10,    -1,    -1,    -1,    -1,    -1,    22,    70,    -1,
        47,    76,    -1,    -1,    13,    -1,    -1,    -1,    20,    25,
         4,    12,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,
        20,    18,    15,    -1,    -1,    14,    -1,    -1,    20,    19,
        16,    -1,    -1,    17,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto = [ 
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
         3,    50,   143,    50,     4,   102,    37,   102,    37,   141,
       126,    37,    29,    24,    29,    24,   139,    29,    24,   102,
        37,   134,   126,    37,   133,    37,    29,    24,    50,    29,
        24,    29,    24,   132,    50,   131,   102,    37,   102,    37,
       125,   126,    37,    29,    24,    29,    24,    50,    29,    24,
       123,    37,   122,    37,    50,    62,    62,    29,    24,    29,
        24,    36,   119,    36,   102,    37,   102,    37,    29,    24,
       108,    29,    24,    29,    24,   117,    29,    24,   102,    37,
       135,   107,   113,    96,   112,    29,    24,    29,    24,    29,
        24,    95,    37,    33,    34,    50,    50,    43,    29,    24,
        94,    42,    93,    29,    24,    92,    76,    91,    29,    24,
        90,    29,    24,    29,    24,    89,    29,    24,    88,    62,
        87,    29,    24,    86,    29,    24,    29,    24,    85,    29,
        24,    84,    62,    83,    29,    24,    82,    29,    24,    29,
        24,    81,    29,    24,    80,    62,    79,    29,    24,    78,
        29,    24,    29,    24,    74,    29,    24,    74,     1,    69,
        29,    75,    68,    29,    73,    29,    24,    67,    29,    24,
        66,    -1,    65,    29,    24,    -1,    29,    24,    29,    24,
    
]; 
/*
    displacement of the goto table
*/
var jjdisgoto = [ 
       177,    18,   -18,   -18,   -18,   -18,   110,   -18,   -18,   -18,
       -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,
       -18,   -18,   -18,   -18,   154,   182,   180,   177,   172,   -18,
       169,   141,   128,   -18,   -18,   -18,   -18,    -5,   -18,   167,
       164,   -18,   111,    -6,   159,   156,   154,   151,   146,   143,
       141,   138,   133,   130,   128,   125,   120,   117,   115,   112,
       107,   102,    93,   -18,   -18,   104,   103,     3,     2,    -7,
       -18,   -18,    91,    65,    -8,    64,   -18,    80,   -12,     1,
         0,    -1,    -2,    -3,     7,     6,     5,     4,    11,     9,
        62,    55,    42,    36,   -18,   -18,    -9,   -18,    99,   -18,
       -18,    97,   -18,   -18,   -18,    89,   -18,   -10,   -11,    72,
       -18,   -18,    77,    75,   -18,    63,    61,   -18,    52,    -4,
       -18,   -18,   -18,   -18,   -18,   -18,   -18,    49,    47,    35,
        33,    93,   -18,   -18,   -18,   -18,    30,   -18,    21,   -18,
       -18,   -18,    16,   -18,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen = [ 
         2,     2,     0,     1,     7,     1,     0,     3,     1,     2,
         0,     1,     3,     2,     6,     5,     7,     9,     0,     2,
         0,     1,     3,     1,     3,     5,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     2,     2,     2,     2,     1,     3,     4,     1,     2,
         2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,     1,     1,     2,     0,
         3,     1,     1,     0,     1,     1,     4,     2,     2,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs = [ 
         0,     1,     1,     2,     2,     3,     3,     4,     4,     5,
         5,     6,     6,     6,     6,     6,     6,     6,     7,     7,
         8,     8,     9,     9,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    12,    12,    12,    12,    12,    12,    13,    13,
        14,    14,    15,    15,    16,    17,    17,    17,    17,
]; 
/*
    token names
*/
var jjtokenNames = [ 
                   "EOF",             "ERROR",              "NAME",
                   "NUM",              "PLUS",             "MINUS",
                 "TIMES",            "DIVIDE",               "EXP",
              "QUESTION",             "COLON",           "PERCENT",
                    "GT",                "LT",              "GTOE",
                  "LTOE",               "EQU",               "NEQ",
                "ASSIGN",       "PLUS_ASSIGN",      "MINUS_ASSIGN",
          "TIMES_ASSIGN",     "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",
         "BIT_OR_ASSIGN",    "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN",
     "LEFT_SHIFT_ASSIGN",        "MOD_ASSIGN",           "BIT_AND",
                "BIT_OR",           "BIT_XOR",           "BIT_NOT",
                   "INC",               "DEC",        "LEFT_SHIFT",
           "RIGHT_SHIFT",      "RIGHT_SHIFT2",               "BRA",
                   "KET",              "CBRA",              "CKET",
                 "COMMA",              "BBRA",              "BKET",
                   "EOL",               "AND",                "OR",
                   "NOT",                "IF",              "ELSE",
                 "WHILE",                "DO",               "FOR",
              "FUNCTION",
]; 
/*
    token alias
*/
var jjtokenAlias = [ 
                    null,                null,                null,
                    null,                 "+",                 "-",
                     "*",                 "/",                "**",
                     "?",                 ":",                 "%",
                     ">",                 "<",                ">=",
                    "<=",                "==",                "!=",
                     "=",                "+=",                "-=",
                    "*=",                "/=",                "&=",
                    "|=",                "^=",               ">>=",
                   "<<=",                "%=",                 "&",
                     "|",                 "^",                 "~",
                    "++",                "--",                "<<",
                    ">>",               ">>>",                 "(",
                     ")",                 "[",                 "]",
                     ",",                 "{",                 "}",
                     ";",                "&&",                "||",
                     "!",                "if",              "else",
                 "while",                "do",               "for",
              "function",
]; 


function tokenToString(tk){
    return jjtokenAlias[tk] === null ? "<" + jjtokenNames[tk] + ">" : '"' + jjtokenAlias[tk] + '"';
}
function getExpectedTokens(state){
        var dis = jjdisact[state];
        var ret = [];
        function expect(tk){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && ret.push(tk);
        }
        return ret;
}
// Token kinds
var TokenKind = {
    EOF : 0,
    ERROR : 1,
    NAME : 2,
    NUM : 3,
    PLUS : 4,
    MINUS : 5,
    TIMES : 6,
    DIVIDE : 7,
    EXP : 8,
    QUESTION : 9,
    COLON : 10,
    PERCENT : 11,
    GT : 12,
    LT : 13,
    GTOE : 14,
    LTOE : 15,
    EQU : 16,
    NEQ : 17,
    ASSIGN : 18,
    PLUS_ASSIGN : 19,
    MINUS_ASSIGN : 20,
    TIMES_ASSIGN : 21,
    DIVIDE_ASSIGN : 22,
    BIT_AND_ASSIGN : 23,
    BIT_OR_ASSIGN : 24,
    BIT_XOR_ASSIGN : 25,
    RIGHT_SHIFT_ASSIGN : 26,
    LEFT_SHIFT_ASSIGN : 27,
    MOD_ASSIGN : 28,
    BIT_AND : 29,
    BIT_OR : 30,
    BIT_XOR : 31,
    BIT_NOT : 32,
    INC : 33,
    DEC : 34,
    LEFT_SHIFT : 35,
    RIGHT_SHIFT : 36,
    RIGHT_SHIFT2 : 37,
    BRA : 38,
    KET : 39,
    CBRA : 40,
    CKET : 41,
    COMMA : 42,
    BBRA : 43,
    BKET : 44,
    EOL : 45,
    AND : 46,
    OR : 47,
    NOT : 48,
    IF : 49,
    ELSE : 50,
    WHILE : 51,
    DO : 52,
    FOR : 53,
    FUNCTION : 54,

};
function Token(id, val, startLine, startColumn, endLine, endColumn){
    this.id = id;
    this.val = val;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
}
Token.prototype.clone = function(){
    return new Token(
        this.id,
        this.val,
        this.startLine,
        this.startColumn,
        this.endLine,
        this.endColumn
    );
}
Token.prototype.toString = function(){
    return (jjtokenAlias[this.id] === null ? 
        '<' + jjtokenNames[this.id] + '>' :
        '"' + jjtokenAlias[this.id] + '"') + "(" + this.val + ")";
}
var LineTerm = {
    NONE: 1,
    AUTO: 2,
    CR: 3,
    LF: 4,
    CRLF: 5
};

function createParser() {
    //#region parser state variables
    var jjlexState;
    var jjstate;
    var jjlastCR;
    var jjmatched;
    var jjmarker = { state: -1, line: 0, column: 0 };
    var jjbackupCount;
    var jjline;
    var jjcolumn;
    var jjtline;
    var jjtcolumn;

    var jjlrState;
    var jjsematicS;
    //#endregion

    var jjinput;
    var jjsematicVal;
    var jjtokenQueue;
    var jjtoken;
    var jjstop;
    var jjtokenEmitted;
    var jjenableBlock = true;
    var jjlineTerm;

    var jjhandlers = {};

    // extra members, defined by %extra_arg
    

    return {
        init: init,
        on: on,
        setLineTerminator: setLineTerminator,
        getLineTerminator: function() { return jjlineTerm; },
        accept: accept,
        end: end,
        load: load,
        nextToken: nextToken,
        halt: halt,
        enableBlocks: enableBlocks,
        disableBlocks: disableBlocks,
        loadParserState: loadParserState,
        getParserState: getParserState,
        parse: parse
    };
    function init(){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjtokenQueue = [];

        jjlineTerm = LineTerm.AUTO;
        jjlastCR = false;

        

        jjtryReduce();
    }
    function load(input){
        if(typeof input === 'string'){
            var i = 0;
            var s = input;
            jjinput = {
                current: function(){ return i < s.length ? s.charCodeAt(i) : null; },
                next: function(){ return i++; },
                isEof: function(){ return i >= s.length; },
                backup: function(t){ return i -= t.length; }
            }
        }
        else {
            jjinput = input;
        }
    }
    function nextToken(){
        jjtokenEmitted = false;
        while(!jjstop && !jjtokenEmitted){
            var c = jjinput.current();
            if(c !== null){
                jjacceptChar(c);
            }
            // null means end of file or no input available at present
            else if(jjinput.isEof()){
                if(jjacceptEOF()){
                    break;
                }
            }
            else {
                return null;
            }
        }
        return jjtoken;
    }
    function setLineTerminator(lt){
        jjlineTerm = lt;
    }
    function enableBlocks(){
        jjenableBlock = true;
    }
    function disableBlocks(){
        jjenableBlock = false;
    }
    /**
     *  input a string
     *  @api public
     *  @deprecated
     */
    function accept(s){
        var i = 0;
        load({
            current: function(){ return i < s.length ? s.charCodeAt(i) : null; },
            next: function(){ return i++; },
            isEof: function(){ return i >= s.length; },
            backup: function(t){ return i -= t.length; }
        });
        while(!jjstop && nextToken().id !== 0);
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        
    }
    function parse(input) {
        load(input);
        var t;
        while(!jjstop){
            t = nextToken();
            if(t === null){
                return false;
            }
            else if(t.id === 0){
                return true;
            }
        }
        return true;
    }
    function halt(){
        jjstop = true;
    }
    function loadParserState(state){
        jjlexState = state.lexState;
        jjlrState = state.lrState;
        jjsematicS = state.sematicS;
    }
    function getParserState() {
        return {
            lexState: jjlexState,
            lrState: jjlrState,
            sematicS: jjsematicS
        };
    }
    /**
     *  set 
     */
    function jjsetImg(s){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjtokenQueue.push(jjtoken);

        jjtokenEmitted = true;
        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjemit(name, a1, a2, a3){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name, cb){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 33:
                jjsetImg(""); 
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate, state){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            default:;
        }
        jjtokenQueue.length > 0 && jjacceptToken(null);
    }
    function jjrollback(){
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjinput.backup(ret);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c){
        // c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        switch(jjlineTerm){
            case LineTerm.NONE:
                jjcolumn += c > 0xff ? 2 : 1;
                break;
            case LineTerm.CR:
                c === jjcr ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
                break;
            case LineTerm.LF:
                c === jjlf ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
                break;
            case LineTerm.CRLF:
                if(jjlastCR){
                    if(c === jjlf){
                        jjline++, jjcolumn = 0;
                        jjlastCR = false;
                    }
                    else {
                        jjcolumn += c > 0xff ? 2 : 1;
                        jjlastCR = c === jjcr;
                    }
                }
                else {
                    jjcolumn += c > 0xff ? 2 : 1;
                    jjlastCR = c === jjcr;
                }
                break;
            case LineTerm.AUTO:
                if(jjlastCR){
                    if(c === jjlf){
                        jjline++, jjcolumn = 0;
                        jjlastCR = false;
                        jjlineTerm = LineTerm.CRLF;
                    }
                    else {
                        jjline++, jjcolumn = 0;
                        jjlineTerm = LineTerm.CR;
                        c === jjcr ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
                    }
                }
                else if(c === jjlf){
                    jjline++, jjcolumn = 0;
                    jjlineTerm = LineTerm.LF;
                }
                else {
                    jjcolumn += c > 0xff ? 2 : 1;
                    jjlastCR = c === jjcr;
                }
                break;
        }
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        jjinput.next();
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    jjconsume(ccode);
                    // check for terminate state
                    jjtryLexEnd();
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    // accept(s);
                    // character not consumed
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    jjconsume(ccode);
                    // emit an error token
                    jjprepareToken(1);
                    jjtokenQueue.length > 0 && jjacceptToken(null);
                    jjstate = 0;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                jjconsume(ccode);
                // check for terminate state
                jjtryLexEnd();
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjacceptToken(null);
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                jjprepareToken(1);
                jjtokenQueue.length > 0 && jjacceptToken(null);
                jjstate = 0;
                return true;
            }
        }
    }
    function jjtryLexEnd(){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        if(isEnd && !hasArc){
            jjdoLexAction(lexstate, jjstate);
            jjmarker.state = -1;
            jjbackupCount = 0;
            jjstate = 0;
        }
    }
    function jjdoReduction(jjrulenum){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjacceptToken(tk){
        // look up action table
        var shifted = false;
        tk !== null && jjtokenQueue.push(tk);
        while(!jjstop && jjtokenQueue.length > 0){
            var t = jjtokenQueue[0];
            var cstate = jjlrState[jjlrState.length - 1];
            var ind = jjdisact[cstate] + t.id;
            var act = 0;
            if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
                act = -jjdefred[cstate] - 1;
            }
            else {
                act = jjpact[ind];
            }
            if(act === jjactERR){
                // explicit error
                jjsyntaxError(t);
                jjtokenQueue.shift();
            }
            else if(act > 0){
                // shift
                if(t.id === 0){
                    // end of file
                    jjstop = true;
                    jjemit('accept');
                    jjtokenQueue.shift();
                }
                else {
                    jjlrState.push(act - 1);
                    jjsematicS.push(jjsematicVal);
                    jjsematicVal = null;
                    jjtryReduce();
                    // token consumed
                    jjtokenQueue.shift();
                }
            }
            else if(act < 0){
                jjdoReduction(-act - 1);
                jjtryReduce();
            }
            else {
                // error
                jjsyntaxError(t);
                // force consume
                jjtokenQueue.shift();
            }
        }
    }
    function jjtryReduce(){
        var cstate = jjlrState[jjlrState.length - 1];
        var act;
        while(jjdisact[cstate] === -jjtokenCount && (act = jjdefred[cstate]) !== -1){
            jjdoReduction(act);
            cstate = jjlrState[jjlrState.length - 1];
        }
    }
    function jjsyntaxError(t){
        jjemit("syntaxerror", t, jjlrState[jjlrState.length - 1]);
    }
}
