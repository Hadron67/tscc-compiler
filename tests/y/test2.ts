/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/


/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 43){
                ret.state = 1;
            }
            else if(c === 114){
                ret.state = 2;
            }
            else {
                ret.state = -1;
            }
            break;
        case 1:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 3;
            }
            else {
                ret.state = -1;
            }
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 114){
                ret.state = 4;
            }
            else {
                ret.state = -1;
            }
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 5;
            }
            else {
                ret.state = -1;
            }
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 104){
                ret.state = 6;
            }
            else {
                ret.state = -1;
            }
            break;
        case 6:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
let jjlexers = [
    moveDFA0,
];

/*
    tokens that a lexical dfa state can return
*/
let jjlexTokens0 = [ 
        -1,     2,    -1,    -1,    -1,    -1,     1,
]; 

let jjstateCount = 10;
let jjtokenCount = 3;
let jjactERR = 11;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
let jjpact = [ 
        10,     9,    -7,     6,     0,     0,
]; 
/*
    displacement of action table.
*/
let jjdisact = [ 
        -3,     3,     1,    -3,     0,    -3,    -3,    -2,    -3,    -3,
    
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
let jjcheckact = [ 
         7,     4,     2,     1,     0,     0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
let jjdefred = [ 
         6,    -1,     1,     3,    -1,     0,     2,    -1,     5,     4,
    
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
let jjpgoto = [ 
         7,     6,    -1,     4,     1,     2,     3,    -1,     4,
]; 
/*
    displacement of the goto table
*/
let jjdisgoto = [ 
         3,    -6,    -2,    -6,    -4,    -6,    -6,    -6,    -6,    -6,
    
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
let jjruleLen = [ 
         2,     1,     2,     1,     3,     1,     0,
]; 
/*
    index of the LHS of each rule
*/
let jjlhs = [ 
         0,     1,     2,     2,     3,     4,     5,
]; 
/*
    token names
*/
let jjtokenNames = [ 
                   "EOF",            "STRING",              "PLUS",
    
]; 
/*
    token alias
*/
let jjtokenAlias = [ 
                    null,             "rtrth",                 "+",
    
]; 


export function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}

export class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}

export class Parser {
    // members for lexer
    private _lexState: number[];
    private _state: number;
    private _matched: string[];
    private _token: Token;
    private _marker: number;
    private _markerLine;
    private _markerColumn;
    private _backupCount: number;
    private _inputBuf: string[] = [];
    private _line: number;
    private _column: number;
    private _tline: number;
    private _tcolumn: number;

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: any[] = [];

    private _stop = false;

    private _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    

    constructor(){
        this.init();
    }
    init(){
        this._lexState = [ 0 ];// DEFAULT
        this._state = 0;
        this._matched = [];
        this._token = null;
        this._marker = -1;
        this._markerLine = this._markerColumn = 0;
        this._backupCount = 0;
        this._inputBuf = [];
        this._line = this._tline = 0;
        this._column = this._tcolumn = 0;
        
        this._lrState = [ 0 ];
        this._sematicS = [];

        this._stop = false;
    }
    /**
     *  set 
     */
    private _setImg(s: string){
        this._matched.length = 0;
        for(let i = 0;i < s.length;i++){
            this._matched.push(s.charAt(i));
        }
        this._tline = this._line;
        this._tcolumn = this._column;
    }
    private _returnToken(tid: number){
        this._token = new Token(
            tid,
            this._matched.join(''),
            this._tline,
            this._tcolumn,
            this._line,
            this._column
        );
        this._matched.length = 0;
        this._tline = this._line;
        this._tcolumn = this._column;
        this._emit('token', jjtokenNames[this._token.id], this._token.val);
        while(!this._stop && !this._acceptToken(this._token));
        this._token = null;
    }
    private _emit(name: string, a1?, a2?, a3?){
        let cbs = this._handlers[name];
        if(cbs){
            for(let cb of cbs){
                cb(a1, a2, a3);
            }
        }
    }
    on(name: string, cb: (a1?, a2?, a3?) => any){
        this._handlers[name] || (this._handlers[name] = []);
        this._handlers[name].push(cb);
    }
    private _doLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        switch(jjstaten){
            default:;
        }
        jjtk !== -1 && this._returnToken(jjtk);
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    private _doLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                this._doLexAction0(state);
                break;
            default:;
        }
        this._token !== null && (this._acceptToken(this._token), (this._token = null));
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    private _acceptChar(c: string){
        let lexstate = this._lexState[this._lexState.length - 1];
        let retn = { state: this._state, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    this._doLexAction(lexstate, this._state);
                    // recover
                    this._marker = -1;
                    this._backupCount = 0;
                    this._state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    this._marker = this._state;
                    this._markerLine = this._line;
                    this._markerColumn = this._column;
                    this._state = retn.state;
                    this._backupCount = 1;
                    c === '\n' ? (this._line++, this._column = 0) : (this._column++);
                    this._matched.push(c);
                    // character consumed
                    return true;
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                this._doLexAction(lexstate, this._state);
                // recover
                this._marker = -1;
                this._backupCount = 0;
                this._state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(this._marker !== -1){
                    // we have a previously marked state, which is a terminate state.
                    // rollback
                    this._state = this._marker;
                    this._marker = -1;
                    this._line = this._markerLine;
                    this._column = this._markerColumn;
                    while(this._backupCount --> 0){
                        this._inputBuf.push(this._matched.pop());
                    }
                    this._doLexAction(lexstate, this._state);
                    this._state = 0;
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    this._emit('lexicalerror', `unexpected character "${c}"`);
                    // force consume
                    return true;
                }
            }
            else {
                this._state = retn.state;
                c === '\n' ? (this._line++, this._column = 0) : (this._column++);
                this._matched.push(c);
                // character consumed
                return true;
            }
        }
    }
    private _acceptEOF(){
        if(this._state === 0){
            // recover
            this._returnToken(0);
            return true;
        }
        else {
            let lexstate = this._lexState[this._lexState.length - 1];
            let retn = { state: this._state, hasArc: false, isEnd: false };
            jjlexers[lexstate](-1, retn);
            if(retn.isEnd){
                this._doLexAction(lexstate, this._state);
                this._state = 0;
                this._marker = -1;
                return false;
            }
            else if(this._marker !== -1){
                this._state = this._marker;
                this._marker = -1;
                this._line = this._markerLine;
                this._column = this._markerColumn;
                while(this._backupCount --> 0){
                    this._inputBuf.push(this._matched.pop());
                }
                this._doLexAction(lexstate, this._state);
                this._state = 0;
                return false;
            }
            else {
                this._emit('lexicalerror', 'unexpected end of file');
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    accept(s: string){
        if(!this._stop){
            for(let i = s.length - 1; i >= 0; i--){
                this._inputBuf.push(s.charAt(i));
            }
            while(!this._stop && this._inputBuf.length > 0){
                this._acceptChar(this._inputBuf[this._inputBuf.length - 1]) && this._inputBuf.pop();
            }
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    end(){
        while(!this._stop){
            if(this._inputBuf.length > 0){
                this._acceptChar(this._inputBuf[this._inputBuf.length - 1]) && this._inputBuf.pop();
            }
            else if(this._acceptEOF()){
                break;
            }
        }
        this._stop = true;
    }
    halt(){
        this._stop = true;
    }
    private _doReduction(jjrulenum: number){
        let jjnt = jjlhs[jjrulenum];
        let jjsp = this._sematicS.length;
        let jjtop = this._sematicS[jjsp - jjruleLen[jjrulenum]];
        switch(jjrulenum){
        }
        this._lrState.length -= jjruleLen[jjrulenum];
        let jjcstate = this._lrState[this._lrState.length - 1];
        this._lrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        this._sematicS.length -= jjruleLen[jjrulenum];
        this._sematicS.push(jjtop);
    }

    private _acceptToken(t: Token){
        // look up action table
        let cstate = this._lrState[this._lrState.length - 1];
        let ind = jjdisact[cstate] + t.id;
        let act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[cstate] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act === jjactERR){
            // explicit error
            this._syntaxError(t);
            return true;
        }
        else if(act > 0){
            // shift
            if(t.id === 0){
                // end of file
                this._stop = true;
                this._emit('accept');
                return true;
            }
            else {
                this._lrState.push(act - 1);
                this._sematicS.push(t);
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            this._doReduction(-act - 1);
            return false;
        }
        else {
            // error
            this._syntaxError(t);
            // force consume
            return true;
        }
    }
    private _syntaxError(t: Token){
        let msg = `unexpected token ${t.toString()}, expecting one of the following token(s):\n`
        msg += this._expected(this._lrState[this._lrState.length - 1]);
        this._emit("syntaxerror", msg);
    }
    private _expected(state: number){
        let dis = jjdisact[state];
        let ret = '';
        function expect(tk: number){
            let ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(let tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += `    ${tokenToString(tk)} ...` + '\n');
        }
        return ret;
    }
}