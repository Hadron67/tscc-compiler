/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/

import { GBuilder } from '../../src/parser/gbuilder';
import { Context } from '../../src/util/context';
import { JsccError, JsccWarning } from '../../src/util/E';


/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else if(c === 34){
                ret.state = 2;
            }
            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 3;
            }
            else if(c === 37){
                ret.state = 4;
            }
            else if(c === 39){
                ret.state = 5;
            }
            else if(c === 40){
                ret.state = 6;
            }
            else if(c === 41){
                ret.state = 7;
            }
            else if(c === 42){
                ret.state = 8;
            }
            else if(c === 43){
                ret.state = 9;
            }
            else if(c === 44){
                ret.state = 10;
            }
            else if(c === 45){
                ret.state = 11;
            }
            else if(c === 47){
                ret.state = 12;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 13;
            }
            else if(c === 58){
                ret.state = 14;
            }
            else if(c === 59){
                ret.state = 15;
            }
            else if(c === 60){
                ret.state = 16;
            }
            else if(c === 61){
                ret.state = 17;
            }
            else if(c === 62){
                ret.state = 18;
            }
            else if(c === 63){
                ret.state = 19;
            }
            else if(c === 91){
                ret.state = 20;
            }
            else if(c === 93){
                ret.state = 21;
            }
            else if(c === 94){
                ret.state = 22;
            }
            else if(c === 123){
                ret.state = 23;
            }
            else if(c === 124){
                ret.state = 24;
            }
            else if(c === 125){
                ret.state = 25;
            }
            else {
                ret.state = -1;
            }
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 13 || c === 32){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            }
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            }
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else {
                ret.state = -1;
            }
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 37){
                ret.state = 31;
            }
            else if(c === 108){
                ret.state = 32;
            }
            else if(c === 110){
                ret.state = 33;
            }
            else if(c === 111){
                ret.state = 34;
            }
            else if(c === 114){
                ret.state = 35;
            }
            else if(c === 117){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 37;
            }
            else if(c === 39){
                ret.state = 38;
            }
            else if(c === 92){
                ret.state = 39;
            }
            else {
                ret.state = -1;
            }
            break;
        case 6:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 8:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 9:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 10:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 11:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 12:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 42){
                ret.state = 40;
            }
            else if(c === 47){
                ret.state = 41;
            }
            else {
                ret.state = -1;
            }
            break;
        case 13:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 48 && c <= 57)){
                ret.state = 13;
            }
            else {
                ret.state = -1;
            }
            break;
        case 14:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 15:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 16:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 17:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 62){
                ret.state = 42;
            }
            else {
                ret.state = -1;
            }
            break;
        case 18:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 19:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 20:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 21:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 22:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 23:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 24:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 25:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 26:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            }
            break;
        case 27:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 28:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 43;
            }
            else if(c === 117 || c === 120){
                ret.state = 44;
            }
            else {
                ret.state = -1;
            }
            break;
        case 29:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else {
                ret.state = -1;
            }
            break;
        case 30:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 29;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 30;
            }
            else {
                ret.state = -1;
            }
            break;
        case 31:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 32:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 45;
            }
            else {
                ret.state = -1;
            }
            break;
        case 33:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            }
            break;
        case 34:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 112){
                ret.state = 47;
            }
            else {
                ret.state = -1;
            }
            break;
        case 35:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 48;
            }
            else {
                ret.state = -1;
            }
            break;
        case 36:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 49;
            }
            else {
                ret.state = -1;
            }
            break;
        case 37:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 37;
            }
            else if(c === 39){
                ret.state = 38;
            }
            else if(c === 92){
                ret.state = 39;
            }
            else {
                ret.state = -1;
            }
            break;
        case 38:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 39:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){
                ret.state = 50;
            }
            else if(c === 117 || c === 120){
                ret.state = 51;
            }
            else {
                ret.state = -1;
            }
            break;
        case 40:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 52;
            }
            else if(c === 42){
                ret.state = 53;
            }
            else if(c === 47){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            }
            break;
        case 41:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 55;
            }
            else {
                ret.state = -1;
            }
            break;
        case 42:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 43:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            }
            break;
        case 44:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 56;
            }
            else {
                ret.state = -1;
            }
            break;
        case 45:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 102){
                ret.state = 57;
            }
            else if(c === 120){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            }
            break;
        case 46:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 59;
            }
            else {
                ret.state = -1;
            }
            break;
        case 47:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 60;
            }
            else {
                ret.state = -1;
            }
            break;
        case 48:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 103){
                ret.state = 61;
            }
            else {
                ret.state = -1;
            }
            break;
        case 49:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 101){
                ret.state = 62;
            }
            else {
                ret.state = -1;
            }
            break;
        case 50:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){
                ret.state = 37;
            }
            else if(c === 39){
                ret.state = 38;
            }
            else if(c === 92){
                ret.state = 39;
            }
            else {
                ret.state = -1;
            }
            break;
        case 51:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 63;
            }
            else {
                ret.state = -1;
            }
            break;
        case 52:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 52;
            }
            else if(c === 42){
                ret.state = 53;
            }
            else if(c === 47){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            }
            break;
        case 53:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 46 || c >= 48){
                ret.state = 65;
            }
            else if(c === 47){
                ret.state = 66;
            }
            else {
                ret.state = -1;
            }
            break;
        case 54:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 47){
                ret.state = 67;
            }
            else {
                ret.state = -1;
            }
            break;
        case 55:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 9 || c >= 11){
                ret.state = 55;
            }
            else {
                ret.state = -1;
            }
            break;
        case 56:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 68;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            }
            break;
        case 57:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            }
            break;
        case 58:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 59:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 97){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            }
            break;
        case 60:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 105){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            }
            break;
        case 61:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 104){
                ret.state = 72;
            }
            else {
                ret.state = -1;
            }
            break;
        case 62:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 63:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 37;
            }
            else if(c === 39){
                ret.state = 38;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 73;
            }
            else if(c === 92){
                ret.state = 39;
            }
            else {
                ret.state = -1;
            }
            break;
        case 64:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 52;
            }
            else if(c === 42){
                ret.state = 53;
            }
            else if(c === 47){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            }
            break;
        case 65:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 52;
            }
            else if(c === 42){
                ret.state = 53;
            }
            else if(c === 47){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            }
            break;
        case 66:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 67:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){
                ret.state = 52;
            }
            else if(c === 42){
                ret.state = 53;
            }
            else if(c === 47){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            }
            break;
        case 68:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 26;
            }
            else if(c === 34){
                ret.state = 27;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 68;
            }
            else if(c === 92){
                ret.state = 28;
            }
            else {
                ret.state = -1;
            }
            break;
        case 69:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 70:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 74;
            }
            else {
                ret.state = -1;
            }
            break;
        case 71:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 75;
            }
            else {
                ret.state = -1;
            }
            break;
        case 72:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 116){
                ret.state = 76;
            }
            else {
                ret.state = -1;
            }
            break;
        case 73:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){
                ret.state = 37;
            }
            else if(c === 39){
                ret.state = 38;
            }
            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){
                ret.state = 73;
            }
            else if(c === 92){
                ret.state = 39;
            }
            else {
                ret.state = -1;
            }
            break;
        case 74:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 115){
                ret.state = 77;
            }
            else {
                ret.state = -1;
            }
            break;
        case 75:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 110){
                ret.state = 78;
            }
            else {
                ret.state = -1;
            }
            break;
        case 76:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 77:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 111){
                ret.state = 79;
            }
            else {
                ret.state = -1;
            }
            break;
        case 78:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 79:
            ret.hasArc = true;
            ret.isEnd = false;
            if(c === 99){
                ret.state = 80;
            }
            else {
                ret.state = -1;
            }
            break;
        case 80:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}
function moveDFA1(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else if(c === 123){
                ret.state = 2;
            }
            else if(c === 125){
                ret.state = 3;
            }
            else {
                ret.state = -1;
            }
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c <= 122 || c === 124 || c >= 126){
                ret.state = 1;
            }
            else {
                ret.state = -1;
            }
            break;
        case 2:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 3:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
let jjlexers = [
    moveDFA0,
    moveDFA1,
];

/*
    tokens that a lexical dfa state can return
*/
let jjlexTokens0 = [ 
        -1,    -1,    -1,     1,    -1,    -1,    14,    15,    20,    21,
        29,    22,    -1,     2,    23,    25,    13,    16,    12,    19,
        17,    18,    28,     4,    27,     5,    -1,     3,    -1,     1,
         1,    26,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
        -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
        -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,     8,
        -1,    -1,    -1,    -1,    -1,    -1,     9,    -1,     6,    -1,
        10,
]; 
let jjlexTokens1 = [ 
        30,    30,     4,     5,
]; 

let jjstateCount = 129;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
let jjpact = [ 
         9,     7,    10,    11,    12,    62,   -76,    65,    25,    26,
        53,    47,    57,   -75,    65,    45,   129,    64,    81,    65,
         5,    63,    56,    48,    64,    81,   113,    65,    63,    64,
        81,   108,    65,    63,    65,   125,   127,    64,    81,    65,
       117,    63,    64,    81,    64,    81,    63,    86,    63,    64,
        81,    72,    94,    63,    72,   115,    69,    70,   111,    69,
        70,    98,    99,    97,    76,    41,    73,    42,    40,    37,
        94,    57,    39,    94,    16,    57,   104,    92,   121,    94,
        74,    56,   120,   119,   118,    56,    38,   113,   105,   104,
        92,    89,    88,    87,    85,    84,    83,    77,    75,    22,
        67,    66,    60,    59,    35,    50,    49,    44,    35,    29,
        27,    21,    18,    16,     4,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,
]; 
/*
    displacement of action table.
*/
let jjdisact = [ 
       -31,   114,    -6,   -31,   112,   -31,    99,    72,   107,   -31,
       -31,   -31,    73,   -31,   -31,   -15,   106,   108,    68,   -31,
       -31,   -31,   -31,    97,   -31,   -31,   -31,    57,   -31,   -31,
        67,    40,   -31,   -31,    93,    10,   -31,   105,   -31,    89,
       -31,    93,     9,   102,   -31,   -31,    86,     4,   -31,    98,
       -31,   -31,   -31,   -31,   -31,    99,   -31,    51,   -31,    85,
        52,    74,    68,    94,   -31,   -31,    82,   -31,    92,   -31,
       -31,    89,   -31,    90,    36,    67,    31,    29,   -31,    42,
        24,    86,   -31,    76,   -31,    38,   -31,   -31,   -31,    46,
       -31,    70,    43,    16,   -31,   -31,   -31,   -31,   -31,    25,
        66,    54,   -31,    60,   -31,   -31,   -31,   -31,   -31,    74,
       -31,   -31,    35,   -31,    54,    11,   -31,   -31,    73,    32,
       -31,    18,   -31,   -31,   -31,     1,   -31,    11,   -31,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
let jjcheckact = [ 
         2,     2,     2,     2,     2,    47,   125,    47,    15,    15,
        42,    35,    42,    42,   115,    35,   127,    47,    47,    93,
         2,    47,    42,    35,   115,   115,    42,    80,   115,    93,
        93,   125,    77,    93,    76,   119,   121,    80,    80,    74,
        99,    80,    77,    77,    76,    76,    77,   121,    76,    74,
        74,   112,    99,    74,    85,    92,   112,   112,    89,    85,
        85,    79,    79,    79,    60,    31,    57,    31,    30,    27,
        92,    18,    30,    89,    12,     7,   118,   114,   109,    60,
        57,    18,   103,   101,   100,     7,    27,    91,    83,    81,
        75,    73,    71,    68,    66,    63,    62,    61,    59,    12,
        55,    49,    46,    43,    41,    39,    37,    34,    23,    17,
        16,     8,     6,     4,     1,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
let jjdefred = [ 
         3,    -1,    -1,     0,    -1,     2,    15,    -1,    -1,     7,
         8,     9,    -1,    55,    56,    -1,    -1,    -1,     5,    11,
        13,     1,    54,    64,    58,    59,    19,    -1,    16,    10,
        -1,    -1,    61,    68,    -1,    -1,    14,    -1,     6,    -1,
        57,    64,    62,    -1,     4,    18,    -1,    -1,    17,    -1,
        60,    67,    69,    70,    71,    -1,    73,    -1,    66,    -1,
        -1,    -1,    47,    -1,    45,    12,    -1,    28,    -1,    30,
        31,    -1,    63,    -1,    -1,    24,    -1,    34,    36,    41,
        -1,    49,    46,    -1,    72,    74,    29,    32,    65,    -1,
        21,    74,    -1,    -1,    35,    37,    38,    39,    40,    -1,
        -1,    48,    51,    52,    44,    27,    77,    79,    80,    -1,
        20,    23,    74,    26,    24,    33,    42,    43,    -1,    -1,
        78,    -1,    22,    50,    53,    74,    25,    -1,    76,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
let jjpgoto = [ 
        54,     5,     7,    99,    77,    78,    95,    79,    92,    77,
        78,    45,    79,    60,    77,    78,    94,    79,    79,    50,
        33,    51,    53,   113,   109,   115,    78,    94,    79,    79,
        89,    77,    78,   105,    79,   121,    67,    23,    18,   108,
       109,   127,   123,   106,   122,    90,    81,    29,    27,    22,
        14,    16,   111,    57,    70,   109,   125,    70,   109,   100,
       101,   102,    31,    32,    33,     1,     2,    19,    12,    13,
        14,    42,    35,    30,    -1,   113,   109,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,
]; 
/*
    displacement of the goto table
*/
let jjdisgoto = [ 
        64,   -40,    -2,   -40,    44,   -40,    44,    33,   -40,   -40,
       -40,   -40,    24,   -40,   -40,    10,   -40,    40,    13,   -40,
        67,   -40,   -40,    34,   -40,   -40,    63,   -40,   -40,   -40,
       -40,   -40,   -40,    39,   -40,     1,   -40,   -40,   -40,   -40,
       -40,   -10,   -12,    22,   -40,   -40,   -40,    -2,   -40,   -40,
       -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,    26,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,   -40,   -40,    15,    34,    -7,    10,   -40,   -12,
       -12,    38,   -40,   -40,   -40,    19,   -40,   -40,   -40,   -40,
       -40,    40,   -40,     9,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,    22,   -40,    33,    -1,   -40,   -40,    19,   -40,
        18,   -40,   -40,   -40,   -40,     4,   -40,   -40,   -40,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
let jjruleLen = [ 
         2,     4,     2,     0,     5,     2,     4,     1,     1,     1,
         2,     1,     4,     0,     3,     0,     1,     3,     2,     0,
         5,     4,     6,     2,     0,     3,     1,     3,     1,     2,
         1,     1,     2,     3,     1,     2,     1,     2,     1,     1,
         1,     0,     3,     4,     3,     1,     1,     0,     1,     0,
         3,     1,     1,     3,     2,     1,     1,     4,     1,     1,
         3,     1,     2,     4,     0,     3,     1,     2,     0,     1,
         1,     1,     3,     1,     0,     0,     5,     2,     0,     1,
         1,
]; 
/*
    index of the LHS of each rule
*/
let jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     4,     4,     4,
         5,     5,     6,     6,     7,     7,     8,     8,     9,     9,
        10,    10,    10,    11,    11,    12,    12,    13,    13,    14,
        14,    14,    14,    15,    15,    16,    16,    17,    18,    18,
        18,    18,    19,    19,    19,    19,    20,    20,    21,    21,
        22,    22,    23,    23,    24,    24,    25,    26,    27,    27,
        28,    28,    29,    30,    30,    31,    31,    32,    32,    33,
        33,    33,    34,    34,    36,    37,    35,    38,    38,    39,
        39,
]; 
/*
    token names
*/
let jjtokenNames = [ 
                   "EOF",              "NAME",               "NUM",
                "STRING",        "OPEN_BLOCK",       "CLOSE_BLOCK",
               "OPT_DIR",           "LEX_DIR",          "LEFT_DIR",
             "RIGHT_DIR",      "NONASSOC_DIR",           "USE_DIR",
                    "GT",                "LT",               "BRA",
                   "KET",               "EQU",              "CBRA",
                  "CKET",          "QUESTION",              "STAR",
                  "PLUS",              "DASH",             "COLON",
                 "ARROW",               "EOL",         "SEPERATOR",
                    "OR",             "WEDGE",             "COMMA",
              "ANY_CODE",
]; 
/*
    token alias
*/
let jjtokenAlias = [ 
                  "null",              "null",              "null",
                  "null",                 "{",                 "}",
               "%option",              "%lex",             "%left",
                "%right",         "%nonassoc",              "%use",
                     ">",                 "<",                 "(",
                     ")",                 "=",                 "[",
                     "]",                 "?",                 "*",
                     "+",                 "-",                 ":",
                    "=>",                 ";",                "%%",
                     "|",                 "^",                 ",",
                  "null",
]; 


interface Token{
    id: number;
    val: string;

    startLine: number;
    startColumn: number;
    endLine: number;
    endColumn: number;
};

export class Parser {
    // members for lexer
    private _lexState: number[] = [];
    private _state: number = 0;
    private _matched: string[] = [];
    private _token: Token = null;
    private _marker: number = -1;
    private _markerLine = 0;
    private _markerColumn = 0;
    private _backupCount: number = 0;
    private _inputBuf: string[] = [];
    private _line = 0;
    private _column = 0;
    private _tline = 0;
    private _tcolumn = 0;

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: any[] = [];
    private _accepted = false;

    private _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    
    gb: GBuilder;
    ctx: Context;


    init(){
        this._lexState = [];
        this._state = 0;
        this._matched = [];
        this._token = null;
        this._marker = -1;
        this._markerLine = this._markerColumn = 0;
        this._backupCount = 0;
        this._inputBuf = [];
        this._line = this._tline = 0;
        this._column = this._tcolumn = 0;
        
        this._lrState = [];
        this._sematicS = [];
        this._accepted = false;

        this._handlers = {};
    }
    /**
     *  set 
     */
    private _setImg(s: string){
        this._matched.length = 0;
        for(let i = 0;i < s.length;i++){
            this._matched.push(s.charAt(i));
        }
        this._tline = this._line;
        this._tcolumn = this._column;
    }
    private _returnToken(tid: number){
        this._token = {
            id: tid,
            val: this._matched.join(''),
            startLine: this._tline,
            startColumn: this._tcolumn,
            endLine: this._line,
            endColumn: this._column
        }
        this._matched.length = 0;
        this._tline = this._line;
        this._tcolumn = this._column;
        this._emit('token', this._token);
        while(!this._acceptToken(this._token));
        this._token = null;
    }
    private _emit(name: string, a1?, a2?, a3?){
        let cbs = this._handlers[name];
        if(cbs){
            for(let cb of cbs){
                cb(a1, a2, a3);
            }
        }
    }
    on(name: string, cb: (a1?, a2?, a3?) => any){
        this._handlers[name] || (this._handlers[name] = []);
        this._handlers[name].push(cb);
    }
    private _doLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        switch(jjstaten){
            case 1:
                this._setImg("");
                break;
            case 41:
                this._setImg("");
                break;
            case 55:
                this._setImg("");
                break;
            case 66:
                this._setImg("");
                break;
            default:;
        }
        jjtk !== -1 && this._returnToken(jjtk);
    }
    private _doLexAction1(jjstaten: number){
        let jjtk = jjlexTokens1[jjstaten];
        switch(jjstaten){
            default:;
        }
        jjtk !== -1 && this._returnToken(jjtk);
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    private _doLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                this._doLexAction0(state);
                break;
            case 1:
                this._doLexAction1(state);
                break;
            default:;
        }
        this._token !== null && (this._acceptToken(this._token), (this._token = null));
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    private _acceptChar(c: string){
        let lexstate = this._lexState[this._lexState.length - 1];
        let retn = { state: this._state, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    this._doLexAction(lexstate, this._state);
                    // recover
                    this._marker = -1;
                    this._backupCount = 0;
                    this._state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    this._marker = this._state;
                    this._markerLine = this._line;
                    this._markerColumn = this._column;
                    this._state = retn.state;
                    this._backupCount = 1;
                    this._matched.push(c);
                    c === '\n' ? (this._line++, this._column = 0) : (this._column++);
                    // character consumed
                    return true;
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                this._doLexAction(lexstate, this._state);
                // recover
                this._marker = -1;
                this._backupCount = 0;
                this._state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(this._marker !== -1){
                    // we have a previously marked state, which is a terminate state.
                    // rollback
                    this._state = this._marker;
                    this._marker = -1;
                    this._line = this._markerLine;
                    this._column = this._markerColumn;
                    while(this._backupCount --> 0){
                        this._inputBuf.push(this._matched.pop());
                    }
                    this._doLexAction(lexstate, this._state);
                    this._state = 0;
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    this._emit('lexicalerror', `unexpected character "${c}"`);
                    // force consume
                    return true;
                }
            }
            else {
                this._state = retn.state;
                c === '\n' ? (this._line++, this._column = 0) : (this._column++);
                // character consumed
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    accept(s: string){
        for(let i = s.length - 1; i >= 0; i--){
            this._inputBuf.push(s.charAt(i));
        }
        while(this._inputBuf.length > 0){
            this._acceptChar(this._inputBuf[this._inputBuf.length - 1]) && this._inputBuf.pop();
        }
    }
    private _doReduction(jjrulenum: number){
        let jjnt = jjlhs[jjrulenum];
        let jjtop = null;
        let jjsp = this._sematicS.length;
        switch(jjrulenum){
            case 12:
                /* 12: optionBody => optionBody <NAME> "=" <STRING> */
                var name = this._sematicS[jjsp - 3];
                var val = this._sematicS[jjsp - 1];
                { this.gb.setOpt(name.val, val.val); }
                break;
            case 72:
                /* 72: tokenRef => "<" <NAME> ">" */
                var t = this._sematicS[jjsp - 2];
                {}
                break;
            case 74:
                /* 74: @0 => */
                this._lexState.push(1);
                break;
            case 75:
                /* 75: @1 => */
                var bl = this._sematicS[jjsp - 1];
                this._lexState.pop();
                break;
            case 76:
                /* 76: block => @0 "{" innerBlock @1 "}" */
                var bl = this._sematicS[jjsp - 3];
                { jjtop.img = '{' + bl.img + '}'; }
                break;
            case 79:
                /* 79: innerBlockItem => <ANY_CODE> */
                var t = this._sematicS[jjsp - 1];
                { jjtop.img = t.img; }
                break;
        }
        this._lrState.length -= jjruleLen[jjrulenum];
        let jjcstate = this._lrState[this._lrState.length - 1];
        this._lrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        this._sematicS.length -= jjruleLen[jjrulenum];
        this._sematicS.push(jjtop);
    }

    private _acceptToken(t: Token){
        // look up action table
        let cstate = this._lrState[this._lrState.length - 1];
        let ind = jjdisact[cstate] + t.id;
        let act = 0;
        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
            act = -jjdefred[this._state] - 1;
        }
        else {
            act = jjpact[ind];
        }
        if(act > 0){
            // shift
            if(act === 1){
                this._accepted = true;
                return false;
            }
            else {
                this._lrState.push(act - 1);
                this._sematicS.push(t);
                // token consumed
                return true;
            }
        }
        else if(act < 0){
            this._doReduction(-act - 1);
        }
        else {
            // error
            this._emit("syntaxerror", `unexpected token ${jjtokenNames[t.id]}`);
            // force consume
            return true;
        }
    }
}