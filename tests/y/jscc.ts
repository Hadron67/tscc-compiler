/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy
*/






/*
    find the next state to go in the dfa
*/

function moveDFA0(c: number, ret: { state: number, nfa: boolean, isEnd: boolean }){
    switch(ret.state){
        
    case 0:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 9 && c <= 10 || c >= 13 && c <= 13 || c >= 32 && c <= 32){
            ret.state = 1;
        }
        
        else if(c >= 34 && c <= 34){
            ret.state = 2;
        }
        
        else if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 3;
        }
        
        else if(c >= 37 && c <= 37){
            ret.state = 4;
        }
        
        else if(c >= 39 && c <= 39){
            ret.state = 5;
        }
        
        else if(c >= 40 && c <= 40){
            ret.state = 6;
        }
        
        else if(c >= 41 && c <= 41){
            ret.state = 7;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 8;
        }
        
        else if(c >= 43 && c <= 43){
            ret.state = 9;
        }
        
        else if(c >= 44 && c <= 44){
            ret.state = 10;
        }
        
        else if(c >= 45 && c <= 45){
            ret.state = 11;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 12;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 13;
        }
        
        else if(c >= 58 && c <= 58){
            ret.state = 14;
        }
        
        else if(c >= 59 && c <= 59){
            ret.state = 15;
        }
        
        else if(c >= 60 && c <= 60){
            ret.state = 16;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 17;
        }
        
        else if(c >= 62 && c <= 62){
            ret.state = 18;
        }
        
        else if(c >= 63 && c <= 63){
            ret.state = 19;
        }
        
        else if(c >= 91 && c <= 91){
            ret.state = 20;
        }
        
        else if(c >= 93 && c <= 93){
            ret.state = 21;
        }
        
        else if(c >= 94 && c <= 94){
            ret.state = 22;
        }
        
        else if(c >= 123 && c <= 123){
            ret.state = 23;
        }
        
        else if(c >= 124 && c <= 124){
            ret.state = 24;
        }
        
        else if(c >= 125 && c <= 125){
            ret.state = 25;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 1:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 9 && c <= 10 || c >= 13 && c <= 13 || c >= 32 && c <= 32){
            ret.state = 1;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 2:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 33 || c >= 35 && c <= 91 || c >= 93){
            ret.state = 26;
        }
        
        else if(c >= 34 && c <= 34){
            ret.state = 27;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 28;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 3:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 29;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 30;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 4:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 37 && c <= 37){
            ret.state = 31;
        }
        
        else if(c >= 108 && c <= 108){
            ret.state = 32;
        }
        
        else if(c >= 110 && c <= 110){
            ret.state = 33;
        }
        
        else if(c >= 111 && c <= 111){
            ret.state = 34;
        }
        
        else if(c >= 114 && c <= 114){
            ret.state = 35;
        }
        
        else if(c >= 117 && c <= 117){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 5:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 38 || c >= 40 && c <= 91 || c >= 93){
            ret.state = 37;
        }
        
        else if(c >= 39 && c <= 39){
            ret.state = 38;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 39;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 6:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 7:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 8:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 9:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 10:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 11:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 12:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 42 && c <= 42){
            ret.state = 40;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 41;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 13:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 48 && c <= 57){
            ret.state = 13;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 14:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 15:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 16:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 17:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 62 && c <= 62){
            ret.state = 42;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 18:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 19:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 20:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 21:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 22:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 23:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 24:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 25:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 26:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 33 || c >= 35 && c <= 91 || c >= 93){
            ret.state = 26;
        }
        
        else if(c >= 34 && c <= 34){
            ret.state = 27;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 28;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 27:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 28:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 34 && c <= 34 || c >= 39 && c <= 39 || c >= 92 && c <= 92 || c >= 98 && c <= 98 || c >= 102 && c <= 102 || c >= 110 && c <= 110 || c >= 114 && c <= 114 || c >= 116 && c <= 116){
            ret.state = 43;
        }
        
        else if(c >= 117 && c <= 117 || c >= 120 && c <= 120){
            ret.state = 44;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 29:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 29;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 30;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 30:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 29;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 30;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 31:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 32:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 101 && c <= 101){
            ret.state = 45;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 33:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 111 && c <= 111){
            ret.state = 46;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 34:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 112 && c <= 112){
            ret.state = 47;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 35:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 105 && c <= 105){
            ret.state = 48;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 36:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 115 && c <= 115){
            ret.state = 49;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 37:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 38 || c >= 40 && c <= 91 || c >= 93){
            ret.state = 37;
        }
        
        else if(c >= 39 && c <= 39){
            ret.state = 38;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 39;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 38:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 39:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 34 && c <= 34 || c >= 39 && c <= 39 || c >= 92 && c <= 92 || c >= 98 && c <= 98 || c >= 102 && c <= 102 || c >= 110 && c <= 110 || c >= 114 && c <= 114 || c >= 116 && c <= 116){
            ret.state = 50;
        }
        
        else if(c >= 117 && c <= 117 || c >= 120 && c <= 120){
            ret.state = 51;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 40:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 41 || c >= 43 && c <= 46 || c >= 48){
            ret.state = 52;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 53;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 54;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 41:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 0 && c <= 9 || c >= 11){
            ret.state = 55;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 42:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 43:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 33 || c >= 35 && c <= 91 || c >= 93){
            ret.state = 26;
        }
        
        else if(c >= 34 && c <= 34){
            ret.state = 27;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 28;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 44:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102){
            ret.state = 56;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 45:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 102 && c <= 102){
            ret.state = 57;
        }
        
        else if(c >= 120 && c <= 120){
            ret.state = 58;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 46:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 110 && c <= 110){
            ret.state = 59;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 47:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 116 && c <= 116){
            ret.state = 60;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 48:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 103 && c <= 103){
            ret.state = 61;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 49:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 101 && c <= 101){
            ret.state = 62;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 50:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 38 || c >= 40 && c <= 91 || c >= 93){
            ret.state = 37;
        }
        
        else if(c >= 39 && c <= 39){
            ret.state = 38;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 39;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 51:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102){
            ret.state = 63;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 52:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 41 || c >= 43 && c <= 46 || c >= 48){
            ret.state = 52;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 53;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 64;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 53:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 46 || c >= 48){
            ret.state = 65;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 66;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 54:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 47 && c <= 47){
            ret.state = 67;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 55:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 0 && c <= 9 || c >= 11){
            ret.state = 55;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 56:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 33 || c >= 35 && c <= 47 || c >= 58 && c <= 64 || c >= 71 && c <= 91 || c >= 93 && c <= 96 || c >= 103){
            ret.state = 26;
        }
        
        else if(c >= 34 && c <= 34){
            ret.state = 27;
        }
        
        else if(c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102){
            ret.state = 68;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 28;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 57:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 116 && c <= 116){
            ret.state = 69;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 58:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 59:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 97 && c <= 97){
            ret.state = 70;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 60:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 105 && c <= 105){
            ret.state = 71;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 61:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 104 && c <= 104){
            ret.state = 72;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 62:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 63:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 38 || c >= 40 && c <= 47 || c >= 58 && c <= 64 || c >= 71 && c <= 91 || c >= 93 && c <= 96 || c >= 103){
            ret.state = 37;
        }
        
        else if(c >= 39 && c <= 39){
            ret.state = 38;
        }
        
        else if(c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102){
            ret.state = 73;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 39;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 64:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 41 || c >= 43 && c <= 46 || c >= 48){
            ret.state = 52;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 53;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 64;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 65:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 41 || c >= 43 && c <= 46 || c >= 48){
            ret.state = 52;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 53;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 54;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 66:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 67:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 41 || c >= 43 && c <= 46 || c >= 48){
            ret.state = 52;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 53;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 54;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 68:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 33 || c >= 35 && c <= 47 || c >= 58 && c <= 64 || c >= 71 && c <= 91 || c >= 93 && c <= 96 || c >= 103){
            ret.state = 26;
        }
        
        else if(c >= 34 && c <= 34){
            ret.state = 27;
        }
        
        else if(c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102){
            ret.state = 68;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 28;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 69:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 70:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 115 && c <= 115){
            ret.state = 74;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 71:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 111 && c <= 111){
            ret.state = 75;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 72:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 116 && c <= 116){
            ret.state = 76;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 73:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 0 && c <= 9 || c >= 11 && c <= 38 || c >= 40 && c <= 47 || c >= 58 && c <= 64 || c >= 71 && c <= 91 || c >= 93 && c <= 96 || c >= 103){
            ret.state = 37;
        }
        
        else if(c >= 39 && c <= 39){
            ret.state = 38;
        }
        
        else if(c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102){
            ret.state = 73;
        }
        
        else if(c >= 92 && c <= 92){
            ret.state = 39;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 74:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 115 && c <= 115){
            ret.state = 77;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 75:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 110 && c <= 110){
            ret.state = 78;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 76:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 77:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 111 && c <= 111){
            ret.state = 79;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 78:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 79:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 99 && c <= 99){
            ret.state = 80;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 80:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

        default:
            ret.state = -1;
            ret.nfa = false;
    }
}

function moveDFA1(c: number, ret: { state: number, nfa: boolean, isEnd: boolean }){
    switch(ret.state){
        
    case 0:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 0 && c <= 122 || c >= 124 && c <= 124 || c >= 126){
            ret.state = 1;
        }
        
        else if(c >= 123 && c <= 123){
            ret.state = 2;
        }
        
        else if(c >= 125 && c <= 125){
            ret.state = 3;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 1:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 0 && c <= 122 || c >= 124 && c <= 124 || c >= 126){
            ret.state = 1;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 2:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 3:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

        default:
            ret.state = -1;
            ret.nfa = false;
    }
}


/*
    all the lexer data goes here.
*/
let jjlexers = [
    
    moveDFA0,
    
    moveDFA1,
    
];


let jjstateCount = 129;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/

let jjpact = [ 
        62,   129,    65,    98,    99,    97,     9,     7,
        10,    11,    12,    65,    64,    81,   125,    53,
        63,    57,   -75,    65,   -76,    64,    81,   104,
        65,    63,     5,    56,   117,    64,    81,   113,
        65,    63,    64,    81,    92,    65,    63,    65,
        94,   115,    64,    81,   127,   108,    63,    64,
        81,    64,    81,    63,    72,    63,    72,    86,
        94,    69,    70,    69,    70,    47,   111,    76,
        40,    45,    73,    41,    39,    42,    37,    57,
        16,    48,    25,    26,    57,    94,    94,   121,
        74,    56,   120,   119,   118,   113,    56,    38,
       105,   104,    92,    89,    88,    87,    85,    84,
        83,    22,    77,    75,    67,    66,    60,    59,
        35,    50,    49,    44,    35,    29,    27,    21,
        18,    16,     4,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,
         0,
]; 

/*
    displacement of action table.
*/

let jjdisact = [ 
       -31,   114,     0,   -31,   112,   -31,    99,    73,
       107,   -31,   -31,   -31,    71,   -31,   -31,    51,
       106,   108,    68,   -31,   -31,   -31,   -31,    97,
       -31,   -31,   -31,    58,   -31,   -31,    63,    42,
       -31,   -31,    93,    60,   -31,   105,   -31,    89,
       -31,    93,    14,   102,   -31,   -31,    86,    -1,
       -31,    98,   -31,   -31,   -31,   -31,   -31,    99,
       -31,    51,   -31,    86,    51,    75,    68,    94,
       -31,   -31,    82,   -31,    92,   -31,   -31,    89,
       -31,    90,    36,    67,    34,    29,   -31,   -16,
        21,    86,   -31,    76,   -31,    38,   -31,   -31,
       -31,    50,   -31,    68,    29,    16,   -31,   -31,
       -31,   -31,   -31,    13,    66,    54,   -31,    60,
       -31,   -31,   -31,   -31,   -31,    75,   -31,   -31,
        36,   -31,    13,     8,   -31,   -31,    20,    11,
       -31,    26,   -31,   -31,   -31,    15,   -31,    -4,
       -31,
]; 

/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/

let jjcheckact = [ 
        47,   127,    47,    79,    79,    79,     2,     2,
         2,     2,     2,   115,    47,    47,   119,    42,
        47,    42,    42,    93,   125,   115,   115,   118,
        80,   115,     2,    42,    99,    93,    93,    42,
        77,    93,    80,    80,   114,    76,    80,    74,
        99,    92,    77,    77,   121,   125,    77,    76,
        76,    74,    74,    76,   112,    74,    85,   121,
        92,   112,   112,    85,    85,    35,    89,    60,
        30,    35,    57,    31,    30,    31,    27,    18,
        12,    35,    15,    15,     7,    89,    60,   109,
        57,    18,   103,   101,   100,    91,     7,    27,
        83,    81,    75,    73,    71,    68,    66,    63,
        62,    12,    61,    59,    55,    49,    46,    43,
        41,    39,    37,    34,    23,    17,    16,     8,
         6,     4,     1,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,
         0,
]; 

/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/

let jjdefred = [ 
         3,    -1,    -1,     0,    -1,     2,    15,    -1,
        -1,     7,     8,     9,    -1,    55,    56,    -1,
        -1,    -1,     5,    11,    13,     1,    54,    64,
        58,    59,    19,    -1,    16,    10,    -1,    -1,
        61,    68,    -1,    -1,    14,    -1,     6,    -1,
        57,    64,    62,    -1,     4,    18,    -1,    -1,
        17,    -1,    60,    67,    69,    70,    71,    -1,
        73,    -1,    66,    -1,    -1,    -1,    47,    -1,
        45,    12,    -1,    28,    -1,    30,    31,    -1,
        63,    -1,    -1,    24,    -1,    34,    36,    41,
        -1,    49,    46,    -1,    72,    74,    29,    32,
        65,    -1,    21,    74,    -1,    -1,    35,    37,
        38,    39,    40,    -1,    -1,    48,    51,    52,
        44,    27,    77,    79,    80,    -1,    20,    23,
        74,    26,    24,    33,    42,    43,    -1,    -1,
        78,    -1,    22,    50,    53,    74,    25,    -1,
        76,
]; 

/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/

let jjpgoto = [ 
        54,     5,     7,    99,    77,    78,    95,    79,
        92,    77,    78,    45,    79,    60,    77,    78,
        94,    79,    79,    50,    33,    51,    53,   113,
       109,   115,    78,    94,    79,    79,    89,    77,
        78,   105,    79,   121,    67,    23,    18,   108,
       109,   127,   123,   106,   122,    90,    81,    29,
        27,    22,    14,    16,   111,    57,    70,   109,
       125,    70,   109,   100,   101,   102,    31,    32,
        33,     1,     2,    19,    12,    13,    14,    42,
        35,    30,    -1,   113,   109,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,
]; 

/*
    displacement of the goto table
*/

let jjdisgoto = [ 
        64,   -40,    -2,   -40,    44,   -40,    44,    33,
       -40,   -40,   -40,   -40,    24,   -40,   -40,    10,
       -40,    40,    13,   -40,    67,   -40,   -40,    34,
       -40,   -40,    63,   -40,   -40,   -40,   -40,   -40,
       -40,    39,   -40,     1,   -40,   -40,   -40,   -40,
       -40,   -10,   -12,    22,   -40,   -40,   -40,    -2,
       -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,   -40,   -40,   -40,   -40,    26,   -40,
       -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,    15,    34,    -7,    10,   -40,   -12,
       -12,    38,   -40,   -40,   -40,    19,   -40,   -40,
       -40,   -40,   -40,    40,   -40,     9,   -40,   -40,
       -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
       -40,   -40,   -40,   -40,   -40,   -40,   -40,   -40,
        22,   -40,    33,    -1,   -40,   -40,    19,   -40,
        18,   -40,   -40,   -40,   -40,     4,   -40,   -40,
         0,
]; 

/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/

let jjruleLen = [ 
         2,     4,     2,     0,     5,     2,     4,     1,
         1,     1,     2,     1,     4,     0,     3,     0,
         1,     3,     2,     0,     5,     4,     6,     2,
         0,     3,     1,     3,     1,     2,     1,     1,
         2,     3,     1,     2,     1,     2,     1,     1,
         1,     0,     3,     4,     3,     1,     1,     0,
         1,     0,     3,     1,     1,     3,     2,     1,
         1,     4,     1,     1,     3,     1,     2,     4,
         0,     3,     1,     2,     0,     1,     1,     1,
         3,     1,     0,     0,     5,     2,     0,     1,
         1,
]; 

/*
    index of the LHS of each rule
*/

let jjlhs = [ 
         0,     1,     2,     2,     3,     3,     3,     4,
         4,     4,     5,     5,     6,     6,     7,     7,
         8,     8,     9,     9,    10,    10,    10,    11,
        11,    12,    12,    13,    13,    14,    14,    14,
        14,    15,    15,    16,    16,    17,    18,    18,
        18,    18,    19,    19,    19,    19,    20,    20,
        21,    21,    22,    22,    23,    23,    24,    24,
        25,    26,    27,    27,    28,    28,    29,    30,
        30,    31,    31,    32,    32,    33,    33,    33,
        34,    34,    36,    37,    35,    38,    38,    39,
        39,
]; 

/*
    token names
*/

let jjtokenNames = [ 
     "EOF","NAME", "NUM","STRING","OPEN_BLOCK","CLOSE_BLOCK","OPT_DIR","LEX_DIR",
    "LEFT_DIR","RIGHT_DIR","NONASSOC_DIR","USE_DIR",  "GT",  "LT", "BRA", "KET",
     "EQU","CBRA","CKET","QUESTION","STAR","PLUS","DASH","COLON",
    "ARROW", "EOL","SEPERATOR",  "OR","WEDGE","COMMA","ANY_CODE",
]; 

/*
    token alias
*/

let jjtokenAlias = [ 
    "null","null","null","null",   "{",   "}","%option","%lex",
    "%left","%right","%nonassoc","%use",   ">",   "<",   "(",   ")",
       "=",   "[",   "]",   "?",   "*",   "+",   "-",   ":",
      "=>",   ";",  "%%",   "|",   "^",   ",","null",
]; 





interface Token{
    id: number;
    val: string;
};

export class Parser {
    // members for lexer
    private _lexState: number[] = [];
    private _state: number = 0;
    private _matched: string[] = [];
    private _token: Token = null;
    private _marker: number = -1;
    private _backup: string[] = [];

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: any[] = [];

    private _setImg(s: string){
        this._matched.length = 0;
        for(let i = 0;i < s.length;i++){
            this._matched.push(s.charAt(i));
        }
    }
    
    private _doLexAction0(jjstaten: number){
        switch(jjstaten){
            
            
            case 1:
                    
                this._setImg("");
        
                break;
                
            
            
            case 3:
                    
                this._token = {
                    id: 1,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            case 6:
                    
                this._token = {
                    id: 14,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 7:
                    
                this._token = {
                    id: 15,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 8:
                    
                this._token = {
                    id: 20,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 9:
                    
                this._token = {
                    id: 21,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 10:
                    
                this._token = {
                    id: 29,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 11:
                    
                this._token = {
                    id: 22,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            case 13:
                    
                this._token = {
                    id: 2,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 14:
                    
                this._token = {
                    id: 23,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 15:
                    
                this._token = {
                    id: 25,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 16:
                    
                this._token = {
                    id: 13,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 17:
                    
                this._token = {
                    id: 16,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 18:
                    
                this._token = {
                    id: 12,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 19:
                    
                this._token = {
                    id: 19,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 20:
                    
                this._token = {
                    id: 17,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 21:
                    
                this._token = {
                    id: 18,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 22:
                    
                this._token = {
                    id: 28,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 23:
                    
                this._token = {
                    id: 4,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 24:
                    
                this._token = {
                    id: 27,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 25:
                    
                this._token = {
                    id: 5,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            case 27:
                    
                this._token = {
                    id: 3,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            case 29:
                    
                this._token = {
                    id: 1,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 30:
                    
                this._token = {
                    id: 1,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 31:
                    
                this._token = {
                    id: 26,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            
            
            
            
            case 38:
                    
                this._token = {
                    id: 3,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            case 41:
                    
                this._setImg("");
        
                break;
                
            
            case 42:
                    
                this._token = {
                    id: 24,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            
            
            
            
            
            
            
            
            
            
            case 55:
                    
                this._setImg("");
        
                break;
                
            
            
            
            case 58:
                    
                this._token = {
                    id: 7,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            
            case 62:
                    
                this._token = {
                    id: 11,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            
            case 66:
                    
                this._setImg("");
        
                break;
                
            
            
            
            case 69:
                    
                this._token = {
                    id: 8,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            
            
            
            
            
            case 76:
                    
                this._token = {
                    id: 9,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            case 78:
                    
                this._token = {
                    id: 6,
                    val: this._matched.join('')
                };
        
                break;
                
            
            
            case 80:
                    
                this._token = {
                    id: 10,
                    val: this._matched.join('')
                };
        
                break;
                
            
            default:;
        }
    }

    private _doLexAction1(jjstaten: number){
        switch(jjstaten){
            
            case 0:
                    
                this._token = {
                    id: 30,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 1:
                    
                this._token = {
                    id: 30,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 2:
                    
                this._token = {
                    id: 4,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 3:
                    
                this._token = {
                    id: 5,
                    val: this._matched.join('')
                };
        
                break;
                
            
            default:;
        }
    }

    
    private _doLexAction(jjlexstate: number, jjstate: number){
        switch(jjlexstate){
            
            case 0:
                this._doLexAction0(jjstate);
                break;
            
            case 1:
                this._doLexAction1(jjstate);
                break;
            
            default:;
        }
    }
    private _acceptChar(c: number){
        let lexstate = this._lexState[this._lexState.length - 1];
        this._marker && this._backup.push(c);
        let retn = { state: this._state, nfa: false, isEnd: false };
        jjlexers[lexstate](c, retn);
        if(retn.isEnd){

        }
    }
}
