/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy
*/






/*
    find the next state to go in the dfa
*/

function moveDFA0(c: number, ret: { state: number, nfa: boolean, isEnd: boolean }){
    switch(ret.state){
        
    case 0:
        ret.nfa = false;
        ret.isEnd = false;
    
        if(c >= 9 && c <= 10 || c >= 32 && c <= 32){
            ret.state = 1;
        }
        
        else if(c >= 13 && c <= 13){
            ret.state = 2;
        }
        
        else if(c >= 33 && c <= 33){
            ret.state = 3;
        }
        
        else if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 99 || c >= 103 && c <= 104 || c >= 106 && c <= 118 || c >= 120 && c <= 122){
            ret.state = 4;
        }
        
        else if(c >= 37 && c <= 37){
            ret.state = 5;
        }
        
        else if(c >= 38 && c <= 38){
            ret.state = 6;
        }
        
        else if(c >= 40 && c <= 40){
            ret.state = 7;
        }
        
        else if(c >= 41 && c <= 41){
            ret.state = 8;
        }
        
        else if(c >= 42 && c <= 42){
            ret.state = 9;
        }
        
        else if(c >= 43 && c <= 43){
            ret.state = 10;
        }
        
        else if(c >= 44 && c <= 44){
            ret.state = 11;
        }
        
        else if(c >= 45 && c <= 45){
            ret.state = 12;
        }
        
        else if(c >= 47 && c <= 47){
            ret.state = 13;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 14;
        }
        
        else if(c >= 58 && c <= 58){
            ret.state = 15;
        }
        
        else if(c >= 59 && c <= 59){
            ret.state = 16;
        }
        
        else if(c >= 60 && c <= 60){
            ret.state = 17;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 18;
        }
        
        else if(c >= 62 && c <= 62){
            ret.state = 19;
        }
        
        else if(c >= 63 && c <= 63){
            ret.state = 20;
        }
        
        else if(c >= 91 && c <= 91){
            ret.state = 21;
        }
        
        else if(c >= 93 && c <= 93){
            ret.state = 22;
        }
        
        else if(c >= 94 && c <= 94){
            ret.state = 23;
        }
        
        else if(c >= 100 && c <= 100){
            ret.state = 24;
        }
        
        else if(c >= 101 && c <= 101){
            ret.state = 25;
        }
        
        else if(c >= 102 && c <= 102){
            ret.state = 26;
        }
        
        else if(c >= 105 && c <= 105){
            ret.state = 27;
        }
        
        else if(c >= 119 && c <= 119){
            ret.state = 28;
        }
        
        else if(c >= 123 && c <= 123){
            ret.state = 29;
        }
        
        else if(c >= 124 && c <= 124){
            ret.state = 30;
        }
        
        else if(c >= 125 && c <= 125){
            ret.state = 31;
        }
        
        else if(c >= 126 && c <= 126){
            ret.state = 32;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 1:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 9 && c <= 10 || c >= 32 && c <= 32){
            ret.state = 1;
        }
        
        else if(c >= 13 && c <= 13){
            ret.state = 2;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 2:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 9 && c <= 9 || c >= 32 && c <= 32){
            ret.state = 1;
        }
        
        else if(c >= 10 && c <= 10){
            ret.state = 33;
        }
        
        else if(c >= 13 && c <= 13){
            ret.state = 2;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 3:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 34;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 4:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 5:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 37;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 6:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 38 && c <= 38){
            ret.state = 38;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 39;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 7:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 8:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 9:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 42 && c <= 42){
            ret.state = 40;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 41;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 10:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 43 && c <= 43){
            ret.state = 42;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 43;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 11:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 12:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 45 && c <= 45){
            ret.state = 44;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 45;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 13:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 46;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 14:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 48 && c <= 57){
            ret.state = 14;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 15:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 16:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 17:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 60 && c <= 60){
            ret.state = 47;
        }
        
        else if(c >= 61 && c <= 61){
            ret.state = 48;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 18:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 49;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 19:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 50;
        }
        
        else if(c >= 62 && c <= 62){
            ret.state = 51;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 20:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 21:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 22:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 23:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 52;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 24:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 110 || c >= 112 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 111 && c <= 111){
            ret.state = 53;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 25:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 107 || c >= 109 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 108 && c <= 108){
            ret.state = 54;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 26:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 110 || c >= 112 && c <= 116 || c >= 118 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 111 && c <= 111){
            ret.state = 55;
        }
        
        else if(c >= 117 && c <= 117){
            ret.state = 56;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 27:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 101 || c >= 103 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 102 && c <= 102){
            ret.state = 57;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 28:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 103 || c >= 105 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 104 && c <= 104){
            ret.state = 58;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 29:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 30:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 59;
        }
        
        else if(c >= 124 && c <= 124){
            ret.state = 60;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 31:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 32:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 33:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 9 && c <= 10 || c >= 32 && c <= 32){
            ret.state = 1;
        }
        
        else if(c >= 13 && c <= 13){
            ret.state = 2;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 34:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 35:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 36:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 37:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 38:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 39:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 40:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 41:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 42:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 43:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 44:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 45:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 46:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 47:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 61;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 48:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 49:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 50:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 51:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 61 && c <= 61){
            ret.state = 62;
        }
        
        else if(c >= 62 && c <= 62){
            ret.state = 63;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 52:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 53:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 54:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 114 || c >= 116 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 115 && c <= 115){
            ret.state = 64;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 55:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 113 || c >= 115 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 114 && c <= 114){
            ret.state = 65;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 56:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 109 || c >= 111 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 110 && c <= 110){
            ret.state = 66;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 57:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 58:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 104 || c >= 106 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 105 && c <= 105){
            ret.state = 67;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 59:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 60:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 61:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 62:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 63:
        ret.nfa = false;
        ret.isEnd = true;
    
        ret.state = -1;
    
        break;

    case 64:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 100 || c >= 102 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 101 && c <= 101){
            ret.state = 68;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 65:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 66:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 98 || c >= 100 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 99 && c <= 99){
            ret.state = 69;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 67:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 107 || c >= 109 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 108 && c <= 108){
            ret.state = 70;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 68:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 69:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 115 || c >= 117 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 116 && c <= 116){
            ret.state = 71;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 70:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 100 || c >= 102 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 101 && c <= 101){
            ret.state = 72;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 71:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 104 || c >= 106 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 105 && c <= 105){
            ret.state = 73;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 72:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 73:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 110 || c >= 112 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 111 && c <= 111){
            ret.state = 74;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 74:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 109 || c >= 111 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else if(c >= 110 && c <= 110){
            ret.state = 75;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

    case 75:
        ret.nfa = true;
        ret.isEnd = true;
    
        if(c >= 36 && c <= 36 || c >= 65 && c <= 90 || c >= 95 && c <= 95 || c >= 97 && c <= 122){
            ret.state = 35;
        }
        
        else if(c >= 48 && c <= 57){
            ret.state = 36;
        }
        
        else {
            ret.state = -1;
        }
    
        break;

        default:
            ret.state = -1;
            ret.nfa = false;
    }
}


/*
    all the lexer data goes here.
*/
let jjlexers = [
    
    moveDFA0,
    
];


let jjstateCount = 143;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/

let jjpact = [ 
       142,    55,    56,    57,    58,    60,    45,   109,
        59,     8,     9,    10,    11,    12,    13,   -77,
       -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
       -77,   -77,    50,    48,    49,   140,    64,    65,
        53,    52,    54,    61,   -77,    62,   137,   -77,
       138,    73,   -77,    47,    46,    55,    56,    57,
        58,    60,    45,   136,    59,     8,     9,    10,
        11,    12,    13,    14,    15,    16,    17,    18,
        19,    20,    21,    22,    23,    24,    50,    48,
        49,    73,    64,    65,    53,    52,    54,    61,
        97,    62,   128,   127,   130,    73,    73,    47,
        46,    55,    56,    57,    58,    60,    45,   -77,
        59,     8,     9,    10,    11,    12,    13,   -77,
       -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
       -77,   -77,    50,    48,    49,   129,    64,    65,
        53,    52,    54,    61,   -77,    62,   -77,   -77,
       111,    73,   -77,    47,    46,    55,    56,    57,
        58,    60,    45,   -76,    59,     8,     9,    10,
        11,    12,    13,   -76,   -76,   -76,   -76,   -76,
       -76,   -76,   -76,   -76,   -76,   -76,    50,    48,
        49,   124,    64,    65,    53,    52,    54,    61,
       -76,    62,   -76,   -76,   118,   116,   -76,    47,
        46,    55,    56,    57,    58,    60,    45,   115,
        59,     8,     9,    10,    11,    12,    13,   -76,
       -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
       -76,   -76,    50,    48,    49,    60,    64,    65,
        53,    52,    54,    61,   -76,    62,    73,   -76,
       110,   114,   -76,    47,    46,    55,    56,    57,
        58,    60,    45,    99,    59,     8,     9,    10,
        11,    12,    13,    61,    61,    62,    62,    61,
        98,    62,    77,    72,    71,    36,    50,    48,
        49,    60,    60,     7,    53,    52,    54,    61,
        60,    62,     0,     0,     0,     0,     0,    47,
        46,    55,    56,    57,    58,    60,    45,     0,
        59,     8,     9,    10,    11,    12,    13,    61,
        61,    62,    62,     0,     0,     0,    61,     0,
        62,     0,    50,    48,    49,     0,     0,     0,
        53,    52,    54,    61,     0,    62,     0,     0,
         0,     0,     0,    47,    46,    55,    56,    57,
        58,    60,    45,     0,    59,     8,     9,    10,
        11,    12,    13,     0,     0,     0,    55,    56,
        57,    58,    60,     0,     0,    59,    50,    48,
        49,     0,     0,     0,    53,    52,    54,    61,
         0,    62,    55,    56,    57,    58,    60,    47,
        46,    59,     8,     9,    10,    11,    12,    13,
        61,     0,    62,    55,    56,    57,    58,    60,
         0,     0,    59,    50,    48,    49,     0,     0,
         0,    53,    52,    54,    61,     0,    62,    55,
        56,    57,    58,    60,    47,    46,    59,     8,
         9,    10,    11,    12,    13,    61,     0,    62,
        55,    56,    57,    58,    60,     0,     0,    59,
        50,    48,    49,     0,     0,     0,    53,    52,
        54,    61,     0,    62,    55,    56,    57,    58,
        60,    47,     0,    59,     8,     9,    10,    11,
        12,    13,    61,     0,    62,     0,     0,    57,
        58,    60,     0,     0,    59,    50,    48,    49,
         0,     0,     0,    53,    52,    54,    61,     0,
        62,    55,    56,    57,    58,    60,     0,     0,
        59,     8,     9,    10,    11,    12,    13,    61,
         0,    62,     0,     0,    57,    58,    60,     0,
         0,    59,    50,    48,    49,     0,     0,     0,
        53,    52,    54,    61,     0,    62,    55,    56,
        57,    58,    60,     0,     0,    59,     8,     9,
        10,    11,    12,    13,    61,     0,    62,     0,
         0,     0,     0,     0,     0,     0,     0,    50,
         0,    49,     0,     0,     0,    53,    52,    54,
        61,     0,    62,    55,    56,    57,    58,    60,
         0,     0,    59,     8,     9,    10,    11,    12,
        13,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    50,     0,     0,     0,
         0,     0,    53,    52,    54,    61,     0,    62,
        55,    56,    57,    58,    60,     0,     0,    59,
         8,     9,    10,    11,    12,    13,    55,    56,
        57,    58,    60,     0,     0,    59,     8,     9,
        10,    11,    12,    13,     3,    26,    27,    53,
        52,    54,    61,     0,    62,     0,     0,     0,
         0,     0,     0,     0,     0,    53,    52,    54,
        61,     0,    62,     0,     0,     0,    26,    27,
         0,    28,    40,    41,     0,     0,     0,    31,
         0,     0,     0,     0,   101,     0,   100,     0,
         0,    29,   103,     0,   104,   105,   106,     6,
        39,    42,    28,    40,    41,    26,    27,     0,
        31,     0,     0,     0,     0,   101,   121,   100,
         0,     0,    29,   103,     0,   104,   105,   106,
         0,    39,    42,     0,     0,     0,    26,    27,
         0,    28,    40,    41,     0,     0,     0,    31,
         0,     0,     0,     0,   101,   120,   100,     0,
         0,    29,   103,     0,   104,   105,   106,     0,
        39,    42,    28,    40,    41,    26,    27,     0,
        31,     0,     0,     0,     0,   101,     0,   100,
         0,     0,    29,   103,     0,   104,   105,   106,
         0,    39,    42,     0,     0,     0,    26,    27,
         0,    28,    40,    41,     0,     0,     0,    31,
         0,     0,     0,     0,   101,     0,   100,     0,
         0,    29,   103,     0,   104,   105,   106,     0,
        39,    42,    28,    40,    41,    26,    27,     0,
        31,     0,     0,     0,     0,   101,     0,   100,
         0,     0,    29,   103,     0,   104,   105,   106,
         0,    39,    42,     0,     0,     0,    26,    27,
         0,    28,    40,    41,     0,     0,     0,    31,
         0,     0,     0,     0,   101,     0,   100,     0,
         0,    29,   103,     0,   104,   105,   106,     0,
        39,    42,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,   101,     0,   100,
         0,     0,    29,   103,     0,   104,   105,   106,
         0,    39,    42,    55,    56,    57,    58,    60,
         0,     0,    59,     0,    26,    27,     0,    26,
        27,     0,     0,     0,     0,     0,     0,     0,
        26,    27,     0,     0,     0,     0,     0,     0,
         0,     0,    53,    52,    54,    61,     0,    62,
        28,    40,    41,    28,    40,    41,    31,     0,
         0,    31,    26,    27,    28,    40,    41,     0,
        29,     0,    31,    29,     0,    26,    27,    39,
        42,     0,    39,    42,    29,     0,    26,    27,
         0,     0,     0,    39,    42,     0,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,    26,    27,     0,    28,    40,    41,
        39,    42,    29,    31,     0,    26,    27,     0,
         0,    39,    42,     0,     0,    29,    26,    27,
         0,     0,     0,     0,    39,    42,    28,    40,
        41,    26,    27,     0,    31,     0,     0,     0,
         0,    28,    40,    41,     0,     0,    29,    31,
         0,     0,    28,    40,    41,    39,    42,     0,
        31,    29,     0,     0,     0,    28,    40,    41,
        39,    42,    29,    31,     0,     0,     0,     0,
         0,    39,    42,     0,     0,    29,     0,     0,
         0,     0,     0,     0,    39,    42,
]; 

/*
    displacement of action table.
*/

let jjdisact = [ 
       -54,   596,   -54,   -54,   -54,   216,   193,   -54,
       -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,
       -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,
        44,  1312,  1301,  1292,  1281,   -54,  1256,   176,
         0,   208,   204,   -54,   -54,   308,   -54,  1245,
      1236,   -54,   203,   264,  1225,  1200,  1189,  1180,
      1169,  1144,  1133,  1124,  1113,  1088,  1077,  1068,
      1057,  1032,  1021,  1012,  1001,   976,   965,   -54,
       -54,   204,   201,   581,   456,    44,   200,   175,
       956,   132,   220,    88,   945,     0,   382,   419,
       493,   530,   567,   842,   399,   362,   325,   473,
       436,   251,   245,   244,   200,   180,    90,   176,
       -54,   -54,   -54,   -54,   -54,   175,   148,   138,
       789,   137,   132,    88,   920,   -54,   -54,   652,
       621,   -54,   909,   900,   113,   889,   345,   -54,
       -54,    47,    46,    82,    42,    34,   764,   733,
       863,   854,     4,   -54,     2,    -2,   -54,   708,
       -13,   851,   -54,   -54,   -36,   677,   -54,
]; 

/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/

let jjcheckact = [ 
       140,    77,    77,    77,    77,    77,    77,    77,
        77,    77,    77,    77,    77,    77,    77,    32,
        32,    32,    32,    32,    32,    32,    32,    32,
        32,    32,    77,    77,    77,   136,    32,    32,
        77,    77,    77,    77,    32,    77,   132,    32,
       133,   132,    32,    77,    77,    69,    69,    69,
        69,    69,    69,   130,    69,    69,    69,    69,
        69,    69,    69,    24,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    24,    69,    69,
        69,   125,    24,    24,    69,    69,    69,    69,
        69,    69,   122,   121,   124,   122,   121,    69,
        69,   107,   107,   107,   107,   107,   107,    75,
       107,   107,   107,   107,   107,   107,   107,    75,
        75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,   107,   107,   107,   123,    75,    75,
       107,   107,   107,   107,    75,   107,    75,    75,
        94,    94,    75,   107,   107,   106,   106,   106,
       106,   106,   106,    73,   106,   106,   106,   106,
       106,   106,   106,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,   106,   106,
       106,   116,    73,    73,   106,   106,   106,   106,
        73,   106,    73,    73,   105,   103,    73,   106,
       106,    95,    95,    95,    95,    95,    95,   102,
        95,    95,    95,    95,    95,    95,    95,    31,
        31,    31,    31,    31,    31,    31,    31,    31,
        31,    31,    95,    95,    95,    92,    31,    31,
        95,    95,    95,    95,    31,    95,   101,    31,
        93,   101,    31,    95,    95,    74,    74,    74,
        74,    74,    74,    71,    74,    74,    74,    74,
        74,    74,    74,    92,    66,    92,    66,    65,
        70,    65,    42,    34,    33,     6,    74,    74,
        74,    91,    90,     5,    74,    74,    74,    74,
        89,    74,     0,     0,     0,     0,     0,    74,
        74,    43,    43,    43,    43,    43,    43,     0,
        43,    43,    43,    43,    43,    43,    43,    91,
        90,    91,    90,     0,     0,     0,    89,     0,
        89,     0,    43,    43,    43,     0,     0,     0,
        43,    43,    43,    43,     0,    43,     0,     0,
         0,     0,     0,    43,    43,    37,    37,    37,
        37,    37,    37,     0,    37,    37,    37,    37,
        37,    37,    37,     0,     0,     0,    86,    86,
        86,    86,    86,     0,     0,    86,    37,    37,
        37,     0,     0,     0,    37,    37,    37,    37,
         0,    37,   118,   118,   118,   118,   118,    37,
        37,   118,   118,   118,   118,   118,   118,   118,
        86,     0,    86,    85,    85,    85,    85,    85,
         0,     0,    85,   118,   118,   118,     0,     0,
         0,   118,   118,   118,   118,     0,   118,    78,
        78,    78,    78,    78,   118,   118,    78,    78,
        78,    78,    78,    78,    78,    85,     0,    85,
        84,    84,    84,    84,    84,     0,     0,    84,
        78,    78,    78,     0,     0,     0,    78,    78,
        78,    78,     0,    78,    79,    79,    79,    79,
        79,    78,     0,    79,    79,    79,    79,    79,
        79,    79,    84,     0,    84,     0,     0,    88,
        88,    88,     0,     0,    88,    79,    79,    79,
         0,     0,     0,    79,    79,    79,    79,     0,
        79,    68,    68,    68,    68,    68,     0,     0,
        68,    68,    68,    68,    68,    68,    68,    88,
         0,    88,     0,     0,    87,    87,    87,     0,
         0,    87,    68,    68,    68,     0,     0,     0,
        68,    68,    68,    68,     0,    68,    80,    80,
        80,    80,    80,     0,     0,    80,    80,    80,
        80,    80,    80,    80,    87,     0,    87,     0,
         0,     0,     0,     0,     0,     0,     0,    80,
         0,    80,     0,     0,     0,    80,    80,    80,
        80,     0,    80,    81,    81,    81,    81,    81,
         0,     0,    81,    81,    81,    81,    81,    81,
        81,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,    81,     0,     0,     0,
         0,     0,    81,    81,    81,    81,     0,    81,
        82,    82,    82,    82,    82,     0,     0,    82,
        82,    82,    82,    82,    82,    82,    67,    67,
        67,    67,    67,     0,     0,    67,    67,    67,
        67,    67,    67,    67,     1,     1,     1,    82,
        82,    82,    82,     0,    82,     0,     0,     0,
         0,     0,     0,     0,     0,    67,    67,    67,
        67,     0,    67,     0,     0,     0,   112,   112,
         0,     1,     1,     1,     0,     0,     0,     1,
         0,     0,     0,     0,     1,     0,     1,     0,
         0,     1,     1,     0,     1,     1,     1,     1,
         1,     1,   112,   112,   112,   111,   111,     0,
       112,     0,     0,     0,     0,   112,   112,   112,
         0,     0,   112,   112,     0,   112,   112,   112,
         0,   112,   112,     0,     0,     0,   141,   141,
         0,   111,   111,   111,     0,     0,     0,   111,
         0,     0,     0,     0,   111,   111,   111,     0,
         0,   111,   111,     0,   111,   111,   111,     0,
       111,   111,   141,   141,   141,   135,   135,     0,
       141,     0,     0,     0,     0,   141,     0,   141,
         0,     0,   141,   141,     0,   141,   141,   141,
         0,   141,   141,     0,     0,     0,   127,   127,
         0,   135,   135,   135,     0,     0,     0,   135,
         0,     0,     0,     0,   135,     0,   135,     0,
         0,   135,   135,     0,   135,   135,   135,     0,
       135,   135,   127,   127,   127,   126,   126,     0,
       127,     0,     0,     0,     0,   127,     0,   127,
         0,     0,   127,   127,     0,   127,   127,   127,
         0,   127,   127,     0,     0,     0,   104,   104,
         0,   126,   126,   126,     0,     0,     0,   126,
         0,     0,     0,     0,   126,     0,   126,     0,
         0,   126,   126,     0,   126,   126,   126,     0,
       126,   126,   104,   104,   104,     0,     0,     0,
       104,     0,     0,     0,     0,   104,     0,   104,
         0,     0,   104,   104,     0,   104,   104,   104,
         0,   104,   104,    83,    83,    83,    83,    83,
         0,     0,    83,     0,   137,   137,     0,   129,
       129,     0,     0,     0,     0,     0,     0,     0,
       128,   128,     0,     0,     0,     0,     0,     0,
         0,     0,    83,    83,    83,    83,     0,    83,
       137,   137,   137,   129,   129,   129,   137,     0,
         0,   129,   117,   117,   128,   128,   128,     0,
       137,     0,   128,   129,     0,   115,   115,   137,
       137,     0,   129,   129,   128,     0,   114,   114,
         0,     0,     0,   128,   128,     0,   117,   117,
       117,   108,   108,     0,   117,     0,     0,     0,
         0,   115,   115,   115,     0,     0,   117,   115,
         0,     0,   114,   114,   114,   117,   117,     0,
       114,   115,    76,    76,     0,   108,   108,   108,
       115,   115,   114,   108,     0,    72,    72,     0,
         0,   114,   114,     0,     0,   108,    62,    62,
         0,     0,     0,     0,   108,   108,    76,    76,
        76,    61,    61,     0,    76,     0,     0,     0,
         0,    72,    72,    72,     0,     0,    76,    72,
         0,     0,    62,    62,    62,    76,    76,     0,
        62,    72,    60,    60,     0,    61,    61,    61,
        72,    72,    62,    61,     0,    59,    59,     0,
         0,    62,    62,     0,     0,    61,    58,    58,
         0,     0,     0,     0,    61,    61,    60,    60,
        60,    57,    57,     0,    60,     0,     0,     0,
         0,    59,    59,    59,     0,     0,    60,    59,
         0,     0,    58,    58,    58,    60,    60,     0,
        58,    59,    56,    56,     0,    57,    57,    57,
        59,    59,    58,    57,     0,    55,    55,     0,
         0,    58,    58,     0,     0,    57,    54,    54,
         0,     0,     0,     0,    57,    57,    56,    56,
        56,    53,    53,     0,    56,     0,     0,     0,
         0,    55,    55,    55,     0,     0,    56,    55,
         0,     0,    54,    54,    54,    56,    56,     0,
        54,    55,    52,    52,     0,    53,    53,    53,
        55,    55,    54,    53,     0,    51,    51,     0,
         0,    54,    54,     0,     0,    53,    50,    50,
         0,     0,     0,     0,    53,    53,    52,    52,
        52,    49,    49,     0,    52,     0,     0,     0,
         0,    51,    51,    51,     0,     0,    52,    51,
         0,     0,    50,    50,    50,    52,    52,     0,
        50,    51,    48,    48,     0,    49,    49,    49,
        51,    51,    50,    49,     0,    47,    47,     0,
         0,    50,    50,     0,     0,    49,    46,    46,
         0,     0,     0,     0,    49,    49,    48,    48,
        48,    45,    45,     0,    48,     0,     0,     0,
         0,    47,    47,    47,     0,     0,    48,    47,
         0,     0,    46,    46,    46,    48,    48,     0,
        46,    47,    44,    44,     0,    45,    45,    45,
        47,    47,    46,    45,     0,    40,    40,     0,
         0,    46,    46,     0,     0,    45,    39,    39,
         0,     0,     0,     0,    45,    45,    44,    44,
        44,    30,    30,     0,    44,     0,     0,     0,
         0,    40,    40,    40,     0,     0,    44,    40,
         0,     0,    39,    39,    39,    44,    44,     0,
        39,    40,    28,    28,     0,    30,    30,    30,
        40,    40,    39,    30,     0,    27,    27,     0,
         0,    39,    39,     0,     0,    30,    26,    26,
         0,     0,     0,     0,    30,    30,    28,    28,
        28,    25,    25,     0,    28,     0,     0,     0,
         0,    27,    27,    27,     0,     0,    28,    27,
         0,     0,    26,    26,    26,    28,    28,     0,
        26,    27,     0,     0,     0,    25,    25,    25,
        27,    27,    26,    25,     0,     0,     0,     0,
         0,    26,    26,     0,     0,    25,     0,     0,
         0,     0,     0,     0,    25,    25,
]; 

/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/

let jjdefred = [ 
         2,    -1,     0,     1,     3,    -1,     6,    62,
        63,    64,    65,    66,    67,    51,    52,    53,
        54,    55,    56,    57,    58,    59,    60,    61,
        48,    -1,    -1,    -1,    -1,    45,    -1,    48,
        48,    -1,     5,     8,     9,    23,    73,    -1,
        -1,    72,    68,    71,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    69,    -1,    -1,    49,
        50,    41,    42,    43,    44,    -1,    -1,    -1,
        -1,    48,    -1,    48,    -1,    -1,    26,    27,
        28,    29,    30,    31,    32,    33,    34,    35,
        36,    37,    38,    39,    40,    -1,    -1,    24,
        46,    10,     7,    11,    10,    -1,    -1,    -1,
        -1,    -1,    22,    70,    -1,    47,    74,    -1,
        -1,    13,    -1,    -1,    -1,    20,    25,     4,
        12,    -1,    -1,    -1,    -1,    21,    -1,    -1,
        -1,    20,    18,    15,    -1,    -1,    14,    -1,
        -1,    20,    19,    16,    -1,    -1,    17,
]; 

/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/

let jjpgoto = [ 
        50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    62,    62,
         3,    62,   142,    62,     4,   101,    37,   101,
        37,    62,    50,    29,    24,    29,    24,   140,
       125,    37,    50,    50,    50,   138,    29,    24,
       101,    37,   133,   125,    37,   134,    29,    24,
       118,    29,    24,   132,    37,    29,    24,   112,
       131,    29,    24,   101,    37,   111,    50,    50,
       130,    29,    24,   101,    37,   124,   125,    37,
         1,    29,    24,    -1,    29,    24,   122,    37,
       121,    37,    33,    34,    29,    24,    29,    24,
        36,    -1,    36,   101,    37,   101,    37,    -1,
        -1,    29,    24,    29,    24,   116,   107,    -1,
       101,    37,    -1,    29,    24,   106,    29,    24,
        95,    -1,    29,    24,    92,    29,    24,    94,
        37,    29,    24,    -1,    43,    29,    24,    93,
        42,    29,    24,    91,    -1,    90,    -1,    89,
        29,    24,    29,    24,    29,    24,    88,    -1,
        87,    -1,    86,    29,    24,    29,    24,    29,
        24,    85,    -1,    84,    -1,    83,    29,    24,
        29,    24,    29,    24,    82,    -1,    81,    -1,
        80,    29,    24,    29,    24,    29,    24,    79,
        -1,    78,    -1,    77,    29,    24,    29,    24,
        29,    24,    74,    -1,    74,    -1,    69,    29,
        75,    29,    73,    29,    24,    68,    -1,    67,
        -1,    66,    29,    24,    29,    24,    29,    24,
        65,    -1,    -1,    -1,    -1,    29,    24,
]; 

/*
    displacement of the goto table
*/

let jjdisgoto = [ 
        79,    22,   -17,   -17,   -17,   -17,    87,   -17,
       -17,   -17,   -17,   -17,   -17,   -17,   -17,   -17,
       -17,   -17,   -17,   -17,   -17,   -17,   -17,   -17,
        22,   206,   199,   197,   195,   -17,   188,    16,
        14,   -17,   -17,   -17,   -17,    -6,   -17,   186,
       184,   -17,   -17,    -7,   177,   175,   173,   166,
       164,   162,   155,   153,   151,   144,   142,   140,
       133,   131,   129,   114,   122,   118,   110,   -17,
       -17,    59,    58,     3,     2,    -8,   -17,   -17,
       107,    12,    -9,    11,   100,     0,     1,    -1,
        -2,    -3,    -4,     7,     6,     5,     4,     9,
         8,    32,    31,    30,    22,   -17,   -17,   -10,
       -17,    64,   -17,   -17,    58,   -17,   -17,   -17,
       103,   -17,   -11,   -12,    46,   -17,   -17,    92,
        90,   -17,    79,    77,   -17,    69,    -5,   -17,
       -17,   -17,   -17,   -17,   -17,   -17,    66,    58,
        50,    42,    46,   -17,   -17,   -17,   -17,    39,
       -17,    31,   -17,   -17,   -17,    20,   -17,
]; 

/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/

let jjruleLen = [ 
         2,     2,     0,     1,     7,     1,     0,     3,
         1,     2,     0,     1,     3,     2,     6,     5,
         7,     9,     0,     2,     0,     1,     3,     1,
         3,     5,     3,     3,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,
         3,     2,     2,     2,     2,     1,     3,     4,
         1,     2,     2,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     0,     3,     1,
         1,     1,     4,     2,     2,
]; 

/*
    index of the LHS of each rule
*/

let jjlhs = [ 
         0,     1,     1,     2,     2,     3,     3,     4,
         4,     5,     5,     6,     6,     6,     6,     6,
         6,     6,     7,     7,     8,     8,     9,     9,
        10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    11,    11,    11,    11,    11,
        11,    11,    11,    11,    11,    11,    12,    12,
        12,    12,    12,    12,    13,    13,    14,    14,
        15,    16,    16,    16,    16,
]; 

/*
    token names
*/

let jjtokenNames = [ 
     "EOF","PLUS","MINUS","TIMES","DIVIDE", "EXP","QUESTION","COLON",
    "PERCENT",  "GT",  "LT","GTOE","LTOE", "EQU", "NEQ","ASSIGN",
    "PLUS_ASSIGN","MINUS_ASSIGN","TIMES_ASSIGN","DIVIDE_ASSIGN","BIT_AND_ASSIGN","BIT_OR_ASSIGN","BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN",
    "LEFT_SHIFT_ASSIGN","MOD_ASSIGN","BIT_AND","BIT_OR","BIT_XOR","BIT_NOT", "INC", "DEC",
    "LEFT_SHIFT","RIGHT_SHIFT","RIGHT_SHIFT2", "BRA", "KET","CBRA","CKET","COMMA",
    "BBRA","BKET", "EOL", "AND",  "OR", "NOT",  "IF","ELSE",
    "WHILE",  "DO", "FOR","FUNCTION","NAME", "NUM",
]; 

/*
    token alias
*/

let jjtokenAlias = [ 
    "null",   "+",   "-",   "*",   "/",  "**",   "?",   ":",
       "%",   ">",   "<",  ">=",  "<=",  "==",  "!=",   "=",
      "+=",  "-=",  "*=",  "/=",  "&=",  "|=",  "^=", ">>=",
     "<<=",  "%=",   "&",   "|",   "^",   "~",  "++",  "--",
      "<<",  ">>", ">>>",   "(",   ")",   "[",   "]",   ",",
       "{",   "}",   ";",  "&&",  "||",   "!",  "if","else",
    "while",  "do", "for","function","null","null",
]; 





interface Token{
    id: number;
    val: string;
};

export class Parser {
    // members for lexer
    private _lexState: number[] = [];
    private _state: number = 0;
    private _matched: string[] = [];
    private _token: Token = null;
    private _marker: number = -1;
    private _backup: string[] = [];

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: any[] = [];

    private _setImg(s: string){
        this._matched.length = 0;
        for(let i = 0;i < s.length;i++){
            this._matched.push(s.charAt(i));
        }
    }
    
    private _doLexAction0(jjstaten: number){
        switch(jjstaten){
            
            
            case 1:
                    
                this._setImg("");
        
                break;
                
            
            case 2:
                    
                this._setImg("");
        
                break;
                
            
            case 3:
                    
                this._token = {
                    id: 45,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 4:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 5:
                    
                this._token = {
                    id: 8,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 6:
                    
                this._token = {
                    id: 26,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 7:
                    
                this._token = {
                    id: 35,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 8:
                    
                this._token = {
                    id: 36,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 9:
                    
                this._token = {
                    id: 3,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 10:
                    
                this._token = {
                    id: 1,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 11:
                    
                this._token = {
                    id: 39,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 12:
                    
                this._token = {
                    id: 2,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 13:
                    
                this._token = {
                    id: 4,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 14:
                    
                this._token = {
                    id: 53,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 15:
                    
                this._token = {
                    id: 7,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 16:
                    
                this._token = {
                    id: 42,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 17:
                    
                this._token = {
                    id: 10,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 18:
                    
                this._token = {
                    id: 15,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 19:
                    
                this._token = {
                    id: 9,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 20:
                    
                this._token = {
                    id: 6,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 21:
                    
                this._token = {
                    id: 37,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 22:
                    
                this._token = {
                    id: 38,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 23:
                    
                this._token = {
                    id: 28,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 24:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 25:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 26:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 27:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 28:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 29:
                    
                this._token = {
                    id: 40,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 30:
                    
                this._token = {
                    id: 27,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 31:
                    
                this._token = {
                    id: 41,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 32:
                    
                this._token = {
                    id: 29,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 33:
                    
                this._setImg("");
        
                break;
                
            
            case 34:
                    
                this._token = {
                    id: 14,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 35:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 36:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 37:
                    
                this._token = {
                    id: 25,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 38:
                    
                this._token = {
                    id: 43,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 39:
                    
                this._token = {
                    id: 20,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 40:
                    
                this._token = {
                    id: 5,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 41:
                    
                this._token = {
                    id: 18,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 42:
                    
                this._token = {
                    id: 30,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 43:
                    
                this._token = {
                    id: 16,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 44:
                    
                this._token = {
                    id: 31,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 45:
                    
                this._token = {
                    id: 17,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 46:
                    
                this._token = {
                    id: 19,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 47:
                    
                this._token = {
                    id: 32,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 48:
                    
                this._token = {
                    id: 12,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 49:
                    
                this._token = {
                    id: 13,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 50:
                    
                this._token = {
                    id: 11,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 51:
                    
                this._token = {
                    id: 33,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 52:
                    
                this._token = {
                    id: 22,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 53:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 54:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 55:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 56:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 57:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 58:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 59:
                    
                this._token = {
                    id: 21,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 60:
                    
                this._token = {
                    id: 44,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 61:
                    
                this._token = {
                    id: 24,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 62:
                    
                this._token = {
                    id: 23,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 63:
                    
                this._token = {
                    id: 34,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 64:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 65:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 66:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 67:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 68:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 69:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 70:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 71:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 72:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 73:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 74:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            case 75:
                    
                this._token = {
                    id: 52,
                    val: this._matched.join('')
                };
        
                break;
                
            
            default:;
        }
    }

    
    private _doLexAction(jjlexstate: number, jjstate: number){
        switch(jjlexstate){
            
            case 0:
                this._doLexAction0(jjstate);
                break;
            
            default:;
        }
    }
    private _acceptChar(c: number){
        let lexstate = this._lexState[this._lexState.length - 1];
        this._marker && this._backup.push(c);
        let retn = { state: this._state, nfa: false, isEnd: false };
        jjlexers[lexstate](c, retn);
        if(retn.isEnd){

        }
    }
}
