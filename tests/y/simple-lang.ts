/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/


/*
    find the next state to go in the dfa
*/
function moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){
    switch(ret.state){
        case 0:
            ret.hasArc = true;
            ret.isEnd = false;
            if((c >= 9 && c <= 10) || c === 32){
                ret.state = 1;
            }
            else if(c === 13){
                ret.state = 2;
            }
            else if(c === 33){
                ret.state = 3;
            }
            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 99) || (c >= 103 && c <= 104) || (c >= 106 && c <= 118) || (c >= 120 && c <= 122)){
                ret.state = 4;
            }
            else if(c === 37){
                ret.state = 5;
            }
            else if(c === 38){
                ret.state = 6;
            }
            else if(c === 40){
                ret.state = 7;
            }
            else if(c === 41){
                ret.state = 8;
            }
            else if(c === 42){
                ret.state = 9;
            }
            else if(c === 43){
                ret.state = 10;
            }
            else if(c === 44){
                ret.state = 11;
            }
            else if(c === 45){
                ret.state = 12;
            }
            else if(c === 47){
                ret.state = 13;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 14;
            }
            else if(c === 58){
                ret.state = 15;
            }
            else if(c === 59){
                ret.state = 16;
            }
            else if(c === 60){
                ret.state = 17;
            }
            else if(c === 61){
                ret.state = 18;
            }
            else if(c === 62){
                ret.state = 19;
            }
            else if(c === 63){
                ret.state = 20;
            }
            else if(c === 91){
                ret.state = 21;
            }
            else if(c === 93){
                ret.state = 22;
            }
            else if(c === 94){
                ret.state = 23;
            }
            else if(c === 100){
                ret.state = 24;
            }
            else if(c === 101){
                ret.state = 25;
            }
            else if(c === 102){
                ret.state = 26;
            }
            else if(c === 105){
                ret.state = 27;
            }
            else if(c === 119){
                ret.state = 28;
            }
            else if(c === 123){
                ret.state = 29;
            }
            else if(c === 124){
                ret.state = 30;
            }
            else if(c === 125){
                ret.state = 31;
            }
            else if(c === 126){
                ret.state = 32;
            }
            else {
                ret.state = -1;
            }
            break;
        case 1:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 32){
                ret.state = 1;
            }
            else if(c === 13){
                ret.state = 2;
            }
            else {
                ret.state = -1;
            }
            break;
        case 2:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 9 || c === 32){
                ret.state = 1;
            }
            else if(c === 10){
                ret.state = 33;
            }
            else if(c === 13){
                ret.state = 2;
            }
            else {
                ret.state = -1;
            }
            break;
        case 3:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 34;
            }
            else {
                ret.state = -1;
            }
            break;
        case 4:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 5:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 37;
            }
            else {
                ret.state = -1;
            }
            break;
        case 6:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 38){
                ret.state = 38;
            }
            else if(c === 61){
                ret.state = 39;
            }
            else {
                ret.state = -1;
            }
            break;
        case 7:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 8:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 9:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 42){
                ret.state = 40;
            }
            else if(c === 61){
                ret.state = 41;
            }
            else {
                ret.state = -1;
            }
            break;
        case 10:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 43){
                ret.state = 42;
            }
            else if(c === 61){
                ret.state = 43;
            }
            else {
                ret.state = -1;
            }
            break;
        case 11:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 12:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 45){
                ret.state = 44;
            }
            else if(c === 61){
                ret.state = 45;
            }
            else {
                ret.state = -1;
            }
            break;
        case 13:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 46;
            }
            else {
                ret.state = -1;
            }
            break;
        case 14:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 48 && c <= 57)){
                ret.state = 14;
            }
            else {
                ret.state = -1;
            }
            break;
        case 15:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 16:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 17:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 60){
                ret.state = 47;
            }
            else if(c === 61){
                ret.state = 48;
            }
            else {
                ret.state = -1;
            }
            break;
        case 18:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 49;
            }
            else {
                ret.state = -1;
            }
            break;
        case 19:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 50;
            }
            else if(c === 62){
                ret.state = 51;
            }
            else {
                ret.state = -1;
            }
            break;
        case 20:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 21:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 22:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 23:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 52;
            }
            else {
                ret.state = -1;
            }
            break;
        case 24:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 110) || (c >= 112 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 111){
                ret.state = 53;
            }
            else {
                ret.state = -1;
            }
            break;
        case 25:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 107) || (c >= 109 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 108){
                ret.state = 54;
            }
            else {
                ret.state = -1;
            }
            break;
        case 26:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 110) || (c >= 112 && c <= 116) || (c >= 118 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 111){
                ret.state = 55;
            }
            else if(c === 117){
                ret.state = 56;
            }
            else {
                ret.state = -1;
            }
            break;
        case 27:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 101) || (c >= 103 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 102){
                ret.state = 57;
            }
            else {
                ret.state = -1;
            }
            break;
        case 28:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 103) || (c >= 105 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 104){
                ret.state = 58;
            }
            else {
                ret.state = -1;
            }
            break;
        case 29:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 30:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 59;
            }
            else if(c === 124){
                ret.state = 60;
            }
            else {
                ret.state = -1;
            }
            break;
        case 31:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 32:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 33:
            ret.hasArc = true;
            ret.isEnd = true;
            if((c >= 9 && c <= 10) || c === 32){
                ret.state = 1;
            }
            else if(c === 13){
                ret.state = 2;
            }
            else {
                ret.state = -1;
            }
            break;
        case 34:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 35:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 36:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 37:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 38:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 39:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 40:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 41:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 42:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 43:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 44:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 45:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 46:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 47:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 61;
            }
            else {
                ret.state = -1;
            }
            break;
        case 48:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 49:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 50:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 51:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 61){
                ret.state = 62;
            }
            else if(c === 62){
                ret.state = 63;
            }
            else {
                ret.state = -1;
            }
            break;
        case 52:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 53:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 54:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 114) || (c >= 116 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 115){
                ret.state = 64;
            }
            else {
                ret.state = -1;
            }
            break;
        case 55:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 113) || (c >= 115 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 114){
                ret.state = 65;
            }
            else {
                ret.state = -1;
            }
            break;
        case 56:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 109) || (c >= 111 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 110){
                ret.state = 66;
            }
            else {
                ret.state = -1;
            }
            break;
        case 57:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 58:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 104) || (c >= 106 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 105){
                ret.state = 67;
            }
            else {
                ret.state = -1;
            }
            break;
        case 59:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 60:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 61:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 62:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 63:
            ret.hasArc = false;
            ret.isEnd = true;
            ret.state = -1;
            break;
        case 64:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 100) || (c >= 102 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 101){
                ret.state = 68;
            }
            else {
                ret.state = -1;
            }
            break;
        case 65:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 66:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 98) || (c >= 100 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 99){
                ret.state = 69;
            }
            else {
                ret.state = -1;
            }
            break;
        case 67:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 107) || (c >= 109 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 108){
                ret.state = 70;
            }
            else {
                ret.state = -1;
            }
            break;
        case 68:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 69:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 115) || (c >= 117 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 116){
                ret.state = 71;
            }
            else {
                ret.state = -1;
            }
            break;
        case 70:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 100) || (c >= 102 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 101){
                ret.state = 72;
            }
            else {
                ret.state = -1;
            }
            break;
        case 71:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 104) || (c >= 106 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 105){
                ret.state = 73;
            }
            else {
                ret.state = -1;
            }
            break;
        case 72:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        case 73:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 110) || (c >= 112 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 111){
                ret.state = 74;
            }
            else {
                ret.state = -1;
            }
            break;
        case 74:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 109) || (c >= 111 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else if(c === 110){
                ret.state = 75;
            }
            else {
                ret.state = -1;
            }
            break;
        case 75:
            ret.hasArc = true;
            ret.isEnd = true;
            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){
                ret.state = 35;
            }
            else if((c >= 48 && c <= 57)){
                ret.state = 36;
            }
            else {
                ret.state = -1;
            }
            break;
        default:
            ret.state = -1;
            ret.hasArc = false;
    }
}

/*
    all the lexer data goes here.
*/
let jjlexers = [
    moveDFA0,
];

/*
    tokens that a lexical dfa state can return
*/
let jjlexTokens0 = [ 
        -1,    -1,    -1,    47,     1,    10,    28,    37,    38,     5,
         3,    41,     4,     6,     2,     9,    44,    12,    17,    11,
         8,    39,    40,    30,     1,     1,     1,     1,     1,    42,
        29,    43,    31,    -1,    16,     1,     1,    27,    45,    22,
         7,    20,    32,    18,    33,    19,    21,    34,    14,    15,
        13,    35,    24,    51,     1,     1,     1,    48,     1,    23,
        46,    26,    25,    36,     1,    52,     1,     1,    49,     1,
         1,     1,    50,     1,     1,    53,
]; 

let jjstateCount = 144;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
let jjpact = [ 
        55,    56,    57,    58,    60,    45,   110,    59,     8,     9,
        10,    11,    12,    13,   -79,   -79,   -79,   -79,   -79,   -79,
       -79,   -79,   -79,   -79,   -79,    50,    48,    49,   143,    64,
        65,    53,    52,    54,    61,   -79,    62,   138,   -79,   141,
        73,   -79,    47,    46,    55,    56,    57,    58,    60,    45,
       139,    59,     8,     9,    10,    11,    12,    13,    14,    15,
        16,    17,    18,    19,    20,    21,    22,    23,    24,    50,
        48,    49,   137,    64,    65,    53,    52,    54,    61,    98,
        62,   129,   128,    73,    73,    73,    47,    46,    55,    56,
        57,    58,    60,    45,   -79,    59,     8,     9,    10,    11,
        12,    13,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
       -79,   -79,   -79,    50,    48,    49,   131,    64,    65,    53,
        52,    54,    61,   -79,    62,   -79,   -79,   112,    73,   -79,
        47,    46,    55,    56,    57,    58,    60,    45,   -78,    59,
         8,     9,    10,    11,    12,    13,   -78,   -78,   -78,   -78,
       -78,   -78,   -78,   -78,   -78,   -78,   -78,    50,    48,    49,
       130,    64,    65,    53,    52,    54,    61,   -78,    62,   -78,
       -78,   125,   119,   -78,    47,    46,    55,    56,    57,    58,
        60,    45,   117,    59,     8,     9,    10,    11,    12,    13,
       -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
       -78,    50,    48,    49,    60,    64,    65,    53,    52,    54,
        61,   -78,    62,    73,   -78,   116,   115,   -78,    47,    46,
        55,    56,    57,    58,    60,    45,   111,    59,     8,     9,
        10,    11,    12,    13,    61,    61,    62,    62,    61,   100,
        62,    99,    78,    72,    71,    50,    48,    49,    60,    60,
        36,    53,    52,    54,    61,    60,    62,     7,     0,     0,
         0,     0,    47,    46,    55,    56,    57,    58,    60,    45,
         0,    59,     8,     9,    10,    11,    12,    13,    61,    61,
        62,    62,     0,     0,     0,    61,     0,    62,     0,    50,
        48,    49,     0,     0,     0,    53,    52,    54,    61,     0,
        62,     0,     0,     0,     0,     0,    47,    46,    55,    56,
        57,    58,    60,    45,     0,    59,     8,     9,    10,    11,
        12,    13,     0,     0,     0,     0,     0,     0,     0,    39,
        42,    26,    27,    50,    48,    49,     0,     0,     0,    53,
        52,    54,    61,     0,    62,    55,    56,    57,    58,    60,
        47,    46,    59,     8,     9,    10,    11,    12,    13,    28,
        40,    41,     0,     0,     0,    31,    39,    42,    26,    27,
        50,    48,    49,     0,     0,    29,    53,    52,    54,    61,
         0,    62,    55,    56,    57,    58,    60,    47,    46,    59,
         8,     9,    10,    11,    12,    13,    28,    40,    41,     0,
         0,     0,    31,    39,    42,    26,    27,    50,    48,    49,
         0,     0,    29,    53,    52,    54,    61,     0,    62,    55,
        56,    57,    58,    60,    47,     0,    59,     8,     9,    10,
        11,    12,    13,    28,    40,    41,     0,     0,     0,    31,
        39,    42,    26,    27,    50,    48,    49,     0,     0,    29,
        53,    52,    54,    61,     0,    62,    55,    56,    57,    58,
        60,     0,     0,    59,     8,     9,    10,    11,    12,    13,
        28,    40,    41,     0,     0,     0,    31,    39,    42,    26,
        27,    50,    48,    49,     0,     0,    29,    53,    52,    54,
        61,     0,    62,    55,    56,    57,    58,    60,     0,     0,
        59,     8,     9,    10,    11,    12,    13,    28,    40,    41,
         0,     0,     0,    31,    39,    42,    26,    27,    50,     0,
        49,     0,     0,    29,    53,    52,    54,    61,     0,    62,
        55,    56,    57,    58,    60,     0,     0,    59,     8,     9,
        10,    11,    12,    13,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,    50,     0,     0,     0,     0,
        29,    53,    52,    54,    61,     0,    62,    55,    56,    57,
        58,    60,     0,     0,    59,     8,     9,    10,    11,    12,
        13,    55,    56,    57,    58,    60,     0,     0,    59,     8,
         9,    10,    11,    12,    13,     0,     0,     0,    53,    52,
        54,    61,     0,    62,     3,    39,    42,    26,    27,     0,
         0,     0,    53,    52,    54,    61,     0,    62,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    39,    42,
        26,    27,     0,     0,     0,    28,    40,    41,     0,     0,
         0,    31,     0,     0,     0,     0,   102,     0,   101,     0,
         0,    29,   104,     0,   105,   106,   107,     6,    28,    40,
        41,     0,     0,     0,    31,    39,    42,    26,    27,   102,
       122,   101,     0,     0,    29,   104,     0,   105,   106,   107,
         0,     0,     0,     0,     0,     0,     0,    39,    42,    26,
        27,     0,     0,     0,     0,    28,    40,    41,     0,     0,
         0,    31,     0,     0,     0,     0,   102,   121,   101,     0,
         0,    29,   104,     0,   105,   106,   107,    28,    40,    41,
         0,     0,     0,    31,    39,    42,    26,    27,   102,     0,
       101,     0,     0,    29,   104,     0,   105,   106,   107,     0,
         0,     0,     0,     0,     0,     0,    39,    42,    26,    27,
         0,     0,     0,     0,    28,    40,    41,     0,     0,     0,
        31,     0,     0,     0,     0,   102,     0,   101,     0,     0,
        29,   104,     0,   105,   106,   107,    28,    40,    41,     0,
         0,     0,    31,    39,    42,    26,    27,   102,     0,   101,
         0,     0,    29,   104,     0,   105,   106,   107,     0,     0,
         0,     0,     0,     0,     0,    39,    42,    26,    27,     0,
         0,     0,     0,    28,    40,    41,     0,     0,     0,    31,
         0,     0,     0,     0,   102,     0,   101,     0,     0,    29,
       104,     0,   105,   106,   107,    28,    40,    41,     0,     0,
         0,    31,     0,     0,     0,     0,   102,     0,   101,     0,
         0,    29,   104,     0,   105,   106,   107,    55,    56,    57,
        58,    60,     0,     0,    59,    39,    42,    26,    27,     0,
         0,     0,    39,    42,    26,    27,     0,     0,     0,     0,
         0,     0,     0,    39,    42,    26,    27,     0,    53,    52,
        54,    61,     0,    62,     0,    28,    40,    41,     0,     0,
         0,    31,    28,    40,    41,     0,     0,     0,    31,     0,
         0,    29,     0,    28,    40,    41,     0,     0,    29,    31,
        39,    42,    26,    27,     0,     0,     0,     0,     0,    29,
         0,    39,    42,    26,    27,     0,     0,     0,    39,    42,
        26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
        28,    40,    41,     0,     0,     0,    31,    39,    42,    26,
        27,    28,    40,    41,     0,     0,    29,    31,    28,    40,
        41,     0,     0,     0,    31,     0,     0,    29,    39,    42,
        26,    27,     0,     0,    29,     0,     0,    28,    40,    41,
         0,     0,     0,    31,     0,    39,    42,    26,    27,     0,
         0,     0,     0,    29,    39,    42,    26,    27,    28,    40,
        41,     0,     0,     0,    31,    39,    42,    26,    27,     0,
         0,     0,     0,     0,    29,    28,    40,    41,    57,    58,
        60,    31,     0,    59,    28,    40,    41,     0,     0,     0,
        31,    29,     0,     0,     0,    28,    40,    41,     0,     0,
        29,    31,    39,    42,    26,    27,     0,     0,     0,     0,
        61,    29,    62,    39,    42,    26,    27,     0,     0,     0,
        39,    42,    26,    27,     0,     0,     0,     0,     0,     0,
         0,     0,    28,    40,    41,     0,     0,     0,    31,    39,
        42,    26,    27,    28,    40,    41,     0,     0,    29,    31,
        28,    40,    41,     0,     0,     0,    31,     0,     0,    29,
        39,    42,    26,    27,     0,     0,    29,     0,     0,    28,
        40,    41,     0,     0,     0,    31,     0,    39,    42,    26,
        27,     0,     0,     0,     0,    29,    39,    42,    26,    27,
        28,    40,    41,     0,     0,     0,    31,    39,    42,    26,
        27,     0,     0,     0,     0,     0,    29,    28,    40,    41,
        57,    58,    60,    31,     0,    59,    28,    40,    41,     0,
         0,     0,    31,    29,     0,     0,     0,    28,    40,    41,
         0,     0,    29,    31,    39,    42,    26,    27,     0,     0,
         0,     0,    61,    29,    62,    39,    42,    26,    27,     0,
         0,     0,    39,    42,    26,    27,     0,     0,     0,     0,
         0,     0,     0,     0,    28,    40,    41,     0,     0,     0,
        31,    39,    42,    26,    27,    28,    40,    41,     0,     0,
        29,    31,    28,    40,    41,     0,     0,     0,    31,     0,
         0,    29,    39,    42,    26,    27,     0,     0,    29,     0,
         0,    28,    40,    41,     0,     0,     0,    31,     0,    39,
        42,    26,    27,     0,     0,     0,     0,    29,    39,    42,
        26,    27,    28,    40,    41,     0,     0,     0,    31,    39,
        42,    26,    27,     0,     0,     0,     0,     0,    29,    28,
        40,    41,     0,     0,     0,    31,     0,     0,    28,    40,
        41,     0,     0,     0,    31,    29,     0,     0,     0,    28,
        40,    41,     0,     0,    29,    31,    39,    42,    26,    27,
         0,     0,     0,     0,     0,    29,     0,    39,    42,    26,
        27,    55,    56,    57,    58,    60,     0,     0,    59,     0,
         0,     0,     0,     0,     0,     0,    28,    40,    41,     0,
         0,     0,    31,     0,     0,     0,     0,    28,    40,    41,
         0,     0,    29,    31,     0,    61,     0,    62,    55,    56,
        57,    58,    60,    29,     0,    59,    55,    56,    57,    58,
        60,     0,     0,    59,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    61,     0,    62,     0,     0,     0,     0,     0,
        61,     0,    62,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,
]; 
/*
    displacement of action table.
*/
let jjdisact = [ 
       -54,   604,   -54,   -54,   -54,   220,   249,   -54,   -54,   -54,
       -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,
       -54,   -54,   -54,   -54,    41,  1326,  1315,  1278,  1267,   -54,
      1258,   173,    -3,   206,   202,   -54,   -54,   305,   -54,  1241,
      1220,   -54,   201,   261,  1201,  1194,  1183,  1146,  1135,  1126,
      1109,  1088,  1069,  1062,  1051,  1014,  1003,   994,   977,   956,
       937,   930,   919,   -54,   -54,   201,   198,   578,   453,    41,
       199,   238,   882,   129,   217,    85,   -54,   871,    -3,   379,
       416,   490,   527,   564,   854,  1373,  1365,  1328,  1155,  1023,
       248,   242,   241,   197,   188,    87,   173,   -54,   -54,   -54,
       -54,   -54,   172,   178,   145,   804,   135,   129,    85,   864,
       -54,   -54,   664,   627,   -54,   513,   476,   121,   439,   342,
       -54,   -54,    44,    43,   123,    72,    42,   782,   745,   402,
       365,    23,   -54,    -1,     6,   -54,   723,    -5,   328,   -54,
       -54,   -10,   686,   -54,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
let jjcheckact = [ 
        78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
        78,    78,    78,    78,    32,    32,    32,    32,    32,    32,
        32,    32,    32,    32,    32,    78,    78,    78,   141,    32,
        32,    78,    78,    78,    78,    32,    78,   133,    32,   137,
       133,    32,    78,    78,    69,    69,    69,    69,    69,    69,
       134,    69,    69,    69,    69,    69,    69,    69,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    69,
        69,    69,   131,    24,    24,    69,    69,    69,    69,    69,
        69,   123,   122,   126,   123,   122,    69,    69,   108,   108,
       108,   108,   108,   108,    75,   108,   108,   108,   108,   108,
       108,   108,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,   108,   108,   108,   125,    75,    75,   108,
       108,   108,   108,    75,   108,    75,    75,    95,    95,    75,
       108,   108,   107,   107,   107,   107,   107,   107,    73,   107,
       107,   107,   107,   107,   107,   107,    73,    73,    73,    73,
        73,    73,    73,    73,    73,    73,    73,   107,   107,   107,
       124,    73,    73,   107,   107,   107,   107,    73,   107,    73,
        73,   117,   106,    73,   107,   107,    96,    96,    96,    96,
        96,    96,   104,    96,    96,    96,    96,    96,    96,    96,
        31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
        31,    96,    96,    96,    93,    31,    31,    96,    96,    96,
        96,    31,    96,   102,    31,   103,   102,    31,    96,    96,
        74,    74,    74,    74,    74,    74,    94,    74,    74,    74,
        74,    74,    74,    74,    93,    66,    93,    66,    65,    71,
        65,    70,    42,    34,    33,    74,    74,    74,    92,    91,
         6,    74,    74,    74,    74,    90,    74,     5,     0,     0,
         0,     0,    74,    74,    43,    43,    43,    43,    43,    43,
         0,    43,    43,    43,    43,    43,    43,    43,    92,    91,
        92,    91,     0,     0,     0,    90,     0,    90,     0,    43,
        43,    43,     0,     0,     0,    43,    43,    43,    43,     0,
        43,     0,     0,     0,     0,     0,    43,    43,    37,    37,
        37,    37,    37,    37,     0,    37,    37,    37,    37,    37,
        37,    37,     0,     0,     0,     0,     0,     0,     0,   138,
       138,   138,   138,    37,    37,    37,     0,     0,     0,    37,
        37,    37,    37,     0,    37,   119,   119,   119,   119,   119,
        37,    37,   119,   119,   119,   119,   119,   119,   119,   138,
       138,   138,     0,     0,     0,   138,   130,   130,   130,   130,
       119,   119,   119,     0,     0,   138,   119,   119,   119,   119,
         0,   119,    79,    79,    79,    79,    79,   119,   119,    79,
        79,    79,    79,    79,    79,    79,   130,   130,   130,     0,
         0,     0,   130,   129,   129,   129,   129,    79,    79,    79,
         0,     0,   130,    79,    79,    79,    79,     0,    79,    80,
        80,    80,    80,    80,    79,     0,    80,    80,    80,    80,
        80,    80,    80,   129,   129,   129,     0,     0,     0,   129,
       118,   118,   118,   118,    80,    80,    80,     0,     0,   129,
        80,    80,    80,    80,     0,    80,    68,    68,    68,    68,
        68,     0,     0,    68,    68,    68,    68,    68,    68,    68,
       118,   118,   118,     0,     0,     0,   118,   116,   116,   116,
       116,    68,    68,    68,     0,     0,   118,    68,    68,    68,
        68,     0,    68,    81,    81,    81,    81,    81,     0,     0,
        81,    81,    81,    81,    81,    81,    81,   116,   116,   116,
         0,     0,     0,   116,   115,   115,   115,   115,    81,     0,
        81,     0,     0,   116,    81,    81,    81,    81,     0,    81,
        82,    82,    82,    82,    82,     0,     0,    82,    82,    82,
        82,    82,    82,    82,   115,   115,   115,     0,     0,     0,
       115,     0,     0,     0,     0,    82,     0,     0,     0,     0,
       115,    82,    82,    82,    82,     0,    82,    83,    83,    83,
        83,    83,     0,     0,    83,    83,    83,    83,    83,    83,
        83,    67,    67,    67,    67,    67,     0,     0,    67,    67,
        67,    67,    67,    67,    67,     0,     0,     0,    83,    83,
        83,    83,     0,    83,     1,     1,     1,     1,     1,     0,
         0,     0,    67,    67,    67,    67,     0,    67,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   113,   113,
       113,   113,     0,     0,     0,     1,     1,     1,     0,     0,
         0,     1,     0,     0,     0,     0,     1,     0,     1,     0,
         0,     1,     1,     0,     1,     1,     1,     1,   113,   113,
       113,     0,     0,     0,   113,   112,   112,   112,   112,   113,
       113,   113,     0,     0,   113,   113,     0,   113,   113,   113,
         0,     0,     0,     0,     0,     0,     0,   142,   142,   142,
       142,     0,     0,     0,     0,   112,   112,   112,     0,     0,
         0,   112,     0,     0,     0,     0,   112,   112,   112,     0,
         0,   112,   112,     0,   112,   112,   112,   142,   142,   142,
         0,     0,     0,   142,   136,   136,   136,   136,   142,     0,
       142,     0,     0,   142,   142,     0,   142,   142,   142,     0,
         0,     0,     0,     0,     0,     0,   128,   128,   128,   128,
         0,     0,     0,     0,   136,   136,   136,     0,     0,     0,
       136,     0,     0,     0,     0,   136,     0,   136,     0,     0,
       136,   136,     0,   136,   136,   136,   128,   128,   128,     0,
         0,     0,   128,   127,   127,   127,   127,   128,     0,   128,
         0,     0,   128,   128,     0,   128,   128,   128,     0,     0,
         0,     0,     0,     0,     0,   105,   105,   105,   105,     0,
         0,     0,     0,   127,   127,   127,     0,     0,     0,   127,
         0,     0,     0,     0,   127,     0,   127,     0,     0,   127,
       127,     0,   127,   127,   127,   105,   105,   105,     0,     0,
         0,   105,     0,     0,     0,     0,   105,     0,   105,     0,
         0,   105,   105,     0,   105,   105,   105,    84,    84,    84,
        84,    84,     0,     0,    84,   109,   109,   109,   109,     0,
         0,     0,    77,    77,    77,    77,     0,     0,     0,     0,
         0,     0,     0,    72,    72,    72,    72,     0,    84,    84,
        84,    84,     0,    84,     0,   109,   109,   109,     0,     0,
         0,   109,    77,    77,    77,     0,     0,     0,    77,     0,
         0,   109,     0,    72,    72,    72,     0,     0,    77,    72,
        62,    62,    62,    62,     0,     0,     0,     0,     0,    72,
         0,    61,    61,    61,    61,     0,     0,     0,    60,    60,
        60,    60,     0,     0,     0,     0,     0,     0,     0,     0,
        62,    62,    62,     0,     0,     0,    62,    59,    59,    59,
        59,    61,    61,    61,     0,     0,    62,    61,    60,    60,
        60,     0,     0,     0,    60,     0,     0,    61,    58,    58,
        58,    58,     0,     0,    60,     0,     0,    59,    59,    59,
         0,     0,     0,    59,     0,    57,    57,    57,    57,     0,
         0,     0,     0,    59,    56,    56,    56,    56,    58,    58,
        58,     0,     0,     0,    58,    55,    55,    55,    55,     0,
         0,     0,     0,     0,    58,    57,    57,    57,    89,    89,
        89,    57,     0,    89,    56,    56,    56,     0,     0,     0,
        56,    57,     0,     0,     0,    55,    55,    55,     0,     0,
        56,    55,    54,    54,    54,    54,     0,     0,     0,     0,
        89,    55,    89,    53,    53,    53,    53,     0,     0,     0,
        52,    52,    52,    52,     0,     0,     0,     0,     0,     0,
         0,     0,    54,    54,    54,     0,     0,     0,    54,    51,
        51,    51,    51,    53,    53,    53,     0,     0,    54,    53,
        52,    52,    52,     0,     0,     0,    52,     0,     0,    53,
        50,    50,    50,    50,     0,     0,    52,     0,     0,    51,
        51,    51,     0,     0,     0,    51,     0,    49,    49,    49,
        49,     0,     0,     0,     0,    51,    48,    48,    48,    48,
        50,    50,    50,     0,     0,     0,    50,    47,    47,    47,
        47,     0,     0,     0,     0,     0,    50,    49,    49,    49,
        88,    88,    88,    49,     0,    88,    48,    48,    48,     0,
         0,     0,    48,    49,     0,     0,     0,    47,    47,    47,
         0,     0,    48,    47,    46,    46,    46,    46,     0,     0,
         0,     0,    88,    47,    88,    45,    45,    45,    45,     0,
         0,     0,    44,    44,    44,    44,     0,     0,     0,     0,
         0,     0,     0,     0,    46,    46,    46,     0,     0,     0,
        46,    40,    40,    40,    40,    45,    45,    45,     0,     0,
        46,    45,    44,    44,    44,     0,     0,     0,    44,     0,
         0,    45,    39,    39,    39,    39,     0,     0,    44,     0,
         0,    40,    40,    40,     0,     0,     0,    40,     0,    30,
        30,    30,    30,     0,     0,     0,     0,    40,    28,    28,
        28,    28,    39,    39,    39,     0,     0,     0,    39,    27,
        27,    27,    27,     0,     0,     0,     0,     0,    39,    30,
        30,    30,     0,     0,     0,    30,     0,     0,    28,    28,
        28,     0,     0,     0,    28,    30,     0,     0,     0,    27,
        27,    27,     0,     0,    28,    27,    26,    26,    26,    26,
         0,     0,     0,     0,     0,    27,     0,    25,    25,    25,
        25,    87,    87,    87,    87,    87,     0,     0,    87,     0,
         0,     0,     0,     0,     0,     0,    26,    26,    26,     0,
         0,     0,    26,     0,     0,     0,     0,    25,    25,    25,
         0,     0,    26,    25,     0,    87,     0,    87,    86,    86,
        86,    86,    86,    25,     0,    86,    85,    85,    85,    85,
        85,     0,     0,    85,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    86,     0,    86,     0,     0,     0,     0,     0,
        85,     0,    85,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
let jjdefred = [ 
         2,    -1,     0,     1,     3,    -1,     6,    62,    63,    64,
        65,    66,    67,    51,    52,    53,    54,    55,    56,    57,
        58,    59,    60,    61,    48,    -1,    -1,    -1,    -1,    45,
        -1,    48,    48,    -1,     5,     8,     9,    23,    75,    -1,
        -1,    74,    73,    71,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        69,    -1,    -1,    49,    50,    41,    42,    43,    44,    -1,
        -1,    -1,    -1,    48,    -1,    48,    68,    72,    -1,    26,
        27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
        37,    38,    39,    40,    -1,    -1,    24,    46,    10,     7,
        11,    10,    -1,    -1,    -1,    -1,    -1,    22,    70,    -1,
        47,    76,    -1,    -1,    13,    -1,    -1,    -1,    20,    25,
         4,    12,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,
        20,    18,    15,    -1,    -1,    14,    -1,    -1,    20,    19,
        16,    -1,    -1,    17,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
let jjpgoto = [ 
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
        50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
         3,    50,   143,    50,     4,   102,    37,   102,    37,   141,
       126,    37,    29,    24,    29,    24,   139,    29,    24,   102,
        37,   134,   126,    37,   133,    37,    29,    24,    62,    29,
        24,    29,    24,   132,    62,   131,   102,    37,   102,    37,
       125,   126,    37,    29,    24,    29,    24,    50,    29,    24,
       123,    37,   122,    37,    50,    50,    50,    29,    24,    29,
        24,    36,   119,    36,   102,    37,   102,    37,    29,    24,
       108,    29,    24,    29,    24,   117,    29,    24,   102,    37,
        62,   107,    62,    96,    62,    29,    24,    29,    24,    29,
        24,    95,    37,    33,    34,   135,   113,    43,    29,    24,
        94,    42,    93,    29,    24,    92,   112,    91,    29,    24,
        90,    29,    24,    29,    24,    89,    29,    24,    88,    50,
        87,    29,    24,    86,    29,    24,    29,    24,    85,    29,
        24,    84,    50,    83,    29,    24,    82,    29,    24,    29,
        24,    81,    29,    24,    80,    76,    79,    29,    24,    78,
        29,    24,    29,    24,    74,    29,    24,    74,     1,    69,
        29,    75,    68,    29,    73,    29,    24,    67,    29,    24,
        66,    -1,    65,    29,    24,    -1,    29,    24,    29,    24,
    
]; 
/*
    displacement of the goto table
*/
let jjdisgoto = [ 
       177,    18,   -18,   -18,   -18,   -18,   110,   -18,   -18,   -18,
       -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,
       -18,   -18,   -18,   -18,    93,   182,   180,   177,   172,   -18,
       169,    91,    89,   -18,   -18,   -18,   -18,    -5,   -18,   167,
       164,   -18,   150,    -6,   159,   156,   154,   151,   146,   143,
       141,   138,   133,   130,   128,   125,   120,   117,   115,   112,
       107,   102,    93,   -18,   -18,   140,   127,     3,     2,    -7,
       -18,   -18,    91,    43,    -8,    37,   -18,    80,   -12,     1,
         0,    -1,    -2,    -3,     7,     6,     5,     4,    11,     9,
        64,    63,    62,    55,   -18,   -18,    -9,   -18,   121,   -18,
       -18,   111,   -18,   -18,   -18,    89,   -18,   -10,   -11,    72,
       -18,   -18,    77,    75,   -18,    63,    61,   -18,    52,    -4,
       -18,   -18,   -18,   -18,   -18,   -18,   -18,    49,    47,    35,
        33,   108,   -18,   -18,   -18,   -18,    30,   -18,    21,   -18,
       -18,   -18,    16,   -18,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
let jjruleLen = [ 
         2,     2,     0,     1,     7,     1,     0,     3,     1,     2,
         0,     1,     3,     2,     6,     5,     7,     9,     0,     2,
         0,     1,     3,     1,     3,     5,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     2,     2,     2,     2,     1,     3,     4,     1,     2,
         2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,     1,     1,     2,     0,
         3,     1,     1,     0,     1,     1,     4,     2,     2,
]; 
/*
    index of the LHS of each rule
*/
let jjlhs = [ 
         0,     1,     1,     2,     2,     3,     3,     4,     4,     5,
         5,     6,     6,     6,     6,     6,     6,     6,     7,     7,
         8,     8,     9,     9,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    12,    12,    12,    12,    12,    12,    13,    13,
        14,    14,    15,    15,    16,    17,    17,    17,    17,
]; 
/*
    token names
*/
let jjtokenNames = [ 
                   "EOF",              "NAME",               "NUM",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "EXP",          "QUESTION",
                 "COLON",           "PERCENT",                "GT",
                    "LT",              "GTOE",              "LTOE",
                   "EQU",               "NEQ",            "ASSIGN",
           "PLUS_ASSIGN",      "MINUS_ASSIGN",      "TIMES_ASSIGN",
         "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",     "BIT_OR_ASSIGN",
        "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN", "LEFT_SHIFT_ASSIGN",
            "MOD_ASSIGN",           "BIT_AND",            "BIT_OR",
               "BIT_XOR",           "BIT_NOT",               "INC",
                   "DEC",        "LEFT_SHIFT",       "RIGHT_SHIFT",
          "RIGHT_SHIFT2",               "BRA",               "KET",
                  "CBRA",              "CKET",             "COMMA",
                  "BBRA",              "BKET",               "EOL",
                   "AND",                "OR",               "NOT",
                    "IF",              "ELSE",             "WHILE",
                    "DO",               "FOR",          "FUNCTION",
    
]; 
/*
    token alias
*/
let jjtokenAlias = [ 
                  "null",              "null",              "null",
                     "+",                 "-",                 "*",
                     "/",                "**",                 "?",
                     ":",                 "%",                 ">",
                     "<",                ">=",                "<=",
                    "==",                "!=",                 "=",
                    "+=",                "-=",                "*=",
                    "/=",                "&=",                "|=",
                    "^=",               ">>=",               "<<=",
                    "%=",                 "&",                 "|",
                     "^",                 "~",                "++",
                    "--",                "<<",                ">>",
                   ">>>",                 "(",                 ")",
                     "[",                 "]",                 ",",
                     "{",                 "}",                 ";",
                    "&&",                "||",                 "!",
                    "if",              "else",             "while",
                    "do",               "for",          "function",
    
]; 


interface Token{
    id: number;
    val: string;
};

export class Parser {
    // members for lexer
    private _lexState: number[] = [];
    private _state: number = 0;
    private _matched: string[] = [];
    private _token: Token = null;
    private _marker: number = -1;
    private _backupCount: number = 0;
    private _inputBuf: string[] = [];

    // members for parser
    private _lrState: number[] = [];
    private _sematicS: any[] = [];

    private _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    

    /**
     *  set 
     */
    private _setImg(s: string){
        this._matched.length = 0;
        for(let i = 0;i < s.length;i++){
            this._matched.push(s.charAt(i));
        }
    }
    private _emit(name: string, a1?, a2?, a3?){
        let cbs = this._handlers[name];
        if(cbs){
            for(let cb of cbs){
                cb(a1, a2, a3);
            }
        }
    }
    on(name: string, cb: (a1?, a2?, a3?) => any){
        this._handlers[name] || (this._handlers[name] = []);
        this._handlers[name].push(cb);
    }
    private _doLexAction0(jjstaten: number){
        let jjtk = jjlexTokens0[jjstaten];
        switch(jjstaten){
            case 1:
                this._setImg("");
                break;
            case 2:
                this._setImg("");
                break;
            case 33:
                this._setImg("");
                break;
            default:;
        }
        if(jjtk !== -1){
            this._token = {
                id: jjtk,
                val: this._matched.join('')
            }
            this._matched.length = 0;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    private _doLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                this._doLexAction0(state);
                break;
            default:;
        }
        this._token !== null && (this._acceptToken(this._token), (this._token = null));
    }
    private _acceptChar(c: string){
        let lexstate = this._lexState[this._lexState.length - 1];
        let retn = { state: this._state, hasArc: false, isEnd: false };
        jjlexers[lexstate](c.charCodeAt(0), retn);
        if(retn.isEnd){
            // if current state is a terminate state, be careful
            if(retn.hasArc){
                if(retn.state === -1){
                    // nowhere to go, stay where we are
                    this._doLexAction(lexstate, this._state);
                    // recover
                    this._marker = -1;
                    this._backupCount = 0;
                    this._state = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    this._backupCount = 1;
                    this._marker = this._state;
                    this._state = retn.state;
                    this._matched.push(c);
                    // character consumed
                    return true;
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                this._doLexAction(lexstate, this._state);
                // recover
                this._marker = -1;
                this._backupCount = 0;
                this._state = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(retn.state === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(this._marker !== -1){
                    // we have a previously marked state, which is a terminate state.
                    // rollback
                    this._state = this._marker;
                    this._marker = -1;
                    while(this._backupCount --> 0){
                        this._inputBuf.push(this._matched.pop());
                    }
                    this._doLexAction(lexstate, this._state);
                    this._state = 0;
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    this._emit('error', `unexpected character "${c}"`);
                }
            }
        }
    }

    private _acceptToken(t: Token){
        
    }
}