/*
    generated by jscc, an LALR(1) parser generator made by hadroncfy.
    template for typescript, written by hadroncfy, aussi.
*/
/*
    constants
*/
var jjeol = '\n'.charCodeAt(0);
interface DFATable{
    pnext: number[];
    disnext: number[];
    checknext: number[];
    maxAsicii: number;
    classTable: number[];
    unicodeClassTable: number[];
    isEnd: number[];
    hasArc: number[];
};
/*
    dfa table definations
*/
var jjlexpnext0: number[] = [ 
         1,     1,     2,     3,     4,     5,     6,     7,     8,     9,
        10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
        20,    21,    22,    23,     4,    24,    25,    26,     4,    27,
         4,     4,     4,     4,     4,     4,     4,    28,    29,    30,
        31,    32,    35,     1,     1,     2,     1,    33,     2,     1,
         1,     2,    36,    62,    63,    44,    59,    50,    51,    47,
        48,    45,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    60,    38,    42,
        40,    61,    52,    49,    14,    46,    36,    43,    37,    41,
        39,    34,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    75,    35,    35,    35,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    74,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    73,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    72,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    71,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        70,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    68,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    67,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    66,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    65,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    64,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    58,    35,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    35,    35,    35,    57,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        35,    35,    35,    35,    35,    35,    35,    35,    55,    35,
        35,    35,    56,    35,    35,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    35,    35,    35,    35,    35,    35,
        54,    35,    35,    35,    35,    35,    35,    35,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    53,    35,    35,    35,
        35,    35,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    35,    35,    35,    35,
]; 
var jjlexdisnext0: number[] = [ 
         0,    49,    46,    73,   888,    70,    72,   -42,   -42,    71,
        69,   -42,    43,    67,    70,   -42,   -42,    42,    65,    39,
       -42,   -42,   -42,    64,   854,   820,   786,   752,   718,   -42,
        38,   -42,   -42,    43,   -42,   684,   650,   -42,   -42,   -42,
       -42,   -42,   -42,   -42,   -42,   -42,   -42,    63,   -42,   -42,
       -42,    35,   -42,   616,   582,   548,   514,   480,   446,   -42,
       -42,   -42,   -42,   -42,   412,   378,   344,   310,   276,   242,
       208,   174,   140,   106,    72,    38,
]; 
var jjlexchecknext0: number[] = [ 
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    75,    33,    33,    33,     2,     2,     2,     1,
         1,     1,    75,    51,    51,    12,    30,    19,    19,    17,
        17,    12,    75,    75,    75,    75,    75,    75,    75,    75,
        75,    75,    75,    75,    75,    75,    74,    30,     6,    10,
         9,    47,    23,    18,    14,    13,    74,    10,     5,     9,
         6,     3,    -1,    -1,    -1,    -1,    74,    74,    74,    74,
        74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
        73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,    73,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    72,    72,    72,    72,    72,    72,
        72,    72,    72,    72,    72,    72,    72,    72,    71,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    71,
        71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        71,    71,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    70,    70,    70,    70,    70,    70,    70,    70,
        70,    70,    70,    70,    70,    70,    69,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    69,    69,    69,    69,
        69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
        68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
        68,    68,    68,    68,    67,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    67,    67,    67,    67,    67,    67,
        67,    67,    67,    67,    67,    67,    67,    67,    66,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    66,
        66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
        66,    66,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    65,    65,    65,    65,    65,    65,    65,    65,
        65,    65,    65,    65,    65,    65,    64,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    64,    64,    64,    64,
        64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
        58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
        58,    58,    58,    58,    57,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    57,    57,    57,    57,    57,    57,
        57,    57,    57,    57,    57,    57,    57,    57,    56,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    56,
        56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
        56,    56,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    55,    55,    55,    55,    55,    55,    55,    55,
        55,    55,    55,    55,    55,    55,    54,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    54,    54,    54,    54,
        54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
        53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
        53,    53,    53,    53,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    36,    36,    36,    36,    36,    36,
        36,    36,    36,    36,    36,    36,    36,    36,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    35,
        35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
        35,    35,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    28,    28,    28,    28,    28,    28,    28,    28,
        28,    28,    28,    28,    28,    28,    27,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    27,    27,    27,    27,
        27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
        26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
        26,    26,    26,    26,    25,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    25,    25,    25,    25,    25,    25,
        25,    25,    25,    25,    25,    25,    25,    25,    24,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    24,
        24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
        24,    24,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,
]; 
var jjlexclassTable0: number[] = [ 
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
         1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,     0,     3,    -1,    -1,     4,     5,     6,    -1,
         7,     8,     9,    10,    11,    12,    -1,    13,    14,    14,
        14,    14,    14,    14,    14,    14,    14,    14,    15,    16,
        17,    18,    19,    20,    -1,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
         4,    21,    -1,    22,    23,     4,    -1,     4,     4,    24,
        25,    26,    27,     4,    28,    29,     4,     4,    30,     4,
        31,    32,     4,     4,    33,    34,    35,    36,     4,    37,
         4,     4,     4,    38,    39,    40,    41,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,
]; 
var jjlexunicodeClassTable0: number[] = [ 
    
]; 
var jjlexisEnd0: number[] = [ 
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,
]; 
var jjlexhasArc0: number[] = [ 
    1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,
    0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,
    1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,
    0,0,1,0,0,0,1,0,1,1,1,1,1,1,0,
    0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
    1,
]; 
var jjlextable0: DFATable = {
    pnext: jjlexpnext0,
    disnext: jjlexdisnext0,
    checknext: jjlexchecknext0,
    maxAsicii: 255,
    classTable: jjlexclassTable0,
    unicodeClassTable: jjlexunicodeClassTable0,
    isEnd: jjlexisEnd0,
    hasArc: jjlexhasArc0
};
/*
    dfa tables
*/
var jjdfaTables: DFATable[] = [
    jjlextable0,
];
/*
    find unicode class
*/
function jjfindUnicodeClass(uc: number[], c: number){
    for(var i = 0; i < uc.length; i += 3){
        if(c >= uc[i + 1] && c <= uc[i + 2]){
            return uc[i];
        }
        else if(c < uc[i + 1]){
            return -1;
        }
    }
    return -1;
}
/*
    tokens that a lexical dfa state can return
*/
var jjlexTokens0: number[] = [ 
        -1,    -1,    -1,    47,     1,    10,    28,    37,    38,     5,
         3,    41,     4,     6,     2,     9,    44,    12,    17,    11,
         8,    39,    40,    30,     1,     1,     1,     1,     1,    42,
        29,    43,    31,    -1,    16,     1,     1,    27,    45,    22,
         7,    20,    32,    18,    33,    19,    21,    34,    14,    15,
        13,    35,    24,    51,     1,     1,     1,    48,     1,    23,
        46,    26,    25,    36,     1,    52,     1,     1,    49,     1,
         1,     1,    50,     1,     1,    53,
]; 

var jjstateCount = 142;
var jjtokenCount = 54;
var jjactERR = 143;
/*
    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]
    when action > 0, shift the token and goto state (action - 1);
    when action < 0, reduce with rule (1-action);
    when action = 0, do default action.
*/
var jjpact: number[] = [ 
        53,    54,    55,    56,    58,    43,   108,    57,     8,     9,
        10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
        20,    21,    22,    23,    24,    48,    46,    47,    58,    62,
        63,    51,    50,    52,    59,    58,    60,   136,   127,   141,
        71,    71,    45,    44,    53,    54,    55,    56,    58,    43,
       139,    57,     8,     9,    10,    11,    12,    13,    59,   126,
        60,    71,    71,   137,   113,    59,    59,    60,    60,    48,
        46,    47,   110,    71,   135,    51,    50,    52,    59,    96,
        60,    59,    71,    60,   129,   128,    45,    44,    53,    54,
        55,    56,    58,    43,   -79,    57,     8,     9,    10,    11,
        12,    13,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
       -79,   -79,   -79,    48,    46,    47,   123,    62,    63,    51,
        50,    52,    59,   -79,    60,   -79,   -79,   117,   115,   -79,
        45,    44,    53,    54,    55,    56,    58,    43,   -78,    57,
         8,     9,    10,    11,    12,    13,   -78,   -78,   -78,   -78,
       -78,   -78,   -78,   -78,   -78,   -78,   -78,    48,    46,    47,
        58,    62,    63,    51,    50,    52,    59,   -78,    60,   -78,
       -78,   114,   109,   -78,    45,    44,    53,    54,    55,    56,
        58,    43,    98,    57,     8,     9,    10,    11,    12,    13,
        59,    97,    60,    76,    70,    69,    34,     7,     0,     0,
         0,    48,    46,    47,    58,     0,     0,    51,    50,    52,
        59,     0,    60,     0,     0,     0,     0,     0,    45,    44,
        53,    54,    55,    56,    58,    43,     0,    57,     8,     9,
        10,    11,    12,    13,    59,     0,    60,     0,     0,     0,
         0,     0,     0,     0,     0,    48,    46,    47,     0,     0,
         0,    51,    50,    52,    59,     0,    60,     0,     0,     0,
         0,     0,    45,    44,    53,    54,    55,    56,    58,    43,
         0,    57,     8,     9,    10,    11,    12,    13,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
        46,    47,     0,     0,     0,    51,    50,    52,    59,     0,
        60,     0,     0,     0,     0,     0,    45,    44,    53,    54,
        55,    56,    58,    43,     0,    57,     8,     9,    10,    11,
        12,    13,     0,     0,     0,     0,     0,     0,     0,    37,
        40,    26,    27,    48,    46,    47,     0,     0,     0,    51,
        50,    52,    59,     0,    60,    53,    54,    55,    56,    58,
        45,    44,    57,     8,     9,    10,    11,    12,    13,    28,
        38,    39,     0,     0,     0,    31,    37,    40,    26,    27,
        48,    46,    47,     0,     0,    29,    51,    50,    52,    59,
         0,    60,    53,    54,    55,    56,    58,    45,    44,    57,
         8,     9,    10,    11,    12,    13,    28,    38,    39,     0,
         0,     0,    31,    37,    40,    26,    27,    48,    46,    47,
         0,     0,    29,    51,    50,    52,    59,     0,    60,    53,
        54,    55,    56,    58,    45,     0,    57,     8,     9,    10,
        11,    12,    13,    28,    38,    39,     0,     0,     0,    31,
        37,    40,    26,    27,    48,    46,    47,     0,     0,    29,
        51,    50,    52,    59,     0,    60,    53,    54,    55,    56,
        58,     0,     0,    57,     8,     9,    10,    11,    12,    13,
        28,    38,    39,     0,     0,     0,    31,    37,    40,    26,
        27,    48,    46,    47,     0,     0,    29,    51,    50,    52,
        59,     0,    60,    53,    54,    55,    56,    58,     0,     0,
        57,     8,     9,    10,    11,    12,    13,    28,    38,    39,
         0,     0,     0,    31,    37,    40,    26,    27,    48,     0,
        47,     0,     0,    29,    51,    50,    52,    59,     0,    60,
        53,    54,    55,    56,    58,     0,     0,    57,     8,     9,
        10,    11,    12,    13,    28,    38,    39,     0,     0,     0,
        31,     0,     0,     0,     0,    48,     0,     0,     0,     0,
        29,    51,    50,    52,    59,     0,    60,    53,    54,    55,
        56,    58,     0,     0,    57,     8,     9,    10,    11,    12,
        13,    53,    54,    55,    56,    58,     0,     0,    57,     8,
         9,    10,    11,    12,    13,     0,     0,     0,    51,    50,
        52,    59,     0,    60,     3,    37,    40,    26,    27,     0,
         0,     0,    51,    50,    52,    59,     0,    60,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,    37,    40,
        26,    27,     0,     0,     0,    28,    38,    39,     0,     0,
         0,    31,     0,     0,     0,     0,   100,     0,    99,     0,
         0,    29,   102,     0,   103,   104,   105,     6,    28,    38,
        39,     0,     0,     0,    31,    37,    40,    26,    27,   100,
       120,    99,     0,     0,    29,   102,     0,   103,   104,   105,
         0,     0,     0,     0,     0,     0,     0,    37,    40,    26,
        27,     0,     0,     0,     0,    28,    38,    39,     0,     0,
         0,    31,     0,     0,     0,     0,   100,   119,    99,     0,
         0,    29,   102,     0,   103,   104,   105,    28,    38,    39,
         0,     0,     0,    31,    37,    40,    26,    27,   100,     0,
        99,     0,     0,    29,   102,     0,   103,   104,   105,     0,
         0,     0,     0,     0,     0,     0,    37,    40,    26,    27,
         0,     0,     0,     0,    28,    38,    39,     0,     0,     0,
        31,     0,     0,     0,     0,   100,     0,    99,     0,     0,
        29,   102,     0,   103,   104,   105,    28,    38,    39,     0,
         0,     0,    31,    37,    40,    26,    27,   100,     0,    99,
         0,     0,    29,   102,     0,   103,   104,   105,     0,     0,
         0,     0,     0,     0,     0,    37,    40,    26,    27,     0,
         0,     0,     0,    28,    38,    39,     0,     0,     0,    31,
         0,     0,     0,     0,   100,     0,    99,     0,     0,    29,
       102,     0,   103,   104,   105,    28,    38,    39,     0,     0,
         0,    31,     0,     0,     0,     0,   100,     0,    99,     0,
         0,    29,   102,     0,   103,   104,   105,    53,    54,    55,
        56,    58,     0,     0,    57,    37,    40,    26,    27,     0,
         0,     0,    37,    40,    26,    27,     0,     0,     0,     0,
         0,     0,     0,    37,    40,    26,    27,     0,    51,    50,
        52,    59,     0,    60,     0,    28,    38,    39,     0,     0,
         0,    31,    28,    38,    39,     0,     0,     0,    31,     0,
         0,    29,     0,    28,    38,    39,     0,     0,    29,    31,
        37,    40,    26,    27,     0,     0,     0,     0,     0,    29,
         0,    37,    40,    26,    27,     0,     0,     0,    37,    40,
        26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
        28,    38,    39,     0,     0,     0,    31,    37,    40,    26,
        27,    28,    38,    39,     0,     0,    29,    31,    28,    38,
        39,     0,     0,     0,    31,     0,     0,    29,    37,    40,
        26,    27,     0,     0,    29,     0,     0,    28,    38,    39,
         0,     0,     0,    31,     0,    37,    40,    26,    27,     0,
         0,     0,     0,    29,    37,    40,    26,    27,    28,    38,
        39,     0,     0,     0,    31,    37,    40,    26,    27,     0,
         0,     0,     0,     0,    29,    28,    38,    39,    55,    56,
        58,    31,     0,    57,    28,    38,    39,     0,     0,     0,
        31,    29,     0,     0,     0,    28,    38,    39,     0,     0,
        29,    31,    37,    40,    26,    27,     0,     0,     0,     0,
        59,    29,    60,    37,    40,    26,    27,     0,     0,     0,
        37,    40,    26,    27,     0,     0,     0,     0,     0,     0,
         0,     0,    28,    38,    39,     0,     0,     0,    31,    37,
        40,    26,    27,    28,    38,    39,     0,     0,    29,    31,
        28,    38,    39,     0,     0,     0,    31,     0,     0,    29,
        37,    40,    26,    27,     0,     0,    29,     0,     0,    28,
        38,    39,     0,     0,     0,    31,     0,    37,    40,    26,
        27,     0,     0,     0,     0,    29,    37,    40,    26,    27,
        28,    38,    39,     0,     0,     0,    31,    37,    40,    26,
        27,     0,     0,     0,     0,     0,    29,    28,    38,    39,
        55,    56,    58,    31,     0,    57,    28,    38,    39,     0,
         0,     0,    31,    29,     0,     0,     0,    28,    38,    39,
         0,     0,    29,    31,    37,    40,    26,    27,     0,     0,
         0,     0,    59,    29,    60,    37,    40,    26,    27,     0,
         0,     0,    37,    40,    26,    27,     0,     0,     0,     0,
         0,     0,     0,     0,    28,    38,    39,     0,     0,     0,
        31,    37,    40,    26,    27,    28,    38,    39,     0,     0,
        29,    31,    28,    38,    39,     0,     0,     0,    31,     0,
         0,    29,    37,    40,    26,    27,     0,     0,    29,     0,
         0,    28,    38,    39,     0,     0,     0,    31,     0,    37,
        40,    26,    27,     0,     0,     0,     0,    29,    37,    40,
        26,    27,    28,    38,    39,     0,     0,     0,    31,    37,
        40,    26,    27,     0,     0,     0,     0,     0,    29,    28,
        38,    39,     0,     0,     0,    31,     0,     0,    28,    38,
        39,     0,     0,     0,    31,    29,     0,     0,     0,    28,
        38,    39,     0,     0,    29,    31,    37,    40,    26,    27,
         0,     0,     0,     0,     0,    29,     0,    37,    40,    26,
        27,    53,    54,    55,    56,    58,     0,     0,    57,     0,
         0,     0,     0,     0,     0,     0,    28,    38,    39,     0,
         0,     0,    31,     0,     0,     0,     0,    28,    38,    39,
         0,     0,    29,    31,     0,    59,     0,    60,    53,    54,
        55,    56,    58,    29,     0,    57,    53,    54,    55,    56,
        58,     0,     0,    57,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    59,     0,    60,     0,     0,     0,     0,     0,
        59,     0,    60,
]; 
/*
    displacement of action table.
*/
var jjdisact: number[] = [ 
       -54,   604,   -54,   -54,   -54,   160,   195,   -54,   -54,   -54,
       -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,
       -54,   -54,   -54,   -54,    -3,  1326,  1315,  1278,  1267,   -54,
      1258,   157,   153,   -54,   -54,   305,   -54,  1241,  1220,   -54,
       152,   261,  1201,  1194,  1183,  1146,  1135,  1126,  1109,  1088,
      1069,  1062,  1051,  1014,  1003,   994,   977,   956,   937,   930,
       919,   -54,   -54,    44,    29,   578,   453,    41,   149,   181,
       882,   129,   217,    85,   -54,   871,    -3,   379,   416,   490,
       527,   564,   854,  1373,  1365,  1328,  1155,  1023,   197,   153,
        28,    21,   134,    32,   173,   -54,   -54,   -54,   -54,   -54,
        20,   134,    91,   804,    90,   129,    85,   864,   -54,   -54,
       664,   627,   -54,   513,   476,    66,   439,   342,   -54,   -54,
        21,     0,    48,    40,    41,   782,   745,   402,   365,    25,
       -54,    -1,    19,   -54,   723,     6,   328,   -54,   -54,     1,
       686,   -54,
]; 
/*
    used to check if a position in jjpact is out of bouds.
    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.
*/
var jjcheckact: number[] = [ 
        76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
        76,    76,    76,    76,    24,    24,    24,    24,    24,    24,
        24,    24,    24,    24,    24,    76,    76,    76,    91,    24,
        24,    76,    76,    76,    76,    90,    76,   131,   121,   139,
       131,   121,    76,    76,    67,    67,    67,    67,    67,    67,
       135,    67,    67,    67,    67,    67,    67,    67,    91,   120,
        91,   100,   120,   132,   100,    90,    64,    90,    64,    67,
        67,    67,    93,    93,   129,    67,    67,    67,    67,    67,
        67,    63,   124,    63,   123,   122,    67,    67,   106,   106,
       106,   106,   106,   106,    73,   106,   106,   106,   106,   106,
       106,   106,    73,    73,    73,    73,    73,    73,    73,    73,
        73,    73,    73,   106,   106,   106,   115,    73,    73,   106,
       106,   106,   106,    73,   106,    73,    73,   104,   102,    73,
       106,   106,   105,   105,   105,   105,   105,   105,    71,   105,
       105,   105,   105,   105,   105,   105,    71,    71,    71,    71,
        71,    71,    71,    71,    71,    71,    71,   105,   105,   105,
        89,    71,    71,   105,   105,   105,   105,    71,   105,    71,
        71,   101,    92,    71,   105,   105,    94,    94,    94,    94,
        94,    94,    69,    94,    94,    94,    94,    94,    94,    94,
        89,    68,    89,    40,    32,    31,     6,     5,     0,     0,
         0,    94,    94,    94,    88,     0,     0,    94,    94,    94,
        94,     0,    94,     0,     0,     0,     0,     0,    94,    94,
        72,    72,    72,    72,    72,    72,     0,    72,    72,    72,
        72,    72,    72,    72,    88,     0,    88,     0,     0,     0,
         0,     0,     0,     0,     0,    72,    72,    72,     0,     0,
         0,    72,    72,    72,    72,     0,    72,     0,     0,     0,
         0,     0,    72,    72,    41,    41,    41,    41,    41,    41,
         0,    41,    41,    41,    41,    41,    41,    41,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
        41,    41,     0,     0,     0,    41,    41,    41,    41,     0,
        41,     0,     0,     0,     0,     0,    41,    41,    35,    35,
        35,    35,    35,    35,     0,    35,    35,    35,    35,    35,
        35,    35,     0,     0,     0,     0,     0,     0,     0,   136,
       136,   136,   136,    35,    35,    35,     0,     0,     0,    35,
        35,    35,    35,     0,    35,   117,   117,   117,   117,   117,
        35,    35,   117,   117,   117,   117,   117,   117,   117,   136,
       136,   136,     0,     0,     0,   136,   128,   128,   128,   128,
       117,   117,   117,     0,     0,   136,   117,   117,   117,   117,
         0,   117,    77,    77,    77,    77,    77,   117,   117,    77,
        77,    77,    77,    77,    77,    77,   128,   128,   128,     0,
         0,     0,   128,   127,   127,   127,   127,    77,    77,    77,
         0,     0,   128,    77,    77,    77,    77,     0,    77,    78,
        78,    78,    78,    78,    77,     0,    78,    78,    78,    78,
        78,    78,    78,   127,   127,   127,     0,     0,     0,   127,
       116,   116,   116,   116,    78,    78,    78,     0,     0,   127,
        78,    78,    78,    78,     0,    78,    66,    66,    66,    66,
        66,     0,     0,    66,    66,    66,    66,    66,    66,    66,
       116,   116,   116,     0,     0,     0,   116,   114,   114,   114,
       114,    66,    66,    66,     0,     0,   116,    66,    66,    66,
        66,     0,    66,    79,    79,    79,    79,    79,     0,     0,
        79,    79,    79,    79,    79,    79,    79,   114,   114,   114,
         0,     0,     0,   114,   113,   113,   113,   113,    79,     0,
        79,     0,     0,   114,    79,    79,    79,    79,     0,    79,
        80,    80,    80,    80,    80,     0,     0,    80,    80,    80,
        80,    80,    80,    80,   113,   113,   113,     0,     0,     0,
       113,     0,     0,     0,     0,    80,     0,     0,     0,     0,
       113,    80,    80,    80,    80,     0,    80,    81,    81,    81,
        81,    81,     0,     0,    81,    81,    81,    81,    81,    81,
        81,    65,    65,    65,    65,    65,     0,     0,    65,    65,
        65,    65,    65,    65,    65,     0,     0,     0,    81,    81,
        81,    81,     0,    81,     1,     1,     1,     1,     1,     0,
         0,     0,    65,    65,    65,    65,     0,    65,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,   111,   111,
       111,   111,     0,     0,     0,     1,     1,     1,     0,     0,
         0,     1,     0,     0,     0,     0,     1,     0,     1,     0,
         0,     1,     1,     0,     1,     1,     1,     1,   111,   111,
       111,     0,     0,     0,   111,   110,   110,   110,   110,   111,
       111,   111,     0,     0,   111,   111,     0,   111,   111,   111,
         0,     0,     0,     0,     0,     0,     0,   140,   140,   140,
       140,     0,     0,     0,     0,   110,   110,   110,     0,     0,
         0,   110,     0,     0,     0,     0,   110,   110,   110,     0,
         0,   110,   110,     0,   110,   110,   110,   140,   140,   140,
         0,     0,     0,   140,   134,   134,   134,   134,   140,     0,
       140,     0,     0,   140,   140,     0,   140,   140,   140,     0,
         0,     0,     0,     0,     0,     0,   126,   126,   126,   126,
         0,     0,     0,     0,   134,   134,   134,     0,     0,     0,
       134,     0,     0,     0,     0,   134,     0,   134,     0,     0,
       134,   134,     0,   134,   134,   134,   126,   126,   126,     0,
         0,     0,   126,   125,   125,   125,   125,   126,     0,   126,
         0,     0,   126,   126,     0,   126,   126,   126,     0,     0,
         0,     0,     0,     0,     0,   103,   103,   103,   103,     0,
         0,     0,     0,   125,   125,   125,     0,     0,     0,   125,
         0,     0,     0,     0,   125,     0,   125,     0,     0,   125,
       125,     0,   125,   125,   125,   103,   103,   103,     0,     0,
         0,   103,     0,     0,     0,     0,   103,     0,   103,     0,
         0,   103,   103,     0,   103,   103,   103,    82,    82,    82,
        82,    82,     0,     0,    82,   107,   107,   107,   107,     0,
         0,     0,    75,    75,    75,    75,     0,     0,     0,     0,
         0,     0,     0,    70,    70,    70,    70,     0,    82,    82,
        82,    82,     0,    82,     0,   107,   107,   107,     0,     0,
         0,   107,    75,    75,    75,     0,     0,     0,    75,     0,
         0,   107,     0,    70,    70,    70,     0,     0,    75,    70,
        60,    60,    60,    60,     0,     0,     0,     0,     0,    70,
         0,    59,    59,    59,    59,     0,     0,     0,    58,    58,
        58,    58,     0,     0,     0,     0,     0,     0,     0,     0,
        60,    60,    60,     0,     0,     0,    60,    57,    57,    57,
        57,    59,    59,    59,     0,     0,    60,    59,    58,    58,
        58,     0,     0,     0,    58,     0,     0,    59,    56,    56,
        56,    56,     0,     0,    58,     0,     0,    57,    57,    57,
         0,     0,     0,    57,     0,    55,    55,    55,    55,     0,
         0,     0,     0,    57,    54,    54,    54,    54,    56,    56,
        56,     0,     0,     0,    56,    53,    53,    53,    53,     0,
         0,     0,     0,     0,    56,    55,    55,    55,    87,    87,
        87,    55,     0,    87,    54,    54,    54,     0,     0,     0,
        54,    55,     0,     0,     0,    53,    53,    53,     0,     0,
        54,    53,    52,    52,    52,    52,     0,     0,     0,     0,
        87,    53,    87,    51,    51,    51,    51,     0,     0,     0,
        50,    50,    50,    50,     0,     0,     0,     0,     0,     0,
         0,     0,    52,    52,    52,     0,     0,     0,    52,    49,
        49,    49,    49,    51,    51,    51,     0,     0,    52,    51,
        50,    50,    50,     0,     0,     0,    50,     0,     0,    51,
        48,    48,    48,    48,     0,     0,    50,     0,     0,    49,
        49,    49,     0,     0,     0,    49,     0,    47,    47,    47,
        47,     0,     0,     0,     0,    49,    46,    46,    46,    46,
        48,    48,    48,     0,     0,     0,    48,    45,    45,    45,
        45,     0,     0,     0,     0,     0,    48,    47,    47,    47,
        86,    86,    86,    47,     0,    86,    46,    46,    46,     0,
         0,     0,    46,    47,     0,     0,     0,    45,    45,    45,
         0,     0,    46,    45,    44,    44,    44,    44,     0,     0,
         0,     0,    86,    45,    86,    43,    43,    43,    43,     0,
         0,     0,    42,    42,    42,    42,     0,     0,     0,     0,
         0,     0,     0,     0,    44,    44,    44,     0,     0,     0,
        44,    38,    38,    38,    38,    43,    43,    43,     0,     0,
        44,    43,    42,    42,    42,     0,     0,     0,    42,     0,
         0,    43,    37,    37,    37,    37,     0,     0,    42,     0,
         0,    38,    38,    38,     0,     0,     0,    38,     0,    30,
        30,    30,    30,     0,     0,     0,     0,    38,    28,    28,
        28,    28,    37,    37,    37,     0,     0,     0,    37,    27,
        27,    27,    27,     0,     0,     0,     0,     0,    37,    30,
        30,    30,     0,     0,     0,    30,     0,     0,    28,    28,
        28,     0,     0,     0,    28,    30,     0,     0,     0,    27,
        27,    27,     0,     0,    28,    27,    26,    26,    26,    26,
         0,     0,     0,     0,     0,    27,     0,    25,    25,    25,
        25,    85,    85,    85,    85,    85,     0,     0,    85,     0,
         0,     0,     0,     0,     0,     0,    26,    26,    26,     0,
         0,     0,    26,     0,     0,     0,     0,    25,    25,    25,
         0,     0,    26,    25,     0,    85,     0,    85,    84,    84,
        84,    84,    84,    25,     0,    84,    83,    83,    83,    83,
        83,     0,     0,    83,     0,     0,     0,     0,     0,     0,
         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
         0,     0,    84,     0,    84,     0,     0,     0,     0,     0,
        83,     0,    83,
]; 
/*
    default action table. action = jjdefred[STATE-NUM],
    where action is the number of the rule to reduce with.
*/
var jjdefred: number[] = [ 
         2,    -1,     0,     1,     3,    -1,     6,    62,    63,    64,
        65,    66,    67,    51,    52,    53,    54,    55,    56,    57,
        58,    59,    60,    61,    48,    -1,    -1,    -1,    -1,    45,
        -1,    -1,     5,     8,     9,    23,    75,    -1,    -1,    74,
        73,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
        -1,    49,    50,    41,    42,    43,    44,    -1,    -1,    -1,
        -1,    48,    -1,    48,    68,    72,    -1,    26,    27,    28,
        29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
        39,    40,    -1,    -1,    24,    46,    10,     7,    11,    10,
        -1,    -1,    -1,    -1,    -1,    22,    70,    -1,    47,    76,
        -1,    -1,    13,    -1,    -1,    -1,    20,    25,     4,    12,
        -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,    20,    18,
        15,    -1,    -1,    14,    -1,    -1,    20,    19,    16,    -1,
        -1,    17,
]; 
/*
    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]
*/
var jjpgoto: number[] = [ 
        48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
        48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
         3,    48,   141,    48,     4,   100,    35,   100,    35,   139,
       124,    35,    29,    24,    29,    24,   137,    29,    24,   100,
        35,   132,   124,    35,   131,    35,    29,    24,    60,    29,
        24,    29,    24,   130,    60,   129,   100,    35,   100,    35,
       123,   124,    35,    29,    24,    29,    24,    48,    29,    24,
       121,    35,   120,    35,    48,    48,    48,    29,    24,    29,
        24,    34,   117,    34,   100,    35,   100,    35,    29,    24,
       106,    29,    24,    29,    24,   115,    29,    24,   100,    35,
        60,   105,   133,    94,   111,    29,    24,    29,    24,    29,
        24,    93,    35,    31,    32,   110,    48,    41,    29,    24,
        92,    40,    91,    29,    24,    90,    48,    89,    29,    24,
        88,    29,    24,    29,    24,    87,    29,    24,    86,    74,
        85,    29,    24,    84,    29,    24,    29,    24,    83,    29,
        24,    82,     1,    81,    29,    24,    80,    29,    24,    29,
        24,    79,    29,    24,    78,    -1,    77,    29,    24,    76,
        29,    24,    29,    24,    72,    29,    24,    72,    -1,    67,
        29,    73,    66,    29,    71,    29,    24,    65,    29,    24,
        64,    -1,    63,    29,    24,    -1,    29,    24,    29,    24,
    
]; 
/*
    displacement of the goto table
*/
var jjdisgoto: number[] = [ 
       151,    18,   -18,   -18,   -18,   -18,   110,   -18,   -18,   -18,
       -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,
       -18,   -18,   -18,   -18,    89,   182,   180,   177,   172,   -18,
       169,   -18,   -18,   -18,   -18,    -5,   -18,   167,   164,   -18,
       124,    -6,   159,   156,   154,   151,   146,   143,   141,   138,
       133,   130,   128,   125,   120,   117,   115,   112,   107,   102,
        93,   -18,   -18,   114,   104,     3,     2,    -7,   -18,   -18,
        91,    43,    -8,    37,   -18,    80,   -12,     1,     0,    -1,
        -2,    -3,     7,     6,     5,     4,    11,     9,    64,    63,
        62,    55,   -18,   -18,    -9,   -18,   110,   -18,   -18,    99,
       -18,   -18,   -18,    89,   -18,   -10,   -11,    72,   -18,   -18,
        77,    75,   -18,    63,    61,   -18,    52,    -4,   -18,   -18,
       -18,   -18,   -18,   -18,   -18,    49,    47,    35,    33,    95,
       -18,   -18,   -18,   -18,    30,   -18,    21,   -18,   -18,   -18,
        16,   -18,
]; 
/*
    length of each rule: rule length = jjruleLen[RULE-NUM]
*/
var jjruleLen: number[] = [ 
         2,     2,     0,     1,     7,     1,     0,     3,     1,     2,
         0,     1,     3,     2,     6,     5,     7,     9,     0,     2,
         0,     1,     3,     1,     3,     5,     3,     3,     3,     3,
         3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
         3,     2,     2,     2,     2,     1,     3,     4,     1,     2,
         2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
         1,     1,     1,     1,     1,     1,     1,     1,     2,     0,
         3,     1,     1,     0,     1,     1,     4,     2,     2,
]; 
/*
    index of the LHS of each rule
*/
var jjlhs: number[] = [ 
         0,     1,     1,     2,     2,     3,     3,     4,     4,     5,
         5,     6,     6,     6,     6,     6,     6,     6,     7,     7,
         8,     8,     9,     9,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
        10,    11,    11,    11,    11,    11,    11,    11,    11,    11,
        11,    11,    12,    12,    12,    12,    12,    12,    13,    13,
        14,    14,    15,    15,    16,    17,    17,    17,    17,
]; 
/*
    token names
*/
var jjtokenNames: string[] = [ 
                   "EOF",              "NAME",               "NUM",
                  "PLUS",             "MINUS",             "TIMES",
                "DIVIDE",               "EXP",          "QUESTION",
                 "COLON",           "PERCENT",                "GT",
                    "LT",              "GTOE",              "LTOE",
                   "EQU",               "NEQ",            "ASSIGN",
           "PLUS_ASSIGN",      "MINUS_ASSIGN",      "TIMES_ASSIGN",
         "DIVIDE_ASSIGN",    "BIT_AND_ASSIGN",     "BIT_OR_ASSIGN",
        "BIT_XOR_ASSIGN","RIGHT_SHIFT_ASSIGN", "LEFT_SHIFT_ASSIGN",
            "MOD_ASSIGN",           "BIT_AND",            "BIT_OR",
               "BIT_XOR",           "BIT_NOT",               "INC",
                   "DEC",        "LEFT_SHIFT",       "RIGHT_SHIFT",
          "RIGHT_SHIFT2",               "BRA",               "KET",
                  "CBRA",              "CKET",             "COMMA",
                  "BBRA",              "BKET",               "EOL",
                   "AND",                "OR",               "NOT",
                    "IF",              "ELSE",             "WHILE",
                    "DO",               "FOR",          "FUNCTION",
    
]; 
/*
    token alias
*/
var jjtokenAlias: string[] = [ 
                    null,                null,                null,
                     "+",                 "-",                 "*",
                     "/",                "**",                 "?",
                     ":",                 "%",                 ">",
                     "<",                ">=",                "<=",
                    "==",                "!=",                 "=",
                    "+=",                "-=",                "*=",
                    "/=",                "&=",                "|=",
                    "^=",               ">>=",               "<<=",
                    "%=",                 "&",                 "|",
                     "^",                 "~",                "++",
                    "--",                "<<",                ">>",
                   ">>>",                 "(",                 ")",
                     "[",                 "]",                 ",",
                     "{",                 "}",                 ";",
                    "&&",                "||",                 "!",
                    "if",              "else",             "while",
                    "do",               "for",          "function",
    
]; 


function tokenToString(tk: number){
    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `"${jjtokenAlias[tk]}"`;
}
class Token {
    constructor(
        public id: number,
        public val: string,
        public startLine: number,
        public startColumn: number,
        public endLine: number,
        public endColumn: number
    ){}
    clone(){
        return new Token(
            this.id,
            this.val,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    toString(){
        return (jjtokenAlias[this.id] === null ? 
            `<${jjtokenNames[this.id]}>` :
            `"${jjtokenAlias[this.id]}"`) + `("${this.val}")`;
    }
}
interface Parser{
    init();
    accept(s: string);
    end();
    halt();
    on(ent: string, cb: (a1?, a2?, a3?) => any);
}
function createParser(): Parser {
    // members for lexer
    var jjlexState: number[];
    var jjstate: number;
    var jjmatched: string;
    var jjtoken: Token;
    
    var jjmarker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };
    var jjbackupCount: number;

    var jjline: number;
    var jjcolumn: number;
    var jjtline: number;
    var jjtcolumn: number;

    // members for parser
    var jjlrState: number[];
    var jjsematicS: any[];
    var jjsematicVal: any;
    var jjtokenQueue: Token[];

    var jjstop;

    var jjhandlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};

    // extra members, defined by %extra_arg
    

    return {
        init,
        on,
        accept,
        end,
        halt
    };
    function init(){
        jjlexState = [ 0 ];// DEFAULT
        jjstate = 0;
        jjmatched = '';
        jjtoken = new Token(-1, null, 0, 0, 0, 0);
        jjmarker.state = -1;
        jjbackupCount = 0;
        jjline = jjtline = 0;
        jjcolumn = jjtcolumn = 0;
        
        jjlrState = [ 0 ];
        jjsematicS = [];
        jjsematicVal = null;
        jjtokenQueue = [];

        jjstop = false;
        

        jjtryReduce();
    }
    /**
     *  set 
     */
    function jjsetImg(s: string){
        jjmatched = s;
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjprepareToken(tid: number){
        jjtoken.id = tid;
        jjtoken.val = jjmatched;
        jjtoken.startLine = jjtline;
        jjtoken.startColumn = jjtcolumn;
        jjtoken.endLine = jjline;
        jjtoken.endColumn = jjcolumn - 1;

        jjtokenQueue.push(jjtoken);

        jjmatched = '';
        jjtline = jjline;
        jjtcolumn = jjcolumn;
    }
    function jjemit(name: string, a1?, a2?, a3?){
        var cbs = jjhandlers[name];
        if(cbs){
            for(var i = 0; i < cbs.length; i++){
                cbs[i](a1, a2, a3);
            }
        }
    }
    function on(name: string, cb: (a1?, a2?, a3?) => any){
        jjhandlers[name] || (jjhandlers[name] = []);
        jjhandlers[name].push(cb);
    }
    function jjdoLexAction0(jjstaten: number){
        var jjtk = jjlexTokens0[jjstaten];
        jjtk !== -1 && jjprepareToken(jjtk);
        switch(jjstaten){
            case 1:
                jjsetImg(""); 
                break;
            case 2:
                jjsetImg(""); 
                break;
            case 33:
                jjsetImg(""); 
                break;
            default:;
        }
    }
    /**
     *  do a lexical action
     *  @api private
     *  @internal
     */
    function jjdoLexAction(lexstate: number, state: number){
        switch(lexstate){
            case 0:
                jjdoLexAction0(state);
                break;
            default:;
        }
        jjtokenQueue.length > 0 && jjacceptToken(null);
    }
    function jjrollback(): string{
        var ret = jjmatched.substr(jjmatched.length - jjbackupCount, jjbackupCount);
        jjmatched = jjmatched.substr(0, jjmatched.length - jjbackupCount);
        jjbackupCount = 0;
        jjline = jjmarker.line;
        jjcolumn = jjmarker.column;
        jjstate = jjmarker.state;
        jjmarker.state = -1;
        return ret;
    }
    function jjmark(){
        jjmarker.state = jjstate;
        jjmarker.line = jjline;
        jjmarker.column = jjcolumn;
        jjbackupCount = 0;
    }
    function jjconsume(c: number){
        c === jjeol ? (jjline++, jjcolumn = 0) : (jjcolumn += c > 0xff ? 2 : 1);
        jjmatched += String.fromCharCode(c);
        jjmarker.state !== -1 && (jjbackupCount++);
        return true;
    }
    /**
     *  accept a character
     *  @return - true if the character is consumed, false if not consumed
     *  @api private
     *  @internal
     */
    function jjacceptChar(ccode: number){
        var lexstate = jjlexState[jjlexState.length - 1];
        var ltable = jjdfaTables[lexstate];
        var isEnd = ltable.isEnd[jjstate] === 1;
        var hasArc = ltable.hasArc[jjstate] === 1;
        // get the class of the given character
        var cl = ccode < ltable.maxAsicii ? ltable.classTable[ccode] : jjfindUnicodeClass(ltable.unicodeClassTable, ccode);
        // find the next state to go
        var nstate = -1;
        if(cl !== -1){
            var ind = ltable.disnext[jjstate] + cl;
            if(ind >= 0 && ind < ltable.pnext.length && ltable.checknext[ind] === jjstate){
                nstate = ltable.pnext[ind];
            }
        }
        if(isEnd){
            // if current state is a terminate state, be careful
            if(hasArc){
                if(nstate === -1){
                    // nowhere to go, stay where we are
                    jjdoLexAction(lexstate, jjstate);
                    // recover
                    jjmarker.state = -1;
                    jjbackupCount = 0;
                    jjstate = 0;                    
                    // character not consumed
                    return false;
                }
                else {
                    // now we can either go to that new state, or stay where we are
                    // it is prefered to move forward, but that could lead to errors,
                    // so we need to memorize this state before move on, in case if 
                    // an error occurs later, we could just return to this state.
                    jjmark();
                    jjstate = nstate;
                    return jjconsume(ccode);
                }
            }
            else {
                // current state doesn't lead to any state, just stay here.
                jjdoLexAction(lexstate, jjstate);
                // recover
                jjmarker.state = -1;
                jjbackupCount = 0;
                jjstate = 0;
                // character not consumed
                return false;
            }
        }
        else {
            if(nstate === -1){
                // nowhere to go at current state, error may have occured.
                // check marker to verify that
                if(jjmarker.state !== -1){
                    // we have a previously marked state, which is a terminate state.
                    var s = jjrollback();
                    jjdoLexAction(lexstate, jjstate);
                    jjstate = 0;
                    accept(s);
                    // character not consumed
                    return false;
                }
                else {
                    // error occurs
                    jjemit('lexicalerror', String.fromCharCode(ccode), jjline, jjcolumn);
                    // force consume
                    return true;
                }
            }
            else {
                jjstate = nstate;
                // character consumed
                return jjconsume(ccode);
            }
        }
    }
    function jjacceptEOF(){
        if(jjstate === 0){
            // recover
            jjprepareToken(0);
            jjacceptToken(null);
            return true;
        }
        else {
            var lexstate = jjlexState[jjlexState.length - 1];
            var ltable = jjdfaTables[lexstate];
            var isEnd = ltable.isEnd[jjstate];
            if(isEnd){
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                jjmarker.state = -1;
                return false;
            }
            else if(jjmarker.state !== -1){
                var s = jjrollback();
                jjdoLexAction(lexstate, jjstate);
                jjstate = 0;
                accept(s);
                return false;
            }
            else {
                jjemit('lexicalerror', '', jjline, jjcolumn);
                return true;
            }
        }
    }
    /**
     *  input a string
     *  @api public
     */
    function accept(s: string){
        for(var i = 0; i < s.length && !jjstop;){
            jjacceptChar(s.charCodeAt(i)) && i++;
        }
    }
    /**
     *  tell the compiler that end of file is reached
     *  @api public
     */
    function end(){
        while(!jjstop && !jjacceptEOF());
        jjstop = true;
    }
    function halt(){
        jjstop = true;
    }
    function jjdoReduction(jjrulenum: number){
        var jjnt = jjlhs[jjrulenum];
        var jjsp = jjsematicS.length;
        var jjtop = jjsematicS[jjsp - jjruleLen[jjrulenum]] || null;
        switch(jjrulenum){
        }
        jjlrState.length -= jjruleLen[jjrulenum];
        var jjcstate = jjlrState[jjlrState.length - 1];
        jjlrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);

        jjsematicS.length -= jjruleLen[jjrulenum];
        jjsematicS.push(jjtop);
    }
    function jjacceptToken(tk: Token){
        // look up action table
        var shifted = false;
        tk !== null && jjtokenQueue.push(tk);
        while(!jjstop && jjtokenQueue.length > 0){
            var t = jjtokenQueue[0];
            var cstate = jjlrState[jjlrState.length - 1];
            var ind = jjdisact[cstate] + t.id;
            var act = 0;
            if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){
                act = -jjdefred[cstate] - 1;
            }
            else {
                act = jjpact[ind];
            }
            if(act === jjactERR){
                // explicit error
                jjsyntaxError(t);
                jjtokenQueue.shift();
            }
            else if(act > 0){
                // shift
                if(t.id === 0){
                    // end of file
                    jjstop = true;
                    jjemit('accept');
                    jjtokenQueue.shift();
                }
                else {
                    jjlrState.push(act - 1);
                    jjsematicS.push(jjsematicVal);
                    jjsematicVal = null;
                    jjtryReduce();
                    // token consumed
                    jjtokenQueue.shift();
                }
            }
            else if(act < 0){
                jjdoReduction(-act - 1);
                jjtryReduce();
            }
            else {
                // error
                jjsyntaxError(t);
                // force consume
                jjtokenQueue.shift();
            }
        }
    }
    function jjtryReduce(){
        var cstate = jjlrState[jjlrState.length - 1];
        var act;
        while(jjdisact[cstate] === -jjtokenCount && (act = jjdefred[cstate]) !== -1){
            jjdoReduction(act);
            cstate = jjlrState[jjlrState.length - 1];
        }
    }
    function jjsyntaxError(t: Token){
        var msg = "unexpected token " + t.toString() + ", expecting one of the following token(s):\n"
        msg += jjexpected(jjlrState[jjlrState.length - 1]);
        jjemit("syntaxerror", msg, t);
    }
    function jjexpected(state: number){
        var dis = jjdisact[state];
        var ret = '';
        function expect(tk: number){
            var ind = dis + tk;
            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){
                return jjdefred[state] !== -1;
            }
            else {
                return true;
            }
        }
        for(var tk = 0; tk < jjtokenCount; tk++){
            expect(tk) && (ret += "    " + tokenToString(tk) + " ..." + '\n');
        }
        return ret;
    }
}
