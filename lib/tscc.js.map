{"version":3,"file":"tscc.js","sources":["../src/util/bitset.ts","../src/util/common.ts","../src/util/interval-set.ts","../src/lexer/char-set.ts","../src/util/io.ts","../src/lexer/state.ts","../src/lexer/dfa.ts","../src/util/E.ts","../src/lexer/pattern-exception.ts","../src/lexer/compile.ts","../src/lexer/pattern.ts","../src/grammar/token-set.ts","../src/grammar/item-set.ts","../src/util/list.ts","../src/grammar/token-entry.ts","../src/grammar/ptable.ts","../src/grammar/ptable-gen.ts","../src/top/parse-test.ts","../src/util/compress.ts","../src/grammar/ptable-compress.ts","../src/grammar/grammar.ts","../src/parser/file.ts","../src/util/coroutine.ts","../src/parser/node.ts","../src/lexer/builder.ts","../src/lexer/action.ts","../src/parser/gbuilder.ts","../src/parser/parser.ts","../src/codegen/templates/ts.ts","../src/codegen/template.ts","../src/top/result.ts"],"sourcesContent":["\nconst BSIZE = 32;\nexport class BitSet{\n    private _s: number[];\n    constructor(private _size: number){\n        this._s = new Array(Math.ceil(_size / BSIZE));\n        for(var i = 0; i < this._s.length; i++){\n            this._s[i] = 0;\n        }\n    }\n    public add(i: number): boolean{\n        var block = Math.floor(i / BSIZE);\n        var offset = i - block * BSIZE;\n        var orig = this._s[block];\n        this._s[block] |= (1 << offset);\n        return orig !== this._s[block];\n    }\n    public addAll(): void{\n        for(var i = 0;i < this._s.length;i++){\n            this._s[i] = ~0;\n        }\n    }\n    public remove(i: number): boolean{\n        var block = Math.floor(i / BSIZE);\n        var offset = i - block * BSIZE;\n        var orig = this._s[block];\n        this._s[block] &= ~(1 << offset);\n        return orig !== this._s[block];\n    }\n    public removeAll(): void{\n        for(var i = 0;i < this._s.length;i++){\n            this._s[i] = 0;\n        }\n    }\n    public contains(i: number): boolean{\n        var block = Math.floor(i / BSIZE);\n        var offset = i - block * BSIZE;\n        return (this._s[block] & (1 << offset)) !== 0;\n    }\n    public union(set: BitSet, mask?: BitSet): boolean{\n        var changed = false;\n        for(var i = 0;i < this._s.length;i++){\n            var orig = this._s[i];\n            var source = set._s[i];\n            mask && (source &= mask._s[i]);\n            this._s[i] |= source;\n            changed = (this._s[i] !== orig) || changed;\n        }\n        return changed;\n    }\n    public hasIntersection(set: BitSet): boolean{\n        for(var i = 0;i < this._s.length;i++){\n            if((this._s[i] & set._s[i]) !== 0){\n                return true;\n            }\n        }\n        return false;\n    }\n    public equals(set: BitSet): boolean{\n        for(var i = 0;i < this._s.length;i++){\n            if(this._s[i] !== set._s[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n    public forEach(cb: (i: number) => any){\n        for(var i = 0;i < this._size;i++){\n            this.contains(i) && cb(i);\n        }\n    }\n    public hash(): string{\n        var ret = '';\n        for(var i = 0;i < this._s.length;i++){\n            ret += this._s[i].toString(16) + '-';\n        }\n        return ret;\n    }\n}\n\n","\nexport var YYTAB: string = '    ';\nexport var DEBUG: boolean = true;\n\nexport interface Console{\n    assert: (expr: boolean) => any;\n    log: (s: string) => void;\n}\n\nexport var console: Console = {\n    assert: function(expr){\n        if(!expr){\n            throw new Error('Assertion failed');\n        }\n    },\n    log: function(s){},\n};\n\nexport function setDebugger(d: Console){\n    return console.log = d.log;\n}\nexport function setTab(t: string): string{\n    return YYTAB = t;\n}\n\n\n\n","// 区间集合\n\nimport { DEBUG } from './common';\n\nfunction copyArray(a: any[]): any[]{\n    var ret = [];\n    for(var i = 0;i < a.length;i++){\n        ret.push(a[i]);\n    }\n    return ret;\n}\n\nfunction cm(a: Num, b: Num): number{\n    if((a === Inf.oo && b !== Inf.oo) || (a !== Inf._oo && b === Inf._oo) || a > b){\n        return 1;\n    }\n    else if((a === Inf._oo && b !== Inf._oo) || (a !== Inf.oo && b === Inf.oo) || a < b ){\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport enum Inf{\n    oo = \"oo\",\n    _oo = \"-oo\"\n};\nexport type Num = Inf | number;\n\nexport interface DataSet<T>{\n    union(set: DataSet<T>): void;\n    add(d: T): void;\n    toArray(): T[];\n}\nclass Interval<T>{\n    public a: Num;\n    public b: Num;\n    public prev: Interval<T>;\n    public next: Interval<T>;\n    public parent: IntervalSet<T>;\n    public dataSet: DataSet<T> = null;\n    constructor(a: Num, b: Num){\n        this.a = a;\n        this.b = b;\n    }\n    \n    public insertBefore(a: Num, b: Num, data?: T){\n        if(this.parent.isValid(this) && !this.parent.noMerge && this.a === (b as number) + 1){\n            this.a = a;\n            return this;\n        }\n        else {\n            var it = this.parent.createInterval(a,b,data);\n            it.prev = this.prev;\n            it.next = this;\n            this.prev.next = it;\n            this.prev = it;\n            return it;\n        }\n    }\n    public contains(a: Num): boolean{\n        return cm(this.a,a) <= 0 && cm(this.b,a) >= 0;\n    }\n    public overlaps(a: Num, b: Num): boolean{\n        return !(cm(a,this.b) > 0 || cm(b,this.a) < 0);\n    }\n    public insertAfter(a: Num, b: Num, data?: T): Interval<T>{\n        if(this.parent.isValid(this) && !this.parent.noMerge && this.b === (a as number) - 1){\n            this.b = b;\n            return this;\n        }\n        else {\n            var it = this.parent.createInterval(a,b,data);\n            it.prev = this;\n            it.next = this.next;\n            this.next.prev = it;\n            this.next = it;\n            return it;\n        }\n    }\n    public splitLeft(a: Num): Interval<T>{\n        //DEBUG && console.assert(this.parent.noMerge);\n        if(cm(a, this.a) > 0){\n            var ret = this.insertBefore(this.a,(a as number) - 1);\n            this.parent.noMerge && ret.dataSet.union(this.dataSet);\n            this.a = a;\n            return ret;\n        }\n        return this;\n    }\n    public splitRight(b: Num): Interval<T>{\n        //DEBUG && console.assert(this.parent.noMerge);\n        if(cm(b, this.b) < 0){\n            var ret = this.insertAfter((b as number) + 1,this.b);\n            this.parent.noMerge && ret.dataSet.union(this.dataSet);\n            this.b = b;\n            return ret;\n        }\n        return this;\n    }\n    public remove(): Interval<T>{\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n        return this;\n    }\n    public checkMerge(): Interval<T>{\n        if(this.a !== Inf._oo && this.prev.a !== null && this.a === (this.prev.b as number) + 1){\n            this.a = this.prev.a;\n            this.prev.remove();\n        }\n        if(this.b !== Inf.oo && this.next.a !== null && this.b === (this.next.a as number) - 1){\n            this.b = this.next.b;\n            this.next.remove();\n        }\n        return this;\n    }\n    public toString(mapper: (a: Num) => string): string{\n        var ret = '';\n        function dfmapper(c: Num): string{\n            return c === Inf.oo ? '+oo' : c === Inf._oo ? '-oo' : c.toString();\n        }\n        var a = (mapper || dfmapper)(this.a);\n        var b = (mapper || dfmapper)(this.b);\n        if(this.a === this.b){\n            ret += a;\n        }\n        else{\n            ret += this.a === Inf._oo ? '(' + a : '[' + a;\n            ret += ',';\n            ret += this.b === Inf.oo ? b + ')' : b + ']';\n        }\n        this.dataSet && (ret += this.dataSet.toString());\n        return ret;\n    }\n}\nfunction checkArg(a: Num, b: Num){\n    if(cm(a,b) > 0){\n        throw new Error(`illegal argument: \"a\"(${a}) must be no more than \"b\"(${b})`);\n    }\n}\nexport class IntervalSet<T>{\n    public head: Interval<T>;\n    public tail: Interval<T>;\n    public noMerge: boolean;\n    public dataSetConstructor: () => DataSet<T>;\n\n    constructor(dataSetConstructor?: () => DataSet<T>){\n        this.head = new Interval(0,0);\n        this.head.parent = this;\n        this.tail = new Interval(null,null);\n        this.tail.parent = this;\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    \n        this.noMerge = typeof dataSetConstructor !== 'undefined';\n        this.dataSetConstructor = dataSetConstructor || null;\n    }\n    isValid(it: Interval<T>): boolean{\n        return it !== this.head && it !== this.tail;\n    }\n    createInterval(a: Num, b: Num, data: T = null): Interval<T>{\n        var ret = new Interval<T>(a,b);\n        ret.parent = this;\n        this.dataSetConstructor && (ret.dataSet = this.dataSetConstructor());\n        data && ret.dataSet.add(data);\n        return ret;\n    }\n    fitPoint(a: Num, b: Num): Interval<T>{\n        for(var it = this.head;it !== this.tail;it = it.next){\n            if((it === this.head || cm(a,it.b) > 0) && (it.next === this.tail || cm(b,it.next.a) < 0)){\n                return it;\n            }\n        }\n        return null;\n    }\n    overlaped(a: Num, b: Num): Interval<T>[]{\n        var start = null,end = null;\n        var it = this.head.next;\n        for(;it !== this.tail && !it.overlaps(a,b);it = it.next);\n        if(it === this.tail){\n            return null;\n        }\n        start = end = it;\n        for(;it !== this.tail && it.overlaps(a,b);it = it.next){\n            end = it;\n        }\n        return [start,end];\n    }\n    /**\n     * add an interval into the set\n     * @param data - The extra data associated with the added interval, which is only valid when noMerge = true\n     * \n     */\n    add(a: Num, b: Num = a, data?: T){\n        var noMerge = this.noMerge;\n        // /b = b || a;\n        DEBUG && checkArg(a,b);\n        var overlap = this.overlaped(a,b);\n        if(overlap === null){\n            this.fitPoint(a,b).insertAfter(a,b,data);\n        }\n        else {\n            if(!noMerge){\n                var a1 = cm(a,overlap[0].a) < 0 ? a : overlap[0].a;\n                var b1 = cm(b,overlap[1].b) > 0 ? b : overlap[1].b;\n                overlap[0].a = a1;\n                overlap[0].b = b1;\n                overlap[0].next = overlap[1].next;\n                overlap[1].next.prev = overlap[0];\n                overlap[0].checkMerge();\n            }\n            else {\n                if(overlap[0].contains(a)){\n                    overlap[0].splitLeft(a);\n                }\n                else {\n                    overlap[0].insertBefore(a,(overlap[0].a as number) - 1,data);\n                }\n                if(overlap[1].contains(b)) {\n                    overlap[1].splitRight(b);\n                }\n                else {\n                    overlap[1].insertAfter((overlap[1].b as number) + 1,b,data);\n                }\n                for(var it = overlap[0];it !== overlap[1];it = it.next){\n                    it.dataSet.add(data);\n                    if((it.b as number) + 1 < it.next.a){\n                        it.insertAfter((it.b as number) + 1,(it.next.a as number) - 1,data);\n                    }\n                }\n                overlap[1].dataSet.add(data);\n            }\n        }\n        return this;\n    }\n    remove(a: Num, b: Num): IntervalSet<T>{\n        checkArg(a,b);\n        var overlap = this.overlaped(a,b);\n        if(overlap !== null){\n            overlap[0].contains(a) && overlap[0].splitLeft(a);\n            overlap[1].contains(b) && overlap[1].splitRight(b);\n            overlap[0].prev.next = overlap[1].next;\n            overlap[1].next.prev = overlap[0].prev;\n        }\n        return this;\n    }\n    removeAll(): IntervalSet<T>{\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n        return this;\n    }\n    forEach(cb: (a: Num, b: Num, it: Interval<T>) => any): IntervalSet<T>{\n        for(var it = this.head.next;it !== this.tail;it = it.next){\n            cb(it.a,it.b,it);\n        }\n        return this;\n    }\n    union(s: IntervalSet<T>): IntervalSet<T>{\n        for(var it = s.head.next;it !== s.tail;it = it.next){\n            this.add(it.a,it.b);\n        }\n        return this;\n    }\n    contains(a: Num): boolean{\n        for(var it = this.head.next;it !== this.tail;it = it.next){\n            if(it.contains(a)){\n                return true;\n            }\n        }\n        return false;\n    }\n    toString(mapper: (a: Num) => string){\n        var ret = '';\n        var t = false;\n        for(var it = this.head.next;it !== this.tail;it = it.next){\n            if(t){\n                ret += ',';\n            }\n            t = true;\n            ret += it.toString(mapper);\n        }\n        return ret === '' ? 'phi' : ret;\n    }\n}","import { Inf, IntervalSet, DataSet } from '../util/interval-set';\n\nvar oo = Inf.oo;\nvar _oo = Inf._oo;\nexport class CharSet<T> extends IntervalSet<T>{\n    constructor(datac?: () => DataSet<T>){\n        super(datac);\n    }\n    addAll(): void{\n        super.add(0, Inf.oo);\n    }\n    constainsAll(): boolean{\n        let c = this.head.next;\n        return c.next === this.tail && c.a === 0 && c.b === oo;\n    }\n    toString(): string{\n        return super.toString(function(c){\n            if(c !== oo && c !== _oo){\n                if(c >= 0x20 && c <= 0x7e){\n                    return '\\'' + String.fromCharCode(c as number) + '\\'';\n                }\n                else {\n                    return '\\\\x' + (c as number).toString(16);\n                }\n            }\n            else if(c === oo){\n                return 'oo';\n            }\n            else {\n                return '-oo';\n            }\n        });\n    }\n}\n","\nexport var endl = '\\n';\n\nexport abstract class OutputStream {\n    abstract write(s?: string | number): any;\n    writeln(s?: string | number): any{\n        s && this.write(s);\n        this.write(endl);\n    }\n}\nexport class StringOS extends OutputStream {\n    public s: string = '';\n    write(s: string | number): any{\n        this.s += s;\n    }\n    reset(): any{\n        this.s = '';\n    }\n}\n\nexport interface InputStream{\n    peek(): string;\n    next(): string;\n}\nexport interface BackupIs extends InputStream{\n    backup(s: string): void;\n}\nexport function StringIS(s: string): InputStream{\n    var i = 0;\n    return {\n        peek: function(){\n            return s.charAt(i) || null;\n        },\n        next: function(){\n            var ret = this.peek();\n            i++;\n            return ret;\n        }\n    };\n}\nexport function biss(iss: InputStream): BackupIs{\n    var backup: string[] = [];\n    return {\n        peek: function(){\n            return backup.length > 0 ? backup[backup.length - 1] : iss.peek();\n        },\n        next: function(){\n            if(backup.length > 0){\n                return backup.pop();\n            }\n            else {\n                return iss.next();\n            }\n        },\n        backup: function(c: string){\n            backup.push(c);\n        }\n    };\n}","import { BitSet } from '../util/bitset';\nimport { YYTAB } from '../util/common';\nimport { CharSet } from './char-set';\nimport { console } from '../util/common';\nimport { DFA } from './dfa.js';\nimport { DataSet } from '../util/interval-set';\nimport { OutputStream, StringOS, endl } from '../util/io';\n\nexport enum Action{\n    START = 0,\n    END,\n    NONE\n}\nvar maxlen = 0;\nclass StateArray<T> extends Array<State<T>> implements DataSet<State<T>>{\n    constructor(){\n        super(0);\n        // XXX: a better way to fix prototype chain?\n        (Object as any).setPrototypeOf(this, StateArray.prototype);\n    }\n    add(s: State<T>){\n        for(var s2 of this){\n            if(s === s2){\n                // console.log('hit: ' + s.index);\n                return;\n            }\n        }\n        this.length > maxlen && (maxlen = this.length);\n        this.push(s);\n    }\n    union(s: StateArray<T>){\n        for(var state of s){\n            this.add(state);\n        }\n    }\n    toArray(){\n        var ret: State<T>[] = [];\n        for(let s of this){\n            ret.push(s);\n        }\n        return ret;\n    }\n}\nexport class Arc<T>{\n    chars: CharSet<any> = new CharSet<any>();\n    from: State<T>;\n    to: State<T>;\n    constructor(from: State<T>, to: State<T>){\n        this.from = from;\n        this.to = to;\n    }\n}\nexport class EndAction<T>{\n    priority: number = 0;\n    id: number = 0;\n    data: T = null;\n}\nexport class State<T>{\n    valid: boolean = false;\n    arcs: Arc<T>[] = [];\n    epsilons: State<T>[] = [];\n    index: number = 0;\n    isStart: boolean = false;\n    isEnd: boolean = false;\n    marker: boolean = false;\n    endAction: EndAction<T> = null;\n    constructor(endAction?: EndAction<T>){\n        this.endAction = endAction || null;\n    }\n    findArc(to: State<T>): Arc<T>{\n        for(var arc of this.arcs){\n            if(arc.to === to){\n                return arc;\n            }\n        }\n        return null;\n    }\n    /**\n     * create an arc and link the state to another with that arc.\n     * \n     * @param {State} s\n     * @returns {Arc} the created arc.\n     */\n    to(s: State<T>): Arc<T>{\n        var arc = this.findArc(s);\n        if(arc === null){\n            arc = new Arc<T>(this, s);\n            this.arcs.push(arc);\n        }\n        s.valid = true;\n        return arc;\n    }\n    epsilonTo(s: State<T>): void{\n        this.epsilons.push(s);\n    }\n    hasDefinate(){\n        return this.arcs.length === 1 && this.arcs[0].chars.constainsAll();\n    }\n    iterator(epOnly: boolean = false): () => State<T>{\n        var queue: State<T>[] = [this];\n        var states: State<T>[] = [this];\n    \n        this.marker = true;\n        return () => {\n            if(queue.length > 0){\n                var s = queue.pop();\n                if(!epOnly){\n                    for(let arc of s.arcs){\n                        var to = arc.to;\n                        if(!to.marker){\n                            queue.push(to);\n                            states.push(to);\n                            to.marker = true;\n                        }\n                    }\n                }\n                for(let to of s.epsilons){\n                    if(!to.marker){\n                        queue.push(to);\n                        states.push(to);\n                        to.marker = true;\n                    }\n                }\n                return s;\n            }\n            else {\n                for(var state of states){\n                    state.marker = false;\n                }\n                return null;\n            }\n        };\n    }\n    forEach(cb: (s: State<T>) => void, epOnly: boolean = false): void{\n        var queue: State<T>[] = [this];\n        var states: State<T>[] = [this];\n    \n        this.marker = true;\n        while(queue.length > 0){\n            var s = queue.pop();\n            cb(s);\n            if(!epOnly){\n                for(let arc of s.arcs){\n                    var to = arc.to;\n                    if(!to.marker){\n                        queue.push(to);\n                        states.push(to);\n                        to.marker = true;\n                    }\n                }\n            }\n            for(let to of s.epsilons){\n                if(!to.marker){\n                    queue.push(to);\n                    states.push(to);\n                    to.marker = true;\n                }\n            }\n        }\n        for(var state of states){\n            state.marker = false;\n        }\n    }\n    number(): void{\n        var i = 0;\n        this.forEach(function(state){\n            state.index = i++;\n        });\n    }\n    print(os: OutputStream, recursive: boolean = true){\n        function single(cela: State<T>): string{\n            let ret = '';\n            ret += `state ${cela.index}`;\n            if(cela.isStart){\n                ret += '(start)';\n            }\n            if(cela.endAction){\n                ret += `(end ${cela.endAction.id})`;\n                //ret += '(end: ' + cela.endAction.id + ')';\n            }\n            ret += endl;\n            for(var i = 0;i < cela.arcs.length;i++){\n                var arc = cela.arcs[i];\n                ret += (`${YYTAB}${arc.chars.toString()} -> state ${arc.to.index}${endl}`);\n                // ret += YYTAB + arc.chars.toString() + ' -> state ' + arc.to.index + '\\n';\n            }\n            if(cela.epsilons.length > 0){\n                // ret += YYTAB + 'epsilon: ';\n                ret += `${YYTAB}epsilon: `;\n                for(var i = 0;i < cela.epsilons.length;i++){\n                    if(i > 0){\n                        // ret += ',';\n                        ret += ',';\n                    }\n                    // ret += cela.epsilons[i].index;\n                    ret += cela.epsilons[i].index.toString();\n                }\n                // ret += '\\n';\n                ret += endl;\n            }\n            return ret;\n        }\n        if(!recursive){\n            os.write(single(this));\n        }\n        else {\n            var ret = '';\n            this.forEach(state => {\n                os.write(single(state));\n            });\n        }\n    }\n    toString(recursive: boolean = true): string{\n        let ss = new StringOS();\n        this.print(ss, recursive);\n        return ss.s;\n    }\n    /**\n     * @param {State} state\n     */\n    copyEndFrom(state: State<T>): void{\n        if(state.endAction !== null){\n            if(this.endAction !== null){\n                if(this.endAction.priority < state.endAction.priority){\n                    this.endAction = state.endAction;\n                }\n            }\n            else {\n                this.endAction = state.endAction;\n            }\n        }\n    }\n    removeEpsilons(): void{\n        var cela = this;\n        var valid: State<T>[] = [this];\n        this.forEach(function(s){\n            if(s.valid){\n                valid.push(s);\n            }\n        });\n        for(var i = 0;i < valid.length;i++){\n            var s = valid[i];\n            s.forEach(function(state){\n                if(state !== s){\n                    for(var j = 0;j < state.arcs.length;j++){\n                        var arc = state.arcs[j];\n                        s.to(arc.to).chars.union(arc.chars);\n                    }\n                    //s.isEnd = s.isEnd || state.isEnd;\n                    s.copyEndFrom(state);\n                }\n            },true);\n            s.epsilons.length = 0;\n        }\n        for(var i = 0;i < valid.length;i++){\n            valid[i].index = i;\n        }\n    }\n    count(): number{\n        var c = 0;\n        this.forEach(function(){\n            c++;\n        });\n        return c;\n    }\n    \n    size(): number{\n        var i = 0;\n        this.forEach(function(){\n            i++;\n        });\n        return i;\n    }\n    /**\n     * get all the characters that this state can accept\n     * @param {CharSet} set The set that the resulting characters add into\n     */\n    allChars(set: CharSet<State<T>>){\n        var cela = this;\n        for(var i = 0;i < this.arcs.length;i++){\n            //set.union(this.arcs[i].chars);\n            var arc = this.arcs[i];\n            arc.chars.forEach(function(a, b){\n                set.add(a, b, arc.to);\n            });\n        }\n    }\n    /**\n     * @param {string} char\n     * @returns {State}\n     */\n    getState(char: number): State<T>{\n        for(var i = 0;i < this.arcs.length;i++){\n            var arc = this.arcs[i];\n            if(arc.chars.contains(char)){\n                return arc.to;\n            }\n        }\n        return null;\n    }\n    hasArc(): boolean{\n        return this.arcs.length > 0;\n    }\n    clone(){\n\n    }\n    toDFA(): { head: State<T>, states: State<T>[] }{\n\n        var dfaStates: { [s: string]: CompoundState<T> } = {};\n        var states: State<T>[] = [];\n        var dfaCount = 0;\n        var stateCount = this.count();\n    \n        var set = new CharSet<State<T>>(() => new StateArray<T>());\n\n        var cela = this;\n        \n        // initiation,put {start} into the dfaStates.\n        var initState = new CompoundState(stateCount,[this]);\n        initState.index = dfaCount++;\n        states.push(initState);\n        var lastState = initState;\n        dfaStates[initState.hash()] = initState;\n\n        var queue: CompoundState<T>[] = [initState];\n    \n        while(queue.length > 0){\n            var s = queue.shift();\n            // clear set and arc array\n            set.removeAll();\n            // find all the characters that this state can accept\n            s.allChars(set);\n            set.forEach(function(chara,charb,it){\n                var cpState = new CompoundState<T>(stateCount,it.dataSet.toArray());\n                var cphash = cpState.hash();\n                if(dfaStates[cphash]){\n                    // this state est deja connu\n                    cpState = dfaStates[cphash];\n                }\n                else {\n                    dfaStates[cphash] = cpState;\n                    queue.push(cpState);\n                    cpState.index = dfaCount++;\n                    states.push(cpState);\n                }\n                s.to(cpState).chars.add(chara,charb);\n            });\n        }\n        initState.release();\n        return {\n            head: initState,\n            states: states\n        };\n    }\n}\n\nclass CompoundState<T> extends State<T>{\n    stateSet: BitSet;\n    states: State<T>[];\n    constructor(stateCount: number, states: State<T>[]){\n        super();\n        this.isEnd = this.isStart = false;\n        this.valid = true;\n        this.states = states;\n        this.stateSet = new BitSet(stateCount);\n        for(var i = 0;i < states.length;i++){\n            this.stateSet.add(states[i].index);\n            //this.isEnd = this.isEnd || states[i].isEnd;\n            this.copyEndFrom(states[i]);\n            this.isStart = this.isStart || states[i].isStart;\n        }\n    }\n    hash(): string{\n        return this.stateSet.hash();\n    }\n\n    // getStates(char: string, states: BitSet){\n    //     for(var i = 0;i < this.states.length;i++){\n    //         State.prototype.getStates.call(this.states[i],char,states);\n            \n    //     }\n    // }\n\n    allChars(set: CharSet<State<T>>){\n        for(var i = 0;i < this.states.length;i++){\n            // State.prototype.allChars.call(this.states[i],set);\n            this.states[i].allChars(set);\n        }\n    }\n    forEach(cb: (s: CompoundState<T>) => void){\n        super.forEach(cb);\n    }\n    release(){\n        this.forEach(function(state){\n            state.states.length = 0;\n        });\n    }\n}\n","import { InputStream,biss, OutputStream } from '../util/io.js';\nimport { State, EndAction } from './state';\n\nexport class DFA<T>{\n    start: State<T>;\n    constructor(public states: State<T>[]){\n        this.start = states[0];\n    }\n    print(os: OutputStream){\n        for(let s of this.states){\n            s.print(os, false);\n            os.writeln();\n        }\n    }\n    toString(): string{\n        var ret = '';\n        for(var i = 0;i < this.states.length;i++){\n            ret += this.states[i].toString() + '\\n';\n        }\n        return ret;\n    }\n    \n    matcher(stream: InputStream){\n        var bs = biss(stream);\n        var backups = [];\n        var matched = [];\n        var marker = null;\n        var c = bs.peek();\n        var cs;\n        function nc(){\n            if(marker !== null){\n                backups.push(c);\n            }\n            matched.push(c);\n            bs.next();\n            c = bs.peek();\n        }\n        function rollback(){\n            cs = marker;\n            marker = null;\n            while(backups.length > 0){\n                bs.backup(backups.pop());\n                matched.pop();\n            }\n        }\n        var cela = this;\n        return function(){\n            c = bs.peek();\n            cs = cela.start;\n            matched.length = 0;\n            backups.length = 0;\n            marker = null;\n            var ns;\n            while(true){\n                if(cs.endAction !== null){\n                    // this state is an end state,be carefull\n                    if(cs.hasArc()){\n                        ns = c !== null ? cs.getState(c.charCodeAt(0)) : null;\n                        if(ns === null){\n                            return { matched: matched.join(''),action: cs.endAction };\n                        }\n                        else {\n                            backups.length = 0;\n                            marker = cs;\n                            cs = ns;\n                            nc();\n                        }\n                    }\n                    else {\n                        return { matched: matched.join(''),action: cs.endAction };\n                    }\n                }\n                else {\n                    ns = c !== null ? cs.getState(c.charCodeAt(0)) : null;\n                    if(ns === null){\n                        if(marker !== null){\n                            rollback();\n                            return { matched: matched.join(''),action: cs.endAction };\n                        }\n                        else if(c === null){\n                            //eof\n                            return null;\n                        }\n                        else {\n                            throw new Error('unexpected character \"' + c + '\"');\n                        }\n                    }\n                    else {\n                        cs = ns;\n                        nc();\n                    }\n                }\n            }\n            // return null;\n        }\n    }\n}\n","export interface Option{\n    typeClass?: string;\n    escape?: boolean;\n}\nexport class JsccError{\n    constructor(public msg: string, public type: string = 'Error'){}\n    public toString(opt: Option = {}): string{\n        var escape = !!opt.escape;\n        var ret = this.type;\n        if(opt.typeClass){\n            ret = `<span class=\"${opt.typeClass}\">${ret}</span>`;\n        }\n        ret += ': ';\n        ret += escape ? this.msg.replace(/</g,'&lt').replace(/>/g,'&gt') : this.msg;\n        return ret;\n    }    \n}\nexport class CompilationError extends JsccError{\n    constructor(msg: string, public line: number){\n        super(msg, 'CompilationError');\n    }\n    public toString(opt: Option){\n        return `${super.toString(opt)} (at line ${this.line})`;\n    }\n}\nexport class JsccWarning extends JsccError{\n    constructor(msg: string){\n        super(msg, 'Warning');\n    }\n}","import { JsccError } from '../util/E';\nexport class PatternException extends JsccError{\n    constructor(msg: string){\n        super(msg, 'PatternException');\n    }\n}\n","import { PatternException as E } from './pattern-exception.js';\nimport { Action,Arc,EndAction,State } from './state.js';\nimport { CharSet } from './char-set';\n\n\nfunction stackReader(str: string, strs?: {[s: string]: string}){\n    var stack = [{ sptr: 0,s: str,name: '' }];\n    var top = stack[0];\n    function checkNested(name: string){\n        for(var i = 0;i < stack.length;i++){\n            if(stack[i].name === name){\n                throw new E('cannot use pattern \"' + name + '\" which leads to loop reference');\n            }\n        }\n    }\n    return {\n        next: function(){\n            top.sptr++;\n            if(top.sptr >= top.s.length){\n                stack.length > 1 && stack.pop();\n                top = stack[stack.length - 1];\n            }\n        },\n        peek: function(){\n            return top.s[top.sptr] || null;\n        },\n        pushTo: function(name){\n            var nn = strs ? strs[name] : null;\n            if(!nn){\n                throw new E('undefined name \"' + name + '\"');\n            }\n            checkNested(name);\n            stack.push({ sptr: 0,s: '(' + nn + ')',name: name });\n            top = stack[stack.length - 1];\n        }\n    };\n}\n\n/**\n * compile a regular expression into e-NFA\n * @param {string} input\n * @param {number} stateCount\n * @param {Object.<string,string>|undefined} regs\n * @returns {{result: State,stateCount: number,tail: State}}\n */\nexport function compile<T>(input: string, regs: {[s: string]: string} = {}){\n    var reader = stackReader(input,regs);\n    var c = reader.peek();\n\n    function nc(){\n        reader.next();\n        c = reader.peek();\n    }\n    function notEof(reason?: string){\n        if(c === null){\n            throw new E('unexpected end of string' + (reason ? ', ' + reason : ''));\n        }\n    }\n    function ns(){\n        var s = new State<T>();\n        // s.index = stateCount++;\n        return s;\n    }\n    function eof(){\n        return c === null;\n    }\n    function expect(c1){\n        if(c !== c1){\n            throw new E('unexpected character \"' + c + '\",expecting \"' + c1 + '\"');\n        }\n        nc();\n    }\n\n    /**\n     * rexp() -> simpleRE() ('|' simpleRE())*\n     */\n    function rexp(start: State<T>): State<T>{\n        var ret = simpleRE(start);\n        while(!eof() && c === '|'){\n            nc();\n            var es = ns();\n            start.epsilonTo(es);\n            simpleRE(es).epsilonTo(ret);                \n        }\n        return ret;\n    }\n\n    /**\n     * simpleRE() -> ( basicRE() )+\n     */\n    function simpleRE(start: State<T>): State<T>{\n        var ret = start;\n        do{\n            ret = basicRE(ret);\n        }while(!eof() && c !== '|' && c !== ')');\n        return ret;\n    }\n\n    /**\n     * basicRE() -> primitive() ['+'|'*'|'?']\n     */\n    function basicRE(start: State<T>): State<T>{\n        var holder = ns();\n        start.epsilonTo(holder);\n        var ret = primitive(holder);\n        \n        if(c === '*'){\n            nc();\n            ret.epsilonTo(holder);\n            var nn = ns();\n            holder.epsilonTo(nn);\n            return nn;\n        }\n        else if(c === '+'){\n            nc();\n            var count = ns();\n            ret.epsilonTo(count);\n            count.epsilonTo(holder);\n            return count;\n        }\n        else if(c === '?'){\n            nc();\n            var nn2 = ns();\n            holder.epsilonTo(nn2);\n            ret.epsilonTo(nn2);\n            return nn2;\n        }\n        else {\n            return ret;\n        }\n    }\n    /**\n     * primitive() -> \n     *   '(' rexpr() ')'\n     * | '.'\n     * | '[' set() ']'\n     * | '{' NAME '}'\n     * | *\n     */\n    function primitive(start: State<T>): State<T>{\n        notEof();\n        if(c === '('){\n            nc();\n            let ret = rexp(start);\n            expect(')');\n            return ret;\n        }\n        else if(c === '.'){\n            nc();\n            let ret = ns();\n            start.to(ret).chars.addAll();\n            return ret;\n        }\n        else if(c === '['){\n            nc();\n            var neg = c as string === '^';\n            neg && nc();\n            let ret = ns();\n            var set = start.to(ret).chars;\n            neg && set.addAll();\n            while(c as string !== ']' && !eof()){\n                setItem(set,neg);\n            }\n            expect(']');\n            return ret;\n        }\n        else if(c === '{'){\n            nc();\n            var name = '';\n            while(c as string !== '}'){\n                notEof();\n                name += c;\n                nc();\n            }\n            nc();\n            reader.pushTo(name);\n            c = reader.peek();\n            return simpleRE(start);\n        }\n        else {\n            let ret = ns();\n            start.to(ret).chars.add(gchar());\n            return ret;\n        }\n    }\n    function gchar(): number{\n        notEof();\n        if(c === '\\\\'){\n            nc();\n            let ret: number | string = c.charCodeAt(0);\n            switch(c as string){\n                case 't': ret = '\\t';\n                case 'n': ret = '\\n';\n                case 'r': ret = '\\r';\n                case 'x': \n                    nc();\n                    var code = '';\n                    while(c !== null && /[0-9a-fA-F]/.test(c)){\n                        code += c;\n                        nc();\n                    }\n                    return parseInt(code,16);\n                default: ret = c;\n            }\n            nc();\n            return ret.charCodeAt(0);\n        }\n        else {\n            var ret = c.charCodeAt(0);\n            nc();\n            return ret;\n        }\n    }\n    /**\n     * setItem() ->\n     *   gchar() ['-'gchar()]\n     */\n    function setItem(set: CharSet<any>, neg: boolean){\n        var s = gchar();\n        var from = s,to = s;\n        if(c === '-'){\n            nc();\n            to = gchar();\n            if(to < from){\n                throw new E('left hand side must be larger than right hand side in wild card character (got \"' \n                + from.toString(16) + '\" < \"'\n                + to.toString(16) + '\")');\n            }\n        }\n        if(neg){\n            set.remove(from,to);\n        }\n        else {\n            set.add(from,to);\n        }\n    }\n\n    var head = ns();\n    head.isStart = true;\n    var tail = rexp(head);\n    return {\n        result: head,\n        tail: tail,\n    };\n}\n/**\n * compile a string into e-NFA,i.e.,regarde it as a regular \n * expression with all metacharacters escaped.\n * \n * @returns {{result: State,stateCount: number,tail: State}}\n */\nexport function compileRaw<T>(input: string){\n    var sptr = 0;\n    var c = input.charAt(sptr);\n    function ns(){\n        var s = new State<T>();\n        return s;\n    }\n    function nc(){\n        c = input.charAt(++sptr) || null;\n    }\n    function eof(){\n        return c === null;\n    }\n\n    var head = ns();\n    head.isStart = true;\n    var tail = head;\n    while(!eof()){\n        var s = ns();\n        tail.to(s).chars.add(c.charCodeAt(0));\n        tail = s;\n        nc();\n    }\n    return {\n        result: head,\n        tail: tail,\n    };\n}","import { State,EndAction } from './state';\nimport { DFA } from './dfa';\nimport { compile,compileRaw } from './compile';\nimport { console } from '../util/common';\n\n/**\n * create an object that can construct a lexer dfa\n * @api public\n * @param {Object.<string,string>} regs \n */\nfunction lexerBuilder<T>(regs: { [s: string]: string } = {}){\n    var actions = [];\n    var pr = 0;\n    function ns(){\n        var ret = new State<T>();\n        return ret;\n    }\n    var head = ns();\n    return {\n        lexRule: function(reg,id,data,raw){\n            var action = new EndAction<T>();\n            action.priority = pr++;\n            action.id = id;\n            action.data = data || null;\n            var cpd = (!!raw ? compileRaw<T>(reg) : compile<T>(reg,regs));\n            cpd.tail.endAction = action;\n            head.epsilonTo(cpd.result);\n            actions.push(action);\n        },\n        done: function(){\n            head.removeEpsilons();\n            var dhead = head.toDFA();\n            var ret = new DFA<T>(dhead.states);\n            return ret;\n        }\n    };\n}\n\n/**\n * \n * @param {{regexp: string,id: number,data: any,raw: boolean}[]} defs \n * @api public\n * @returns {DFA}\n */\nfunction lexer<T>(defs,regs){\n    var getdef;\n    if(typeof defs !== 'function'){\n        getdef = function(){\n            return defs.shift() || null;\n        }\n    }\n    else {\n        getdef = defs;\n    }\n\n    var bd = lexerBuilder<T>(regs);\n    var def = getdef();\n    while(def !== null){\n        bd.lexRule(def.regexp,def.id,def.data,def.raw);\n        def = getdef();\n    }\n    return bd.done();\n}\n\nexport { lexer,lexerBuilder };","import { BitSet } from '../util/bitset';\nimport { TokenEntry } from './token-entry';\n\nexport class TokenSet extends BitSet{\n    constructor(tcount: number){\n        super(tcount);\n    }\n    toString(g: TokenEntry): string{\n        var ret = '';\n        var first = true;\n        if(this.contains(0)){\n            ret += '\"\"';\n            first = false;\n        }\n        for(var i = 0;i < g.tokenCount;i++){\n            if(this.contains(i + 1)){\n                if(!first){\n                    ret += ',';\n                }\n                ret += '\"' + g.tokens[i].sym + '\"';\n                first = false;\n            }\n        }\n        return ret;\n    }\n}","import { TokenSet } from './token-set';\nimport { Rule, Grammar } from './grammar';\nimport { ListNode } from '../util/list';\nimport { endl } from '../util/io';\n\nexport enum Action {\n    NONE = 1,\n    SHIFT,\n    REDUCE\n}\n\nexport class Item{\n    public marker: number = 0;\n    public lah: TokenSet;\n    public rule: Rule;\n    public isKernel: boolean;\n    public shift: ItemSet = null;\n    public actionType = Action.NONE;\n    public changed: boolean = true;\n    static NULL: Item = {} as Item;\n    constructor(rule: Rule, ik: boolean){\n        this.rule = rule;\n        this.isKernel = ik;\n        this.lah = new TokenSet(rule.g.tokenCount);\n    }\n    canShift(): boolean{\n        return this.rule.rhs.length > this.marker;\n    }\n    getShift(): number{\n        return this.rule.rhs[this.marker];\n    }\n    toString(opt: { showlah?: boolean, showTrailer?: boolean } = {}): string{\n        var showlah = (opt && opt.showlah) || false;\n        var showTrailer = (opt && opt.showTrailer) || false;\n        var r = this.rule;\n        var ret = '[ ' + this.rule.toString(this.marker) + (showlah ? ',{ ' + this.lah.toString(this.rule.g) + ' }' : '') + ' ]';\n    \n        this.isKernel && (ret += '*');\n        if(showTrailer){\n            switch(this.actionType){\n                case Action.NONE: ret += '(-)';break;\n                case Action.SHIFT: ret += '(s' + this.shift.stateIndex + ')';break;\n                case Action.REDUCE: ret += '(r)';break;\n            }\n        }\n        return ret;\n    }\n    hash(): string{\n        return this.rule.index + '-' + this.marker;\n    }\n    hasRRConflictWith(i: Item): boolean{\n        return this.actionType === Action.REDUCE && i.actionType === Action.REDUCE && this.rule.index !== i.rule.index && this.lah.hasIntersection(i.lah);\n    }\n    getFollowSet(set: TokenSet): void{\n        var g = this.rule.g;\n        var i;\n        for(i = this.marker + 1;i < this.rule.rhs.length;i++){\n            var mItem = this.rule.rhs[i];\n            if(g.isToken(mItem)){\n                set.add(mItem + 1);\n                break;\n            }\n            else {\n                //var set1 = g.sym[mItem].firstSet\n                var set1 = g.nts[-mItem - 1].firstSet\n                set.union(set1);\n                set.remove(0);\n                if(!set1.contains(0)){\n                    break;\n                }\n            }\n        }\n        if(i === this.rule.rhs.length){\n            set.union(this.lah);\n        }\n    }\n}\n\nexport class ItemSet implements ListNode<ItemSet>{\n    g: Grammar;\n    it: { [s: string]: Item } = {};\n    complete: boolean = false;\n\n    index: number = -1;\n    stateIndex: number = 0;\n\n    prev: ItemSet = null;\n    next: ItemSet = null;\n    data: ItemSet;\n    merges: number[] = [];\n\n    constructor(g: Grammar){\n        this.g = g;\n        this.data = this;\n    }\n\n    add(rule: Rule, marker: number, ik: boolean, lah: TokenSet, reset: boolean): boolean{\n        var h = rule.index + '-' + marker;\n        var it = this.it[h];\n        if(it === undefined){\n            var n = new Item(rule,ik);\n            n.marker = marker;\n            if(lah){\n                n.lah.union(lah);\n            }\n            this.it[h] = n;\n            return true;\n        }\n        else if(lah){\n            var ret = it.lah.union(lah);\n            if(reset && ret && it.canShift()){\n                it.actionType = Action.NONE;\n            }\n            ret && (it.changed = true);\n            return ret;\n        }\n    }\n    contains(){\n        \n    }\n    closure(): void{\n        var changed = true;\n        var tSet = new TokenSet(this.g.tokenCount);\n        var cela = this;\n        while(changed){\n            changed = false;\n            for(var hash in this.it){\n                var item = this.it[hash];\n                if(item.changed && item.canShift()){\n                    var ritem = item.getShift();\n                    if(ritem < 0){\n                        tSet.removeAll();\n                        item.getFollowSet(tSet);\n                        this.g.forEachRuleOfNt(-ritem - 1,function(rule){\n                            changed = cela.add(rule,0,false,tSet,false) || changed;\n                            return false;\n                        });\n                    }\n                }\n                item.changed = false;\n            }\n        }\n    }\n    toString(opt: { showlah?: boolean, showTrailer?: boolean }): string{\n        var showlah = (opt && opt.showlah) || false;\n        var showTrailer = (opt && opt.showTrailer) || false;\n        var opt2 = { showTrailer: showTrailer };\n        var ret = 's' + this.stateIndex + '';\n        if(this.index !== null){\n            ret += '(i' + this.index;\n        }\n        else {\n            ret += '(i?';\n        }\n        if(this.merges.length > 0){\n            ret += ',merged from ';\n            for(var i = 0;i < this.merges.length;i++){\n                if(i > 0){\n                    ret += ',';\n                }\n                ret += 'i' + this.merges[i];\n            }\n        }\n        ret += ')' + endl;\n        for(var hash in this.it){\n            ret += this.it[hash].toString(opt2) + endl;\n        }\n        return ret;\n    }\n    kernelHash(): string{\n        var ret = 0;\n        for(var hash in this.it){\n            var item = this.it[hash];\n            if(item.isKernel){\n                ret += item.rule.index << 5 + item.rule.index + item.marker;\n            }\n        }\n        return String(ret);\n    }\n    forEach(cb: (it: Item) => void){\n        for(var h in this.it){\n            cb(this.it[h]);\n        }\n    }\n    canMergeTo(s: ItemSet): boolean{\n        for(var h1 in this.it){\n            var it1 = this.it[h1];\n            var found = false,hasConflict = false,hasIdentical = false;\n            for(var h2 in s.it){\n                var it2 = s.it[h2];\n                if(it1.rule.index === it2.rule.index && it1.marker === it2.marker){\n                    hasIdentical = it1.lah.equals(it2.lah);\n                    found = it1.isKernel && it2.isKernel;\n                }\n                hasConflict = hasConflict || it1.hasRRConflictWith(it2);\n                if(it2.isKernel && this.it[h2] === undefined){\n                    return false;\n                }\n            }\n            if(it1.isKernel && !found || hasConflict && !hasIdentical){\n                return false;\n            }\n        }\n        return true;\n    }\n    mergeTo(s: ItemSet): boolean{\n        var ret = false;\n        for(var h in s.it){\n            var it = s.it[h];\n            ret = this.add(it.rule,it.marker,it.isKernel,it.lah,true) || ret;\n        }\n        this.merges.push(s.index);\n        return ret;\n    }\n}\n","\nexport interface ListNode<T>{\n    prev: ListNode<T>;\n    next: ListNode<T>;\n    data: T;\n}\n\nexport class List<T>{\n    public head: ListNode<T>;\n    public tail: ListNode<T>;\n    public size: number = 0;\n    constructor(){\n        this.head = { prev: null, next: null, data: null};\n        this.tail = { prev: null, next: null, data: null};\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    append(n: ListNode<T>): void{\n        n.prev = this.tail.prev;\n        n.next = this.tail;\n        this.tail.prev.next = n;\n        this.tail.prev = n;\n        this.size++;\n    }\n    pull(): T{\n        var n = this.head.next;\n        this.head.next = n.next;\n        n.next.prev = this.head;\n        n.prev = n.next = null;\n        this.size--;\n        return n.data;\n    }\n    isEmpty(): boolean{\n        return this.size === 0;\n    }\n    forEach(cb: (a: T) => void): void{\n        for(var a = this.head.next;a !== this.tail;a = a.next){\n            cb(a.data);\n        }\n    }\n    remove(n: ListNode<T>): void{\n        n.next.prev = n.prev;\n        n.prev.next = n.next;\n        this.size--;\n    }\n    iterator(){\n        let p = this.head;\n        let cela = this;\n        return (): T => {\n            return p !== cela.tail ? (p = p.next, p.data) : null;\n        }\n    }\n}","import { Locatable } from \"../util/located\";\nimport { Position } from \"../parser/node\";\n\nexport enum Assoc {\n    UNDEFINED = 0,\n    LEFT,\n    RIGHT,\n    NON\n};\nexport interface TokenDef {\n    index: number,\n    sym: string,\n    alias: string,\n    pr: number,\n    assoc: Assoc,\n    used: boolean,\n    appears: Position[]\n}\nexport interface TokenEntry{\n    tokenCount: number;\n    tokens: TokenDef[];\n    isToken(t: number): boolean;\n}\nexport function convertTokenToString(t: TokenDef): string{\n    return t.alias === null ? `<${t.sym}>` : `\"${t.alias}\"`;\n}","import { Grammar } from './grammar';\nimport { YYTAB } from '../util/common';\nimport { endl, OutputStream } from '../util/io';\nimport { Action, Item, ItemSet } from './item-set';\nimport { List } from '../util/list';\nimport { convertTokenToString } from './token-entry';\n\nexport interface IParseTable{\n    readonly g: Grammar;\n    readonly stateCount: number;\n    defred: number[];\n    lookupShift(state: number, token: number): Item;\n    lookupGoto(state: number, nt: number): Item;\n};\n\nexport function printParseTable(os: OutputStream, cela: IParseTable, doneList: List<ItemSet>){\n    var g = cela.g;\n    var tokenCount = g.tokenCount;\n    var ntCount = g.nts.length;\n    // function printSet(set: ItemSet, lines: string[]){\n    //     var i = set.stateIndex;\n\n    //     lines.push(`state ${i}`);        \n    //     set.forEach(function(item){\n    //         lines.push(YYTAB + item.toString({ showTrailer: false }));\n    //     });\n    //     if(cela.defred[i] !== -1){\n    //         lines.push(`${YYTAB}default action: reduce with rule ${cela.defred[i]}`);\n    //     }\n    //     else {\n    //         lines.push(YYTAB + 'no default action');\n    //     }\n    //     for(var j = 0;j < tokenCount;j++){\n    //         var item = cela.lookupShift(i,j);\n    //         if(item !== null && item !== Item.NULL){\n    //             if(item.actionType === Action.SHIFT){\n    //                 lines.push(`${YYTAB}${convertTokenToString(g.tokens[j])} : shift, and goto state ${item.shift.stateIndex}`);\n    //             }\n    //             else {\n    //                 lines.push(`${YYTAB}${convertTokenToString(g.tokens[j])} : reduce with rule ${item.rule.index}`);\n    //             }\n    //         }\n    //     }\n    //     for(var j = 0;j < ntCount;j++){\n    //         var item = cela.lookupGoto(i,j);\n    //         if(item !== null){\n    //             lines.push(`${YYTAB}${g.nts[j].sym} : goto state ${item.shift.stateIndex}`);\n    //         }\n    //     }\n    //     lines.push('');\n    // }\n    // let it = doneList.iterator();\n    // let lines: string[] = [];\n    // function writeOne(){\n    //     let set = it();\n    //     if(set !== null){\n    //         lines.length = 0;\n    //         printSet(set, lines);\n    //         os.write(lines.join(endl), writeOne);\n    //     }\n    //     else {\n    //         done && done\n    //     }\n    // }\n    doneList.forEach(function(set){\n        var i = set.stateIndex;\n        var shift = '';\n        var reduce = '';\n        var gotot = '';\n        var defred = '';\n        os.writeln(`state ${i}`);        \n        set.forEach(function(item){\n            os.writeln(YYTAB + item.toString({ showTrailer: false }));\n        });\n        if(cela.defred[i] !== -1){\n            os.writeln(`${YYTAB}default action: reduce with rule ${cela.defred[i]}`);\n        }\n        else {\n            os.writeln(YYTAB + 'no default action');\n        }\n        for(var j = 0;j < tokenCount;j++){\n            var item = cela.lookupShift(i,j);\n            if(item !== null && item !== Item.NULL){\n                if(item.actionType === Action.SHIFT){\n                    shift += `${YYTAB}${convertTokenToString(g.tokens[j])} : shift, and go to state ${item.shift.stateIndex}${endl}`;\n                }\n                else {\n                    reduce += `${YYTAB}${convertTokenToString(g.tokens[j])} : reduce with rule ${item.rule.index}${endl}`;\n                }\n            }\n        }\n        for(var j = 0;j < ntCount;j++){\n            var item = cela.lookupGoto(i,j);\n            if(item !== null){\n                gotot += `${YYTAB}${g.nts[j].sym} : go to state ${item.shift.stateIndex}${endl}`;\n            }\n        }\n        os.writeln(shift + reduce + gotot);\n        os.writeln('');\n    });\n}\n\nexport class ParseTable implements IParseTable{\n    g: Grammar;\n    stateCount: number;\n    shift: Item[];\n    gotot: Item[];\n\n    defred: number[] = null;\n    constructor(g: Grammar, stateCount: number){\n        this.g = g;\n        var tokenCount = g.tokenCount;\n        var ntCount = g.nts.length;\n        this.stateCount = stateCount;\n        this.shift = new Array(tokenCount * stateCount);\n        this.gotot = new Array(ntCount * stateCount);\n        for(var i = 0;i < this.shift.length;i++){\n            this.shift[i] = null;\n        }\n        for(var i = 0;i < this.gotot.length;i++){\n            this.gotot[i] = null;\n        }\n    }\n    forEachShift(cb: (it: Item, state: number, token: number) => any){\n        for(let state = 0; state < this.stateCount; state++){\n            for(let tk = 0; tk < this.g.tokens.length; tk++){\n                let item = this.lookupShift(state, tk);\n                item && cb(item, state, tk);\n            }\n        }\n    }\n    forEachGoto(cb: (it: Item, state: number, nt: number) => any){\n        for(let state = 0; state < this.stateCount; state++){\n            for(let nt = 0; nt < this.g.nts.length; nt++){\n                let item = this.lookupGoto(state, nt);\n                item && cb(item, state, nt);\n            }\n        }\n    }\n    lookupShift(state: number, token: number): Item{\n        return this.shift[this.g.tokenCount * state + token];\n    }\n    lookupGoto(state: number, nt: number): Item{\n        return this.gotot[this.g.nts.length * state + nt];\n    }\n    private _getDefRed(state: number, apool: number[]): number{\n        for(let i = 0; i < apool.length; i++){\n            apool[i] = 0;\n        }\n        for(let tk = 0; tk < this.g.tokenCount; tk++){\n            let item = this.lookupShift(state, tk);\n            item && item.actionType === Action.REDUCE && apool[item.rule.index]++;\n        }\n        let ret = 0;\n        for(let i = 0;i < apool.length;i++){\n            apool[i] > apool[ret] && (ret = i);\n        }\n        return apool[ret] > 0 ? ret : -1;\n    }\n    findDefAct(){\n        this.defred = new Array(this.stateCount);\n        let apool = new Array(this.g.rules.length);\n        for(let i = 0;i < this.stateCount; i++){\n            let def = this._getDefRed(i, apool);\n            this.defred[i] = def;\n            if(def !== -1){\n                for(let tk = 0;tk < this.g.tokens.length;tk++){\n                    let item = this.lookupShift(i, tk);\n                    item && item.actionType === Action.REDUCE && item.rule.index === def &&\n                    (this.shift[this.g.tokenCount * i + tk] = null);\n                }\n            }\n        }\n    }\n}\n","import { BitSet } from '../util/bitset';\nimport { Grammar } from './grammar';\nimport { console,YYTAB } from '../util/common';\nimport { OutputStream,endl } from '../util/io';\nimport { Item,Action,ItemSet } from './item-set';\nimport { List } from '../util/list';\nimport { ParseTable } from './ptable';\nimport { TokenDef, Assoc, convertTokenToString } from './token-entry';\nimport { TokenSet } from './token-set';\n\nenum ConflictType {\n    RR = 0, SR = 1\n};\nexport class Conflict{\n    type: ConflictType;\n    set: ItemSet;\n    token: TokenDef;\n    used: Item;\n    discarded: Item;\n    static cNames: string[] = ['reduce/reduce','shift/reduce'];\n    toString(): string{\n        return `state ${this.set.stateIndex}, ${Conflict.cNames[this.type]} conflict:${endl}` +\n        `${YYTAB}token: ${convertTokenToString(this.token)}${endl}` +\n        `${YYTAB}used rule: ${this.used.toString()}${endl}` +\n        `${YYTAB}discarded rule: ${this.discarded.toString()}`;\n    }\n}\n\nexport function genInitialSet(g: Grammar): ItemSet{\n    var start = g.nts[0].rules[0];\n    var iset = new ItemSet(g);\n    iset.index = 0;\n    var set1 = new TokenSet(g.tokenCount);\n    set1.add(1);// eof\n    iset.add(start,0,true,set1,false);\n    return iset;\n}\n/**\n * implementation of the Hanolee algorithm\n * @param g \n */\nexport function genItemSets(g: Grammar): { result: List<ItemSet>, iterations: number }{\n    var htable = {}; \n    var iterations = 0;\n    function addToTable(iset){\n        var h = iset.kernelHash();\n        if(htable[h] === undefined){\n            htable[h] = [];\n        }\n        htable[h].push(iset);\n    }\n    function forEachInBucket(set,cb){\n        var b = htable[set.kernelHash()];\n        if(b !== undefined){\n            for(var i = 0;i < b.length;i++){\n                if(cb(b[i])) break;\n            }\n        }\n    }\n    var index = 1;\n    var todoList = new List<ItemSet>();\n    var incList = new List<ItemSet>();\n    var doneList = new List<ItemSet>();\n    todoList.append(genInitialSet(g));\n\n    while(!todoList.isEmpty() || !incList.isEmpty()){\n        var comeFrom = null;\n        //phase 1,generate transition item set from incomplete list.\n        if(!incList.isEmpty()){\n            var set = comeFrom = incList.pull();\n            set.forEach(function(item){\n                if(item.actionType === Action.NONE){\n                    console.assert(item.canShift());\n                    var shift = item.getShift();\n                    var newSet = new ItemSet(g);\n                    newSet.index = index++;\n                    todoList.append(newSet);\n                    //mark all the symbols in 'set'\n                    set.forEach(function(item1){\n                        if(item1.canShift()){\n                            var rItem = item1.getShift();\n                            if(rItem === shift){\n                                item1.actionType = Action.SHIFT;\n                                item1.shift = newSet;\n                                newSet.add(item1.rule,item1.marker + 1,true,item1.lah,false);\n                            }\n                        }\n                    });\n                }\n            });\n            set.complete = true;\n            doneList.append(set);\n        }\n\n        //phase 2,find possible merges,and do them.\n        while(!todoList.isEmpty()){\n            var set = todoList.pull();\n            set.closure();\n            set.forEach(function(item){\n                if(!item.canShift()){\n                    item.actionType = Action.REDUCE;\n                }\n            });\n            var merged = null;\n\n            forEachInBucket(set,function(gSet){\n                if(gSet.canMergeTo(set)){\n                    if(gSet.mergeTo(set)){\n                        if(gSet.complete){\n                            merged = gSet;\n                        }\n                    }\n                    //fix previous transition actions to merged set\n                    if(comeFrom !== null){\n                        comeFrom.forEach(function(sItem){\n                            if(sItem.actionType === Action.SHIFT && sItem.shift === set){\n                                sItem.shift = gSet;\n                            }\n                        });\n                    }\n                    set = null;\n                    return true;\n                }\n                return false;\n            });\n            //if set is merged with another complete set,\n            if(merged !== null){\n                doneList.remove(merged);\n                incList.append(merged);\n                merged.complete = false;\n            }\n            //not merged\n            else if(set !== null){\n                incList.append(set);\n                addToTable(set);\n            }\n        }\n        iterations++;\n    }\n    var i = 0;\n    doneList.forEach(function(set){\n        set.stateIndex = i++;\n    });\n\n    return {\n        result: doneList,\n        iterations: iterations,\n    };\n}\n\nexport function genParseTable(g: Grammar, doneList: List<ItemSet>): { result: ParseTable, conflicts: Conflict[] }{\n    var conflicts = [];\n    function resolveSRConflict(set: ItemSet, shift: Item, reduce: Item){\n        var token = g.tokens[shift.getShift()];\n        if(token.assoc !== Assoc.UNDEFINED){\n            var ruleP = reduce.rule.pr;\n            if(ruleP !== -1){\n                if(ruleP > token.pr){\n                    return reduce;\n                }\n                else if(ruleP < token.pr){\n                    return shift;\n                }\n                else {\n                    if(token.assoc === Assoc.LEFT){\n                        return reduce;\n                    }\n                    else if(token.assoc === Assoc.RIGHT){\n                        return shift;\n                    }\n                    else if(token.assoc === Assoc.NON){\n                        return Item.NULL;\n                    }\n                    else {\n                        console.assert(false);\n                    }\n                }\n            }\n        }\n        var cf = new Conflict();\n        cf.type = ConflictType.SR;\n        cf.set = set;\n        cf.token = token;\n        cf.used = shift;\n        cf.discarded = reduce;\n        conflicts.push(cf);\n        return shift;\n    }\n    function resolveRRConflict(set: ItemSet, r1: Item, r2: Item, token: number){\n        let tdef = g.tokens[token];\n        if(r1.rule.pr !== -1 && r2.rule.pr !== -1 && r1.rule.pr !== r2.rule.pr){\n            return r1.rule.pr > r2.rule.pr ? r1 : r2;\n        }\n        else {\n            var used = r1.rule.index > r2.rule.index ? r2 : r1;\n            var discarded = r1.rule.index > r2.rule.index ? r1 : r2;\n            var cf = new Conflict();\n            cf.type = ConflictType.RR;\n            cf.set = set;\n            cf.token = tdef;\n            cf.used = used;\n            cf.discarded = discarded;\n            conflicts.push(cf);\n            return used;\n        }\n    }\n    var ptable = new ParseTable(g,doneList.size);\n    doneList.forEach(function(set){\n        set.forEach(function(item){\n            if(item.actionType === Action.SHIFT){\n                var sItem = item.getShift();\n                if(g.isToken(sItem)){\n                    // do shift\n                    var tindex = set.stateIndex * g.tokenCount + sItem;\n                    var cItem = ptable.shift[tindex];\n                    if(cItem !== null){\n                        // shift-reduce conflict\n                        if(cItem.actionType === Action.REDUCE){\n                            ptable.shift[tindex] = resolveSRConflict(set,item,cItem);\n                        }\n                        else {\n                            // shift-shift conflicts shouldnt occur\n                            console.assert(cItem.shift === item.shift);\n                        }\n                    }\n                    else {\n                        ptable.shift[tindex] = item;\n                    }\n                }\n                else {\n                    // do goto\n                    var tindex = set.stateIndex * g.nts.length + (-sItem - 1);\n                    ptable.gotot[tindex] = item;\n                }\n            }\n            else if(item.actionType === Action.REDUCE){\n                for(var i = 0;i < g.tokenCount;i++){\n                    if(item.lah.contains(i + 1)){\n                        var index = set.stateIndex * g.tokenCount + i;\n                        var cItem = ptable.shift[index];\n                        if(cItem !== null){\n                            if(cItem.actionType === Action.REDUCE){\n                                ptable.shift[index] = resolveRRConflict(set,cItem,item,i);\n                            }\n                            else if(cItem.actionType === Action.SHIFT){\n                                ptable.shift[index] = resolveSRConflict(set,cItem,item);\n                            }\n                        }\n                        else {\n                            ptable.shift[index] = item;\n                        }\n                    }\n                }\n            }\n            else {\n                console.assert(false);\n            }\n        });\n    });\n\n    return {\n        result: ptable,\n        conflicts: conflicts\n    };\n}","import { JsccError as E } from '../util/E';\nimport { Action, Item } from '../grammar/item-set';\nimport { Grammar, Rule } from '../grammar/grammar';\nimport { ParseTable, IParseTable } from '../grammar/ptable';\nimport { TokenDef, convertTokenToString } from '../grammar/token-entry';\n\nfunction testParse(g: Grammar, pt: IParseTable, tokens: string[]): string[]{\n    var tk: TokenDef[] = [];\n    for(let tname of tokens){\n        let tdef: TokenDef;\n        if(/<[^>]+>/.test(tname)){\n            tdef = g.findTokenByName(tname.substr(1, tname.length - 2));\n            if(tdef === null){\n                throw new E(`cannot recognize ${tname} as a token`);\n            }\n        }\n        else {\n            let defs = g.findTokensByAlias(tname);\n            if(defs.length === 0){\n                throw new E(`cannot recognize \"${tname}\" as a token`);\n            }\n            if(defs.length > 1){\n                let msg = '';\n                for(let def of defs){\n                    msg += `<${def.sym}> `;\n                }\n                throw new E(`cannot recognize \"${tname}\" as a token, since it can be ${msg}`);\n            }\n            tdef = defs[0];\n        }\n        tk.push(tdef);\n    }\n    var state = [ 0 ];\n    var stack: string[] = [];\n    var ret: string[] = [];\n    function s(){\n        return state[state.length - 1];\n    }\n    function shift(ns: number){\n        state.push(ns);\n        let tdef = tk.shift();\n        // tdef.alias === null ? stack.push(`<${tdef.sym}>`) : stack.push(tdef.alias);\n        stack.push(convertTokenToString(tdef));\n        // stack.push(g.tokens[tk.shift()].sym);\n    }\n    function reduce(rule: Rule){\n        state.length -= rule.rhs.length;\n        stack.length -= rule.rhs.length;\n        stack.push(rule.lhs.sym);\n        var gotot = pt.lookupGoto(s(),rule.lhs.index).shift.stateIndex;\n        state.push(gotot);\n    }\n    function dump(){\n        var ret = '';\n        for(let s of stack){\n            ret += s + ' ';\n        }\n        ret += '| ';\n        for(let tdef of tk){\n            ret += convertTokenToString(tdef);\n            ret += ' ';\n        }\n        return ret;\n    }\n    ret.push(dump());\n    do{\n        let item = pt.lookupShift(s(),tk[0] ? tk[0].index : 0);\n        if(item !== null){\n            if(item === Item.NULL){\n                ret.push('syntax error!');\n                break;\n            }\n            else if(item.actionType === Action.SHIFT){\n                if(tk.length === 0){\n                    ret.push('accepted!');\n                    break;\n                }\n                shift(item.shift.stateIndex);\n            }\n            else if(item.actionType === Action.REDUCE){\n                if(reduce(item.rule)){\n                    break;\n                }\n            }\n            else {\n                console.assert(false);\n            }\n        }\n        else {\n            let ri = pt.defred[s()];\n            if(ri !== -1){\n                reduce(g.rules[ri]);\n            }\n            else {\n                ret.push('syntax error!');\n                break;\n            }\n        }\n        ret.push(dump());\n    }while(true);\n    return ret;\n}\n\nexport { testParse }","\nexport interface Table{\n    readonly rows: number;\n    readonly columns: number;\n    isEmpty(i: number,j: number): boolean;\n    emptyCount(row: number): number;\n}\nfunction sorter(cmp: (a: RowEntry, b: RowEntry) => number){\n    var a: RowEntry[] = [];\n    function insert(i,obj){\n        a.push(null);\n        for(var j = a.length - 1;j > i;j--){\n            a[j] = a[j - 1];\n        }\n        a[i] = obj;\n    }\n    return {\n        add(b: RowEntry): void{\n            var i: number;\n            for(i = 0;i < a.length;i++){\n                if((i === 0 || cmp(b,a[i - 1]) >= 0) && cmp(b,a[i]) <= 0){\n                    break;\n                }\n            }\n            insert(i,b);\n        },\n        done(): RowEntry[]{\n            return a;\n        }\n    };\n}\nclass RowEntry{\n    public dp: number | null = 0;\n    constructor(public emptyCount: number, public row: number){}\n}\n\n/**\n * implementation of double displacement first-fit-decreasing method\n */\nexport function compress(source: Table): { dps: number[], len: number }{\n    function empty(i: number, j: number): boolean{\n        j = j - sorted[i].dp;\n        return j < 0 || j >= source.columns || source.isEmpty(sorted[i].row,j);\n    }\n    function fit(i: number, dp: number): boolean{\n        for(var j = 0;j < source.columns;j++){\n            if(!empty(i,j)){\n                for(var k = 0;k < i;k++){\n                    if(!empty(k,j + dp)){\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    function getFitdp(i: number): number{\n        var dp = 0;\n        while(-dp < source.columns && source.isEmpty(sorted[i].row,-dp)){ dp--; }\n        while(!fit(i,dp)){ dp++; }\n        return dp;\n    }\n    var tmpsorted = sorter((a, b) => {\n        return a.emptyCount < b.emptyCount ? -1 :\n            a.emptyCount > b.emptyCount ? 1 : 0;\n    });\n    for(var i = 0;i < source.rows;i++){\n        tmpsorted.add(new RowEntry(source.emptyCount(i),i));\n    }\n\n    var sorted = tmpsorted.done();\n    //the row with least empty entries has displacement 0\n    var maxdp = 0, mindp = 0;\n    var dps = new Array(source.rows);\n    let initDp = 0;\n    while(-initDp < source.columns && source.isEmpty(sorted[0].row, -initDp)){ initDp--; }\n    dps[sorted[0].row] = sorted[0].dp = initDp;\n    \n    for(var i = 1;i < sorted.length;i++){\n        let row = sorted[i].row;\n        let dp = getFitdp(i);\n        dps[row] = sorted[i].dp = dp;\n        dp > maxdp && (maxdp = dp);\n        dp < mindp && (mindp = dp);\n    }\n\n    // for(var i = 0;i < dps.length;i++){\n    //     dps[i] -= mindp;\n    // }\n\n    return {\n        dps: dps,\n        len: maxdp + source.columns// - mindp\n    };\n}\n","import { ParseTable, IParseTable } from './ptable';\nimport { compress, Table } from '../util/compress';\nimport { Item } from './item-set';\nimport { Grammar } from './grammar';\nimport { console } from '../util/common';\n\nfunction action(pt: ParseTable): Table{\n    let emCount: number[] = [];\n    for(let state = 0;state < pt.stateCount;state++){\n        emCount.push(0);\n        for(let tk = 0;tk < pt.g.tokens.length;tk++){\n            pt.lookupShift(state, tk) === null && (emCount[state]++);\n        }\n    }\n    return {\n        rows: pt.stateCount,\n        columns: pt.g.tokens.length,\n        isEmpty(state, token){\n            return pt.lookupShift(state, token) === null;\n        },\n        emptyCount(state){\n            return emCount[state];\n        }\n    };\n}\n\nfunction gotot(pt: ParseTable): Table{\n    let emCount: number[] = [];\n    for(let state = 0;state < pt.stateCount;state++){\n        emCount.push(0);\n        for(let nt = 0;nt < pt.g.nts.length;nt++){\n            pt.lookupShift(state, nt) === null && (emCount[state]++);\n        }\n    }\n    return {\n        rows: pt.stateCount,\n        columns: pt.g.nts.length,\n        isEmpty(state, nt){\n            return pt.lookupGoto(state, nt) === null;\n        },\n        emptyCount(nt){\n            return emCount[nt];\n        }\n    };\n}\n\nfunction initArray<T>(len: number, cb: (i: number) => T){\n    let ret: T[] = new Array(len);\n    for(let i = 0; i < len; i++){\n        ret[i] = cb(i);\n    }\n    return ret;\n}\n\nexport class CompressedPTable implements IParseTable{\n    g: Grammar;\n    stateCount: number;\n    // action table\n    pact: Item[];\n    // displacement of action table\n    disact: number[];\n    // check \n    checkact: number[];\n    // default reduction\n    defred: number[];\n\n    pgoto: Item[];\n    disgoto: number[];\n    checkgoto: number[];\n\n    constructor(ptable: ParseTable){\n        this.g = ptable.g;\n        this.defred = ptable.defred;\n        this.stateCount = ptable.stateCount;\n\n        let actionCResult = compress(action(ptable));\n        let gotoCResult = compress(gotot(ptable));\n        this.disact = actionCResult.dps;\n        this.disgoto = gotoCResult.dps;\n\n        this.pact = initArray<Item>(actionCResult.len, () => null);\n        this.checkact = initArray<number>(actionCResult.len, () => 0);\n        let cela = this;\n        ptable.forEachShift((it, state, token) => {\n            console.assert(cela.pact[cela.disact[state] + token] === null);\n            cela.pact[cela.disact[state] + token] = it;\n            cela.checkact[cela.disact[state] + token] = state;\n        });\n\n        this.pgoto = initArray<Item>(gotoCResult.len, () => null);\n        this.checkgoto = initArray<number>(gotoCResult.len, () => 0);\n        ptable.forEachGoto((it, state, nt) => {\n            console.assert(cela.pgoto[cela.disgoto[state] + nt] === null);\n            cela.pgoto[cela.disgoto[state] + nt] = it;\n            cela.checkgoto[cela.disgoto[state] + nt] = state;\n        });\n    }\n    lookupShift(state: number, token: number){\n        let index = this.disact[state] + token;\n        if(index >= 0 && index < this.pact.length && this.checkact[index] === state){\n            return this.pact[this.disact[state] + token];\n        }\n        else {\n            return null;\n        }\n    }\n    lookupGoto(state: number, nt: number){\n        let index = this.disgoto[state] + nt;\n        if(index >= 0 && index < this.pgoto.length && this.checkgoto[index] === state){\n            return this.pgoto[this.disgoto[state] + nt];\n        }\n        else {\n            return null;\n        }\n    }\n}\n","import { TokenSet } from './token-set';\nimport { TokenDef, TokenEntry, Assoc, convertTokenToString } from './token-entry'\nimport { LexAction } from '../lexer/action';\nimport { Context } from '../util/context';\nimport { CompilationError } from '../util/E';\nimport { Position } from '../parser/node';\n\nexport interface NtDef{\n    index: number,\n    sym: string,\n    firstSet: TokenSet,\n    used: boolean,\n    rules: Rule[],\n    parents: { rule: Rule, pos: number }[];\n}\ninterface Located<T>{\n    val: T;\n    pos: Position\n}\nexport class Rule{\n    public pr: number = -1;\n    public rhs: number[] = [];\n    public action: LexAction[] = null;\n    public index = 0;\n    public vars: { [s: string]: Located<number> } = {};\n    public usedVars: { [s: string]: Located<number> } = {};\n    constructor(\n        public g: Grammar, \n        public lhs: NtDef,\n        public pos: Position \n    ){}\n\n    calcPr(){\n        if(this.pr === -1){\n            for(let i = this.rhs.length - 1; i >= 0; i--){\n                let item = this.rhs[i];\n                if(item >= 0){\n                    this.g.tokens[item].assoc !== Assoc.UNDEFINED && \n                    (this.pr = this.g.tokens[item].pr);\n                }\n            }\n        }\n    }\n    getVarSp(v: string, ecb: (msg: string) => any): number{\n        if(this.lhs.parents.length !== 1){\n            if(this.lhs.parents.length > 1){\n                ecb(\"LHS of the rule is referenced by more than one rule\");\n            }\n            else {\n                ecb(\"this rule is unreachable\");\n            }\n            return null;\n        }\n        let ret = this.rhs.length;\n        let pos = this.lhs.parents[0].pos;\n        let rule: Rule = this.lhs.parents[0].rule;\n        while(true){\n            let vdef = rule.vars[v];\n            if(vdef !== undefined && vdef.val < pos){\n                ret += pos - vdef.val;\n                return ret;\n            }\n            if(rule.lhs.parents.length !== 1){\n                if(rule.lhs.parents.length > 1){\n                    ecb(`\"${rule.lhs.sym}\" is referenced by more than one rule or unreachable`);\n                }\n                else {\n                    ecb(\"variable is undefined\");\n                }\n                return null;\n            }\n            ret += pos;\n            pos = rule.lhs.parents[0].pos;\n            rule = rule.lhs.parents[0].rule;\n        }\n    }\n    public toString(marker?: number){\n        var ret = this.index + ': ' + this.lhs.sym + ' =>';\n        for(var i = 0;i < this.rhs.length;i++){\n            var r = this.rhs[i];\n            if(marker === i){\n                ret += ' .';\n            }\n            if(r >= 0){\n                // ret += ' <' + this.g.tokens[r].sym + '>';\n                ret += ' ' + convertTokenToString(this.g.tokens[r]);\n            }\n            else {\n                ret += ' ' + this.g.nts[-r - 1].sym;\n            }\n        }\n        if(marker === this.rhs.length){\n            ret += ' .';\n        }\n        return ret;\n    }\n}\n\nexport class Grammar implements TokenEntry{\n    public tokens: TokenDef[] = [];\n    public tokenCount: number = 0;\n    public nts: NtDef[] = [];\n    public rules: Rule[] = [];\n\n    isToken(t: number): boolean{\n        return t >= 0;\n    }\n\n    forEachRule(cb: (index: number, rule: Rule) => void): void{\n        for(var i = 0;i < this.nts.length;i++){\n            var rules = this.nts[i].rules;\n            for(var j = 0;j < rules.length;j++){\n                cb(i,rules[j]);\n            }\n        }\n    }\n    forEachRuleOfNt(lhs: number, cb: (rule: Rule) => boolean): void{\n        var rules = this.nts[lhs].rules;\n        for(var j = 0;j < rules.length;j++){\n            if(cb(rules[j])){\n                break;\n            }\n        }\n    }\n    genFirstSets(): void{\n        var changed = true;\n        let mask = new TokenSet(this.tokens.length);\n        mask.addAll();\n        mask.remove(0);\n        while(changed){\n            changed = false;\n            // iterate for each non terminal\n            for(var nt = 0;nt < this.nts.length;nt++){\n                var rules = this.nts[nt].rules;\n                var firstSet = this.nts[nt].firstSet;\n                for(var j = 0;j < rules.length;j++){\n                    var rule = rules[j];\n                    for(var k = 0;k < rule.rhs.length;k++){\n                        var ritem = rule.rhs[k];\n                        if(this.isToken(ritem)){\n                            changed = firstSet.add(ritem + 1) || changed;\n                            break;\n                        }\n                        else {\n                            ritem = -ritem - 1;\n                            if(nt !== ritem){\n                                changed = firstSet.union(this.nts[ritem].firstSet, mask) || changed;\n                            }\n                            if(!this.nts[ritem].firstSet.contains(0)){\n                                break;\n                            }\n                        }\n                    }\n                    k === rule.rhs.length && (changed = firstSet.add(0) || changed);\n                }\n            }\n        }\n    }\n    toString(opt: { endl?: string, escape?: boolean, firstSets?: boolean } = {}){\n        opt = opt || {};\n        var endl = opt.endl || endl;\n        var escape = opt.escape || false;\n        var ret = '';\n        this.forEachRule((lhs, rule) => {\n            var s = rule.toString();\n            ret += s + endl;\n        });\n        if(opt.firstSets){\n            for(var i = 0;i < this.nts.length;i++){\n                var s = this.nts[i];\n                ret += `First(${s.sym}) = { ${s.firstSet.toString(this)} }${endl}`;\n            }\n        }\n        if(escape){\n            ret = ret.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n        }\n        return ret.replace(/\\n/g,endl);\n    }\n    findTokenByName(t: string): TokenDef{\n        for(let tk of this.tokens){\n            if(tk.sym === t){\n                return tk;\n            }\n        }\n        return null;\n    }\n    findTokensByAlias(t: string): TokenDef[]{\n        let ret: TokenDef[] = [];\n        for(let tk of this.tokens){\n            tk.alias === t && ret.push(tk);\n        }\n        return ret;\n    }\n}\n","import { Grammar } from '../grammar/grammar.js';\nimport { LexAction } from '../lexer/action';\nimport { DFA } from '../lexer/dfa';\nimport { JNode, newNode } from './node';\n\nexport class File{\n    name: string;\n    grammar: Grammar = null;\n    lexDFA: DFA<LexAction[]>[] = [];\n    opt: {[s: string]: { name: JNode, val: JNode }} = {};\n    prefix: string = 'jj';\n    header: JNode[] = [];\n    output: JNode = null;\n    extraArgs: JNode = null;\n    initArg: JNode = null;\n    initBody: JNode = null;\n    epilogue: JNode = null;\n    sematicType: JNode = null;\n}\n","// export interface Coroutine<T>{\n//     run(a: T): void;\n//     fail(): void;\n// };\n\nexport type Coroutine<T> = (success: boolean, data: T) => any;\n\nexport class CoroutineMgr<T>{\n    private _blocked: {[s: string]: Coroutine<T>[]} = {};\n\n    constructor(public getRes: (s: string) => T){}\n\n    wait(s: string, cr: Coroutine<T>){\n        let r = this.getRes(s);\n        if(r === undefined){\n            this._blocked[s] || (this._blocked[s] = []);\n            this._blocked[s].push(cr);\n        }\n        else {\n            cr(true, r);\n        }\n    }\n    signal(s: string, data: T){\n        let crs = this._blocked[s];\n        if(crs !== undefined){\n            for(let cr of crs){\n                cr(true, data);\n            }\n            delete this._blocked[s];\n        }\n    }\n    fail(){\n        for(let s in this._blocked){\n            for(let cr of this._blocked[s]){\n                cr(false ,null);\n            }\n        }\n    }\n}","import { endl } from \"../util/io\";\n\nexport interface Position{\n    startLine: number;\n    startColumn: number;\n    endLine: number;\n    endColumn: number;\n}\nexport interface JNode extends Position{\n    val: string;\n    ext: any;\n}\nexport function newNode(val: string): JNode{\n    return {\n        val: val,\n        ext: null,\n        startLine: -1,\n        startColumn: 0,\n        endLine: 0,\n        endColumn: 0\n    };\n}\nexport function nodeBetween(from: Position, to: Position, val: string){\n    return {\n        val: val,\n        ext: null,\n        startLine: from.startLine,\n        startColumn: from.startColumn,\n        endLine: to.endLine,\n        endColumn: to.endColumn\n    };\n}\nexport function posToString(pos: Position){\n    if(pos.startLine !== -1){\n        return `line ${pos.startLine + 1}, column ${pos.startColumn + 1}`;\n    }\n    else {\n        return '<internal-position>';\n    }\n}\nexport function markPosition(pos: Position, lines: string[], marker: string = '^'): string{\n    function repeat(s: string, t: number){\n        let ret = '';\n        while(t --> 0){\n            ret += s;\n        }\n        return ret;\n    }\n    function width(s: string){\n        let ret = 0;\n        for(let i = 0;i < s.length; i++){\n            ret += s.charCodeAt(i) > 0xff ? 2 : 1;\n        }\n        return ret;\n    }\n    if(pos.startLine !== -1){\n        let ret = `(line ${pos.startLine + 1}, column ${pos.startColumn + 1}):` + endl;\n        let line = pos.startLine, col = pos.startColumn;\n        ret += lines[line] + endl;\n        ret += repeat(' ', col);\n        let length = width(lines[line]);\n        while(line <= pos.endLine && col <= pos.endColumn){\n            ret += marker;\n            if(col++ >= length){\n                col = 0;\n                line++;\n                ret += endl + lines[line] + endl;\n                length = width(lines[line]);\n            }\n        }\n        return ret;\n    }\n    else {\n        return '<internal position>';\n    }\n}","import { State, Arc, EndAction } from './state';\nimport { Context } from '../util/context';\nimport { CompilationError, JsccError } from '../util/E';\nimport { DFA } from './dfa';\nimport { Coroutine, CoroutineMgr } from '../util/coroutine';\nimport { LexAction } from './action';\nimport { markPosition, Position, JNode, newNode } from '../parser/node';\nimport { endl } from '../util/io';\n\n// internal \n// these two are copied from the scanner source code of typescript2.6\nconst unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\nconst unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\n\nconst unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\nconst unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, ];\n\nclass CmdArray{\n    opcodes: (() => void)[] = [];\n    constructor(public label: string){}\n}\n\ninterface varDef{\n    pos: Position;\n    cmds: CmdArray;\n};\nexport interface LexBuilder<T>{\n    prepareVar(vname: JNode);\n    endVar();\n    prepareLex();\n    selectState(s: string);\n    newState();\n    end(action: T, label: string);\n    enterUnion();\n    endUnionItem();\n    leaveUnion();\n    enterSimple();\n    simplePostfix(postfix: '' | '?' | '+' | '*');\n    addString(s: string);\n    addVar(vname: JNode);\n    beginSet(inverse: boolean);\n    addSetItem(from: JNode, to: JNode);\n    addSetItemRaw(from: number, to: number);\n    endSet();\n    importVar(n: JNode);\n    build(): DFA<T>[];\n    getPossibleAlias(): string;\n    readonly requiringState: CoroutineMgr<number>;\n}\n\nexport function createLexBuilder<T>(ctx: Context): LexBuilder<T>{\n    let _head: State<T> = new State<T>();\n    let _currentState: State<T> = null;\n    let _unionStack: { head: State<T>, tail: State<T> }[] = [];\n    // naive stack    +1s\n    let  _simpleStack: State<T>[] = [];\n    let _currentArc: Arc<T> = null;\n    let _isInverse: boolean = false;\n    let possibleAlias: string = null;\n    let _first = false;\n\n    let _scount = 0;\n    let _regexpVars: {[s: string]: varDef} = {};\n    let _states: CmdArray[] = [new CmdArray('')];\n\n    let _stateMap: {[s: string]: number} = { DEFAULT: 0 };\n    let requiringState: CoroutineMgr<number>;\n    let _selectedStates: CmdArray[] = [];\n    let _selectedVar: CmdArray = null;\n\n    // exec\n    let _ar: { pc: number, cmds: CmdArray }[] = [];\n\n    let internalLexVars: {[s: string]: () => any} = {\n        'es3UnicodeIDStart': () => loadSet(unicodeES3IdentifierStart),\n        'es3UnicodeIDPart': () => loadSet(unicodeES3IdentifierPart),\n        'es5UnicodeIDStart': () => loadSet(unicodeES5IdentifierStart),\n        'es5UnicodeIDPart': () => loadSet(unicodeES5IdentifierPart),\n    };\n\n    requiringState = new CoroutineMgr<number>(s => _stateMap[s]);\n    // loadInternal();\n    return {\n        prepareVar,\n        endVar,\n        prepareLex,\n        selectState,\n        newState,\n        end,\n        enterUnion,\n        endUnionItem,\n        leaveUnion,\n        enterSimple,\n        simplePostfix,\n        addString,\n        addVar,\n        beginSet,\n        addSetItem,\n        addSetItemRaw,\n        endSet,\n        build,\n        importVar,\n        getPossibleAlias: () => possibleAlias,\n        requiringState\n    };\n\n    function _emit(func: () => void){\n        if(_selectedVar !== null){\n            _selectedVar.opcodes.push(func);\n        }\n        else {\n            for(let sn of _selectedStates){\n                sn.opcodes.push(func);\n            }\n        }\n    }\n    function _exec(a: CmdArray): DFA<T>{\n        _head = _currentState = new State<T>();\n        _head.isStart = true;\n        _unionStack.length = 0;\n        _simpleStack.length = 0;\n        _currentArc = null;\n        _isInverse = false;\n\n        _ar.length = 0;\n        _ar.push({\n            pc: 0,\n            cmds: a\n        });\n        while(_ar.length > 0){\n            let top = _ar[_ar.length - 1];\n            top.cmds.opcodes[top.pc++]();\n            top = _ar[_ar.length - 1];\n            top.pc >= top.cmds.opcodes.length && _ar.pop();\n        }\n        _head.removeEpsilons();\n        var dhead = _head.toDFA();\n        var ret = new DFA<T>(dhead.states);\n        return ret;\n        //return null;\n    }\n    function singlePosErr(msg: string, pos: Position){\n        ctx.requireLines((ctx, lines) => {\n            ctx.err(new JsccError(msg + ' ' + markPosition(pos, lines), 'CompilationError'));\n        });\n    }\n    function redefineErr(what: string, prev: Position, current: Position){\n        ctx.requireLines((ctx, lines) => {\n            let msg = what + ' ' + markPosition(current, lines) + endl;\n            msg += 'previous defination was at ' + markPosition(prev, lines);\n            ctx.err(new JsccError(msg));\n        });\n    }\n\n    function prepareVar(vname: JNode){\n        let vdef = _regexpVars[vname.val];\n        if(vdef !== undefined){\n            redefineErr(`variable \"${vname.val}\" was already defined`, vdef.pos, vname);\n        }\n        vdef = _regexpVars[vname.val] = {\n            pos: vname,\n            cmds: new CmdArray(vname.val)\n        };\n        _selectedVar = vdef.cmds;\n    }\n    function endVar(){\n        _selectedVar = null;\n    }\n\n    function prepareLex(){\n        _selectedStates.length = 0;\n    }\n    function selectState(s: string){\n        var sn = _stateMap[s];\n        if(sn === undefined){\n            sn = _stateMap[s] = _states.length;\n            _states.push(new CmdArray(''));\n            requiringState.signal(s, sn);\n        }\n        _selectedStates.push(_states[_stateMap[s]]);\n    }\n\n    function newState(){\n        _first = true;\n        possibleAlias = null;\n        _emit(() => {\n            _currentState = new State<T>();\n            _head.epsilonTo(_currentState);\n        });\n    }\n    function end(action: T, label: string = '(untitled)'){\n        for(let sn of _selectedStates){\n            sn.label = `<${label}>`;\n        }\n        _emit(() => {\n            let ac = new EndAction<T>();\n            ac.id = ac.priority = _scount++;\n            ac.data = action;\n            _currentState.endAction = ac;\n        });\n    }\n\n    //#region union\n    function enterUnion(){\n        _emit(() => {\n            _unionStack.push({\n                head: _currentState,\n                tail: new State<T>()\n            });\n        });\n    }\n    function endUnionItem(){\n        _emit(() => {\n            let top = _unionStack[_unionStack.length - 1];\n            _currentState.epsilonTo(top.tail);\n            _currentState = top.head;\n        });\n    }\n    function leaveUnion(){\n        _emit(() => {\n            _currentState = _unionStack.pop().tail;\n        });\n    }\n    //#endregion\n\n    //#region simple\n    function enterSimple(){\n        _emit(() => {\n            _simpleStack.push(_currentState);\n        });\n    }\n    function simplePostfix(postfix: '' | '?' | '+' | '*'){\n        postfix === '' || (possibleAlias = null, _first = false);\n        _emit(() => {\n            let top = _simpleStack.pop();\n            if(postfix === '?'){\n                top.epsilonTo(_currentState);\n            }\n            else if(postfix === '+'){\n                _currentState.epsilonTo(top);\n            }\n            else if(postfix === '*'){\n                _currentState.epsilonTo(top);\n                _currentState = top;\n            }\n        });\n    }\n\n    //#region primitive\n    function addString(s: string){\n        if(_first){\n            possibleAlias = s;\n            _first = false;\n        }\n        else {\n            possibleAlias = null;\n        }\n        _emit(() => {\n            for(let i = 0;i < s.length;i++){\n                let ns = new State<T>();\n                _currentState.to(ns).chars.add(s.charCodeAt(i));\n                _currentState = ns;\n            }\n        });\n    }\n    function addVar(vname: JNode){\n        _first = false;\n        possibleAlias = null;\n        _emit(() => {\n            let vdef = _regexpVars[vname.val];\n            if(vdef === undefined){\n                singlePosErr(`use of undefined variable \"${vname.val}\"`, vname);\n                return;\n            }\n            let cmds = vdef.cmds;\n            // check for circular dependence\n            for(let i = 0;i < _ar.length;i++){\n                let aitem = _ar[i];\n                if(aitem.cmds === cmds){\n                    let msg = `circular dependence in lexical variable detected: ${cmds.label}`;\n                    for(i++;i < _ar.length;i++){\n                        msg += ` -> ${_ar[i].cmds.label}`;\n                    }\n                    msg += ` -> ${cmds.label}`;\n                    singlePosErr(msg, vname);\n                    // Don't stop executing, for detecting furthur errors.\n                    return;\n                }\n            }\n            _ar.push({\n                pc: 0,\n                cmds: cmds\n            });\n        });\n    }\n    function beginSet(inverse: boolean){\n        _first = false;\n        possibleAlias = null;\n        _emit(() => {\n            _isInverse = inverse;\n            let ns = new State<T>();\n            _currentArc = _currentState.to(ns);\n            _currentState = ns;\n            inverse && _currentArc.chars.addAll();\n        });\n    }\n    function addSetItem(from: JNode, to: JNode){\n        if(from.val.length !== 1){\n            // ctx.err(new CompilationError(`character expected in union, got \"${from}\"`, line1));\n            singlePosErr(`character expected in union, got \"${from.val}\"`, from);\n            return;\n        }\n        if(from !== to && to.val.length !== 1){\n            // ctx.err(new CompilationError(`character expected in union, got \"${to}\"`, line2));\n            singlePosErr(`character expected in union, got \"${to.val}\"`, to);\n            return;\n        }\n        if(from.val.charCodeAt(0) > to.val.charCodeAt(0)){\n            singlePosErr(\n                `left hand side must be larger than right hand side in wild card character (got '${from.val}' > '${to.val}')`\n            , to);\n            return;\n        }\n        addSetItemRaw(from.val.charCodeAt(0), to.val.charCodeAt(0));\n    }\n    function addSetItemRaw(from: number, to: number){\n        _emit(() => {\n            _isInverse ? \n            _currentArc.chars.remove(from, to) : \n            _currentArc.chars.add   (from, to);\n        });\n    }\n    function endSet(){\n        _emit(() => {\n            _currentArc = null;\n        });\n    }\n\n    function build(): DFA<T>[]{\n        let dfas: DFA<T>[] = [];\n        for(let state of _states){\n            dfas.push(_exec(state));\n        }\n        requiringState.fail();\n        return dfas;\n    }\n    function loadSet(arcs: number[]){\n        beginSet(false);\n        for(let i = 0, _a = arcs; i < _a.length; i += 2){\n            addSetItemRaw(_a[i], _a[i + 1]);\n        }\n        endSet();\n    }\n    function importVar(vn: JNode){\n        let cb = internalLexVars[vn.val];\n        if(cb === undefined){\n            singlePosErr(`import variable \"${vn.val}\" does not exist`, vn);\n            return;\n        }\n        cb();\n    }\n    //#endregion\n}","import { TokenDef } from \"../grammar/token-entry\";\nimport { CodeGenerator } from '../codegen/code-generator';\n\nexport interface LexAction{\n    toCode(c: CodeGenerator);\n    token: number;\n};\n// export type LexAction = (c: CodeGenerator) => any; \nfunction noToken(){\n    return -1;\n}\nfunction noCode(c: CodeGenerator){\n\n}\n\nexport function returnToken(tk: TokenDef): LexAction{\n    return {\n        toCode: noCode,\n        token: tk.index\n    };\n}\n\nexport function pushState(n: number): LexAction{\n    return {\n        toCode(c){\n            c.pushLexState(n);\n        },\n        token: -1\n    };\n}\n\nexport function popState(): LexAction{\n    return {\n        toCode(c){\n            c.popLexState();\n        },\n        token: -1\n    };\n}\n\nexport function blockAction(b: string, line: number): LexAction{\n    return {\n        toCode(c){\n            c.addBlock(b, line);\n        },\n        token: -1\n    };\n}\n\nexport function setImg(img: string): LexAction{\n    return {\n        toCode(c){\n            c.setImg(img);\n        },\n        token: -1\n    };\n}","import { Grammar,Rule, NtDef } from '../grammar/grammar';\nimport { File } from './file';\nimport { BitSet } from '../util/bitset';\nimport { TokenSet } from '../grammar/token-set';\nimport { Assoc, TokenDef } from '../grammar/token-entry';\nimport { CompilationError as E, JsccError, JsccWarning, CompilationError } from '../util/E';\nimport { Context } from '../util/context';\nimport { LexBuilder, createLexBuilder } from '../lexer/builder';\nimport { LexAction, pushState } from '../lexer/action';\nimport { Coroutine, CoroutineMgr } from '../util/coroutine';\nimport { Located } from '../util/located';\nimport { JNode, newNode, markPosition, Position, posToString } from './node';\nimport { endl } from '../util/io';\n\ninterface NtPlaceHolder{\n    nt: number;\n    rItem: number;\n};\n\ninterface RuleLoc{\n    rule: Rule;\n    pos: number;\n    line: number;\n};\n\nexport enum TokenRefType {\n    TOKEN = 0,\n    STRING = 1,\n    NAME = 2\n};\n\ninterface PseudoToken{\n    assoc: Assoc;\n    pr: number;\n    pos: Position;\n}\n\nexport interface GBuilder{\n    err(msg: string, line: number);\n    defToken(name: JNode, alias: string): TokenDef;\n    getTokenByAlias(a: JNode): TokenDef;\n    getTokenByName(t: JNode): TokenDef;\n    defineTokenPrec(tid: JNode, assoc: Assoc, type: TokenRefType);\n    setOpt(name: JNode, value: JNode);\n    setOutput(n: JNode);\n    setHeader(h: JNode);\n    setExtraArg(a: JNode);\n    setType(t: JNode);\n    setInit(arg: JNode, body: JNode);\n    setEpilogue(ep: JNode);\n    incPr();\n    prepareRule(lhs: JNode);\n    addRuleUseVar(vname: JNode);\n    addRuleSematicVar(vname: JNode);\n    addRuleItem(id: JNode, type: TokenRefType);\n    addAction(b: LexAction[]);\n    defineRulePr(token: JNode, type: TokenRefType);\n    commitRule();\n    addPushStateAction(acts: LexAction[], vn: JNode);\n    build(): File;\n    readonly lexBuilder: LexBuilder<LexAction[]>;\n}\n\nexport function createFileBuilder(ctx: Context): GBuilder{\n    let file: File = new File();\n    let grammar: Grammar = new Grammar();\n\n    let _tokenNameTable: { [s: string]: TokenDef } = {};\n    let _tokenAliasTable: { [s: string]: TokenDef[] } = {};\n\n    let _ruleStack: Rule[] = [];\n    let _sematicVar: JNode = null;\n\n    let _ntTable: {[s: string]: NtDef} = {};\n    // ntPlaceHolders: {[s: string]: RuleLoc[]} = {};\n    let _requiringNt: CoroutineMgr<NtDef> = null;\n\n    let _genIndex = 0;\n    let _first = true;\n    let _pr = 1;\n    let _onCommit: (() => any)[] = [];\n    let _onDone: (() => any)[] = [];\n    let lexBuilder: LexBuilder<LexAction[]>;\n    let _pseudoTokens: { [tname: string]: PseudoToken } = {};\n\n    file.grammar = grammar;\n    lexBuilder = createLexBuilder(ctx);\n    _requiringNt = new CoroutineMgr<NtDef>(s => _ntTable[s]);\n    defToken(newNode('EOF'), null);\n\n    return {\n        err,\n        defToken,\n        getTokenByAlias,\n        getTokenByName,\n        defineTokenPrec,\n        setOpt,\n        setOutput,\n        setHeader,\n        setExtraArg,\n        setType,\n        setInit,\n        setEpilogue,\n        incPr,\n        prepareRule,\n        addRuleUseVar,\n        addRuleSematicVar,\n        addRuleItem,\n        addAction,\n        defineRulePr,\n        commitRule,\n        addPushStateAction,\n        build,\n        lexBuilder: lexBuilder\n    };\n\n    function _top(){\n        return _ruleStack[_ruleStack.length - 1];\n    }\n    function _splitAction(){\n        let saved = _sematicVar;\n        _sematicVar = null;\n\n        let t = _top();\n        let s = '@' + _genIndex++;\n        prepareRule(newNode(s));\n        let gen = _top();\n        addAction(t.action);\n        commitRule();\n        t.action = null;\n        addRuleItem(newNode(s), TokenRefType.NAME);\n\n        _sematicVar = saved;\n\n        // copy imported variables from parent rule\n        for(let vname in t.vars){\n            let v = t.vars[vname];\n            gen.usedVars[vname] = { val: v.val, pos: v.pos };\n        }\n        for(let vname in t.usedVars){\n            let v = t.usedVars[vname];\n            gen.usedVars[vname] = { val: v.val, pos: v.pos };\n        }\n    }\n    function err(msg: string, line: number){\n        ctx.err(new E(msg, line));\n    }\n    function singlePosErr(msg: string, pos: Position){\n        ctx.requireLines((ctx, lines) => {\n            ctx.err(new JsccError(msg + ' ' + markPosition(pos, lines), 'CompilationError'));\n        });\n    }\n    function singlePosWarn(msg: string, pos: Position){\n        ctx.requireLines((ctx, lines) => {\n            ctx.warn(new JsccWarning(msg + ' ' + markPosition(pos, lines)));\n        });\n    }\n    function redefineWarn(what: string, prev: Position, current: Position){\n        ctx.requireLines((ctx, lines) => {\n            let msg = what + ' ' + markPosition(current, lines) + endl;\n            msg += 'previous defination was at ' + markPosition(prev, lines);\n            ctx.warn(new JsccWarning(msg));\n        });\n    }\n    function defToken(name: JNode, alias: string): TokenDef{\n        var tkdef = _tokenNameTable[name.val];\n        if(tkdef !== undefined){\n            tkdef.appears.push(name);\n            return tkdef;\n        }\n        else {\n            tkdef = { \n                index: grammar.tokens.length,\n                sym: name.val,\n                alias: alias,\n                pr: 0,\n                assoc: Assoc.UNDEFINED,\n                used: false,\n                appears: [name]\n            };\n            if(alias !== null){\n                _tokenAliasTable[alias] || (_tokenAliasTable[alias] = []);\n                _tokenAliasTable[alias].push(tkdef);\n            }\n            _tokenNameTable[name.val] = tkdef;\n            grammar.tokens.push(tkdef);\n            return tkdef;\n        }\n    }\n    function getTokenByAlias(a: JNode): TokenDef{\n        let aa = _tokenAliasTable[a.val];\n        if(aa === undefined){\n            singlePosErr(`cannot identify \"${a.val}\" as a token`, a);\n            return null;\n        }\n        else if(aa.length > 1){\n            let ret = '';\n            for(let i = 0;i < aa.length;i++){\n                i > 0 && (ret += ',');\n                ret += `<${aa[i].sym}>`;\n            }\n            singlePosErr(`cannot identify ${a.val} as a token, since it could be ${ret}`, a);\n            return null;\n        }\n        return aa[0];\n    }\n    function getTokenByName(t: JNode): TokenDef{\n        let ret = _tokenNameTable[t.val];\n        if(ret === undefined){\n            singlePosErr(`cannot identify <${t.val}> as a token`, t);\n            return null;\n        }\n        return ret;\n    }\n    function defineTokenPrec(tid: JNode, assoc: Assoc, type: TokenRefType){\n        if(type === TokenRefType.TOKEN){\n            let tk = getTokenByName(tid);\n            if(tk !== null){\n                tk.assoc = assoc;\n                tk.pr = _pr;\n            }\n        }\n        else if(type === TokenRefType.STRING){\n            let tk = getTokenByAlias(tid);\n            if(tk !== null){\n                tk.assoc = assoc;\n                tk.pr = _pr;\n            }\n        }\n        else if(type === TokenRefType.NAME){\n            let t2 = _pseudoTokens[tid.val] = _pseudoTokens[tid.val] || {\n                assoc: assoc,\n                pr: _pr,\n                pos: tid\n            };\n        }\n    }\n    function setOpt(name: JNode, value: JNode){\n        file.opt[name.val] = { name: name, val: value };\n    }\n    function setOutput(n: JNode){\n        if(file.output !== null){\n            redefineWarn('redefine of output', file.output, n);\n        }\n        file.output = n;\n    }\n    function setHeader(h: JNode){\n        file.header.push(h);\n    }\n    function setExtraArg(a: JNode){\n        if(file.extraArgs !== null){\n            redefineWarn('redefine of extra arguments', file.extraArgs, a);\n        }\n        file.extraArgs = a;\n    }\n    function setType(t: JNode){\n        if(file.sematicType !== null){\n            redefineWarn('redefine of sematic type', file.sematicType, t);\n        }\n        file.sematicType = t;\n    }\n    function setInit(arg: JNode, body: JNode){\n        if(file.initArg !== null){\n            redefineWarn('redefine of initializing block', file.initArg, arg);\n        }\n        file.initArg = arg;\n        file.initBody = body;\n    }\n    function incPr(){\n        _pr++;\n    }\n    function setEpilogue(ep: JNode){\n        file.epilogue = ep;\n    }\n    function prepareRule(lhs: JNode){\n        if(_first){\n            _first = false;\n            prepareRule(newNode('(accept)'));\n            addRuleItem(newNode(lhs.val), TokenRefType.NAME);\n            addRuleItem(newNode('EOF'), TokenRefType.TOKEN);\n            commitRule();\n        }\n        \n        var nt = _ntTable[lhs.val];\n        if(nt === undefined){\n            nt = _ntTable[lhs.val] = {\n                index: grammar.nts.length,\n                sym: lhs.val,\n                firstSet: null,\n                used: false,\n                rules: [],\n                parents: []\n            }\n            grammar.nts.push(nt);\n            _requiringNt.signal(lhs.val, nt);\n        }\n        let nr = new Rule(grammar, nt, lhs);\n        _ruleStack.push(nr);\n    }\n    function addRuleUseVar(vname: JNode){\n        let t = _top();\n        if(t.usedVars[vname.val] !== undefined){\n            singlePosErr(`re-use of sematic variable \"${vname.val}\"`, vname);\n        }\n        else {\n            t.usedVars[vname.val] = { pos: vname, val: 0 };\n        }\n    }\n    function addRuleSematicVar(vname: JNode){\n        let t = _top();\n        if(t.usedVars[vname.val] !== undefined){\n            //err(`variable \"${vname}\" conflicts with imported variable defined at line ${t.usedVars[vname].line}`, line);\n            singlePosErr(`variable \"${vname.val}\" conflicts with another imported variable`, vname);\n        }\n        else if(t.vars[vname.val] !== undefined){\n            singlePosErr(`sematic variable \"${vname.val}\" is already defined`, vname);\n        }\n        else {\n            _sematicVar = vname;\n        }\n    }\n    function addRuleItem(id: JNode, type: TokenRefType){\n        let t = _top();\n        if(t.action !== null){\n            _splitAction();\n        }\n        if(_sematicVar !== null){\n            t.vars[_sematicVar.val] = { val: t.rhs.length, pos: _sematicVar };\n            _sematicVar = null;\n        }\n        if(type === TokenRefType.NAME){\n            let pos = t.rhs.length;\n            t.rhs.push(0);\n            _requiringNt.wait(id.val, (su, nt) => {\n                if(su){\n                    t.rhs[pos] = -nt.index - 1;\n                    nt.parents.push({\n                        rule: t,\n                        pos: pos\n                    });\n                    nt.used = true;\n                }\n                else {\n                    singlePosErr(`use of undefined non terminal ${id.val}`, id);                    \n                }\n            });\n        }\n        else if(type === TokenRefType.TOKEN){\n            let tl = _tokenNameTable[id.val];\n            if(tl === undefined){\n                singlePosErr(`cannot recognize <${id.val}> as a token`, id);\n                return;\n            }\n            t.rhs.push(tl.index);\n            tl.used = true;\n        }\n        else if(type === TokenRefType.STRING){\n            let td = getTokenByAlias(id);\n            if(td !== null){\n                t.rhs.push(td.index);\n                td.used = true;\n            }\n        }\n    }\n    function addAction(b: LexAction[]){\n        var t = _top();\n        if(t.action !== null){\n            _splitAction();\n        }\n        t.action = b;\n        if(_sematicVar !== null){\n            t.vars[_sematicVar.val] = { val: t.rhs.length, pos: _sematicVar };\n            _sematicVar = null;\n            _splitAction();\n        }\n    }\n    function defineRulePr(token: JNode, type: TokenRefType){\n        if(type === TokenRefType.STRING || type === TokenRefType.TOKEN){\n            let tk: TokenDef = type === TokenRefType.STRING ? \n                getTokenByAlias(token) : \n                getTokenByName(token);\n            if(tk !== null){\n                if(tk.assoc === Assoc.UNDEFINED){\n                    singlePosErr(`precedence of token \"${token.val}\" has not been defined`, token);\n                    return;\n                }\n                _top().pr = tk.pr;\n            }\n        }\n        else {\n            var pt = _pseudoTokens[token.val];\n            if(!pt){\n                singlePosErr(`pseudo token \"${token}\" is not defined`, token);\n            }\n            _top().pr = pt.pr;\n        }\n    }\n    function commitRule(){\n        var t = _ruleStack.pop();\n        t.index = grammar.rules.length;\n        t.lhs.rules.push(t);\n        grammar.rules.push(t);\n        for(let cb of _onCommit){\n            cb();\n        }\n        _onCommit.length = 0;\n    }\n    function addPushStateAction(acts: LexAction[], vn: JNode){\n        lexBuilder.requiringState.wait(vn.val, (su, sn) => {\n            if(su){\n                acts.push(pushState(sn));\n            }\n            else {\n                singlePosErr(`state \"${vn.val}\" is undefined`, vn);\n            }\n        });\n    }\n    function build(){\n        grammar.tokenCount = grammar.tokens.length;\n        grammar.tokens[0].used = true;// end of file\n        grammar.nts[0].used = true;// (accept)\n\n        for(let nt of grammar.nts){\n            nt.firstSet = new TokenSet(grammar.tokenCount);\n            for(let rule of nt.rules){\n                rule.calcPr();\n                for(let vname in rule.usedVars){\n                    let v = rule.usedVars[vname];\n                    v.val = rule.getVarSp(vname, msg => {\n                        singlePosErr(`cannot find variable \"${vname}\": ${msg}`, v.pos);\n                    });\n                }\n            }\n        }\n        file.lexDFA = lexBuilder.build();\n\n        for(let cb of _onDone){\n            cb();\n        }\n        _requiringNt.fail();\n        return file;\n    }\n\n    \n}\n","/*\n    generated by jscc, an LALR(1) parser generator made by hadroncfy.\n    template for typescript, written by hadroncfy, aussi.\n*/\n\nimport { GBuilder, createFileBuilder, TokenRefType } from './gbuilder';\nimport { Assoc } from '../grammar/token-entry';\nimport { CompilationError as E, JsccError } from '../util/E';\nimport { InputStream, endl } from '../util/io';\nimport { Context } from '../util/context';\nimport { LexAction, returnToken, blockAction, pushState, popState, setImg } from '../lexer/action';\nimport { Position, JNode, newNode, markPosition, nodeBetween } from './node';\nimport { File } from './file';\n\nfunction nodeFromToken(t: Token): JNode{\n    return {\n        val: t.val,\n        ext: null,\n        startLine: t.startLine,\n        startColumn: t.startColumn,\n        endLine: t.endLine,\n        endColumn: t.endColumn\n    };\n}\nfunction nodeFromTrivalToken(t: Token): JNode{\n    return {\n        val: null,\n        ext: null,\n        startLine: t.startLine,\n        startColumn: t.startColumn,\n        endLine: t.endLine,\n        endColumn: t.endColumn\n    };\n}\nlet escapes: {[s: string]: string} = {\n    'n': '\\n',\n    'f': '\\f',\n    'b': '\\b',\n    'r': '\\r',\n    't': '\\t',\n    '\\\\': '\\\\',\n    '\"': '\"',\n    \"'\": \"'\"\n};\nfunction unescape(s: string){\n    let ret = '';\n    let i = 0;\n    while(i < s.length){\n        let c = s.charAt(i);\n        if(c === '\\\\'){\n            c = s.charAt(++i);\n            if(escapes[c]){\n                ret += escapes[c];\n                i++;\n            }\n            else if(c === 'u' || c === 'x'){\n                c = s.charAt(++i);\n                let hex = '';\n                while(/[0-9a-fA-F]/.test(c)){\n                    hex += c;\n                    c = s.charAt(++i);\n                }\n                ret += String.fromCharCode(parseInt(hex, 16));\n            }\n        }\n        else {\n            ret += c;\n            i++;\n        }\n    }\n    return ret;\n}\n\n/*\n    find the next state to go in the dfa\n*/\nfunction moveDFA0(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){\n    switch(ret.state){\n        case 0:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if((c >= 9 && c <= 10) || c === 13 || c === 32){\n                ret.state = 1;\n            }\n            else if(c === 34){\n                ret.state = 2;\n            }\n            else if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 3;\n            }\n            else if(c === 37){\n                ret.state = 4;\n            }\n            else if(c === 39){\n                ret.state = 5;\n            }\n            else if(c === 40){\n                ret.state = 6;\n            }\n            else if(c === 41){\n                ret.state = 7;\n            }\n            else if(c === 42){\n                ret.state = 8;\n            }\n            else if(c === 43){\n                ret.state = 9;\n            }\n            else if(c === 44){\n                ret.state = 10;\n            }\n            else if(c === 45){\n                ret.state = 11;\n            }\n            else if(c === 47){\n                ret.state = 12;\n            }\n            else if(c === 58){\n                ret.state = 13;\n            }\n            else if(c === 59){\n                ret.state = 14;\n            }\n            else if(c === 60){\n                ret.state = 15;\n            }\n            else if(c === 61){\n                ret.state = 16;\n            }\n            else if(c === 62){\n                ret.state = 17;\n            }\n            else if(c === 63){\n                ret.state = 18;\n            }\n            else if(c === 91){\n                ret.state = 19;\n            }\n            else if(c === 93){\n                ret.state = 20;\n            }\n            else if(c === 94){\n                ret.state = 21;\n            }\n            else if(c === 123){\n                ret.state = 22;\n            }\n            else if(c === 124){\n                ret.state = 23;\n            }\n            else if(c === 125){\n                ret.state = 24;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 25;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 1:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if((c >= 9 && c <= 10) || c === 13 || c === 32){\n                ret.state = 1;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 2:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){\n                ret.state = 26;\n            }\n            else if(c === 34){\n                ret.state = 27;\n            }\n            else if(c === 92){\n                ret.state = 28;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 3:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 29;\n            }\n            else if((c >= 48 && c <= 57)){\n                ret.state = 30;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 31;\n            }\n            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){\n                ret.state = 32;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 4:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 37){\n                ret.state = 33;\n            }\n            else if(c === 101){\n                ret.state = 34;\n            }\n            else if(c === 104){\n                ret.state = 35;\n            }\n            else if(c === 105){\n                ret.state = 36;\n            }\n            else if(c === 108){\n                ret.state = 37;\n            }\n            else if(c === 110){\n                ret.state = 38;\n            }\n            else if(c === 111){\n                ret.state = 39;\n            }\n            else if(c === 112){\n                ret.state = 40;\n            }\n            else if(c === 114){\n                ret.state = 41;\n            }\n            else if(c === 116){\n                ret.state = 42;\n            }\n            else if(c === 117){\n                ret.state = 43;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 5:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){\n                ret.state = 44;\n            }\n            else if(c === 39){\n                ret.state = 45;\n            }\n            else if(c === 92){\n                ret.state = 46;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 6:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 7:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 8:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 9:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 10:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 11:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 12:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 42){\n                ret.state = 47;\n            }\n            else if(c === 47){\n                ret.state = 48;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 13:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 14:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 15:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 16:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 62){\n                ret.state = 49;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 17:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 18:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 19:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 20:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 21:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 22:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 23:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 24:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 25:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 29;\n            }\n            else if((c >= 48 && c <= 57)){\n                ret.state = 30;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 31;\n            }\n            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){\n                ret.state = 32;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 26:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){\n                ret.state = 26;\n            }\n            else if(c === 34){\n                ret.state = 27;\n            }\n            else if(c === 92){\n                ret.state = 28;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 27:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 28:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){\n                ret.state = 50;\n            }\n            else if(c === 117 || c === 120){\n                ret.state = 51;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 29:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 29;\n            }\n            else if((c >= 48 && c <= 57)){\n                ret.state = 30;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 31;\n            }\n            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){\n                ret.state = 32;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 30:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 29;\n            }\n            else if((c >= 48 && c <= 57)){\n                ret.state = 30;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 31;\n            }\n            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){\n                ret.state = 32;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 31:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 29;\n            }\n            else if((c >= 48 && c <= 57)){\n                ret.state = 30;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 31;\n            }\n            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){\n                ret.state = 32;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 32:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c === 36 || (c >= 65 && c <= 90) || c === 95 || (c >= 97 && c <= 122)){\n                ret.state = 29;\n            }\n            else if((c >= 48 && c <= 57)){\n                ret.state = 30;\n            }\n            else if(c === 170 || c === 181 || c === 186 || (c >= 192 && c <= 214) || (c >= 216 && c <= 246) || (c >= 248 && c <= 705) || (c >= 710 && c <= 721) || (c >= 736 && c <= 740) || c === 748 || c === 750 || (c >= 880 && c <= 884) || (c >= 886 && c <= 887) || (c >= 890 && c <= 893) || c === 902 || (c >= 904 && c <= 906) || c === 908 || (c >= 910 && c <= 929) || (c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153) || (c >= 1162 && c <= 1319) || (c >= 1329 && c <= 1366) || c === 1369 || (c >= 1377 && c <= 1415) || (c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522) || (c >= 1568 && c <= 1610) || (c >= 1646 && c <= 1647) || (c >= 1649 && c <= 1747) || c === 1749 || (c >= 1765 && c <= 1766) || (c >= 1774 && c <= 1775) || (c >= 1786 && c <= 1788) || c === 1791 || c === 1808 || (c >= 1810 && c <= 1839) || (c >= 1869 && c <= 1957) || c === 1969 || (c >= 1994 && c <= 2026) || (c >= 2036 && c <= 2037) || c === 2042 || (c >= 2048 && c <= 2069) || c === 2074 || c === 2084 || c === 2088 || (c >= 2112 && c <= 2136) || c === 2208 || (c >= 2210 && c <= 2220) || (c >= 2308 && c <= 2361) || c === 2365 || c === 2384 || (c >= 2392 && c <= 2401) || (c >= 2417 && c <= 2423) || (c >= 2425 && c <= 2431) || (c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448) || (c >= 2451 && c <= 2472) || (c >= 2474 && c <= 2480) || c === 2482 || (c >= 2486 && c <= 2489) || c === 2493 || c === 2510 || (c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2529) || (c >= 2544 && c <= 2545) || (c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576) || (c >= 2579 && c <= 2600) || (c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611) || (c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617) || (c >= 2649 && c <= 2652) || c === 2654 || (c >= 2674 && c <= 2676) || (c >= 2693 && c <= 2701) || (c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728) || (c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739) || (c >= 2741 && c <= 2745) || c === 2749 || c === 2768 || (c >= 2784 && c <= 2785) || (c >= 2821 && c <= 2828) || (c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856) || (c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867) || (c >= 2869 && c <= 2873) || c === 2877 || (c >= 2908 && c <= 2909) || (c >= 2911 && c <= 2913) || c === 2929 || c === 2947 || (c >= 2949 && c <= 2954) || (c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965) || (c >= 2969 && c <= 2970) || c === 2972 || (c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980) || (c >= 2984 && c <= 2986) || (c >= 2990 && c <= 3001) || c === 3024 || (c >= 3077 && c <= 3084) || (c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112) || (c >= 3114 && c <= 3123) || (c >= 3125 && c <= 3129) || c === 3133 || (c >= 3160 && c <= 3161) || (c >= 3168 && c <= 3169) || (c >= 3205 && c <= 3212) || (c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240) || (c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257) || c === 3261 || c === 3294 || (c >= 3296 && c <= 3297) || (c >= 3313 && c <= 3314) || (c >= 3333 && c <= 3340) || (c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386) || c === 3389 || c === 3406 || (c >= 3424 && c <= 3425) || (c >= 3450 && c <= 3455) || (c >= 3461 && c <= 3478) || (c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515) || c === 3517 || (c >= 3520 && c <= 3526) || (c >= 3585 && c <= 3632) || (c >= 3634 && c <= 3635) || (c >= 3648 && c <= 3654) || (c >= 3713 && c <= 3714) || c === 3716 || (c >= 3719 && c <= 3720) || c === 3722 || c === 3725 || (c >= 3732 && c <= 3735) || (c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747) || c === 3749 || c === 3751 || (c >= 3754 && c <= 3755) || (c >= 3757 && c <= 3760) || (c >= 3762 && c <= 3763) || c === 3773 || (c >= 3776 && c <= 3780) || c === 3782 || (c >= 3804 && c <= 3807) || c === 3840 || (c >= 3904 && c <= 3911) || (c >= 3913 && c <= 3948) || (c >= 3976 && c <= 3980) || (c >= 4096 && c <= 4138) || c === 4159 || (c >= 4176 && c <= 4181) || (c >= 4186 && c <= 4189) || c === 4193 || (c >= 4197 && c <= 4198) || (c >= 4206 && c <= 4208) || (c >= 4213 && c <= 4225) || c === 4238 || (c >= 4256 && c <= 4293) || c === 4295 || c === 4301 || (c >= 4304 && c <= 4346) || (c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685) || (c >= 4688 && c <= 4694) || c === 4696 || (c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744) || (c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784) || (c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798) || c === 4800 || (c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822) || (c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885) || (c >= 4888 && c <= 4954) || (c >= 4992 && c <= 5007) || (c >= 5024 && c <= 5108) || (c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759) || (c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866) || (c >= 5870 && c <= 5872) || (c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5905) || (c >= 5920 && c <= 5937) || (c >= 5952 && c <= 5969) || (c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000) || (c >= 6016 && c <= 6067) || c === 6103 || c === 6108 || (c >= 6176 && c <= 6263) || (c >= 6272 && c <= 6312) || c === 6314 || (c >= 6320 && c <= 6389) || (c >= 6400 && c <= 6428) || (c >= 6480 && c <= 6509) || (c >= 6512 && c <= 6516) || (c >= 6528 && c <= 6571) || (c >= 6593 && c <= 6599) || (c >= 6656 && c <= 6678) || (c >= 6688 && c <= 6740) || c === 6823 || (c >= 6917 && c <= 6963) || (c >= 6981 && c <= 6987) || (c >= 7043 && c <= 7072) || (c >= 7086 && c <= 7087) || (c >= 7098 && c <= 7141) || (c >= 7168 && c <= 7203) || (c >= 7245 && c <= 7247) || (c >= 7258 && c <= 7293) || (c >= 7401 && c <= 7404) || (c >= 7406 && c <= 7409) || (c >= 7413 && c <= 7414) || (c >= 7424 && c <= 7615) || (c >= 7680 && c <= 7957) || (c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005) || (c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023) || c === 8025 || c === 8027 || c === 8029 || (c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116) || (c >= 8118 && c <= 8124) || c === 8126 || (c >= 8130 && c <= 8132) || (c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147) || (c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172) || (c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188) || c === 8305 || c === 8319 || (c >= 8336 && c <= 8348) || c === 8450 || c === 8455 || (c >= 8458 && c <= 8467) || c === 8469 || (c >= 8473 && c <= 8477) || c === 8484 || c === 8486 || c === 8488 || (c >= 8490 && c <= 8493) || (c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511) || (c >= 8517 && c <= 8521) || c === 8526 || (c >= 8544 && c <= 8584) || (c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358) || (c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11502) || (c >= 11506 && c <= 11507) || (c >= 11520 && c <= 11557) || c === 11559 || c === 11565 || (c >= 11568 && c <= 11623) || c === 11631 || (c >= 11648 && c <= 11670) || (c >= 11680 && c <= 11686) || (c >= 11688 && c <= 11694) || (c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710) || (c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726) || (c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742) || c === 11823 || (c >= 12293 && c <= 12295) || (c >= 12321 && c <= 12329) || (c >= 12337 && c <= 12341) || (c >= 12344 && c <= 12348) || (c >= 12353 && c <= 12438) || (c >= 12445 && c <= 12447) || (c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543) || (c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686) || (c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799) || (c >= 13312 && c <= 19893) || (c >= 19968 && c <= 40908) || (c >= 40960 && c <= 42124) || (c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508) || (c >= 42512 && c <= 42527) || (c >= 42538 && c <= 42539) || (c >= 42560 && c <= 42606) || (c >= 42623 && c <= 42647) || (c >= 42656 && c <= 42735) || (c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888) || (c >= 42891 && c <= 42894) || (c >= 42896 && c <= 42899) || (c >= 42912 && c <= 42922) || (c >= 43000 && c <= 43009) || (c >= 43011 && c <= 43013) || (c >= 43015 && c <= 43018) || (c >= 43020 && c <= 43042) || (c >= 43072 && c <= 43123) || (c >= 43138 && c <= 43187) || (c >= 43250 && c <= 43255) || c === 43259 || (c >= 43274 && c <= 43301) || (c >= 43312 && c <= 43334) || (c >= 43360 && c <= 43388) || (c >= 43396 && c <= 43442) || c === 43471 || (c >= 43520 && c <= 43560) || (c >= 43584 && c <= 43586) || (c >= 43588 && c <= 43595) || (c >= 43616 && c <= 43638) || c === 43642 || (c >= 43648 && c <= 43695) || c === 43697 || (c >= 43701 && c <= 43702) || (c >= 43705 && c <= 43709) || c === 43712 || c === 43714 || (c >= 43739 && c <= 43741) || (c >= 43744 && c <= 43754) || (c >= 43762 && c <= 43764) || (c >= 43777 && c <= 43782) || (c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798) || (c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822) || (c >= 43968 && c <= 44002) || (c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238) || (c >= 55243 && c <= 55291) || (c >= 63744 && c <= 64109) || (c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262) || (c >= 64275 && c <= 64279) || c === 64285 || (c >= 64287 && c <= 64296) || (c >= 64298 && c <= 64310) || (c >= 64312 && c <= 64316) || c === 64318 || (c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324) || (c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829) || (c >= 64848 && c <= 64911) || (c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019) || (c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276) || (c >= 65313 && c <= 65338) || (c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470) || (c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487) || (c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500)){\n                ret.state = 31;\n            }\n            else if((c >= 768 && c <= 879) || (c >= 1155 && c <= 1159) || (c >= 1425 && c <= 1469) || c === 1471 || (c >= 1473 && c <= 1474) || (c >= 1476 && c <= 1477) || c === 1479 || (c >= 1552 && c <= 1562) || (c >= 1611 && c <= 1641) || c === 1648 || (c >= 1750 && c <= 1756) || (c >= 1759 && c <= 1764) || (c >= 1767 && c <= 1768) || (c >= 1770 && c <= 1773) || (c >= 1776 && c <= 1785) || c === 1809 || (c >= 1840 && c <= 1866) || (c >= 1958 && c <= 1968) || (c >= 1984 && c <= 1993) || (c >= 2027 && c <= 2035) || (c >= 2070 && c <= 2073) || (c >= 2075 && c <= 2083) || (c >= 2085 && c <= 2087) || (c >= 2089 && c <= 2093) || (c >= 2137 && c <= 2139) || (c >= 2276 && c <= 2302) || (c >= 2304 && c <= 2307) || (c >= 2362 && c <= 2364) || (c >= 2366 && c <= 2383) || (c >= 2385 && c <= 2391) || (c >= 2402 && c <= 2403) || (c >= 2406 && c <= 2415) || (c >= 2433 && c <= 2435) || c === 2492 || (c >= 2494 && c <= 2500) || (c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2509) || c === 2519 || (c >= 2530 && c <= 2531) || (c >= 2534 && c <= 2543) || (c >= 2561 && c <= 2563) || c === 2620 || (c >= 2622 && c <= 2626) || (c >= 2631 && c <= 2632) || (c >= 2635 && c <= 2637) || c === 2641 || (c >= 2662 && c <= 2673) || c === 2677 || (c >= 2689 && c <= 2691) || c === 2748 || (c >= 2750 && c <= 2757) || (c >= 2759 && c <= 2761) || (c >= 2763 && c <= 2765) || (c >= 2786 && c <= 2787) || (c >= 2790 && c <= 2799) || (c >= 2817 && c <= 2819) || c === 2876 || (c >= 2878 && c <= 2884) || (c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893) || (c >= 2902 && c <= 2903) || (c >= 2914 && c <= 2915) || (c >= 2918 && c <= 2927) || c === 2946 || (c >= 3006 && c <= 3010) || (c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021) || c === 3031 || (c >= 3046 && c <= 3055) || (c >= 3073 && c <= 3075) || (c >= 3134 && c <= 3140) || (c >= 3142 && c <= 3144) || (c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158) || (c >= 3170 && c <= 3171) || (c >= 3174 && c <= 3183) || (c >= 3202 && c <= 3203) || c === 3260 || (c >= 3262 && c <= 3268) || (c >= 3270 && c <= 3272) || (c >= 3274 && c <= 3277) || (c >= 3285 && c <= 3286) || (c >= 3298 && c <= 3299) || (c >= 3302 && c <= 3311) || (c >= 3330 && c <= 3331) || (c >= 3390 && c <= 3396) || (c >= 3398 && c <= 3400) || (c >= 3402 && c <= 3405) || c === 3415 || (c >= 3426 && c <= 3427) || (c >= 3430 && c <= 3439) || (c >= 3458 && c <= 3459) || c === 3530 || (c >= 3535 && c <= 3540) || c === 3542 || (c >= 3544 && c <= 3551) || (c >= 3570 && c <= 3571) || c === 3633 || (c >= 3636 && c <= 3642) || (c >= 3655 && c <= 3662) || (c >= 3664 && c <= 3673) || c === 3761 || (c >= 3764 && c <= 3769) || (c >= 3771 && c <= 3772) || (c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801) || (c >= 3864 && c <= 3865) || (c >= 3872 && c <= 3881) || c === 3893 || c === 3895 || c === 3897 || (c >= 3902 && c <= 3903) || (c >= 3953 && c <= 3972) || (c >= 3974 && c <= 3975) || (c >= 3981 && c <= 3991) || (c >= 3993 && c <= 4028) || c === 4038 || (c >= 4139 && c <= 4158) || (c >= 4160 && c <= 4169) || (c >= 4182 && c <= 4185) || (c >= 4190 && c <= 4192) || (c >= 4194 && c <= 4196) || (c >= 4199 && c <= 4205) || (c >= 4209 && c <= 4212) || (c >= 4226 && c <= 4237) || (c >= 4239 && c <= 4253) || (c >= 4957 && c <= 4959) || (c >= 5906 && c <= 5908) || (c >= 5938 && c <= 5940) || (c >= 5970 && c <= 5971) || (c >= 6002 && c <= 6003) || (c >= 6068 && c <= 6099) || c === 6109 || (c >= 6112 && c <= 6121) || (c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169) || c === 6313 || (c >= 6432 && c <= 6443) || (c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6479) || (c >= 6576 && c <= 6592) || (c >= 6600 && c <= 6601) || (c >= 6608 && c <= 6617) || (c >= 6679 && c <= 6683) || (c >= 6741 && c <= 6750) || (c >= 6752 && c <= 6780) || (c >= 6783 && c <= 6793) || (c >= 6800 && c <= 6809) || (c >= 6912 && c <= 6916) || (c >= 6964 && c <= 6980) || (c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027) || (c >= 7040 && c <= 7042) || (c >= 7073 && c <= 7085) || (c >= 7088 && c <= 7097) || (c >= 7142 && c <= 7155) || (c >= 7204 && c <= 7223) || (c >= 7232 && c <= 7241) || (c >= 7248 && c <= 7257) || (c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7400) || c === 7405 || (c >= 7410 && c <= 7412) || (c >= 7616 && c <= 7654) || (c >= 7676 && c <= 7679) || (c >= 8204 && c <= 8205) || (c >= 8255 && c <= 8256) || c === 8276 || (c >= 8400 && c <= 8412) || c === 8417 || (c >= 8421 && c <= 8432) || (c >= 11503 && c <= 11505) || c === 11647 || (c >= 11744 && c <= 11775) || (c >= 12330 && c <= 12335) || (c >= 12441 && c <= 12442) || (c >= 42528 && c <= 42537) || c === 42607 || (c >= 42612 && c <= 42621) || c === 42655 || (c >= 42736 && c <= 42737) || c === 43010 || c === 43014 || c === 43019 || (c >= 43043 && c <= 43047) || (c >= 43136 && c <= 43137) || (c >= 43188 && c <= 43204) || (c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43249) || (c >= 43264 && c <= 43273) || (c >= 43302 && c <= 43309) || (c >= 43335 && c <= 43347) || (c >= 43392 && c <= 43395) || (c >= 43443 && c <= 43456) || (c >= 43472 && c <= 43481) || (c >= 43561 && c <= 43574) || c === 43587 || (c >= 43596 && c <= 43597) || (c >= 43600 && c <= 43609) || c === 43643 || c === 43696 || (c >= 43698 && c <= 43700) || (c >= 43703 && c <= 43704) || (c >= 43710 && c <= 43711) || c === 43713 || (c >= 43755 && c <= 43759) || (c >= 43765 && c <= 43766) || (c >= 44003 && c <= 44010) || (c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025) || c === 64286 || (c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65062) || (c >= 65075 && c <= 65076) || (c >= 65101 && c <= 65103) || (c >= 65296 && c <= 65305) || c === 65343){\n                ret.state = 32;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 33:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 34:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 109){\n                ret.state = 52;\n            }\n            else if(c === 120){\n                ret.state = 53;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 35:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 54;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 36:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 109){\n                ret.state = 55;\n            }\n            else if(c === 110){\n                ret.state = 56;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 37:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 57;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 38:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 111){\n                ret.state = 58;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 39:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 112){\n                ret.state = 59;\n            }\n            else if(c === 117){\n                ret.state = 60;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 40:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 114){\n                ret.state = 61;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 41:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 105){\n                ret.state = 62;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 42:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 111){\n                ret.state = 63;\n            }\n            else if(c === 121){\n                ret.state = 64;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 43:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 115){\n                ret.state = 65;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 44:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){\n                ret.state = 44;\n            }\n            else if(c === 39){\n                ret.state = 45;\n            }\n            else if(c === 92){\n                ret.state = 46;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 45:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 46:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 34 || c === 39 || c === 92 || c === 98 || c === 102 || c === 110 || c === 114 || c === 116){\n                ret.state = 66;\n            }\n            else if(c === 117 || c === 120){\n                ret.state = 67;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 47:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){\n                ret.state = 68;\n            }\n            else if(c === 42){\n                ret.state = 69;\n            }\n            else if(c === 47){\n                ret.state = 70;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 48:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c <= 9 || c >= 11){\n                ret.state = 71;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 49:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 50:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 91) || c >= 93){\n                ret.state = 26;\n            }\n            else if(c === 34){\n                ret.state = 27;\n            }\n            else if(c === 92){\n                ret.state = 28;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 51:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){\n                ret.state = 72;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 52:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 112){\n                ret.state = 73;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 53:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 74;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 54:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 97){\n                ret.state = 75;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 55:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 112){\n                ret.state = 76;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 56:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 105){\n                ret.state = 77;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 57:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 102){\n                ret.state = 78;\n            }\n            else if(c === 120){\n                ret.state = 79;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 58:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 110){\n                ret.state = 80;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 59:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 81;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 60:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 82;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 61:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 83;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 62:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 103){\n                ret.state = 84;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 63:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 107){\n                ret.state = 85;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 64:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 112){\n                ret.state = 86;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 65:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 87;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 66:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 91) || c >= 93){\n                ret.state = 44;\n            }\n            else if(c === 39){\n                ret.state = 45;\n            }\n            else if(c === 92){\n                ret.state = 46;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 67:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){\n                ret.state = 88;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 68:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){\n                ret.state = 68;\n            }\n            else if(c === 42){\n                ret.state = 69;\n            }\n            else if(c === 47){\n                ret.state = 89;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 69:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 46 || c >= 48){\n                ret.state = 90;\n            }\n            else if(c === 47){\n                ret.state = 91;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 70:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 47){\n                ret.state = 92;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 71:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c <= 9 || c >= 11){\n                ret.state = 71;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 72:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){\n                ret.state = 26;\n            }\n            else if(c === 34){\n                ret.state = 27;\n            }\n            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){\n                ret.state = 93;\n            }\n            else if(c === 92){\n                ret.state = 28;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 73:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 94;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 74:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 114){\n                ret.state = 95;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 75:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 100){\n                ret.state = 96;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 76:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 111){\n                ret.state = 97;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 77:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 98;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 78:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 99;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 79:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 80:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 97){\n                ret.state = 100;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 81:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 105){\n                ret.state = 101;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 82:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 112){\n                ret.state = 102;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 83:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 99){\n                ret.state = 103;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 84:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 104){\n                ret.state = 104;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 85:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 105;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 86:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 106;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 87:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 88:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){\n                ret.state = 44;\n            }\n            else if(c === 39){\n                ret.state = 45;\n            }\n            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){\n                ret.state = 107;\n            }\n            else if(c === 92){\n                ret.state = 46;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 89:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){\n                ret.state = 68;\n            }\n            else if(c === 42){\n                ret.state = 69;\n            }\n            else if(c === 47){\n                ret.state = 89;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 90:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){\n                ret.state = 68;\n            }\n            else if(c === 42){\n                ret.state = 69;\n            }\n            else if(c === 47){\n                ret.state = 70;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 91:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 92:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 41 || (c >= 43 && c <= 46) || c >= 48){\n                ret.state = 68;\n            }\n            else if(c === 42){\n                ret.state = 69;\n            }\n            else if(c === 47){\n                ret.state = 70;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 93:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 33) || (c >= 35 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){\n                ret.state = 26;\n            }\n            else if(c === 34){\n                ret.state = 27;\n            }\n            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){\n                ret.state = 93;\n            }\n            else if(c === 92){\n                ret.state = 28;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 94:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 121){\n                ret.state = 108;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 95:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 97){\n                ret.state = 109;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 96:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 101){\n                ret.state = 110;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 97:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 114){\n                ret.state = 111;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 98:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 99:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 100:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 115){\n                ret.state = 112;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 101:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 111){\n                ret.state = 113;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 102:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 117){\n                ret.state = 114;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 103:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 104:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 115;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 105:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 110){\n                ret.state = 116;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 106:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 107:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c <= 9 || (c >= 11 && c <= 38) || (c >= 40 && c <= 47) || (c >= 58 && c <= 64) || (c >= 71 && c <= 91) || (c >= 93 && c <= 96) || c >= 103){\n                ret.state = 44;\n            }\n            else if(c === 39){\n                ret.state = 45;\n            }\n            else if((c >= 48 && c <= 57) || (c >= 65 && c <= 70) || (c >= 97 && c <= 102)){\n                ret.state = 107;\n            }\n            else if(c === 92){\n                ret.state = 46;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 108:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 109:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 95){\n                ret.state = 117;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 110:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 114){\n                ret.state = 118;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 111:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 119;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 112:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 115){\n                ret.state = 120;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 113:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 110){\n                ret.state = 121;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 114:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 116){\n                ret.state = 122;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 115:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 116:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 117:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 97){\n                ret.state = 123;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 118:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 119:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 120:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 111){\n                ret.state = 124;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 121:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 122:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 123:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 114){\n                ret.state = 125;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 124:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 99){\n                ret.state = 126;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 125:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            if(c === 103){\n                ret.state = 127;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 126:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 127:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        default:\n            ret.state = -1;\n            ret.hasArc = false;\n    }\n}\nfunction moveDFA1(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){\n    switch(ret.state){\n        case 0:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c <= 122 || c === 124 || c >= 126){\n                ret.state = 1;\n            }\n            else if(c === 123){\n                ret.state = 2;\n            }\n            else if(c === 125){\n                ret.state = 3;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 1:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            if(c <= 122 || c === 124 || c >= 126){\n                ret.state = 1;\n            }\n            else {\n                ret.state = -1;\n            } \n            break;\n        case 2:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        case 3:\n            ret.hasArc = false;\n            ret.isEnd = true;\n            ret.state = -1;\n            break;\n        default:\n            ret.state = -1;\n            ret.hasArc = false;\n    }\n}\nfunction moveDFA2(c: number, ret: { state: number, hasArc: boolean, isEnd: boolean }){\n    switch(ret.state){\n        case 0:\n            ret.hasArc = true;\n            ret.isEnd = false;\n            ret.state = 1;\n            break;\n        case 1:\n            ret.hasArc = true;\n            ret.isEnd = true;\n            ret.state = 1;\n            break;\n        default:\n            ret.state = -1;\n            ret.hasArc = false;\n    }\n}\n\n/*\n    all the lexer data goes here.\n*/\nvar jjlexers = [\n    moveDFA0,\n    moveDFA1,\n    moveDFA2,\n];\n\n/*\n    tokens that a lexical dfa state can return\n*/\nvar jjlexTokens0 = [ \n        -1,    -1,    -1,     1,    -1,    -1,    22,    23,    28,    29,\n        37,    30,    -1,    31,    33,    21,    24,    20,    27,    25,\n        26,    36,     3,    35,     4,     1,    -1,     2,    -1,     1,\n         1,     1,     1,    34,    -1,    -1,    -1,    -1,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,    32,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,     8,\n        -1,    -1,    -1,    16,    -1,    -1,    15,    -1,    14,    -1,\n        -1,    -1,    -1,    -1,    -1,     9,     7,    -1,    12,    19,\n        -1,     5,    18,    -1,    -1,    -1,    10,    13,\n]; \nvar jjlexTokens1 = [ \n        38,    38,     3,     4,\n]; \nvar jjlexTokens2 = [ \n        -1,    39,\n]; \n\nvar jjstateCount = 182;\nvar jjtokenCount = 40;\nvar jjactERR = 183;\n/*\n    compressed action table: action = jjpact[jjdisact[STATE-NUM] + TOKEN]\n    when action > 0, shift the token and goto state (action - 1);\n    when action < 0, reduce with rule (1-action);\n    when action = 0, do default action.\n*/\nvar jjpact = [ \n         9,     7,    15,    16,    17,    18,    93,    10,    11,   182,\n        12,   160,    13,    14,   168,   169,   167,   -53,   126,  -115,\n       -53,   -91,   -54,   123,   124,   -54,   105,  -109,   159,     5,\n       158,   156,   -53,  -109,   157,  -116,   126,   -54,   -91,   164,\n       -91,   123,   124,   102,   105,   104,    27,   105,    27,   105,\n       137,   109,   181,    76,    67,   -42,    74,    70,    63,    71,\n       180,    54,   179,   104,    53,   110,   104,   149,   104,    67,\n        48,    49,   177,   176,   175,    64,   149,   173,   172,   136,\n       162,   161,   153,   120,   141,   140,   139,   138,   134,  -109,\n       130,   129,   128,   120,   117,   -98,   115,   114,   113,   112,\n       111,   106,    99,    97,    96,    91,    87,    85,    84,    80,\n        79,    78,    73,    69,    65,    58,    56,    55,    52,    50,\n        46,    45,    44,    40,    22,    35,    33,    28,    22,     4,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,\n]; \n/*\n    displacement of action table.\n*/\nvar jjdisact = [ \n       -40,   129,    -5,   -40,   127,   -40,   -40,    47,   124,   -40,\n       -40,   -40,   -40,   124,   104,   -40,   -40,   -40,   123,   -40,\n       -40,   -40,   102,    45,   -40,   -40,   -40,   -40,   -40,   -40,\n       -40,   -40,   -40,   101,   120,    86,   -40,    39,   116,   117,\n       -40,    60,   -40,   116,    96,    76,   -40,   -40,   -40,   -40,\n        38,   -40,   -40,    90,    93,   -40,   -40,   -40,    24,   -40,\n       101,    52,   -40,   110,   108,   -40,   -40,   106,   -40,   -40,\n       -40,    94,    85,   -40,   -40,   -40,    85,   -40,   -40,   -40,\n       -40,    89,     5,   -40,   103,    79,   101,    31,   -40,    30,\n        42,   -40,    77,    24,    28,   -40,    79,    79,    67,    93,\n       -40,   -40,   -40,    95,   -40,    94,   -40,   -40,   -40,    93,\n       -40,    62,   -40,   -40,    72,    90,   -40,    70,   -40,    86,\n        68,   -40,    86,   -40,   -40,    84,    82,   -40,   -40,   -40,\n       -40,    59,   -40,    52,   -40,   -40,    12,   -40,   -40,   -40,\n        -6,   -40,    47,     2,   -40,     9,    44,   -40,    50,   -40,\n        16,    13,   -40,   -40,   -13,   -40,    43,    77,    55,   -40,\n        74,    72,    69,   -40,    -3,   -40,   -40,   -40,   -40,    49,\n        65,    42,    58,   -40,   -40,   -40,   -40,    26,   -40,   -14,\n       -40,   -40,\n]; \n/*\n    used to check if a position in jjpact is out of bouds.\n    if jjcheckact[jjdisact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.\n*/\nvar jjcheckact = [ \n         2,     2,     2,     2,     2,     2,    82,     2,     2,   179,\n         2,   145,     2,     2,   154,   154,   154,   164,   140,   150,\n       164,    82,   143,   140,   140,   143,    93,    93,   145,     2,\n       145,   145,   164,    89,   145,    87,   136,   143,    82,   151,\n        82,   136,   136,    90,    90,    93,    23,    23,     7,     7,\n       151,    94,   177,    61,   150,    89,    61,    58,    50,    58,\n       172,    41,   171,    90,    41,    94,    23,   170,     7,    87,\n        37,    37,   169,   162,   161,    50,   160,   158,   157,   156,\n       148,   146,   142,   133,   131,   126,   125,   122,   120,   119,\n       117,   115,   114,   111,   109,   105,   103,    99,    98,    97,\n        96,    92,    86,    85,    84,    81,    76,    72,    71,    67,\n        64,    63,    60,    54,    53,    45,    44,    43,    39,    38,\n        35,    34,    33,    22,    18,    14,    13,     8,     4,     1,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n         0,     0,     0,     0,     0,     0,     0,     0,     0,\n]; \n/*\n    default action table. action = jjdefred[STATE-NUM],\n    where action is the number of the rule to reduce with.\n*/\nvar jjdefred = [ \n         4,    -1,    -1,     0,    -1,     3,     5,    -1,    -1,   108,\n       108,   108,   108,    -1,    -1,    19,    20,    21,     1,    76,\n        77,    78,    29,     7,    23,    24,    25,    27,     9,    10,\n        11,   108,    13,    14,    -1,    -1,    75,    -1,    -1,    -1,\n        22,    -1,    12,    -1,    -1,    17,    84,    80,    81,    33,\n        -1,    30,     8,    -1,    -1,    16,     2,    18,    -1,    83,\n        87,    38,    28,    -1,    -1,   111,   113,    -1,    15,    79,\n        84,    93,    -1,     6,    32,    34,    -1,    31,    26,   112,\n        82,   103,    95,    91,    -1,    -1,    50,   114,    85,   104,\n        -1,    92,    96,    41,    -1,    89,    -1,    -1,    -1,    -1,\n       105,   106,   107,    -1,   102,    94,    99,   100,    86,    -1,\n        50,    40,    50,   116,    -1,    -1,    88,    -1,    36,    41,\n        -1,    45,    -1,    47,    48,    -1,    -1,   101,    98,    35,\n        39,    -1,    43,    40,    56,    67,   108,    46,    49,   112,\n       108,    37,    51,    56,    55,    -1,    69,    72,    73,    44,\n       109,    -1,    56,    54,    61,    50,    68,    -1,    -1,    66,\n        -1,    -1,    -1,    42,    56,    57,    58,    59,    60,    -1,\n        70,    -1,    -1,    71,    74,   110,    62,    -1,    64,    -1,\n        63,    65,\n]; \n/*\n    compressed goto table: goto = jjpgoto[jjdisgoto[STATE-NUM] + NON_TERMINAL]\n*/\nvar jjpgoto = [ \n         5,   154,   100,   131,     7,    93,    91,    23,    24,   153,\n       145,   165,   153,   145,   151,   121,   102,    71,   149,    46,\n       107,   131,    88,    89,    40,    38,   173,   170,   162,    22,\n        65,    67,    65,    67,    99,   141,   132,   126,    97,   134,\n        74,   118,    76,   177,   146,   147,   124,   126,    25,   124,\n       126,   106,   130,   131,   132,   126,   115,    94,    81,    82,\n        80,    60,    56,    50,    25,    35,    33,    31,   126,    18,\n        19,    20,     1,   150,     2,   169,   134,   164,   144,   145,\n       142,   143,   144,   145,   120,   134,   132,   126,   117,   134,\n        87,    85,    61,    58,    59,    60,    42,   126,    41,    36,\n        20,    37,    30,   126,    29,   126,    28,   126,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n        -1,    -1,    -1,    -1,    -1,    -1,    -1,\n]; \n/*\n    displacement of the goto table\n*/\nvar jjdisgoto = [ \n        71,   -60,    -4,   -60,    34,   -60,    24,    -2,   -60,    53,\n        51,    49,    14,   -60,    60,   -60,   -60,   -60,    63,   -60,\n       -60,    63,    13,    14,   -60,   -60,   -60,    87,   -60,   -60,\n       -60,    43,   -60,   -60,   -60,   -60,   -60,   -20,   -60,    50,\n       -60,   -60,   -60,   -60,   -60,    55,    53,   -60,   -60,    78,\n       -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,\n       -26,    25,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,\n        19,    13,   -60,   -60,   -60,    75,   -60,   -60,   -60,    34,\n       -60,   -29,   -42,   -60,    13,   -60,    15,   -25,   -60,   -17,\n       -34,   -60,   -60,     1,   -60,   -60,   -60,   -60,   -60,   -60,\n       -60,   -60,   -60,   -60,   -60,     7,   -60,   -60,   -60,   -60,\n        65,    23,    61,   -60,   -60,   -60,   -60,   -60,   -60,    33,\n       -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,\n       -60,   -60,   -60,    17,    55,   -60,    -4,   -60,   -60,    17,\n        -7,   -60,   -60,   -15,   -60,   -29,   -60,   -60,   -60,   -60,\n       -27,   -60,    51,   -60,   -18,    52,    -4,   -60,   -60,   -60,\n        -8,   -60,   -60,   -60,   -18,   -60,   -60,   -60,   -60,   -60,\n        11,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,   -60,\n       -60,   -60,\n]; \n/*\n    length of each rule: rule length = jjruleLen[RULE-NUM]\n*/\nvar jjruleLen = [ \n         2,     0,     6,     2,     0,     0,     6,     2,     4,     2,\n         2,     2,     3,     2,     2,     4,     3,     0,     1,     1,\n         1,     1,     2,     1,     1,     1,     4,     0,     3,     0,\n         1,     3,     2,     0,     0,     6,     5,     7,     0,     2,\n         0,     0,     4,     1,     3,     1,     2,     1,     1,     2,\n         0,     2,     3,     1,     2,     1,     0,     3,     1,     1,\n         1,     0,     3,     4,     3,     4,     1,     1,     0,     1,\n         0,     3,     1,     1,     3,     2,     1,     1,     0,     5,\n         1,     1,     3,     1,     0,     4,     4,     0,     3,     1,\n         1,     1,     2,     0,     2,     0,     1,     0,     4,     2,\n         2,     3,     1,     0,     1,     2,     2,     2,     0,     0,\n         5,     2,     0,     1,     0,     0,     5,\n]; \n/*\n    index of the LHS of each rule\n*/\nvar jjlhs = [ \n         0,     2,     1,     3,     3,     5,     4,     4,     4,     4,\n         4,     4,     4,     4,     4,     6,     6,     7,     7,     8,\n         8,     8,     9,     9,    10,    10,    11,    11,    12,    12,\n        13,    13,    14,    14,    16,    15,    15,    15,    17,    18,\n        18,    20,    19,    19,    21,    21,    22,    22,    22,    22,\n        24,    23,    25,    25,    26,    26,    28,    27,    29,    29,\n        29,    29,    30,    30,    30,    30,    30,    31,    31,    32,\n        32,    33,    33,    34,    34,    35,    35,    36,    38,    37,\n        39,    39,    40,    40,    42,    41,    43,    43,    44,    44,\n        45,    45,    46,    46,    47,    47,    48,    49,    48,    48,\n        48,    50,    50,    51,    51,    51,    52,    52,    54,    55,\n        53,    56,    56,    57,    58,    59,    57,\n]; \n/*\n    token names\n*/\nvar jjtokenNames = [ \n                   \"EOF\",              \"NAME\",            \"STRING\",\n            \"OPEN_BLOCK\",       \"CLOSE_BLOCK\",           \"OPT_DIR\",\n               \"LEX_DIR\",         \"TOKEN_DIR\",          \"LEFT_DIR\",\n             \"RIGHT_DIR\",      \"NONASSOC_DIR\",           \"USE_DIR\",\n            \"HEADER_DIR\",     \"EXTRA_ARG_DIR\",             \"EMPTY\",\n              \"TYPE_DIR\",          \"PREC_DIR\",          \"INIT_DIR\",\n            \"OUTPUT_DIR\",        \"IMPORT_DIR\",                \"GT\",\n                    \"LT\",               \"BRA\",               \"KET\",\n                   \"EQU\",              \"CBRA\",              \"CKET\",\n              \"QUESTION\",              \"STAR\",              \"PLUS\",\n                  \"DASH\",             \"COLON\",             \"ARROW\",\n                   \"EOL\",         \"SEPERATOR\",                \"OR\",\n                 \"WEDGE\",             \"COMMA\",          \"ANY_CODE\",\n      \"ANY_EPLOGUE_CODE\",\n]; \n/*\n    token alias\n*/\nvar jjtokenAlias = [ \n                    null,                null,                null,\n                     \"{\",                 \"}\",           \"%option\",\n                  \"%lex\",            \"%token\",             \"%left\",\n                \"%right\",         \"%nonassoc\",              \"%use\",\n               \"%header\",        \"%extra_arg\",            \"%empty\",\n                 \"%type\",             \"%prec\",             \"%init\",\n               \"%output\",           \"%import\",                 \">\",\n                     \"<\",                 \"(\",                 \")\",\n                     \"=\",                 \"[\",                 \"]\",\n                     \"?\",                 \"*\",                 \"+\",\n                     \"-\",                 \":\",                \"=>\",\n                     \";\",                \"%%\",                 \"|\",\n                     \"^\",                 \",\",                null,\n                    null,\n]; \n\n\nfunction tokenToString(tk: number){\n    return jjtokenAlias[tk] === null ? `<${jjtokenNames[tk]}>` : `\"${jjtokenAlias[tk]}\"`;\n}\nclass Token {\n    constructor(\n        public id: number,\n        public val: string,\n        public startLine: number,\n        public startColumn: number,\n        public endLine: number,\n        public endColumn: number\n    ){}\n    clone(){\n        return new Token(\n            this.id,\n            this.val,\n            this.startLine,\n            this.startColumn,\n            this.endLine,\n            this.endColumn\n        );\n    }\n    toString(){\n        return (jjtokenAlias[this.id] === null ? \n            `<${jjtokenNames[this.id]}>` :\n            `\"${jjtokenAlias[this.id]}\"`) + `(\"${this.val}\")`;\n    }\n}\ninterface Parser{\n    init(ctx1: Context, b: GBuilder);\n    accept(s: string);\n    end();\n    halt();\n    on(ent: string, cb: (a1?, a2?, a3?) => any);\n}\nfunction createParser(): Parser {\n    // members for lexer\n    var _lexState: number[];\n    var _state: number;\n    var _matched: string;\n    var _token: Token;\n    \n    var _marker: { state: number, line: number, column: number } = { state: -1, line: 0, column: 0 };\n    var _backupCount: number;\n\n    var _line: number;\n    var _column: number;\n    var _tline: number;\n    var _tcolumn: number;\n\n    // members for parser\n    var _lrState: number[];\n    var _sematicS: JNode[] = [];\n    var _sematicVal: JNode;\n\n    var _stop;\n\n    var _handlers: {[s: string]: ((a1?, a2?, a3?) => any)[]} = {};\n\n    // extra members, defined by %extra_arg\n    \n    let gb: GBuilder;\n    let ctx: Context;\n    let assoc: Assoc;\n    let lexacts: LexAction[];\n    let ruleLhs: JNode;\n\n\n    return {\n        init,\n        on,\n        accept,\n        end,\n        halt\n    };\n    function init(ctx1: Context, b: GBuilder){\n        _lexState = [ 0 ];// DEFAULT\n        _state = 0;\n        _matched = '';\n        _token = new Token(-1, null, 0, 0, 0, 0);\n        _marker.state = -1;\n        _backupCount = 0;\n        _line = _tline = 0;\n        _column = _tcolumn = 0;\n        \n        _lrState = [ 0 ];\n        _sematicS = [];\n        _sematicVal = null;\n\n        _stop = false;\n        \n    gb = b;\n    ctx = ctx1;\n\n    }\n    /**\n     *  set \n     */\n    function _setImg(s: string){\n        _matched = s;\n        _tline = _line;\n        _tcolumn = _column;\n    }\n    function _prepareToken(tid: number){\n        _token.id = tid;\n        _token.val = _matched;\n        _token.startLine = _tline;\n        _token.startColumn = _tcolumn;\n        _token.endLine = _line;\n        _token.endColumn = _column - 1;\n\n        _matched = '';\n        _tline = _line;\n        _tcolumn = _column;\n    }\n    function _returnToken(){\n        _emit('token', jjtokenNames[_token.id], _token.val);\n        while(!_stop && !_acceptToken(_token));\n        _token.id = -1;\n    }\n    function _emit(name: string, a1?, a2?, a3?){\n        var cbs = _handlers[name];\n        if(cbs){\n            for(var i = 0; i < cbs.length; i++){\n                cbs[i](a1, a2, a3);\n            }\n        }\n    }\n    function on(name: string, cb: (a1?, a2?, a3?) => any){\n        _handlers[name] || (_handlers[name] = []);\n        _handlers[name].push(cb);\n    }\n    function _doLexAction0(jjstaten: number){\n        let jjtk = jjlexTokens0[jjstaten];\n        jjtk !== -1 && _prepareToken(jjtk);\n        switch(jjstaten){\n            case 1:\n                _setImg(\"\");\n                break;\n            case 3:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            case 22:\n                 _sematicVal = nodeFromTrivalToken(_token); \n                break;\n            case 24:\n                 _sematicVal = nodeFromTrivalToken(_token); \n                break;\n            case 25:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            case 27:\n                 _sematicVal = nodeFromToken(_token); _sematicVal.val = unescape(_sematicVal.val.substr(1, _sematicVal.val.length - 2)); \n                break;\n            case 29:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            case 30:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            case 31:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            case 32:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            case 45:\n                 _sematicVal = nodeFromToken(_token); _sematicVal.val = unescape(_sematicVal.val.substr(1, _sematicVal.val.length - 2)); \n                break;\n            case 48:\n                _setImg(\"\");\n                break;\n            case 71:\n                _setImg(\"\");\n                break;\n            case 91:\n                _setImg(\"\");\n                break;\n            default:;\n        }\n    }\n    function _doLexAction1(jjstaten: number){\n        let jjtk = jjlexTokens1[jjstaten];\n        jjtk !== -1 && _prepareToken(jjtk);\n        switch(jjstaten){\n            case 0:\n                 _sematicVal = newNode(_token.val); \n                break;\n            case 1:\n                 _sematicVal = newNode(_token.val); \n                break;\n            case 2:\n                 _sematicVal = nodeFromTrivalToken(_token); \n                break;\n            case 3:\n                 _sematicVal = nodeFromTrivalToken(_token); \n                break;\n            default:;\n        }\n    }\n    function _doLexAction2(jjstaten: number){\n        let jjtk = jjlexTokens2[jjstaten];\n        jjtk !== -1 && _prepareToken(jjtk);\n        switch(jjstaten){\n            case 1:\n                 _sematicVal = nodeFromToken(_token); \n                break;\n            default:;\n        }\n    }\n    /**\n     *  do a lexical action\n     *  @api private\n     *  @internal\n     */\n    function _doLexAction(lexstate: number, state: number){\n        switch(lexstate){\n            case 0:\n                _doLexAction0(state);\n                break;\n            case 1:\n                _doLexAction1(state);\n                break;\n            case 2:\n                _doLexAction2(state);\n                break;\n            default:;\n        }\n        _token.id !== -1 && _returnToken();\n    }\n    function _rollback(): string{\n        let ret = _matched.substr(_matched.length - _backupCount, _backupCount);\n        _matched = _matched.substr(0, _matched.length - _backupCount);\n        _backupCount = 0;\n        _line = _marker.line;\n        _column = _marker.column;\n        _state = _marker.state;\n        _marker.state = -1;\n        return ret;\n    }\n    function _mark(){\n        _marker.state = _state;\n        _marker.line = _line;\n        _marker.column = _column;\n        _backupCount = 0;\n    }\n    function _consume(c: string){\n        c === '\\n' ? (_line++, _column = 0) : (_column += c.charCodeAt(0) > 0xff ? 2 : 1);\n        _matched += c;\n        _marker.state !== -1 && (_backupCount++);\n        return true;\n    }\n    /**\n     *  accept a character\n     *  @return - true if the character is consumed, false if not consumed\n     *  @api private\n     *  @internal\n     */\n    function _acceptChar(c: string){\n        var lexstate = _lexState[_lexState.length - 1];\n        var retn = { state: _state, hasArc: false, isEnd: false };\n        jjlexers[lexstate](c.charCodeAt(0), retn);\n        if(retn.isEnd){\n            // if current state is a terminate state, be careful\n            if(retn.hasArc){\n                if(retn.state === -1){\n                    // nowhere to go, stay where we are\n                    _doLexAction(lexstate, _state);\n                    // recover\n                    _marker.state = -1;\n                    _backupCount = 0;\n                    _state = 0;                    \n                    // character not consumed\n                    return false;\n                }\n                else {\n                    // now we can either go to that new state, or stay where we are\n                    // it is prefered to move forward, but that could lead to errors,\n                    // so we need to memorize this state before move on, in case if \n                    // an error occurs later, we could just return to this state.\n                    _mark();\n                    _state = retn.state;\n                    return _consume(c);\n                }\n            }\n            else {\n                // current state doesn't lead to any state, just stay here.\n                _doLexAction(lexstate, _state);\n                // recover\n                _marker.state = -1;\n                _backupCount = 0;\n                _state = 0;\n                // character not consumed\n                return false;\n            }\n        }\n        else {\n            if(retn.state === -1){\n                // nowhere to go at current state, error may have occured.\n                // check marker to verify that\n                if(_marker.state !== -1){\n                    // we have a previously marked state, which is a terminate state.\n                    var s = _rollback();\n                    _doLexAction(lexstate, _state);\n                    _state = 0;\n                    accept(s);\n                    // character not consumed\n                    return false;\n                }\n                else {\n                    // error occurs\n                    _emit('lexicalerror', \"unexpected character \" + c, _line, _column);\n                    // force consume\n                    return true;\n                }\n            }\n            else {\n                _state = retn.state;\n                // character consumed\n                return _consume(c);\n            }\n        }\n    }\n    function _acceptEOF(){\n        if(_state === 0){\n            // recover\n            _prepareToken(0);\n            _returnToken();\n            return true;\n        }\n        else {\n            let lexstate = _lexState[_lexState.length - 1];\n            let retn = { state: _state, hasArc: false, isEnd: false };\n            jjlexers[lexstate](-1, retn);\n            if(retn.isEnd){\n                _doLexAction(lexstate, _state);\n                _state = 0;\n                _marker.state = -1;\n                return false;\n            }\n            else if(_marker.state !== -1){\n                let s = _rollback();\n                _doLexAction(lexstate, _state);\n                _state = 0;\n                accept(s);\n                return false;\n            }\n            else {\n                _emit('lexicalerror', 'unexpected end of file');\n                return true;\n            }\n        }\n    }\n    /**\n     *  input a string\n     *  @api public\n     */\n    function accept(s: string){\n        for(let i = 0; i < s.length && !_stop;){\n            _acceptChar(s.charAt(i)) && i++;\n        }\n    }\n    /**\n     *  tell the compiler that end of file is reached\n     *  @api public\n     */\n    function end(){\n        while(!_stop && !_acceptEOF());\n        _stop = true;\n    }\n    function halt(){\n        _stop = true;\n    }\n    function _doReduction(jjrulenum: number){\n        var jjnt = jjlhs[jjrulenum];\n        var jjsp = _sematicS.length;\n        var jjtop = _sematicS[jjsp - jjruleLen[jjrulenum]] || null;\n        switch(jjrulenum){\n            case 1:\n                /* 1: @0 => */\n                _lexState.push(2);\n                break;\n            case 5:\n                /* 5: @1 => */\n                { gb.lexBuilder.prepareLex(); }\n                break;\n            case 7:\n                /* 7: option => associativeDir assocTokens */\n                { gb.incPr(); }\n                break;\n            case 9:\n                /* 9: option => \"%header\" block */\n                var b = _sematicS[jjsp - 1];\n                { gb.setHeader(b); }\n                break;\n            case 10:\n                /* 10: option => \"%extra_arg\" block */\n                var b = _sematicS[jjsp - 1];\n                { gb.setExtraArg(b); }\n                break;\n            case 11:\n                /* 11: option => \"%type\" block */\n                var ty = _sematicS[jjsp - 1];\n                { gb.setType(ty); }\n                break;\n            case 12:\n                /* 12: option => \"%init\" block block */\n                var args = _sematicS[jjsp - 2];\n                var b = _sematicS[jjsp - 1];\n                { gb.setInit(args, b); }\n                break;\n            case 13:\n                /* 13: option => \"%output\" <STRING> */\n                var op = _sematicS[jjsp - 1];\n                { gb.setOutput(op); }\n                break;\n            case 15:\n                /* 15: tokenDefs => tokenDefs \"<\" <NAME> \">\" */\n                var t = _sematicS[jjsp - 2];\n                { gb.defToken(t, null); }\n                break;\n            case 16:\n                /* 16: tokenDefs => \"<\" <NAME> \">\" */\n                var t = _sematicS[jjsp - 2];\n                { gb.defToken(t, null); }\n                break;\n            case 18:\n                /* 18: epilogue => <ANY_EPLOGUE_CODE> */\n                var ep = _sematicS[jjsp - 1];\n                { gb.setEpilogue(ep); }\n                break;\n            case 19:\n                /* 19: associativeDir => \"%left\" */\n                { assoc = Assoc.LEFT; }\n                break;\n            case 20:\n                /* 20: associativeDir => \"%right\" */\n                { assoc = Assoc.RIGHT; }\n                break;\n            case 21:\n                /* 21: associativeDir => \"%nonassoc\" */\n                { assoc = Assoc.NON; }\n                break;\n            case 24:\n                /* 24: assocToken => tokenRef */\n                var t = _sematicS[jjsp - 1];\n                { gb.defineTokenPrec(t, assoc, t.ext); }\n                break;\n            case 25:\n                /* 25: assocToken => <NAME> */\n                var t = _sematicS[jjsp - 1];\n                { gb.defineTokenPrec(t, assoc, TokenRefType.NAME); }\n                break;\n            case 26:\n                /* 26: optionBody => optionBody <NAME> \"=\" <STRING> */\n                var name = _sematicS[jjsp - 3];\n                var val = _sematicS[jjsp - 1];\n                { gb.setOpt(name, val); }\n                break;\n            case 29:\n                /* 29: states_ => */\n                { gb.lexBuilder.selectState('DEFAULT'); }\n                break;\n            case 30:\n                /* 30: states => <NAME> */\n                var s = _sematicS[jjsp - 1];\n                { gb.lexBuilder.selectState(s.val); }\n                break;\n            case 31:\n                /* 31: states => states \",\" <NAME> */\n                var s = _sematicS[jjsp - 1];\n                { gb.lexBuilder.selectState(s.val); }\n                break;\n            case 34:\n                /* 34: @2 => */\n                var v = _sematicS[jjsp - 1];\n                { gb.lexBuilder.prepareVar(v); }\n                break;\n            case 35:\n                /* 35: lexBodyItem => <NAME> @2 \"=\" \"<\" regexp \">\" */\n                var v = _sematicS[jjsp - 6];\n                { gb.lexBuilder.endVar(); }\n                break;\n            case 36:\n                /* 36: lexBodyItem => newState \"<\" regexp \">\" lexAction_ */\n                { gb.lexBuilder.end(lexacts, '(untitled)'); }\n                break;\n            case 37:\n                /* 37: lexBodyItem => newState \"<\" <NAME> \":\" regexp \">\" lexAction_ */\n                var tn = _sematicS[jjsp - 5];\n                { \n    let tdef = gb.defToken(tn, gb.lexBuilder.getPossibleAlias());\n    lexacts.push(returnToken(tdef));\n    gb.lexBuilder.end(lexacts, tn.val);\n}\n                break;\n            case 38:\n                /* 38: newState => */\n                { gb.lexBuilder.newState(); }\n                break;\n            case 40:\n                /* 40: lexAction_ => */\n                { lexacts = []; }\n                break;\n            case 41:\n                /* 41: @3 => */\n                { lexacts = []; }\n                break;\n            case 43:\n                /* 43: lexAction => block */\n                var b = _sematicS[jjsp - 1];\n                { lexacts = [blockAction(b.val, b.startLine)]; }\n                break;\n            case 46:\n                /* 46: lexActionItem => \"+\" <NAME> */\n                var vn = _sematicS[jjsp - 1];\n                { gb.addPushStateAction(lexacts, vn); }\n                break;\n            case 47:\n                /* 47: lexActionItem => \"-\" */\n                { lexacts.push(popState()); }\n                break;\n            case 48:\n                /* 48: lexActionItem => block */\n                var b = _sematicS[jjsp - 1];\n                { lexacts.push(blockAction(b.val, b.startLine)); }\n                break;\n            case 49:\n                /* 49: lexActionItem => \"=\" <STRING> */\n                var s = _sematicS[jjsp - 1];\n                { lexacts.push(setImg(s.val)); }\n                break;\n            case 50:\n                /* 50: @4 => */\n                { gb.lexBuilder.enterUnion(); }\n                break;\n            case 51:\n                /* 51: regexp => @4 union */\n                { gb.lexBuilder.leaveUnion(); }\n                break;\n            case 52:\n                /* 52: union => union \"|\" simpleRE */\n                { gb.lexBuilder.endUnionItem(); }\n                break;\n            case 53:\n                /* 53: union => simpleRE */\n                { gb.lexBuilder.endUnionItem(); }\n                break;\n            case 56:\n                /* 56: @5 => */\n                { gb.lexBuilder.enterSimple(); }\n                break;\n            case 57:\n                /* 57: basicRE => @5 primitiveRE rePostfix */\n                var suffix = _sematicS[jjsp - 1];\n                { gb.lexBuilder.simplePostfix(suffix.val as (''|'?'|'+'|'*')); }\n                break;\n            case 58:\n                /* 58: rePostfix => \"+\" */\n                { jjtop = newNode('+'); }\n                break;\n            case 59:\n                /* 59: rePostfix => \"?\" */\n                { jjtop = newNode('?'); }\n                break;\n            case 60:\n                /* 60: rePostfix => \"*\" */\n                { jjtop = newNode('*'); }\n                break;\n            case 61:\n                /* 61: rePostfix => */\n                { jjtop = newNode(''); }\n                break;\n            case 64:\n                /* 64: primitiveRE => \"<\" <NAME> \">\" */\n                var n = _sematicS[jjsp - 2];\n                { gb.lexBuilder.addVar(n); }\n                break;\n            case 65:\n                /* 65: primitiveRE => \"%import\" \"(\" <STRING> \")\" */\n                var i = _sematicS[jjsp - 2];\n                { gb.lexBuilder.importVar(i); }\n                break;\n            case 66:\n                /* 66: primitiveRE => <STRING> */\n                var s = _sematicS[jjsp - 1];\n                { gb.lexBuilder.addString(s.val); }\n                break;\n            case 67:\n                /* 67: inverse_ => \"^\" */\n                { gb.lexBuilder.beginSet(true); }\n                break;\n            case 68:\n                /* 68: inverse_ => */\n                { gb.lexBuilder.beginSet(false); }\n                break;\n            case 73:\n                /* 73: setREItem => <STRING> */\n                var s = _sematicS[jjsp - 1];\n                { gb.lexBuilder.addSetItem(s, s); }\n                break;\n            case 74:\n                /* 74: setREItem => <STRING> \"-\" <STRING> */\n                var from = _sematicS[jjsp - 3];\n                var to = _sematicS[jjsp - 1];\n                { gb.lexBuilder.addSetItem(from, to); }\n                break;\n            case 78:\n                /* 78: @6 => */\n                var n = _sematicS[jjsp - 1];\n                { ruleLhs = n; }\n                break;\n            case 84:\n                /* 84: @7 => */\n                { gb.prepareRule(ruleLhs); }\n                break;\n            case 85:\n                /* 85: rule => @7 ruleHead ruleBody ruleTrailer */\n                { gb.commitRule(); }\n                break;\n            case 88:\n                /* 88: varUseList => varUseList \",\" <NAME> */\n                var vn = _sematicS[jjsp - 1];\n                { gb.addRuleUseVar(vn); }\n                break;\n            case 89:\n                /* 89: varUseList => <NAME> */\n                var vn = _sematicS[jjsp - 1];\n                { gb.addRuleUseVar(vn); }\n                break;\n            case 94:\n                /* 94: itemName => <NAME> \"=\" */\n                var itn = _sematicS[jjsp - 2];\n                { gb.addRuleSematicVar(itn); }\n                break;\n            case 96:\n                /* 96: ruleItem => <NAME> */\n                var t = _sematicS[jjsp - 1];\n                { gb.addRuleItem(t, TokenRefType.NAME); }\n                break;\n            case 97:\n                /* 97: @8 => */\n                var vn = _sematicS[jjsp - 2];\n                { gb.addRuleSematicVar(vn); }\n                break;\n            case 98:\n                /* 98: ruleItem => <NAME> \"=\" @8 <NAME> */\n                var vn = _sematicS[jjsp - 4];\n                var t = _sematicS[jjsp - 1];\n                { gb.addRuleItem(t, TokenRefType.NAME); }\n                break;\n            case 99:\n                /* 99: ruleItem => itemName tokenRef */\n                var t = _sematicS[jjsp - 1];\n                { gb.addRuleItem(t, t.ext); }\n                break;\n            case 100:\n                /* 100: ruleItem => itemName lexAction */\n                { gb.addAction(lexacts); }\n                break;\n            case 101:\n                /* 101: tokenRef => \"<\" <NAME> \">\" */\n                var t = _sematicS[jjsp - 2];\n                { jjtop = t; jjtop.ext = TokenRefType.TOKEN; }\n                break;\n            case 102:\n                /* 102: tokenRef => <STRING> */\n                { jjtop.ext = TokenRefType.STRING; }\n                break;\n            case 105:\n                /* 105: ruleTrailer => rulePrec lexAction */\n                { gb.addAction(lexacts); }\n                break;\n            case 106:\n                /* 106: rulePrec => \"%prec\" <NAME> */\n                var t = _sematicS[jjsp - 1];\n                { gb.defineRulePr(t, TokenRefType.NAME); }\n                break;\n            case 107:\n                /* 107: rulePrec => \"%prec\" tokenRef */\n                var t = _sematicS[jjsp - 1];\n                { gb.defineRulePr(t, t.ext); }\n                break;\n            case 108:\n                /* 108: @9 => */\n                _lexState.push(1);\n                break;\n            case 109:\n                /* 109: @10 => */\n                var open = _sematicS[jjsp - 2];\n                var bl = _sematicS[jjsp - 1];\n                _lexState.pop();\n                break;\n            case 110:\n                /* 110: block => @9 \"{\" innerBlock @10 \"}\" */\n                var open = _sematicS[jjsp - 4];\n                var bl = _sematicS[jjsp - 3];\n                var close = _sematicS[jjsp - 1];\n                { jjtop = nodeBetween(open, close, bl.val); }\n                break;\n            case 111:\n                /* 111: innerBlock => innerBlock innerBlockItem */\n                var b = _sematicS[jjsp - 1];\n                { jjtop.val += b.val; }\n                break;\n            case 112:\n                /* 112: innerBlock => */\n                { jjtop = newNode(''); }\n                break;\n            case 114:\n                /* 114: @11 => */\n                _lexState.push(1);\n                break;\n            case 115:\n                /* 115: @12 => */\n                var b = _sematicS[jjsp - 1];\n                _lexState.pop();\n                break;\n            case 116:\n                /* 116: innerBlockItem => @11 \"{\" innerBlock @12 \"}\" */\n                var b = _sematicS[jjsp - 3];\n                { jjtop = newNode(''); jjtop.val = '{' + b.val + '}'; }\n                break;\n        }\n        _lrState.length -= jjruleLen[jjrulenum];\n        var jjcstate = _lrState[_lrState.length - 1];\n        _lrState.push(jjpgoto[jjdisgoto[jjcstate] + jjnt]);\n\n        _sematicS.length -= jjruleLen[jjrulenum];\n        _sematicS.push(jjtop);\n    }\n\n    function _acceptToken(t: Token){\n        // look up action table\n        var cstate = _lrState[_lrState.length - 1];\n        var ind = jjdisact[cstate] + t.id;\n        var act = 0;\n        if(ind < 0 || ind >= jjpact.length || jjcheckact[ind] !== cstate){\n            act = -jjdefred[cstate] - 1;\n        }\n        else {\n            act = jjpact[ind];\n        }\n        if(act === jjactERR){\n            // explicit error\n            _syntaxError(t);\n            return true;\n        }\n        else if(act > 0){\n            // shift\n            if(t.id === 0){\n                // end of file\n                _stop = true;\n                _emit('accept');\n                return true;\n            }\n            else {\n                _lrState.push(act - 1);\n                _sematicS.push(_sematicVal);\n                _sematicVal = null;\n                // token consumed\n                return true;\n            }\n        }\n        else if(act < 0){\n            _doReduction(-act - 1);\n            return false;\n        }\n        else {\n            // error\n            _syntaxError(t);\n            // force consume\n            return true;\n        }\n    }\n    function _syntaxError(t: Token){\n        var msg = \"unexpected token \" + t.toString() + \", expecting one of the following token(s):\\n\"\n        msg += _expected(_lrState[_lrState.length - 1]);\n        _emit(\"syntaxerror\", msg, t);\n    }\n    function _expected(state: number){\n        var dis = jjdisact[state];\n        var ret = '';\n        function expect(tk: number){\n            var ind = dis + tk;\n            if(ind < 0 || ind >= jjpact.length || state !== jjcheckact[ind]){\n                return jjdefred[state] !== -1;\n            }\n            else {\n                return true;\n            }\n        }\n        for(var tk = 0; tk < jjtokenCount; tk++){\n            expect(tk) && (ret += \"    \" + tokenToString(tk) + \" ...\" + '\\n');\n        }\n        return ret;\n    }\n}\n\nfunction charPosition(line: number, column: number): Position{\n    return {\n        startLine: line,\n        startColumn: column,\n        endLine: line,\n        endColumn: column\n    }\n}\nexport function parse(ctx: Context, source: string): File{\n    let parser = createParser();\n    let err = false;\n    parser.on('lexicalerror', (msg, line, column) => {\n        ctx.requireLines((ctx, lines) => {\n            let msg2 = msg + ' ' + markPosition(charPosition(line, column), lines);\n            ctx.err(new JsccError(msg2, 'LexicalError'));\n        });\n        // ctx.err(new CompilationError(msg, line));\n        parser.halt();\n        err = true;\n    });\n    parser.on('syntaxerror', (msg, token) => {\n        // ctx.err(new CompilationError(msg, token.startLine));\n        ctx.requireLines((ctx, lines) => {\n            let msg2 = markPosition(token, lines) + endl + msg;\n            ctx.err(new JsccError(msg2, 'SyntaxError'));\n        });\n        parser.halt();\n        err = true;\n    });\n    let gb = createFileBuilder(ctx);\n    parser.init(ctx, gb);\n    parser.accept(source);\n    parser.end();\n    if(err){\n        return null;\n    }\n    else {\n        return gb.build();\n    }\n}","import { TemplateInput, TemplateOutput } from '../def';\nimport { Item, Action } from '../../grammar/item-set';\nimport { Rule } from '../../grammar/grammar';\nimport { TokenDef } from '../../grammar/token-entry';\nimport { CodeGenerator } from '../code-generator';\nimport { DFA } from '../../lexer/dfa';\nimport { LexAction } from '../../lexer/action';\nimport { State, Arc } from '../../lexer/state';\nimport { Inf } from '../../util/interval-set';\nimport { JNode } from '../../parser/node'\n\nexport default function(input: TemplateInput, output: TemplateOutput){\n    echoLine(\"/*\");\n    echoLine(\"    generated by jscc, an LALR(1) parser generator made by hadroncfy.\");\n    echoLine(\"    template for typescript, written by hadroncfy, aussi.\");\n    echo(\"*/\");\n    for(let h of input.file.header){ \n    echoLine(\"\");\n    echo(h.val );\n    }\nlet prefix = input.file.prefix;\nlet tab = getOpt('tab', '    ');\nlet ists = input.output === 'typescript';\nfunction ts(s: string, s2?: string){\n    return ists ? s : (s2 || '');\n}\nfunction n(t: JNode, def: string = ''){\n    return t === null ? def : t.val;\n}\nfunction getOpt(n: string, def: string){\n    let t = input.file.opt[n];\n    return t === undefined ? def : t.val.val;\n}\nfunction echo(s: string | number){\n    output.write(s);\n}\nfunction echoLine(s: string | number){\n    output.writeln(s);\n}\nfunction leftAlign(s: string, al: number): string{\n    function repeat(s: string, t: number){\n        let ret = '';\n        while(t --> 0) ret += s;\n        return ret;\n    }\n    return (s.length < al ? repeat(' ', al - s.length) : '') + s;\n}\nfunction printTable<T>(tname: string, t: T[], align: number, lc: number, mapper: (d: T) => string){\n    let count = 1; \n    echoLine(\"\");\n    echo(\"var \");\n    echo(prefix + tname );\n    echoLine(\" = [ \");\n    echo(tab); \n    for(let i of t){\n        echo(leftAlign(mapper(i), align));\n        echo(',');\n        count++ >= lc && (count = 1, echo(input.endl + tab));\n    } \n    echoLine(\"\");\n    echo(\"]; \");\n    } \nfunction printState(state: State<LexAction[]>){ \n    function arcToString(arc: Arc<LexAction[]>): string{\n        let ret: string[] = [];\n        arc.chars.forEach((from, to) => {\n            if(from === to){\n                ret.push(`c === ${from}`);\n            }\n            else if(from === 0 && to !== Inf.oo){\n                ret.push(`c <= ${to}`);\n            }\n            else if(from !== 0 && to === Inf.oo){\n                ret.push(`c >= ${from}`);\n            }\n            else if(from !== 0 && to !== Inf.oo){\n                ret.push(`(c >= ${from} && c <= ${to})`);\n            }\n            else {\n                // this merely happens\n                ret.push('true');\n            }\n        });\n        return ret.join(' || ');\n    }\n\n    let first = true; \n    echoLine(\"\");\n    echo(\"        case \");\n    echo(state.index );\n    echoLine(\":\");\n    echo(\"            ret.hasArc = \");\n    echo(state.arcs.length > 0 ? 'true' : 'false' );\n    echoLine(\";\");\n    echo(\"            ret.isEnd = \");\n    echo(state.endAction === null ? 'false' : 'true' );\n    echo(\";\");\n    if(state.arcs.length === 0){ \n    echoLine(\"\");\n    echo(\"            ret.state = -1;\");\n    } else if(state.hasDefinate()){ \n    echoLine(\"\");\n    echo(\"            ret.state = \");\n    echo(state.arcs[0].to.index );\n    echo(\";\");\n    } else {\n        for(let arc of state.arcs){ \n    echoLine(\"\");\n    echo(\"            \");\n    echo(first ? (first = false, '') : 'else ' );\n    echo(\"if(\");\n    echo(arcToString(arc) );\n    echoLine(\"){\");\n    echo(\"                ret.state = \");\n    echo(arc.to.index );\n    echoLine(\";\");\n    echo(\"            }\");\n    } \n    echoLine(\"\");\n    echoLine(\"            else {\");\n    echoLine(\"                ret.state = -1;\");\n    echo(\"            } \");\n    } \n    echoLine(\"\");\n    echo(\"            break;\");\n    } \nfunction printDFA(dfa: DFA<LexAction[]>, n: number){ \n    echoLine(\"\");\n    echo(\"function moveDFA\");\n    echo(n );\n    echo(\"(c\");\n    echo(ts(\": number\") );\n    echo(\", ret\");\n    echo(ts(\": { state: number, hasArc: boolean, isEnd: boolean }\") );\n    echoLine(\"){\");\n    echo(\"    switch(ret.state){\");\n    for(let state of dfa.states){\n        printState(state);\n    } \n    echoLine(\"\");\n    echoLine(\"        default:\");\n    echoLine(\"            ret.state = -1;\");\n    echoLine(\"            ret.hasArc = false;\");\n    echoLine(\"    }\");\n    echo(\"}\");\n    }\nfunction printLexTokens(dfa: DFA<LexAction[]>, n: number){\n    function getAction(act: LexAction[]): number{\n        for(let a of act){\n            if(a.token !== -1){\n                return a.token;\n            }\n        }\n        return -1;\n    }\n    printTable<State<LexAction[]>>('lexTokens' + n, dfa.states, 6, 10, (state) => {\n        return state.endAction ? getAction(state.endAction.data).toString() : '-1';\n    });\n} \n    let dfas = input.file.lexDFA; \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    find the next state to go in the dfa\");\n    echo(\"*/\");\n    for(let i = 0, _a = dfas; i < _a.length; i++){\n    printDFA(_a[i], i);\n} \n    echoLine(\"\");\n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    all the lexer data goes here.\");\n    echoLine(\"*/\");\n    echo(\"var \");\n    echo(prefix );\n    echo(\"lexers = [\");\n    for(let i = 0;i < dfas.length;i++){ \n    echoLine(\"\");\n    echo(\"    moveDFA\");\n    echo(i );\n    echo(\",\");\n    } \n    echoLine(\"\");\n    echoLine(\"];\");\n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    tokens that a lexical dfa state can return\");\n    echo(\"*/\");\n    for(let i = 0, _a = dfas; i < _a.length; i++){\n    printLexTokens(_a[i], i);\n} \n    echoLine(\"\");\n    let pt = input.pt; \n    echoLine(\"\");\n    echo(\"var \");\n    echo(prefix );\n    echo(\"stateCount = \");\n    echo(pt.stateCount );\n    echoLine(\";\");\n    echo(\"var \");\n    echo(prefix );\n    echo(\"tokenCount = \");\n    echo(input.file.grammar.tokens.length );\n    echoLine(\";\");\n    echo(\"var \");\n    echo(prefix );\n    echo(\"actERR = \");\n    echo(pt.stateCount + 1 );\n    echoLine(\";\");\n    echoLine(\"/*\");\n    echo(\"    compressed action table: action = \");\n    echo(prefix );\n    echo(\"pact[\");\n    echo(prefix );\n    echoLine(\"disact[STATE-NUM] + TOKEN]\");\n    echoLine(\"    when action > 0, shift the token and goto state (action - 1);\");\n    echoLine(\"    when action < 0, reduce with rule (1-action);\");\n    echoLine(\"    when action = 0, do default action.\");\n    echo(\"*/\");\n    printTable<Item>('pact', pt.pact, 6, 10, t => {\n    if(t === null){\n        return '0';\n    }\n    else if(t === Item.NULL){\n        return String(pt.stateCount + 1);\n    }\n    else if(t.actionType === Action.SHIFT){\n        return (t.shift.stateIndex + 1).toString();\n    }\n    else if(t.actionType === Action.REDUCE){\n        return (-t.rule.index - 1).toString();\n    }\n}); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    displacement of action table.\");\n    echo(\"*/\");\n    printTable<number>('disact', pt.disact, 6, 10, t => t.toString()); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echo(\"    used to check if a position in \");\n    echo(prefix  );\n    echoLine(\"pact is out of bouds.\");\n    echo(\"    if \");\n    echo(prefix  );\n    echo(\"checkact[\");\n    echo(prefix );\n    echoLine(\"disact[STATE-NUM] + TOKEN] = STATE-NUM, this position is not out of bounds.\");\n    echo(\"*/\");\n    printTable<number>('checkact', pt.checkact, 6, 10, t => t === undefined ? '0' : t.toString()); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echo(\"    default action table. action = \");\n    echo(prefix );\n    echoLine(\"defred[STATE-NUM],\");\n    echoLine(\"    where action is the number of the rule to reduce with.\");\n    echo(\"*/\");\n    printTable<number>('defred', pt.defred, 6, 10, t => t.toString()); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echo(\"    compressed goto table: goto = \");\n    echo(prefix  );\n    echo(\"pgoto[\");\n    echo(prefix );\n    echoLine(\"disgoto[STATE-NUM] + NON_TERMINAL]\");\n    echo(\"*/\");\n    printTable<Item>('pgoto', pt.pgoto, 6, 10, t => {\n    if(t === null){\n        return '-1';\n    }\n    else {\n        return t.shift.stateIndex.toString();\n    }\n}); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    displacement of the goto table\");\n    echo(\"*/\");\n    printTable<number>('disgoto', pt.disgoto, 6, 10, t => t.toString()); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echo(\"    length of each rule: rule length = \");\n    echo(prefix );\n    echoLine(\"ruleLen[RULE-NUM]\");\n    echo(\"*/\");\n    printTable<Rule>('ruleLen', pt.g.rules, 6, 10, r => r.rhs.length.toString()); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    index of the LHS of each rule\");\n    echo(\"*/\");\n    printTable<Rule>('lhs', pt.g.rules, 6, 10, r => r.lhs.index.toString()); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    token names\");\n    echo(\"*/\");\n    printTable<TokenDef>('tokenNames', pt.g.tokens, 20, 3, t => `\"${t.sym.replace(/\"/g, '\\\\\"')}\"`); \n    echoLine(\"\");\n    echoLine(\"/*\");\n    echoLine(\"    token alias\");\n    echo(\"*/\");\n    printTable<TokenDef>('tokenAlias', pt.g.tokens, 20, 3, t => t.alias ? `\"${t.alias.replace(/\"/g, '\\\\\"')}\"` : \"null\"); \n    let className = getOpt('className', 'Parser'); \n    echoLine(\"\");\n    function printLexActionsFunc(dfa: DFA<LexAction[]>, n: number){\n    let codegen = {\n        addBlock(b: string, line: number){ \n    echoLine(\"\");\n    echo(\"                \");\n    echo(b.replace(/\\$token/g, '_token').replace(/\\$\\$/g, '_sematicVal') );\n    },\n        pushLexState(n: number){ \n    echoLine(\"\");\n    echo(\"                _lexState.push(\");\n    echo(n );\n    echo(\");\");\n    },\n        popLexState(){ \n    echoLine(\"\");\n    echo(\"                _lexState.pop();\");\n    },\n        setImg(n: string){ \n    echoLine(\"\");\n    echo(\"                _setImg(\\\"\");\n    echo(n );\n    echo(\"\\\");\");\n    },\n        returnToken(t: TokenDef){ \n    echoLine(\"\");\n    echoLine(\"                this._token = {\");\n    echo(\"                    id: \");\n    echo(t.index );\n    echoLine(\",\");\n    echoLine(\"                    val: this._matched.join('')\");\n    echo(\"                };\");\n    }\n    }; \n    function hasNormalAction(a: LexAction[]){\n        for(let act of a){\n            if(act.token === -1){\n                return true;\n            }\n        }\n        return false;\n    }\n    let statevn = prefix + 'staten'; \n    echoLine(\"\");\n    echo(\"    function _doLexAction\");\n    echo(n );\n    echo(\"(\");\n    echo(statevn + ts(\": number\"));\n    echoLine(\"){\");\n    echo(\"        let \");\n    echo(prefix );\n    echo(\"tk = \");\n    echo(prefix );\n    echo(\"lexTokens\");\n    echo(n );\n    echo(\"[\");\n    echo(statevn );\n    echoLine(\"];\");\n    echo(\"        \");\n    echo(prefix );\n    echo(\"tk !== -1 && _prepareToken(\");\n    echo(prefix );\n    echoLine(\"tk);\");\n    echo(\"        switch(\");\n    echo(statevn );\n    echo(\"){\");\n    for(let i = 0, _a = dfa.states; i < _a.length; i++){ \n        if(_a[i].endAction !== null && hasNormalAction(_a[i].endAction.data)){ \n    echoLine(\"\");\n    echo(\"            case \");\n    echo(i );\n    echo(\":\");\n    for(let act of _a[i].endAction.data){\n                act.token === -1 && act.toCode(codegen);\n            } \n    echoLine(\"\");\n    echo(\"                break;\");\n    }\n    } \n    echoLine(\"\");\n    echoLine(\"            default:;\");\n    echoLine(\"        }\");\n    echo(\"    }\");\n    } \n    echoLine(\"\");\n    if(ists){ \n    echoLine(\"\");\n    echoLine(\"function tokenToString(tk: number){\");\n    echo(\"    return \");\n    echo(prefix );\n    echo(\"tokenAlias[tk] === null ? `<${\");\n    echo(prefix );\n    echo(\"tokenNames[tk]}>` : `\\\"${\");\n    echo(prefix );\n    echoLine(\"tokenAlias[tk]}\\\"`;\");\n    echo(\"}\");\n    } else { \n    echoLine(\"\");\n    echoLine(\"function tokenToString(tk){\");\n    echo(\"    return \");\n    echo(prefix );\n    echo(\"tokenAlias[tk] === null ? \\\"<\\\" + \");\n    echo(prefix );\n    echo(\"tokenNames[tk] + \\\">\\\" : '\\\"' + \");\n    echo(prefix );\n    echoLine(\"tokenAlias[tk] + '\\\"';\");\n    echo(\"}\");\n    } \n    if(ists){ \n    echoLine(\"\");\n    echoLine(\"class Token {\");\n    echoLine(\"    constructor(\");\n    echoLine(\"        public id: number,\");\n    echoLine(\"        public val: string,\");\n    echoLine(\"        public startLine: number,\");\n    echoLine(\"        public startColumn: number,\");\n    echoLine(\"        public endLine: number,\");\n    echoLine(\"        public endColumn: number\");\n    echoLine(\"    ){}\");\n    echoLine(\"    clone(){\");\n    echoLine(\"        return new Token(\");\n    echoLine(\"            this.id,\");\n    echoLine(\"            this.val,\");\n    echoLine(\"            this.startLine,\");\n    echoLine(\"            this.startColumn,\");\n    echoLine(\"            this.endLine,\");\n    echoLine(\"            this.endColumn\");\n    echoLine(\"        );\");\n    echoLine(\"    }\");\n    echoLine(\"    toString(){\");\n    echo(\"        return (\");\n    echo(prefix );\n    echoLine(\"tokenAlias[this.id] === null ? \");\n    echo(\"            `<${\");\n    echo(prefix );\n    echoLine(\"tokenNames[this.id]}>` :\");\n    echo(\"            `\\\"${\");\n    echo(prefix );\n    echoLine(\"tokenAlias[this.id]}\\\"`) + `(\\\"${this.val}\\\")`;\");\n    echoLine(\"    }\");\n    echoLine(\"}\");\n    echo(\"interface \");\n    echo(className );\n    echoLine(\"{\");\n    echo(\"    init(\");\n    echo(n(input.file.initArg) );\n    echoLine(\");\");\n    echoLine(\"    accept(s: string);\");\n    echoLine(\"    end();\");\n    echoLine(\"    halt();\");\n    echoLine(\"    on(ent: string, cb: (a1?, a2?, a3?) => any);\");\n    echo(\"}\");\n    } else { \n    echoLine(\"\");\n    echoLine(\"function Token(id, val, startLine, startColumn, endLine, endColumn){\");\n    echoLine(\"    this.id = id;\");\n    echoLine(\"    this.val = val;\");\n    echoLine(\"    this.startLine = startLine;\");\n    echoLine(\"    this.startColumn = startColumn;\");\n    echoLine(\"    this.endLine = endLine;\");\n    echoLine(\"    this.endColumn = endColumn;\");\n    echoLine(\"}\");\n    echoLine(\"Token.prototype.clone = function(){\");\n    echoLine(\"    return new Token(\");\n    echoLine(\"        this.id,\");\n    echoLine(\"        this.val,\");\n    echoLine(\"        this.startLine,\");\n    echoLine(\"        this.startColumn,\");\n    echoLine(\"        this.endLine,\");\n    echoLine(\"        this.endColumn\");\n    echoLine(\"    );\");\n    echoLine(\"}\");\n    echoLine(\"Token.prototype.toString = function(){\");\n    echo(\"    return (\");\n    echo(prefix );\n    echoLine(\"tokenAlias[this.id] === null ? \");\n    echo(\"        '<' + \");\n    echo(prefix );\n    echoLine(\"tokenNames[this.id] + '>' :\");\n    echo(\"        '\\\"' + \");\n    echo(prefix );\n    echoLine(\"tokenAlias[this.id] + '\\\"') + \\\"(\\\" + this.val + \\\")\\\";\");\n    echo(\"}\");\n    } \n    let stype = n(input.file.sematicType, 'any'); \n    echoLine(\"\");\n    echo(\"function create\");\n    echo(className );\n    echo(\"()\");\n    echo(ts(': ' + className) );\n    echoLine(\" {\");\n    echoLine(\"    // members for lexer\");\n    echo(\"    var _lexState\");\n    echo(ts(\": number[]\") );\n    echoLine(\";\");\n    echo(\"    var _state\");\n    echo(ts(\": number\") );\n    echoLine(\";\");\n    echo(\"    var _matched\");\n    echo(ts(\": string\") );\n    echoLine(\";\");\n    echo(\"    var _token\");\n    echo(ts(\": Token\") );\n    echoLine(\";\");\n    echoLine(\"    \");\n    echo(\"    var _marker\");\n    echo(ts(\": { state: number, line: number, column: number }\") );\n    echoLine(\" = { state: -1, line: 0, column: 0 };\");\n    echo(\"    var _backupCount\");\n    echo(ts(\": number\") );\n    echoLine(\";\");\n    echoLine(\"\");\n    echo(\"    var _line\");\n    echo(ts(\": number\") );\n    echoLine(\";\");\n    echo(\"    var _column\");\n    echo(ts(\": number\") );\n    echoLine(\";\");\n    echo(\"    var _tline\");\n    echo(ts(\": number\") );\n    echoLine(\";\");\n    echo(\"    var _tcolumn\");\n    echo(ts(\": number\") );\n    echoLine(\";\");\n    echoLine(\"\");\n    echoLine(\"    // members for parser\");\n    echo(\"    var _lrState\");\n    echo(ts(\": number[]\") );\n    echoLine(\";\");\n    echo(\"    var _sematicS\");\n    echo(ts(': ' + stype + '[]') );\n    echoLine(\" = [];\");\n    echo(\"    var _sematicVal\");\n    echo(ts(': ' + stype) );\n    echoLine(\";\");\n    echoLine(\"\");\n    echoLine(\"    var _stop;\");\n    echoLine(\"\");\n    echo(\"    var _handlers\");\n    echo(ts(\": {[s: string]: ((a1?, a2?, a3?) => any)[]}\") );\n    echoLine(\" = {};\");\n    echoLine(\"\");\n    echoLine(\"    // extra members, defined by %extra_arg\");\n    echo(\"    \");\n    echo(n(input.file.extraArgs) );\n    echoLine(\"\");\n    if(ists) { \n    echoLine(\"\");\n    echoLine(\"    return {\");\n    echoLine(\"        init,\");\n    echoLine(\"        on,\");\n    echoLine(\"        accept,\");\n    echoLine(\"        end,\");\n    echoLine(\"        halt\");\n    echo(\"    };\");\n    } else { \n    echoLine(\"\");\n    echoLine(\"    return {\");\n    echoLine(\"        init: init,\");\n    echoLine(\"        on: on,\");\n    echoLine(\"        accept: accept,\");\n    echoLine(\"        end: end,\");\n    echoLine(\"        halt: halt\");\n    echo(\"    };\");\n    } \n    echoLine(\"\");\n    echo(\"    function init(\");\n    echo(n(input.file.initArg) );\n    echoLine(\"){\");\n    echoLine(\"        _lexState = [ 0 ];// DEFAULT\");\n    echoLine(\"        _state = 0;\");\n    echoLine(\"        _matched = '';\");\n    echoLine(\"        _token = new Token(-1, null, 0, 0, 0, 0);\");\n    echoLine(\"        _marker.state = -1;\");\n    echoLine(\"        _backupCount = 0;\");\n    echoLine(\"        _line = _tline = 0;\");\n    echoLine(\"        _column = _tcolumn = 0;\");\n    echoLine(\"        \");\n    echoLine(\"        _lrState = [ 0 ];\");\n    echoLine(\"        _sematicS = [];\");\n    echoLine(\"        _sematicVal = null;\");\n    echoLine(\"\");\n    echoLine(\"        _stop = false;\");\n    echo(\"        \");\n    echo(n(input.file.initBody) );\n    echoLine(\"\");\n    echoLine(\"    }\");\n    echoLine(\"    /**\");\n    echoLine(\"     *  set \");\n    echoLine(\"     */\");\n    echo(\"    function _setImg(s\");\n    echo(ts(\": string\") );\n    echoLine(\"){\");\n    echoLine(\"        _matched = s;\");\n    echoLine(\"        _tline = _line;\");\n    echoLine(\"        _tcolumn = _column;\");\n    echoLine(\"    }\");\n    echo(\"    function _prepareToken(tid\");\n    echo(ts(\": number\") );\n    echoLine(\"){\");\n    echoLine(\"        _token.id = tid;\");\n    echoLine(\"        _token.val = _matched;\");\n    echoLine(\"        _token.startLine = _tline;\");\n    echoLine(\"        _token.startColumn = _tcolumn;\");\n    echoLine(\"        _token.endLine = _line;\");\n    echoLine(\"        _token.endColumn = _column - 1;\");\n    echoLine(\"\");\n    echoLine(\"        _matched = '';\");\n    echoLine(\"        _tline = _line;\");\n    echoLine(\"        _tcolumn = _column;\");\n    echoLine(\"    }\");\n    echoLine(\"    function _returnToken(){\");\n    echo(\"        _emit('token', \");\n    echo(prefix );\n    echoLine(\"tokenNames[_token.id], _token.val);\");\n    echoLine(\"        while(!_stop && !_acceptToken(_token));\");\n    echoLine(\"        _token.id = -1;\");\n    echoLine(\"    }\");\n    echo(\"    function _emit(name\");\n    echo(ts(\": string\") + ts(\", a1?, a2?, a3?\", \", a1, a2, a3\") );\n    echoLine(\"){\");\n    echoLine(\"        var cbs = _handlers[name];\");\n    echoLine(\"        if(cbs){\");\n    echoLine(\"            for(var i = 0; i < cbs.length; i++){\");\n    echoLine(\"                cbs[i](a1, a2, a3);\");\n    echoLine(\"            }\");\n    echoLine(\"        }\");\n    echoLine(\"    }\");\n    echo(\"    function on(name\");\n    echo(ts(\": string\") );\n    echo(\", cb\");\n    echo(ts(\": (a1?, a2?, a3?) => any\") );\n    echoLine(\"){\");\n    echoLine(\"        _handlers[name] || (_handlers[name] = []);\");\n    echoLine(\"        _handlers[name].push(cb);\");\n    echo(\"    }\");\n    for(let i = 0, _a = dfas; i < _a.length; i++){\n    printLexActionsFunc(_a[i], i);\n} \n    echoLine(\"\");\n    echoLine(\"    /**\");\n    echoLine(\"     *  do a lexical action\");\n    echoLine(\"     *  @api private\");\n    echoLine(\"     *  @internal\");\n    echoLine(\"     */\");\n    echo(\"    function _doLexAction(lexstate\");\n    echo(ts(\": number\") );\n    echo(\", state\");\n    echo(ts(\": number\") );\n    echoLine(\"){\");\n    echo(\"        switch(lexstate){\");\n    for(let i = 0;i < dfas.length;i++){ \n    echoLine(\"\");\n    echo(\"            case \");\n    echo(i );\n    echoLine(\":\");\n    echo(\"                _doLexAction\");\n    echo(i );\n    echoLine(\"(state);\");\n    echo(\"                break;\");\n    } \n    echoLine(\"\");\n    echoLine(\"            default:;\");\n    echoLine(\"        }\");\n    echoLine(\"        _token.id !== -1 && _returnToken();\");\n    echoLine(\"    }\");\n    echo(\"    function _rollback()\");\n    echo(ts(\": string\") );\n    echoLine(\"{\");\n    echoLine(\"        let ret = _matched.substr(_matched.length - _backupCount, _backupCount);\");\n    echoLine(\"        _matched = _matched.substr(0, _matched.length - _backupCount);\");\n    echoLine(\"        _backupCount = 0;\");\n    echoLine(\"        _line = _marker.line;\");\n    echoLine(\"        _column = _marker.column;\");\n    echoLine(\"        _state = _marker.state;\");\n    echoLine(\"        _marker.state = -1;\");\n    echoLine(\"        return ret;\");\n    echoLine(\"    }\");\n    echoLine(\"    function _mark(){\");\n    echoLine(\"        _marker.state = _state;\");\n    echoLine(\"        _marker.line = _line;\");\n    echoLine(\"        _marker.column = _column;\");\n    echoLine(\"        _backupCount = 0;\");\n    echoLine(\"    }\");\n    echo(\"    function _consume(c\");\n    echo(ts(\": string\") );\n    echoLine(\"){\");\n    echoLine(\"        c === '\\\\n' ? (_line++, _column = 0) : (_column += c.charCodeAt(0) > 0xff ? 2 : 1);\");\n    echoLine(\"        _matched += c;\");\n    echoLine(\"        _marker.state !== -1 && (_backupCount++);\");\n    echoLine(\"        return true;\");\n    echoLine(\"    }\");\n    echoLine(\"    /**\");\n    echoLine(\"     *  accept a character\");\n    echoLine(\"     *  @return - true if the character is consumed, false if not consumed\");\n    echoLine(\"     *  @api private\");\n    echoLine(\"     *  @internal\");\n    echoLine(\"     */\");\n    echo(\"    function _acceptChar(c\");\n    echo(ts(\": string\") );\n    echoLine(\"){\");\n    echoLine(\"        var lexstate = _lexState[_lexState.length - 1];\");\n    echoLine(\"        var retn = { state: _state, hasArc: false, isEnd: false };\");\n    echo(\"        \");\n    echo(prefix );\n    echoLine(\"lexers[lexstate](c.charCodeAt(0), retn);\");\n    echoLine(\"        if(retn.isEnd){\");\n    echoLine(\"            // if current state is a terminate state, be careful\");\n    echoLine(\"            if(retn.hasArc){\");\n    echoLine(\"                if(retn.state === -1){\");\n    echoLine(\"                    // nowhere to go, stay where we are\");\n    echoLine(\"                    _doLexAction(lexstate, _state);\");\n    echoLine(\"                    // recover\");\n    echoLine(\"                    _marker.state = -1;\");\n    echoLine(\"                    _backupCount = 0;\");\n    echoLine(\"                    _state = 0;                    \");\n    echoLine(\"                    // character not consumed\");\n    echoLine(\"                    return false;\");\n    echoLine(\"                }\");\n    echoLine(\"                else {\");\n    echoLine(\"                    // now we can either go to that new state, or stay where we are\");\n    echoLine(\"                    // it is prefered to move forward, but that could lead to errors,\");\n    echoLine(\"                    // so we need to memorize this state before move on, in case if \");\n    echoLine(\"                    // an error occurs later, we could just return to this state.\");\n    echoLine(\"                    _mark();\");\n    echoLine(\"                    _state = retn.state;\");\n    echoLine(\"                    return _consume(c);\");\n    echoLine(\"                }\");\n    echoLine(\"            }\");\n    echoLine(\"            else {\");\n    echoLine(\"                // current state doesn't lead to any state, just stay here.\");\n    echoLine(\"                _doLexAction(lexstate, _state);\");\n    echoLine(\"                // recover\");\n    echoLine(\"                _marker.state = -1;\");\n    echoLine(\"                _backupCount = 0;\");\n    echoLine(\"                _state = 0;\");\n    echoLine(\"                // character not consumed\");\n    echoLine(\"                return false;\");\n    echoLine(\"            }\");\n    echoLine(\"        }\");\n    echoLine(\"        else {\");\n    echoLine(\"            if(retn.state === -1){\");\n    echoLine(\"                // nowhere to go at current state, error may have occured.\");\n    echoLine(\"                // check marker to verify that\");\n    echoLine(\"                if(_marker.state !== -1){\");\n    echoLine(\"                    // we have a previously marked state, which is a terminate state.\");\n    echoLine(\"                    var s = _rollback();\");\n    echoLine(\"                    _doLexAction(lexstate, _state);\");\n    echoLine(\"                    _state = 0;\");\n    echoLine(\"                    accept(s);\");\n    echoLine(\"                    // character not consumed\");\n    echoLine(\"                    return false;\");\n    echoLine(\"                }\");\n    echoLine(\"                else {\");\n    echoLine(\"                    // error occurs\");\n    echoLine(\"                    _emit('lexicalerror', \\\"unexpected character \\\" + c, _line, _column);\");\n    echoLine(\"                    // force consume\");\n    echoLine(\"                    return true;\");\n    echoLine(\"                }\");\n    echoLine(\"            }\");\n    echoLine(\"            else {\");\n    echoLine(\"                _state = retn.state;\");\n    echoLine(\"                // character consumed\");\n    echoLine(\"                return _consume(c);\");\n    echoLine(\"            }\");\n    echoLine(\"        }\");\n    echoLine(\"    }\");\n    echoLine(\"    function _acceptEOF(){\");\n    echoLine(\"        if(_state === 0){\");\n    echoLine(\"            // recover\");\n    echoLine(\"            _prepareToken(0);\");\n    echoLine(\"            _returnToken();\");\n    echoLine(\"            return true;\");\n    echoLine(\"        }\");\n    echoLine(\"        else {\");\n    echoLine(\"            let lexstate = _lexState[_lexState.length - 1];\");\n    echoLine(\"            let retn = { state: _state, hasArc: false, isEnd: false };\");\n    echo(\"            \");\n    echo(prefix );\n    echoLine(\"lexers[lexstate](-1, retn);\");\n    echoLine(\"            if(retn.isEnd){\");\n    echoLine(\"                _doLexAction(lexstate, _state);\");\n    echoLine(\"                _state = 0;\");\n    echoLine(\"                _marker.state = -1;\");\n    echoLine(\"                return false;\");\n    echoLine(\"            }\");\n    echoLine(\"            else if(_marker.state !== -1){\");\n    echoLine(\"                let s = _rollback();\");\n    echoLine(\"                _doLexAction(lexstate, _state);\");\n    echoLine(\"                _state = 0;\");\n    echoLine(\"                accept(s);\");\n    echoLine(\"                return false;\");\n    echoLine(\"            }\");\n    echoLine(\"            else {\");\n    echoLine(\"                _emit('lexicalerror', 'unexpected end of file');\");\n    echoLine(\"                return true;\");\n    echoLine(\"            }\");\n    echoLine(\"        }\");\n    echoLine(\"    }\");\n    echoLine(\"    /**\");\n    echoLine(\"     *  input a string\");\n    echoLine(\"     *  @api public\");\n    echoLine(\"     */\");\n    echo(\"    function accept(s\");\n    echo(ts(\": string\") );\n    echoLine(\"){\");\n    echoLine(\"        for(let i = 0; i < s.length && !_stop;){\");\n    echoLine(\"            _acceptChar(s.charAt(i)) && i++;\");\n    echoLine(\"        }\");\n    echoLine(\"    }\");\n    echoLine(\"    /**\");\n    echoLine(\"     *  tell the compiler that end of file is reached\");\n    echoLine(\"     *  @api public\");\n    echoLine(\"     */\");\n    echoLine(\"    function end(){\");\n    echoLine(\"        while(!_stop && !_acceptEOF());\");\n    echoLine(\"        _stop = true;\");\n    echoLine(\"    }\");\n    echoLine(\"    function halt(){\");\n    echoLine(\"        _stop = true;\");\n    echo(\"    }\");\n    function printReduceActions(){\n    let codegen = {\n        addBlock(b: string, line: number){ \n    echoLine(\"\");\n    echo(\"                {\");\n    echo(b.replace(/\\$\\$/g, prefix + 'top') );\n    echo(\"}\");\n    },\n        pushLexState(n: number){ \n    echoLine(\"\");\n    echo(\"                _lexState.push(\");\n    echo(n );\n    echo(\");\");\n    },\n        popLexState(){ \n    echoLine(\"\");\n    echo(\"                _lexState.pop();\");\n    },\n        setImg(n: string){ \n    echoLine(\"\");\n    echo(\"                _setImg(\\\"\");\n    echo(n );\n    echo(\"\\\");\");\n    },\n        returnToken(t: TokenDef){\n            // should not happen\n        }\n    };\n    for(let rule of input.file.grammar.rules){\n        if(rule.action !== null){ \n    echoLine(\"\");\n    echo(\"            case \");\n    echo(rule.index );\n    echoLine(\":\");\n    echo(\"                /* \");\n    echo(rule.toString() );\n    echo(\" */\");\n    for(let uvar in rule.vars){ \n    echoLine(\"\");\n    echo(\"                var \");\n    echo(uvar );\n    echo(\" = _sematicS[\");\n    echo(prefix );\n    echo(\"sp - \");\n    echo(rule.rhs.length - rule.vars[uvar].val );\n    echo(\"];\");\n    }\n            for(let uvar2 in rule.usedVars){ \n    echoLine(\"\");\n    echo(\"                var \");\n    echo(uvar2 );\n    echo(\" = _sematicS[\");\n    echo(prefix );\n    echo(\"sp - \");\n    echo(rule.usedVars[uvar2].val );\n    echo(\"];\");\n    }\n            for(let act of rule.action){\n                act.toCode(codegen);\n            } \n    echoLine(\"\");\n    echo(\"                break;\");\n    }\n    }\n} \n    echoLine(\"\");\n    echo(\"    function _doReduction(\");\n    echo(prefix );\n    echo(\"rulenum\");\n    echo(ts(\": number\") );\n    echoLine(\"){\");\n    echo(\"        var \");\n    echo(prefix );\n    echo(\"nt = \");\n    echo(prefix );\n    echo(\"lhs[\");\n    echo(prefix );\n    echoLine(\"rulenum];\");\n    echo(\"        var \");\n    echo(prefix );\n    echoLine(\"sp = _sematicS.length;\");\n    echo(\"        var \");\n    echo(prefix );\n    echo(\"top = _sematicS[\");\n    echo(prefix );\n    echo(\"sp - \");\n    echo(prefix );\n    echo(\"ruleLen[\");\n    echo(prefix );\n    echoLine(\"rulenum]] || null;\");\n    echo(\"        switch(\");\n    echo(prefix );\n    echo(\"rulenum){\");\n    printReduceActions(); \n    echoLine(\"\");\n    echoLine(\"        }\");\n    echo(\"        _lrState.length -= \");\n    echo(prefix );\n    echo(\"ruleLen[\");\n    echo(prefix );\n    echoLine(\"rulenum];\");\n    echo(\"        var \");\n    echo(prefix );\n    echoLine(\"cstate = _lrState[_lrState.length - 1];\");\n    echo(\"        _lrState.push(\");\n    echo(prefix );\n    echo(\"pgoto[\");\n    echo(prefix );\n    echo(\"disgoto[\");\n    echo(prefix );\n    echo(\"cstate] + \");\n    echo(prefix );\n    echoLine(\"nt]);\");\n    echoLine(\"\");\n    echo(\"        _sematicS.length -= \");\n    echo(prefix );\n    echo(\"ruleLen[\");\n    echo(prefix );\n    echoLine(\"rulenum];\");\n    echo(\"        _sematicS.push(\");\n    echo(prefix );\n    echoLine(\"top);\");\n    echoLine(\"    }\");\n    echoLine(\"\");\n    echo(\"    function _acceptToken(t\");\n    echo(ts(\": Token\") );\n    echoLine(\"){\");\n    echoLine(\"        // look up action table\");\n    echoLine(\"        var cstate = _lrState[_lrState.length - 1];\");\n    echo(\"        var ind = \");\n    echo(prefix );\n    echoLine(\"disact[cstate] + t.id;\");\n    echoLine(\"        var act = 0;\");\n    echo(\"        if(ind < 0 || ind >= \");\n    echo(prefix );\n    echo(\"pact.length || \");\n    echo(prefix );\n    echoLine(\"checkact[ind] !== cstate){\");\n    echo(\"            act = -\");\n    echo(prefix );\n    echoLine(\"defred[cstate] - 1;\");\n    echoLine(\"        }\");\n    echoLine(\"        else {\");\n    echo(\"            act = \");\n    echo(prefix );\n    echoLine(\"pact[ind];\");\n    echoLine(\"        }\");\n    echo(\"        if(act === \");\n    echo(prefix );\n    echoLine(\"actERR){\");\n    echoLine(\"            // explicit error\");\n    echoLine(\"            _syntaxError(t);\");\n    echoLine(\"            return true;\");\n    echoLine(\"        }\");\n    echoLine(\"        else if(act > 0){\");\n    echoLine(\"            // shift\");\n    echoLine(\"            if(t.id === 0){\");\n    echoLine(\"                // end of file\");\n    echoLine(\"                _stop = true;\");\n    echoLine(\"                _emit('accept');\");\n    echoLine(\"                return true;\");\n    echoLine(\"            }\");\n    echoLine(\"            else {\");\n    echoLine(\"                _lrState.push(act - 1);\");\n    echoLine(\"                _sematicS.push(_sematicVal);\");\n    echoLine(\"                _sematicVal = null;\");\n    echoLine(\"                // token consumed\");\n    echoLine(\"                return true;\");\n    echoLine(\"            }\");\n    echoLine(\"        }\");\n    echoLine(\"        else if(act < 0){\");\n    echoLine(\"            _doReduction(-act - 1);\");\n    echoLine(\"            return false;\");\n    echoLine(\"        }\");\n    echoLine(\"        else {\");\n    echoLine(\"            // error\");\n    echoLine(\"            _syntaxError(t);\");\n    echoLine(\"            // force consume\");\n    echoLine(\"            return true;\");\n    echoLine(\"        }\");\n    echoLine(\"    }\");\n    echo(\"    function _syntaxError(t\");\n    echo(ts(\": Token\") );\n    echoLine(\"){\");\n    echoLine(\"        var msg = \\\"unexpected token \\\" + t.toString() + \\\", expecting one of the following token(s):\\\\n\\\"\");\n    echoLine(\"        msg += _expected(_lrState[_lrState.length - 1]);\");\n    echoLine(\"        _emit(\\\"syntaxerror\\\", msg, t);\");\n    echoLine(\"    }\");\n    echo(\"    function _expected(state\");\n    echo(ts(\": number\") );\n    echoLine(\"){\");\n    echo(\"        var dis = \");\n    echo(prefix );\n    echoLine(\"disact[state];\");\n    echoLine(\"        var ret = '';\");\n    echo(\"        function expect(tk\");\n    echo(ts(\": number\") );\n    echoLine(\"){\");\n    echoLine(\"            var ind = dis + tk;\");\n    echo(\"            if(ind < 0 || ind >= \");\n    echo(prefix );\n    echo(\"pact.length || state !== \");\n    echo(prefix );\n    echoLine(\"checkact[ind]){\");\n    echo(\"                return \");\n    echo(prefix );\n    echoLine(\"defred[state] !== -1;\");\n    echoLine(\"            }\");\n    echoLine(\"            else {\");\n    echoLine(\"                return true;\");\n    echoLine(\"            }\");\n    echoLine(\"        }\");\n    echo(\"        for(var tk = 0; tk < \");\n    echo(prefix );\n    echoLine(\"tokenCount; tk++){\");\n    echoLine(\"            expect(tk) && (ret += \\\"    \\\" + tokenToString(tk) + \\\" ...\\\" + '\\\\n');\");\n    echoLine(\"        }\");\n    echoLine(\"        return ret;\");\n    echoLine(\"    }\");\n    echoLine(\"}\");\n    echo(n(input.file.epilogue) );\n\n}","import { TemplateInput, TemplateOutput } from './def';\nimport { OutputStream } from '../util/io';\n\nimport tsRenderer from './templates/ts';\n\ninterface FileCreator extends TemplateOutput{\n    save(fname: string);\n    write(s: string);\n    writeln(s: string);\n};\n\nvar templates: {[s: string]: (input: TemplateInput, fc: FileCreator) => any} = {};\n\nexport function defineTemplate(name: string, render: (input: TemplateInput, fc: FileCreator) => any){\n    templates[name] = render;\n}\n\nexport function generateCode(lang: string, input: TemplateInput, fc: FileCreator, cb: (err: string) => any){\n    let g = templates[lang];\n    if(g === undefined){\n        throw (`template for language \"${lang}\" is not implemented yet`);\n    }\n    else {\n        templates[lang](input, fc);\n    }\n}\n\nexport function templateExists(t: string){\n    return templates[t] !== undefined;\n}\nexport function listTemplates(): string[]{\n    return Object.keys(templates);\n}\n\ndefineTemplate('typescript', (input, fc) => {\n    tsRenderer(input, fc);\n    fc.save(`${input.file.name}.ts`);\n});\ndefineTemplate('javascript', (input, fc) => {\n    tsRenderer(input, fc);\n    fc.save(`${input.file.name}.js`);\n});","import { genItemSets,genParseTable, Conflict } from '../grammar/ptable-gen';\n// import { parseSource } from '../parser/gparser';\nimport { lexer } from '../lexer/pattern';\nimport { testParse as testParse2 } from './parse-test';\nimport { YYTAB } from '../util/common';\nimport { File } from '../parser/file';\nimport { ItemSet } from '../grammar/item-set';\nimport { ParseTable, IParseTable, printParseTable } from '../grammar/ptable';\nimport { TokenDef } from '../grammar/token-entry';\nimport { NtDef } from '../grammar/grammar';\nimport { List } from '../util/list';\nimport { OutputStream, InputStream, StringIS, endl } from '../util/io';\nimport { Context } from '../util/context';\nimport { JsccError, JsccWarning, Option } from '../util/E';\nimport { CompressedPTable } from '../grammar/ptable-compress';\nimport { TemplateInput } from '../codegen/def';\nimport { parse } from '../parser/parser';\nimport { templateExists, listTemplates } from '../codegen/template';\nimport { markPosition } from '../parser/node';\n\nexport interface Result extends Context{\n    warn(w: JsccWarning);\n    err(e: JsccError);\n    printItemSets(stream: OutputStream);\n    printTable (os: OutputStream);\n    printDFA(os: OutputStream);\n    testParse(tokens: string[]): string[];\n    printError(os: OutputStream, opt: Option);\n    printWarning(os: OutputStream, opt: Option);\n    hasWarning(): boolean;\n    hasError(): boolean;\n    warningSummary();\n    getTemplateInput(): TemplateInput;\n    isTerminated(): boolean;\n}\nexport function genResult(source: string, fname: string): Result{\n    let file: File;\n    let itemSets: List<ItemSet>;\n    let iterationCount: number;\n    let parseTable: CompressedPTable;\n\n    let errors: JsccError[] = [];\n    let warnings: JsccError[] = [];\n    let needLinecbs: ((ctx: Context, lines: string[]) => any)[] = [];\n    let terminated = false;\n\n    let ret: Result = {\n        warn,\n        err,\n        printItemSets,\n        printTable,\n        printDFA,\n        testParse,\n        printError,\n        printWarning,\n        hasWarning,\n        hasError,\n        warningSummary,\n        getTemplateInput,\n        requireLines: cb => needLinecbs.push(cb),\n        isTerminated: () => terminated\n    };\n\n    var f = parse(ret, source);\n    let lines = source.split('\\n');\n    for(let cb of needLinecbs){\n        cb(ret, lines);\n    }\n    if(hasError()){\n        terminated = true;\n        return ret;\n    }\n    f.name = fname;\n    var g = f.grammar;\n    file = f;\n    // we still could have error here\n    for(var s of g.tokens){\n        if(!s.used){\n            let msg = `token <${s.sym}> is never used, definations are(is):` + endl;\n            for(let pos of s.appears){\n                msg += markPosition(pos, lines);\n            }\n            warn(new JsccWarning(msg));\n        }\n    }\n    for(var s2 of g.nts){\n        if(!s2.used){\n            warn(new JsccWarning(`non terminal \"${s2.sym}\" is unreachable`));\n        }\n    }\n    if(f.output !== null && !templateExists(f.output.val)){\n        let msg = `template for '${f.output.val}' is not implemented yet ` + markPosition(f.output, lines) + endl;\n        msg += 'available templates are: ' + listTemplates().join(', ');\n        err(new JsccError(msg));\n    }\n\n    if(hasError()){\n        terminated = true;\n        return ret;\n    }\n    // don't proceed if any error has been detected\n    g.genFirstSets();\n\n    var temp = genItemSets(g);\n    itemSets = temp.result;\n    iterationCount = temp.iterations;\n    var temp2 = genParseTable(g, itemSets);\n    temp2.result.findDefAct();\n    // result.parseTable = temp2.result;\n    parseTable = new CompressedPTable(temp2.result);\n\n    for(let cf of temp2.conflicts){\n        warn(new JsccWarning(cf.toString()));\n    }\n\n    return ret;\n\n    function warn(w: JsccWarning){\n        warnings.push(w);\n    }\n    function err(e: JsccError){\n        errors.push(e);\n    }\n    function printItemSets(stream: OutputStream){\n        stream.writeln(itemSets.size + ' state(s) in total,finished in ' + iterationCount + ' iteration(s).');\n        itemSets.forEach(function(s){\n            stream.writeln(s.toString({ showTrailer: true }));\n        });\n    }\n    function printTable (os: OutputStream){\n        printParseTable(os, parseTable, itemSets);\n    }\n    function printDFA(os: OutputStream){\n        for(let s of file.lexDFA){\n            s.print(os);\n            os.writeln();\n            os.writeln();\n        }\n    }\n    function testParse(tokens: string[]){\n        return testParse2(file.grammar,parseTable,tokens);\n    }\n    function printError(os: OutputStream, opt: Option){\n        for(let e of errors){\n            os.writeln(e.toString(opt));\n        }\n        os.writeln();\n    }\n    function printWarning(os: OutputStream, opt: Option){\n        for(let w of warnings){\n            os.writeln(w.toString(opt));\n        }\n        os.writeln();\n    }\n    function hasWarning(){\n        return warnings.length > 0;\n    }\n    function hasError(){\n        return errors.length > 0;\n    }\n    function warningSummary(){\n        return `${warnings.length} warning(s), ${errors.length} error(s)`;\n    }\n    function getTemplateInput(): TemplateInput{\n        return {\n            endl: '\\n',\n            output: f.output === null ? 'typescript' : f.output.val,\n            pt: parseTable,\n            file: file\n        };\n    }\n}\n"],"names":["console","tslib_1.__extends","E","Action","testParse2"],"mappings":"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AG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IA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K,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,EAAC;gBACzsS,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAA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,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,EAAC;gBACzsS,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC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,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,EAAC;gBACzsS,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK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AI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,EAAC;gBACzsS,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,EAAC;gBAC39K,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI;gBACD,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;aAClB;YACD,MAAM;QACV,KAAK,EAAE;YACH,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;YAClB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC;YACjB,IAAG,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,EAAC;gBACrE,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,KAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAE;gBACzB,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,EAAC;gBACzsS,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,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C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,EAAC;gBACzsS,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;aAClB;iBACI,IAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAA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CAAC,EAAM,CAAC,EAAK,CAAC,CAAC,EAAM,CAAC;IAChE,CAAC,EAAM,CAAC,EAAM,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAM,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAM,CAAC;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAM,CAAC;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC;IACjE,CAAC,CAAC,E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AE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAI,GAAG,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,GAAG,EAAI,GAAG;IAClE,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IACjE,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE;IAClE,GAAG,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAI,GAAG,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,GAAG,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAK,EAAE,EAAM,CAAC,EAAI,CAAC,EAAE,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IACjE,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IAClE,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IACjE,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IACjE,CAAC,CAAC,EAAI,CAAC,EAAE,EAAK,EAAE,EAAM,CAAC,EAAI,CAAC,EAAE,EAAM,CAAC,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE;IACjE,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,CAAC,CAAC,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE;CAChB,CAAC;AAKF,IAAI,UAAU,GAAG;IACR,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAK,EAAE,EAAM,CAAC,EAAM,CAAC,EAAI,GAAG;IAChE,CAAC,EAAI,GAAG,EAAM,CAAC,EAAM,CAAC,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG;IAClE,GAAG,EAAK,EAAE,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG,EAAM,CAAC;IAClE,GAAG,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG;IACjE,EAAE,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAM,CAAC,EAAM,CAAC;IAClE,GAAG,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IAClE,GAAG,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG,EAAM,CAAC,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG;IAClE,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG;IAClE,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC;IAChE,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC;IAChE,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC;IAChE,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC;IAChE,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC,EAAM,CAAC;CACjE,CAAC;AAKF,IAAI,QAAQ,GAAG;IACN,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAM,CAAC,EAAK,CAAC,CAAC,EAAM,CAAC,EAAM,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAI,GAAG;IAClE,GAAG,EAAI,GAAG,EAAI,GAAG,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAM,CAAC,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAM,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAM,CAAC,EAAK,EAAE;IACjE,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC;IACjE,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IACjE,CAAC,CAAC,EAAK,EAAE,EAAM,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAM,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAI,GAAG,EAAI,GAAG,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAM,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG;IACjE,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAI,GAAG;IACjE,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC;IAClE,GAAG,EAAI,GAAG,EAAI,GAAG,EAAK,CAAC,CAAC,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,CAAC,CAAC;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE;IACjE,CAAC,CAAC,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE;IACjE,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG,EAAK,EAAE,EAAK,EAAE,EAAI,GAAG;IAClE,GAAG,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE;IAClE,GAAG,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE;IACjE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,EAAE,EAAK,CAAC,CAAC;IACjE,EAAE,EAAK,CAAC,CAAC,EAAK,CAAC,CAAC,EAAK,EAAE,EAAK,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,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IACjE,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAM,CAAC,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAM,CAAC,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE;IACjE,EAAE,EAAK,EAAE,EAAK,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAK,EAAE;IAClE,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,EAAE,EAAI,CAAC,E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"}