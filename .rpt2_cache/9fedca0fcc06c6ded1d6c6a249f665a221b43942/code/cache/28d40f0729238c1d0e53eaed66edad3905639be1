{"code":"import * as tslib_1 from \"tslib\";\r\nvar JsccError = (function () {\r\n    function JsccError(msg, type) {\r\n        if (type === void 0) { type = 'Error'; }\r\n        this.msg = msg;\r\n        this.type = type;\r\n    }\r\n    JsccError.prototype.toString = function (opt) {\r\n        if (opt === void 0) { opt = {}; }\r\n        var escape = !!opt.escape;\r\n        var ret = this.type;\r\n        if (opt.typeClass) {\r\n            ret = '<span class=\"' + opt.typeClass + '\">' + ret + '</span>';\r\n        }\r\n        ret += ': ';\r\n        ret += escape ? this.msg.replace(/</g, '&lt').replace(/>/g, '&gt') : this.msg;\r\n        return ret;\r\n    };\r\n    return JsccError;\r\n}());\r\nexport { JsccError };\r\nvar CompilationError = (function (_super) {\r\n    tslib_1.__extends(CompilationError, _super);\r\n    function CompilationError(msg, line) {\r\n        var _this = _super.call(this, msg, 'CompilationError') || this;\r\n        _this.line = line;\r\n        return _this;\r\n    }\r\n    CompilationError.prototype.toString = function (opt) {\r\n        return _super.prototype.toString.call(this, opt) + (\"(at line \" + this.line + \")\");\r\n    };\r\n    return CompilationError;\r\n}(JsccError));\r\nexport { CompilationError };\r\n","map":{"mappings":""}}
