{"code":"import { genItemSets, genParseTable } from '../grammar/ptable-gen';\r\nimport { parseSource } from '../parser/gparser';\r\nimport { testParse } from './parse-test';\r\nimport { YYTAB } from '../util/common';\r\nvar Result = (function () {\r\n    function Result() {\r\n        this.unusedTokens = [];\r\n        this.unusedNts = [];\r\n    }\r\n    Result.prototype.printItemSets = function (stream) {\r\n        stream.writeln(this.itemSets.size + ' state(s) in total,finished in ' + this.iterationCount + ' iteration(s).');\r\n        this.itemSets.forEach(function (s) {\r\n            stream.writeln(s.toString({ showTrailer: true }));\r\n        });\r\n    };\r\n    Result.prototype.printTable = function (stream) {\r\n        this.parseTable.summary(this.itemSets, stream);\r\n    };\r\n    Result.prototype.testParse = function (tokens) {\r\n        return testParse(this.file.grammar, this.parseTable, tokens);\r\n    };\r\n    Result.prototype.warningMsg = function () {\r\n        var ret = '';\r\n        if (this.unusedTokens.length > 0) {\r\n            ret += 'unused tokens:\\n';\r\n            for (var _i = 0, _a = this.unusedTokens; _i < _a.length; _i++) {\r\n                var t = _a[_i];\r\n                ret += YYTAB + '\"' + t.sym + '\" (defined at line ' + t.line + ')\\n';\r\n            }\r\n        }\r\n        if (this.unusedNts.length > 0) {\r\n            ret += 'unused non terminals:\\n';\r\n            for (var _b = 0, _c = this.unusedNts; _b < _c.length; _b++) {\r\n                var t2 = _c[_b];\r\n                ret += YYTAB + t2.sym + '\\n';\r\n            }\r\n        }\r\n        for (var _d = 0, _e = this.conflicts; _d < _e.length; _d++) {\r\n            var cf = _e[_d];\r\n            ret += cf.toString() + '\\n';\r\n        }\r\n        return ret;\r\n    };\r\n    return Result;\r\n}());\r\nfunction genResult(stream) {\r\n    var result = new Result();\r\n    var f = parseSource(stream);\r\n    var g = f.grammar;\r\n    g.genFirstSets();\r\n    result.file = f;\r\n    var temp = genItemSets(g);\r\n    result.itemSets = temp.result;\r\n    result.iterationCount = temp.iterations;\r\n    var temp2 = genParseTable(g, result.itemSets);\r\n    result.parseTable = temp2.result;\r\n    result.conflicts = temp2.conflicts;\r\n    for (var _i = 0, _a = g.tokens; _i < _a.length; _i++) {\r\n        var s = _a[_i];\r\n        if (!s.used) {\r\n            result.unusedTokens.push(s);\r\n        }\r\n    }\r\n    for (var _b = 0, _c = g.nts; _b < _c.length; _b++) {\r\n        var s2 = _c[_b];\r\n        if (!s2.used) {\r\n            result.unusedNts.push(s2);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport { genResult };\r\n","map":{"mappings":""}}
