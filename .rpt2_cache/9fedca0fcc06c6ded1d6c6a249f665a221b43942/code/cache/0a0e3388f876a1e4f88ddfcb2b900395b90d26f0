{"code":"import { JsccError as E } from '../util/E';\r\nimport { Action } from '../grammar/item-set';\r\nfunction testParse(g, pt, tokens) {\r\n    var tk = [];\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        var tid = g.findToken(tokens[i]);\r\n        if (tid === -1) {\r\n            throw new E('cannot recognize \"' + tokens[i] + '\" as a token');\r\n        }\r\n        tk.push(tid);\r\n    }\r\n    var state = [0];\r\n    var stack = [];\r\n    var ret = [];\r\n    function s() {\r\n        return state[state.length - 1];\r\n    }\r\n    function shift(ns) {\r\n        state.push(ns);\r\n        stack.push(g.tokens[tk.shift()].sym);\r\n    }\r\n    function reduce(rule) {\r\n    }\r\n    function dump() {\r\n        var ret = '';\r\n        for (var i = 0; i < stack.length; i++) {\r\n            ret += stack[i] + ' ';\r\n        }\r\n        ret += '| ';\r\n        for (var i = 0; i < tk.length; i++) {\r\n            ret += g.tokens[tk[i]].sym + ' ';\r\n        }\r\n        return ret;\r\n    }\r\n    ret.push(dump());\r\n    do {\r\n        var item = pt.lookupShift(s(), tk[0] || 0);\r\n        if (item !== null) {\r\n            if (item.actionType === Action.SHIFT) {\r\n                shift(item.shift.stateIndex);\r\n            }\r\n            else if (item.actionType === Action.REDUCE) {\r\n                var rule = item.rule;\r\n                var rlen = rule.rhs.length;\r\n                while (rlen-- > 0) {\r\n                    state.pop();\r\n                    stack.pop();\r\n                }\r\n                stack.push(g.nts[rule.lhs].sym);\r\n                if (item.rule.index === 0) {\r\n                    ret.push('accepted!');\r\n                    break;\r\n                }\r\n                else {\r\n                    var gotot = pt.lookupGoto(s(), rule.lhs).shift.stateIndex;\r\n                    state.push(gotot);\r\n                }\r\n            }\r\n            else {\r\n                console.assert(false);\r\n            }\r\n        }\r\n        else {\r\n            ret.push('syntax error!');\r\n            break;\r\n        }\r\n        ret.push(dump());\r\n    } while (true);\r\n    return ret;\r\n}\r\nexport { testParse };\r\n","map":{"mappings":""}}
