{"code":"import { biss } from '../util/io.js';\r\nvar DFA = (function () {\r\n    function DFA(states, actions) {\r\n        this.states = states;\r\n        this.actions = actions;\r\n        this.start = states[0];\r\n    }\r\n    DFA.prototype.toString = function () {\r\n        var ret = '';\r\n        for (var i = 0; i < this.states.length; i++) {\r\n            ret += this.states[i].toString() + '\\n';\r\n        }\r\n        return ret;\r\n    };\r\n    DFA.prototype.matcher = function (stream) {\r\n        var bs = biss(stream);\r\n        var backups = [];\r\n        var matched = [];\r\n        var marker = null;\r\n        var c = bs.peek();\r\n        var cs;\r\n        function nc() {\r\n            if (marker !== null) {\r\n                backups.push(c);\r\n            }\r\n            matched.push(c);\r\n            bs.next();\r\n            c = bs.peek();\r\n        }\r\n        function rollback() {\r\n            cs = marker;\r\n            marker = null;\r\n            while (backups.length > 0) {\r\n                bs.backup(backups.pop());\r\n                matched.pop();\r\n            }\r\n        }\r\n        var cela = this;\r\n        return function () {\r\n            c = bs.peek();\r\n            cs = cela.start;\r\n            matched.length = 0;\r\n            backups.length = 0;\r\n            marker = null;\r\n            var ns;\r\n            while (true) {\r\n                if (cs.endAction !== null) {\r\n                    if (cs.hasArc()) {\r\n                        ns = c !== null ? cs.getState(c.charCodeAt(0)) : null;\r\n                        if (ns === null) {\r\n                            return { matched: matched.join(''), action: cs.endAction };\r\n                        }\r\n                        else {\r\n                            backups.length = 0;\r\n                            marker = cs;\r\n                            cs = ns;\r\n                            nc();\r\n                        }\r\n                    }\r\n                    else {\r\n                        return { matched: matched.join(''), action: cs.endAction };\r\n                    }\r\n                }\r\n                else {\r\n                    ns = c !== null ? cs.getState(c.charCodeAt(0)) : null;\r\n                    if (ns === null) {\r\n                        if (marker !== null) {\r\n                            rollback();\r\n                            return { matched: matched.join(''), action: cs.endAction };\r\n                        }\r\n                        else if (c === null) {\r\n                            return null;\r\n                        }\r\n                        else {\r\n                            throw new Error('unexpected character \"' + c + '\"');\r\n                        }\r\n                    }\r\n                    else {\r\n                        cs = ns;\r\n                        nc();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return DFA;\r\n}());\r\nexport { DFA };\r\n","map":{"mappings":""}}
