{"code":"export class Rule {\r\n    constructor(g, lhs, action, rhs, index, line) {\r\n        this.g = g;\r\n        this.lhs = lhs;\r\n        this.action = action;\r\n        this.rhs = rhs;\r\n        this.index = index;\r\n        this.line = line;\r\n        this.pr = -1;\r\n        this.vars = null;\r\n    }\r\n    toString(marker) {\r\n        var ret = this.index + ': ' + this.g.nts[this.lhs].sym + ' =>';\r\n        for (var i = 0; i < this.rhs.length; i++) {\r\n            var r = this.rhs[i];\r\n            if (marker === i) {\r\n                ret += ' .';\r\n            }\r\n            if (this.g.isToken(r)) {\r\n                ret += ' \"' + this.g.tokens[r].sym + '\"';\r\n            }\r\n            else {\r\n                ret += ' ' + this.g.nts[r - this.g.tokenCount].sym;\r\n            }\r\n        }\r\n        if (marker === this.rhs.length) {\r\n            ret += ' .';\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nexport class Grammar {\r\n    constructor() {\r\n        this.tokens = [];\r\n        this.tokenCount = 0;\r\n        this.nts = [];\r\n        this.rules = [];\r\n        this.toString = function (opt = {}) {\r\n            opt = opt || {};\r\n            var endl = opt.endl || '\\n';\r\n            var escape = opt.escape || false;\r\n            var ret = '';\r\n            this.forEachRule(function (lhs, rule) {\r\n                var s = rule.toString();\r\n                ret += s + '\\n';\r\n            });\r\n            if (opt.firstSets) {\r\n                for (var i = 0; i < this.nts.length; i++) {\r\n                    var s = this.nts[i];\r\n                    ret += 'First(' + s.sym + ') = { ' + s.firstSet.toString(this) + ' }';\r\n                    ret += '\\n';\r\n                }\r\n            }\r\n            if (escape) {\r\n                ret = ret.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n            }\r\n            return ret.replace(/\\n/g, endl);\r\n        };\r\n    }\r\n    isToken(t) {\r\n        return t < this.tokenCount;\r\n    }\r\n    forEachRule(cb) {\r\n        for (var i = 0; i < this.rules.length; i++) {\r\n            var rules = this.rules[i];\r\n            for (var j = 0; j < rules.length; j++) {\r\n                cb(i, rules[j]);\r\n            }\r\n        }\r\n    }\r\n    forEachRuleOfNt(lhs, cb) {\r\n        var rules = this.rules[lhs];\r\n        for (var j = 0; j < rules.length; j++) {\r\n            if (cb(rules[j])) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    genFirstSets() {\r\n        var changed = true;\r\n        while (changed) {\r\n            changed = false;\r\n            for (var i = 0; i < this.nts.length; i++) {\r\n                var rules = this.rules[i];\r\n                var firstSet = this.nts[i].firstSet;\r\n                for (var j = 0; j < rules.length; j++) {\r\n                    var rule = rules[j];\r\n                    if (rule.rhs.length === 0) {\r\n                        changed = changed || firstSet.add(0);\r\n                    }\r\n                    else {\r\n                        for (var k = 0; k < rule.rhs.length; k++) {\r\n                            var ritem = rule.rhs[k];\r\n                            if (this.isToken(ritem)) {\r\n                                changed = changed || firstSet.add(ritem + 1);\r\n                                break;\r\n                            }\r\n                            else {\r\n                                if (i !== ritem) {\r\n                                    changed = changed || firstSet.union(this.nts[ritem - this.tokenCount].firstSet);\r\n                                }\r\n                                if (!firstSet.contains(0)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findToken(t) {\r\n        for (var i = 0; i < this.tokenCount; i++) {\r\n            if (this.tokens[i].sym === t) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n","map":{"mappings":""}}
