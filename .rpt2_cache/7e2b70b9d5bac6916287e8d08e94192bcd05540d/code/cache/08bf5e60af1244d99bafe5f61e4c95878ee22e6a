{"code":"import { console, YYTAB } from '../util/common';\r\nimport { Item, Action, ItemSet } from './item-set';\r\nimport { List } from '../util/list';\r\nimport { ParseTable } from './ptable';\r\nimport { Assoc } from './token-entry';\r\nimport { TokenSet } from './token-set';\r\nvar ConflictType;\r\n(function (ConflictType) {\r\n    ConflictType[ConflictType[\"RR\"] = 0] = \"RR\";\r\n    ConflictType[ConflictType[\"SR\"] = 1] = \"SR\";\r\n})(ConflictType || (ConflictType = {}));\r\n;\r\nexport class Conflict {\r\n    toString() {\r\n        var ret = 'state ' + this.set.stateIndex + ',' + Conflict.cNames[this.type] + ' conflict:\\n';\r\n        ret += YYTAB + 'token: \"' + this.token.sym + '\"\\n';\r\n        ret += YYTAB + 'used rule: ' + this.used.toString() + '\\n';\r\n        ret += YYTAB + 'discarded rule: ' + this.discarded.toString() + '\\n';\r\n        return ret;\r\n    }\r\n}\r\nConflict.cNames = ['reduce/reduce', 'shift/reduce'];\r\nexport function genInitialSet(g) {\r\n    var start = g.rules[0][0];\r\n    var iset = new ItemSet(g);\r\n    iset.index = 0;\r\n    var set1 = new TokenSet(g.tokenCount);\r\n    set1.add(1);\r\n    iset.add(start, 0, true, set1, false);\r\n    return iset;\r\n}\r\nexport function genItemSets(g) {\r\n    var htable = {};\r\n    var iterations = 0;\r\n    function addToTable(iset) {\r\n        var h = iset.kernelHash();\r\n        if (htable[h] === undefined) {\r\n            htable[h] = [];\r\n        }\r\n        htable[h].push(iset);\r\n    }\r\n    function forEachInBucket(set, cb) {\r\n        var b = htable[set.kernelHash()];\r\n        if (b !== undefined) {\r\n            for (var i = 0; i < b.length; i++) {\r\n                if (cb(b[i]))\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    var index = 1;\r\n    var todoList = new List();\r\n    var incList = new List();\r\n    var doneList = new List();\r\n    todoList.append(genInitialSet(g));\r\n    while (!todoList.isEmpty() || !incList.isEmpty()) {\r\n        var comeFrom = null;\r\n        if (!incList.isEmpty()) {\r\n            var set = comeFrom = incList.pull();\r\n            set.forEach(function (item) {\r\n                if (item.actionType === Action.NONE) {\r\n                    console.assert(item.canShift());\r\n                    var shift = item.getShift();\r\n                    var newSet = new ItemSet(g);\r\n                    newSet.index = index++;\r\n                    todoList.append(newSet);\r\n                    set.forEach(function (item1) {\r\n                        if (item1.canShift()) {\r\n                            var rItem = item1.getShift();\r\n                            if (rItem === shift) {\r\n                                item1.actionType = Action.SHIFT;\r\n                                item1.shift = newSet;\r\n                                newSet.add(item1.rule, item1.marker + 1, true, item1.lah, false);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            set.complete = true;\r\n            doneList.append(set);\r\n        }\r\n        while (!todoList.isEmpty()) {\r\n            var set = todoList.pull();\r\n            set.closure();\r\n            set.forEach(function (item) {\r\n                if (!item.canShift()) {\r\n                    item.actionType = Action.REDUCE;\r\n                }\r\n            });\r\n            var merged = null;\r\n            forEachInBucket(set, function (gSet) {\r\n                if (gSet.canMergeTo(set)) {\r\n                    if (gSet.mergeTo(set)) {\r\n                        if (gSet.complete) {\r\n                            merged = gSet;\r\n                        }\r\n                    }\r\n                    if (comeFrom !== null) {\r\n                        comeFrom.forEach(function (sItem) {\r\n                            if (sItem.actionType === Action.SHIFT && sItem.shift === set) {\r\n                                sItem.shift = gSet;\r\n                            }\r\n                        });\r\n                    }\r\n                    set = null;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (merged !== null) {\r\n                doneList.remove(merged);\r\n                incList.append(merged);\r\n                merged.complete = false;\r\n            }\r\n            else if (set !== null) {\r\n                incList.append(set);\r\n                addToTable(set);\r\n            }\r\n        }\r\n        iterations++;\r\n    }\r\n    var i = 0;\r\n    doneList.forEach(function (set) {\r\n        set.stateIndex = i++;\r\n    });\r\n    return {\r\n        result: doneList,\r\n        iterations: iterations,\r\n    };\r\n}\r\nexport function genParseTable(g, doneList) {\r\n    var conflicts = [];\r\n    function resolveSRConflict(set, shift, reduce) {\r\n        var token = g.tokens[shift.getShift()];\r\n        if (token.assoc !== Assoc.UNDEFINED) {\r\n            var ruleP = reduce.rule.pr;\r\n            if (ruleP !== -1) {\r\n                if (ruleP > token.pr) {\r\n                    return reduce;\r\n                }\r\n                else if (ruleP < token.pr) {\r\n                    return shift;\r\n                }\r\n                else {\r\n                    if (token.assoc === Assoc.LEFT) {\r\n                        return reduce;\r\n                    }\r\n                    else if (token.assoc === Assoc.RIGHT) {\r\n                        return shift;\r\n                    }\r\n                    else if (token.assoc === Assoc.NON) {\r\n                        return Item.NULL;\r\n                    }\r\n                    else {\r\n                        console.assert(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var cf = new Conflict();\r\n        cf.type = ConflictType.SR;\r\n        cf.set = set;\r\n        cf.token = token;\r\n        cf.used = shift;\r\n        cf.discarded = reduce;\r\n        conflicts.push(cf);\r\n        return shift;\r\n    }\r\n    function resolveRRConflict(set, r1, r2, token) {\r\n        token = g.tokens[token];\r\n        var used = r1.rule.index > r2.rule.index ? r2 : r1;\r\n        var discarded = r1.rule.index > r2.rule.index ? r1 : r2;\r\n        var cf = new Conflict();\r\n        cf.type = ConflictType.RR;\r\n        cf.set = set;\r\n        cf.token = token;\r\n        cf.used = used;\r\n        cf.discarded = discarded;\r\n        conflicts.push(cf);\r\n        return used;\r\n    }\r\n    var ptable = new ParseTable(g, doneList.size);\r\n    doneList.forEach(function (set) {\r\n        set.forEach(function (item) {\r\n            if (item.actionType === Action.SHIFT) {\r\n                var sItem = item.getShift();\r\n                if (g.isToken(sItem)) {\r\n                    var tindex = set.stateIndex * g.tokenCount + sItem;\r\n                    var cItem = ptable.shift[tindex];\r\n                    if (cItem !== null) {\r\n                        if (cItem.actionType === Action.REDUCE) {\r\n                            ptable.shift[tindex] = resolveSRConflict(set, item, cItem);\r\n                        }\r\n                        else {\r\n                            console.assert(cItem.shift === item.shift);\r\n                        }\r\n                    }\r\n                    else {\r\n                        ptable.shift[tindex] = item;\r\n                    }\r\n                }\r\n                else {\r\n                    var tindex = set.stateIndex * g.nts.length + sItem - g.tokenCount;\r\n                    ptable.gotot[tindex] = item;\r\n                }\r\n            }\r\n            else if (item.actionType === Action.REDUCE) {\r\n                for (var i = 0; i < g.tokenCount; i++) {\r\n                    if (item.lah.contains(i + 1)) {\r\n                        var index = set.stateIndex * g.tokenCount + i;\r\n                        var cItem = ptable.shift[index];\r\n                        if (cItem !== null) {\r\n                            if (cItem.actionType === Action.REDUCE) {\r\n                                ptable.shift[index] = resolveRRConflict(set, cItem, item, i);\r\n                            }\r\n                            else if (cItem.actionType === Action.SHIFT) {\r\n                                ptable.shift[index] = resolveSRConflict(set, cItem, item);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ptable.shift[index] = item;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.assert(false);\r\n            }\r\n        });\r\n    });\r\n    return {\r\n        result: ptable,\r\n        conflicts: conflicts\r\n    };\r\n}\r\n","map":{"mappings":""}}
