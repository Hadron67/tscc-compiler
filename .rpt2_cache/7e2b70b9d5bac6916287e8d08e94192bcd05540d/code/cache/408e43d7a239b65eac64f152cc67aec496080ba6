{"code":"function sorter(cmp) {\r\n    var a = [];\r\n    function insert(i, obj) {\r\n        a.push(null);\r\n        for (var j = a.length - 1; j > i; j--) {\r\n            a[j] = a[j - 1];\r\n        }\r\n        a[i] = obj;\r\n    }\r\n    return {\r\n        add: function (b) {\r\n            var i;\r\n            for (i = 0; i < a.length; i++) {\r\n                if ((i === 0 || cmp(b, a[i - 1]) >= 0) && cmp(b, a[i]) <= 0) {\r\n                    break;\r\n                }\r\n            }\r\n            insert(i, b);\r\n        },\r\n        done: function () {\r\n            return a;\r\n        }\r\n    };\r\n}\r\nclass RowEntry {\r\n    constructor(row, emptyCount) {\r\n        this.row = row;\r\n        this.emptyCount = emptyCount;\r\n        this.dp = 0;\r\n    }\r\n}\r\nexport function compress(source) {\r\n    function empty(i, j) {\r\n        j = j - sorted[i].dp;\r\n        return j < 0 || j >= source.columns || source.isEmpty(sorted[i].row, j);\r\n    }\r\n    function fit(i, dp) {\r\n        for (var j = 0; j < source.columns; j++) {\r\n            if (!empty(i, j)) {\r\n                for (var k = 0; k < i; k++) {\r\n                    if (!empty(k, j + dp)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function getFitdp(i) {\r\n        var dp = 0;\r\n        while (source.isEmpty(sorted[i].row, -dp)) {\r\n            dp--;\r\n        }\r\n        while (!fit(i, dp)) {\r\n            dp++;\r\n        }\r\n        return dp;\r\n    }\r\n    var tmpsorted = sorter(function (a, b) {\r\n        return a.emptyCount < b.emptyCount ? -1 :\r\n            a.emptyCount > b.emptyCount ? 1 : 0;\r\n    });\r\n    for (var i = 0; i < source.rows; i++) {\r\n        tmpsorted.add(new RowEntry(source.emptyCount(i), i));\r\n    }\r\n    var sorted = tmpsorted.done();\r\n    var maxdp = 0;\r\n    var dps = new Array(source.rows);\r\n    dps[sorted[0].row] = sorted[0].dp = 0;\r\n    for (var i = 1; i < sorted.length; i++) {\r\n        var row = sorted[i].row;\r\n        var dp = getFitdp(i);\r\n        dps[row] = sorted[i].dp = dp;\r\n        dp > maxdp && (maxdp = dp);\r\n    }\r\n    return {\r\n        dps: dps,\r\n        len: maxdp + source.columns\r\n    };\r\n}\r\n","map":{"mappings":""}}
