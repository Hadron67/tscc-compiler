{"code":"var BSIZE = 32;\r\nvar BitSet = (function () {\r\n    function BitSet(_size) {\r\n        this._size = _size;\r\n        this._s = new Array(Math.ceil(_size / BSIZE));\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            this._s[i] = 0;\r\n        }\r\n    }\r\n    BitSet.prototype.add = function (i) {\r\n        var block = Math.floor(i / BSIZE);\r\n        var offset = i - block * BSIZE;\r\n        var orig = this._s[block];\r\n        this._s[block] |= (1 << offset);\r\n        return orig !== this._s[block];\r\n    };\r\n    BitSet.prototype.addAll = function () {\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            this._s[i] = ~0;\r\n        }\r\n    };\r\n    BitSet.prototype.remove = function (i) {\r\n        var block = Math.floor(i / BSIZE);\r\n        var offset = i - block * BSIZE;\r\n        var orig = this._s[block];\r\n        this._s[block] &= ~(1 << offset);\r\n        return orig !== this._s[block];\r\n    };\r\n    BitSet.prototype.removeAll = function () {\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            this._s[i] = 0;\r\n        }\r\n    };\r\n    BitSet.prototype.contains = function (i) {\r\n        var block = Math.floor(i / BSIZE);\r\n        var offset = i - block * BSIZE;\r\n        return (this._s[block] & (1 << offset)) !== 0;\r\n    };\r\n    BitSet.prototype.union = function (set) {\r\n        var changed = false;\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            var orig = this._s[i];\r\n            this._s[i] |= set._s[i];\r\n            changed = changed || (this._s[i] !== orig);\r\n        }\r\n        return changed;\r\n    };\r\n    BitSet.prototype.hasIntersection = function (set) {\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            if ((this._s[i] & set._s[i]) !== 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    BitSet.prototype.equals = function (set) {\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            if (this._s[i] !== set._s[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    BitSet.prototype.forEach = function (cb) {\r\n        for (var i = 0; i < this._size; i++) {\r\n            this.contains(i) && cb(i);\r\n        }\r\n    };\r\n    BitSet.prototype.hash = function () {\r\n        var ret = '';\r\n        for (var i = 0; i < this._s.length; i++) {\r\n            ret += this._s[i].toString(16) + '-';\r\n        }\r\n        return ret;\r\n    };\r\n    return BitSet;\r\n}());\r\nexport { BitSet };\r\n","map":{"mappings":""}}
