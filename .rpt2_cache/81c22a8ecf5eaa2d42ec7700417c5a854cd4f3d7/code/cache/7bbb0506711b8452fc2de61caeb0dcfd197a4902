{"code":"import { Grammar, Rule } from '../grammar/grammar';\r\nimport { File } from './file';\r\nimport { TokenSet } from '../grammar/token-set';\r\nimport { Assoc } from '../grammar/token-entry';\r\nimport { CompilationError as E } from '../util/E';\r\nexport var RItemType;\r\n(function (RItemType) {\r\n    RItemType[RItemType[\"NAME\"] = 0] = \"NAME\";\r\n    RItemType[RItemType[\"STRING\"] = 1] = \"STRING\";\r\n    RItemType[RItemType[\"BRACKET\"] = 2] = \"BRACKET\";\r\n})(RItemType || (RItemType = {}));\r\n;\r\nvar GBuilder = (function () {\r\n    function GBuilder() {\r\n        this.f = new File();\r\n        this.g = new Grammar();\r\n        this.tokenCount = 0;\r\n        this.tokens = {};\r\n        this.rules = [];\r\n        this.ruleStack = [];\r\n        this.ntCount = 0;\r\n        this.nts = {};\r\n        this.genIndex = 0;\r\n        this.first = true;\r\n        this.pr = 1;\r\n        this.states = { DEFAULT: 0 };\r\n        this.stateCount = 1;\r\n        this.stateNum = 0;\r\n        this.selectedStates = [];\r\n        this.pseudoTokens = {};\r\n        this.f.grammar = this.g;\r\n        this.addToken('eof', '', 0);\r\n    }\r\n    GBuilder.prototype.top = function () {\r\n        return this.ruleStack[this.ruleStack.length - 1];\r\n    };\r\n    GBuilder.prototype.splitAction = function (line) {\r\n        var t = this.top();\r\n        var s = '@' + this.genIndex++;\r\n        this.prepareRule(s, line);\r\n        this.addAction(t.action);\r\n        this.commitRule();\r\n        t.action = null;\r\n        this.addRuleItem(s, false, line);\r\n    };\r\n    GBuilder.prototype.addToken = function (id, name, line) {\r\n        var tk = this.tokens[id];\r\n        if (tk) {\r\n            throw new E('token \"' + id + '\"' + ' was already defined at line ' + tk, line);\r\n        }\r\n        else {\r\n            tk = this.tokens[id] = {\r\n                index: this.tokenCount++,\r\n                name: name,\r\n                line: line,\r\n                pr: 0,\r\n                assoc: Assoc.UNDEFINED\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    GBuilder.prototype.defineTokenPrec = function (tid, assoc, pseudo, line) {\r\n        if (!pseudo) {\r\n            var t = this.tokens[tid];\r\n            if (!t) {\r\n                throw new E('use of undefined token \"' + tid + '\" in associativity defination', line);\r\n            }\r\n            t.assoc = assoc;\r\n            t.pr = this.pr;\r\n        }\r\n        else {\r\n            var t2 = this.pseudoTokens[tid] = this.pseudoTokens[tid] || {\r\n                assoc: assoc,\r\n                pr: this.pr,\r\n                line: line\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    GBuilder.prototype.setOpt = function (name, value) {\r\n        this.f.opt[name] = value;\r\n        return this;\r\n    };\r\n    GBuilder.prototype.incPr = function () {\r\n        this.pr++;\r\n        return this;\r\n    };\r\n    GBuilder.prototype.changeState = function (s) {\r\n        var sn = this.states[s];\r\n        if (!sn) {\r\n            sn = this.states[s] = this.stateCount++;\r\n        }\r\n        this.stateNum = sn;\r\n        return this;\r\n    };\r\n    GBuilder.prototype.prepareRule = function (lhs, line) {\r\n        if (this.first) {\r\n            this.first = false;\r\n            this.prepareRule('(accept)', line);\r\n            this.addRuleItem(lhs, false, line);\r\n            this.commitRule();\r\n        }\r\n        this.ruleStack.push({\r\n            lhs: lhs,\r\n            action: null,\r\n            rhs: [],\r\n            line: line,\r\n            pr: -1\r\n        });\r\n        if (this.nts[lhs] === undefined) {\r\n            this.nts[lhs] = this.ntCount++;\r\n        }\r\n        return this;\r\n    };\r\n    GBuilder.prototype.addRuleItem = function (id, isTerm, line) {\r\n        var t = this.top();\r\n        if (t.action !== null) {\r\n            this.splitAction(line);\r\n        }\r\n        t.rhs.push({ id: id, isTerm: isTerm, line: line });\r\n        return this;\r\n    };\r\n    GBuilder.prototype.addAction = function (b) {\r\n        var t = this.top();\r\n        if (t.action !== null) {\r\n            this.splitAction(t.line);\r\n        }\r\n        t.action = b;\r\n        return this;\r\n    };\r\n    GBuilder.prototype.defineRulePr = function (token, pseudo, line) {\r\n        if (!pseudo) {\r\n            var t = this.tokens[token];\r\n            if (!t) {\r\n                throw new E('use of undefined token \"' + token + '\" in rule priority defination', line);\r\n            }\r\n            if (t.assoc === Assoc.UNDEFINED) {\r\n                throw new E('precedence of token \"' + token + '\" has not been defined', line);\r\n            }\r\n            this.top().pr = t.pr;\r\n        }\r\n        else {\r\n            var pt = this.pseudoTokens[token];\r\n            if (!pt) {\r\n                throw new E('pseudo token \"' + token + '\" is not defined', line);\r\n            }\r\n            this.top().pr = pt.pr;\r\n        }\r\n        return this;\r\n    };\r\n    GBuilder.prototype.commitRule = function () {\r\n        var t = this.ruleStack.pop();\r\n        this.rules[t.lhs] || (this.rules[t.lhs] = []);\r\n        this.rules.push(t);\r\n        return this;\r\n    };\r\n    GBuilder.prototype.build = function () {\r\n        this.g.tokenCount = this.tokenCount;\r\n        this.g.tokens = new Array(this.tokenCount);\r\n        this.g.nts = new Array(this.ntCount);\r\n        for (var tk in this.tokens) {\r\n            var index = this.tokens[tk].index;\r\n            this.g.tokens[index] = {\r\n                sym: tk,\r\n                alias: this.tokens[tk].name,\r\n                line: this.tokens[tk].line,\r\n                pr: this.tokens[tk].pr,\r\n                assoc: this.tokens[tk].assoc,\r\n                used: false\r\n            };\r\n        }\r\n        for (var nt in this.nts) {\r\n            this.g.nts[this.nts[nt]] = {\r\n                sym: nt,\r\n                firstSet: new TokenSet(this.tokenCount),\r\n                used: false\r\n            };\r\n        }\r\n        this.g.tokens[0].used = true;\r\n        this.g.nts[0].used = true;\r\n        var r = new Array(this.ntCount);\r\n        var ruleCount = 0;\r\n        for (var i = 0; i < this.rules.length; i++) {\r\n            var ruleItems = [];\r\n            var rule = this.rules[i];\r\n            var ntsIndex = this.nts[rule.lhs];\r\n            r[ntsIndex] || (r[ntsIndex] = []);\r\n            var newRule = new Rule(this.g, ntsIndex, rule.action, ruleItems, ruleCount++, rule.line);\r\n            newRule.pr = rule.pr;\r\n            r[ntsIndex].push(newRule);\r\n            for (var j = 0; j < rule.rhs.length; j++) {\r\n                var it = rule.rhs[j];\r\n                var rulePr = -1;\r\n                if (it.isTerm) {\r\n                    var tkEntry = this.tokens[it.id];\r\n                    if (tkEntry === undefined) {\r\n                        throw new E('use of undefined token \"' + it.id + '\"', it.line);\r\n                    }\r\n                    var termIndex = tkEntry.index;\r\n                    ruleItems.push(tkEntry.index);\r\n                    this.g.tokens[termIndex].used = true;\r\n                    if (tkEntry.assoc !== Assoc.UNDEFINED) {\r\n                        rulePr = tkEntry.pr;\r\n                    }\r\n                }\r\n                else {\r\n                    var ntIndex = this.nts[it.id];\r\n                    if (ntIndex === undefined) {\r\n                        throw new E('use of undefined non terminal \"' + it.id + '\"', it.line);\r\n                    }\r\n                    ruleItems.push(ntIndex + this.tokenCount);\r\n                    this.g.nts[ntIndex].used = true;\r\n                }\r\n                if (newRule.pr === -1 && rulePr !== -1) {\r\n                    newRule.pr = rulePr;\r\n                }\r\n            }\r\n        }\r\n        this.g.rules = r;\r\n        return this.f;\r\n    };\r\n    return GBuilder;\r\n}());\r\nexport { GBuilder };\r\n","map":{"mappings":""}}
