{"code":"import * as tslib_1 from \"tslib\";\r\nimport { BitSet } from '../util/bitset';\r\nimport { YYTAB } from '../util/common';\r\nimport { CharSet } from './char-set';\r\nexport var Action;\r\n(function (Action) {\r\n    Action[Action[\"START\"] = 0] = \"START\";\r\n    Action[Action[\"END\"] = 1] = \"END\";\r\n    Action[Action[\"NONE\"] = 2] = \"NONE\";\r\n})(Action || (Action = {}));\r\nvar maxlen = 0;\r\nvar StateArray = (function (_super) {\r\n    tslib_1.__extends(StateArray, _super);\r\n    function StateArray() {\r\n        var _this = _super.call(this, 0) || this;\r\n        Object.setPrototypeOf(_this, StateArray.prototype);\r\n        return _this;\r\n    }\r\n    StateArray.prototype.add = function (s) {\r\n        for (var _i = 0, _a = this; _i < _a.length; _i++) {\r\n            var s2 = _a[_i];\r\n            if (s === s2) {\r\n                return;\r\n            }\r\n        }\r\n        this.length > maxlen && (maxlen = this.length);\r\n        this.push(s);\r\n    };\r\n    StateArray.prototype.union = function (s) {\r\n        for (var _i = 0, s_1 = s; _i < s_1.length; _i++) {\r\n            var state = s_1[_i];\r\n            this.add(state);\r\n        }\r\n    };\r\n    StateArray.prototype.toArray = function () {\r\n        var ret = [];\r\n        for (var _i = 0, _a = this; _i < _a.length; _i++) {\r\n            var s = _a[_i];\r\n            ret.push(s);\r\n        }\r\n        return ret;\r\n    };\r\n    return StateArray;\r\n}(Array));\r\nvar Arc = (function () {\r\n    function Arc(from, to) {\r\n        this.chars = new CharSet();\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n    return Arc;\r\n}());\r\nexport { Arc };\r\nvar EndAction = (function () {\r\n    function EndAction() {\r\n        this.priority = 0;\r\n        this.id = 0;\r\n        this.data = null;\r\n    }\r\n    return EndAction;\r\n}());\r\nexport { EndAction };\r\nvar State = (function () {\r\n    function State(endAction) {\r\n        this.valid = false;\r\n        this.arcs = [];\r\n        this.epsilons = [];\r\n        this.index = -1;\r\n        this.isStart = false;\r\n        this.isEnd = false;\r\n        this.endAction = endAction || null;\r\n    }\r\n    State.prototype.findArc = function (to) {\r\n        for (var _i = 0, _a = this.arcs; _i < _a.length; _i++) {\r\n            var arc = _a[_i];\r\n            if (arc.to === to) {\r\n                return arc;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    State.prototype.to = function (s) {\r\n        var arc = this.findArc(s);\r\n        if (arc === null) {\r\n            arc = new Arc(this, s);\r\n            this.arcs.push(arc);\r\n        }\r\n        s.valid = true;\r\n        return arc;\r\n    };\r\n    State.prototype.epsilonTo = function (s) {\r\n        this.epsilons.push(s);\r\n    };\r\n    State.prototype.forEach = function (cb, epOnly) {\r\n        var queue = [this];\r\n        var deja = [];\r\n        epOnly = !!epOnly;\r\n        deja[this.index] = true;\r\n        while (queue.length > 0) {\r\n            var s = queue.pop();\r\n            cb(s);\r\n            if (!epOnly) {\r\n                for (var j = 0; j < s.arcs.length; j++) {\r\n                    var to = s.arcs[j].to;\r\n                    if (!deja[to.index]) {\r\n                        queue.push(to);\r\n                        deja[to.index] = true;\r\n                    }\r\n                }\r\n            }\r\n            for (var j = 0; j < s.epsilons.length; j++) {\r\n                var to = s.epsilons[j];\r\n                if (!deja[to.index]) {\r\n                    queue.push(to);\r\n                    deja[to.index] = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    State.prototype.number = function () {\r\n        var i = 0;\r\n        this.forEach(function (state) {\r\n            state.index = i++;\r\n        });\r\n    };\r\n    State.prototype.toString = function (recursive) {\r\n        recursive = !!recursive;\r\n        function single() {\r\n            var ret = 'state ' + this.index;\r\n            if (this.isStart) {\r\n                ret += '(start)';\r\n            }\r\n            if (this.endAction) {\r\n                ret += '(end: ' + this.endAction.id + ')';\r\n            }\r\n            ret += '\\n';\r\n            for (var i = 0; i < this.arcs.length; i++) {\r\n                var arc = this.arcs[i];\r\n                ret += YYTAB + arc.chars.toString() + ' -> state ' + arc.to.index + '\\n';\r\n            }\r\n            if (this.epsilons.length > 0) {\r\n                ret += YYTAB + 'epsilon: ';\r\n                for (var i = 0; i < this.epsilons.length; i++) {\r\n                    if (i > 0) {\r\n                        ret += ',';\r\n                    }\r\n                    ret += this.epsilons[i].index;\r\n                }\r\n                ret += '\\n';\r\n            }\r\n            return ret;\r\n        }\r\n        if (!recursive) {\r\n            return single.call(this);\r\n        }\r\n        else {\r\n            var ret = '';\r\n            this.forEach(function (state) {\r\n                ret += single.call(state) + '\\n';\r\n            });\r\n            return ret;\r\n        }\r\n    };\r\n    State.prototype.copyEndFrom = function (state) {\r\n        if (state.endAction !== null) {\r\n            if (this.endAction !== null) {\r\n                if (this.endAction.priority < state.endAction.priority) {\r\n                    this.endAction = state.endAction;\r\n                }\r\n            }\r\n            else {\r\n                this.endAction = state.endAction;\r\n            }\r\n        }\r\n    };\r\n    State.prototype.removeEpsilons = function () {\r\n        var cela = this;\r\n        var valid = [this];\r\n        this.forEach(function (s) {\r\n            if (s.valid) {\r\n                valid.push(s);\r\n            }\r\n        });\r\n        for (var i = 0; i < valid.length; i++) {\r\n            var s = valid[i];\r\n            s.forEach(function (state) {\r\n                if (state !== s) {\r\n                    for (var j = 0; j < state.arcs.length; j++) {\r\n                        var arc = state.arcs[j];\r\n                        s.to(arc.to).chars.union(arc.chars);\r\n                    }\r\n                    s.copyEndFrom(state);\r\n                }\r\n            }, true);\r\n            s.epsilons.length = 0;\r\n        }\r\n        for (var i = 0; i < valid.length; i++) {\r\n            valid[i].index = i;\r\n        }\r\n    };\r\n    State.prototype.count = function () {\r\n        var c = 0;\r\n        this.forEach(function () {\r\n            c++;\r\n        });\r\n        return c;\r\n    };\r\n    State.prototype.size = function () {\r\n        var i = 0;\r\n        this.forEach(function () {\r\n            i++;\r\n        });\r\n        return i;\r\n    };\r\n    State.prototype.allChars = function (set) {\r\n        var cela = this;\r\n        for (var i = 0; i < this.arcs.length; i++) {\r\n            var arc = this.arcs[i];\r\n            arc.chars.forEach(function (a, b) {\r\n                set.add(a, b, arc.to);\r\n            });\r\n        }\r\n    };\r\n    State.prototype.getState = function (char) {\r\n        for (var i = 0; i < this.arcs.length; i++) {\r\n            var arc = this.arcs[i];\r\n            if (arc.chars.contains(char)) {\r\n                return arc.to;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    State.prototype.hasArc = function () {\r\n        return this.arcs.length > 0;\r\n    };\r\n    State.prototype.toDFA = function () {\r\n        var dfaStates = {};\r\n        var states = [];\r\n        var dfaCount = 0;\r\n        var stateCount = this.count();\r\n        var set = new CharSet(function () { return new StateArray(); });\r\n        var cela = this;\r\n        var initState = new CompoundState(stateCount, [this]);\r\n        initState.index = dfaCount++;\r\n        states.push(initState);\r\n        var lastState = initState;\r\n        dfaStates[initState.hash()] = initState;\r\n        var queue = [initState];\r\n        while (queue.length > 0) {\r\n            var s = queue.shift();\r\n            set.removeAll();\r\n            s.allChars(set);\r\n            set.forEach(function (chara, charb, it) {\r\n                var cpState = new CompoundState(stateCount, it.dataSet.toArray());\r\n                var cphash = cpState.hash();\r\n                if (dfaStates[cphash]) {\r\n                    cpState = dfaStates[cphash];\r\n                }\r\n                else {\r\n                    dfaStates[cphash] = cpState;\r\n                    queue.push(cpState);\r\n                    cpState.index = dfaCount++;\r\n                    states.push(cpState);\r\n                }\r\n                s.to(cpState).chars.add(chara, charb);\r\n            });\r\n        }\r\n        initState.release();\r\n        return {\r\n            head: initState,\r\n            states: states\r\n        };\r\n    };\r\n    return State;\r\n}());\r\nexport { State };\r\nvar CompoundState = (function (_super) {\r\n    tslib_1.__extends(CompoundState, _super);\r\n    function CompoundState(stateCount, states) {\r\n        var _this = _super.call(this) || this;\r\n        _this.isEnd = _this.isStart = false;\r\n        _this.valid = true;\r\n        _this.states = states;\r\n        _this.stateSet = new BitSet(stateCount);\r\n        for (var i = 0; i < states.length; i++) {\r\n            _this.stateSet.add(states[i].index);\r\n            _this.copyEndFrom(states[i]);\r\n            _this.isStart = _this.isStart || states[i].isStart;\r\n        }\r\n        return _this;\r\n    }\r\n    CompoundState.prototype.hash = function () {\r\n        return this.stateSet.hash();\r\n    };\r\n    CompoundState.prototype.allChars = function (set) {\r\n        for (var i = 0; i < this.states.length; i++) {\r\n            this.states[i].allChars(set);\r\n        }\r\n    };\r\n    CompoundState.prototype.forEach = function (cb) {\r\n        _super.prototype.forEach.call(this, cb);\r\n    };\r\n    CompoundState.prototype.release = function () {\r\n        this.forEach(function (state) {\r\n            state.states.length = 0;\r\n        });\r\n    };\r\n    return CompoundState;\r\n}(State));\r\n","map":{"mappings":""}}
